// source: proto/payment/backend/payment.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.payment.backend.CreatePaymentMethodReq', null, global);
goog.exportSymbol('proto.payment.backend.CreatePaymentMethodRes', null, global);
goog.exportSymbol('proto.payment.backend.GetPaymentMethodByCodeReq', null, global);
goog.exportSymbol('proto.payment.backend.GetPaymentMethodByCodeRes', null, global);
goog.exportSymbol('proto.payment.backend.GetPaymentMethodByIdReq', null, global);
goog.exportSymbol('proto.payment.backend.GetPaymentMethodByIdRes', null, global);
goog.exportSymbol('proto.payment.backend.PaymentMethod', null, global);
goog.exportSymbol('proto.payment.backend.PaymentMethodInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.backend.PaymentMethodInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.backend.PaymentMethodInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.backend.PaymentMethodInfo.displayName = 'proto.payment.backend.PaymentMethodInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.backend.CreatePaymentMethodReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.backend.CreatePaymentMethodReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.backend.CreatePaymentMethodReq.displayName = 'proto.payment.backend.CreatePaymentMethodReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.backend.GetPaymentMethodByIdReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.backend.GetPaymentMethodByIdReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.backend.GetPaymentMethodByIdReq.displayName = 'proto.payment.backend.GetPaymentMethodByIdReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.backend.GetPaymentMethodByCodeReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.backend.GetPaymentMethodByCodeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.backend.GetPaymentMethodByCodeReq.displayName = 'proto.payment.backend.GetPaymentMethodByCodeReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.backend.CreatePaymentMethodRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.backend.CreatePaymentMethodRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.backend.CreatePaymentMethodRes.displayName = 'proto.payment.backend.CreatePaymentMethodRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.backend.GetPaymentMethodByIdRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.backend.GetPaymentMethodByIdRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.backend.GetPaymentMethodByIdRes.displayName = 'proto.payment.backend.GetPaymentMethodByIdRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.backend.GetPaymentMethodByCodeRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.backend.GetPaymentMethodByCodeRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.backend.GetPaymentMethodByCodeRes.displayName = 'proto.payment.backend.GetPaymentMethodByCodeRes';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payment.backend.PaymentMethodInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.payment.backend.PaymentMethodInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payment.backend.PaymentMethodInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.backend.PaymentMethodInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    partnershipId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    code: jspb.Message.getFieldWithDefault(msg, 3, ""),
    method: jspb.Message.getFieldWithDefault(msg, 4, 0),
    fee: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    additionalFee: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    displayFee: jspb.Message.getFieldWithDefault(msg, 7, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 8, ""),
    id: jspb.Message.getFieldWithDefault(msg, 9, ""),
    tag: jspb.Message.getFieldWithDefault(msg, 10, ""),
    isEnable: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    includeFee: jspb.Message.getBooleanFieldWithDefault(msg, 12, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.backend.PaymentMethodInfo}
 */
proto.payment.backend.PaymentMethodInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.backend.PaymentMethodInfo;
  return proto.payment.backend.PaymentMethodInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.backend.PaymentMethodInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.backend.PaymentMethodInfo}
 */
proto.payment.backend.PaymentMethodInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnershipId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 4:
      var value = /** @type {!proto.payment.backend.PaymentMethod} */ (reader.readEnum());
      msg.setMethod(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFee(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAdditionalFee(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayFee(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsEnable(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.backend.PaymentMethodInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payment.backend.PaymentMethodInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.backend.PaymentMethodInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.backend.PaymentMethodInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartnershipId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMethod();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getFee();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getAdditionalFee();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getDisplayFee();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getIsEnable();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getIncludeFee();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
};


/**
 * optional string partnership_id = 1;
 * @return {string}
 */
proto.payment.backend.PaymentMethodInfo.prototype.getPartnershipId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.backend.PaymentMethodInfo} returns this
 */
proto.payment.backend.PaymentMethodInfo.prototype.setPartnershipId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.payment.backend.PaymentMethodInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.backend.PaymentMethodInfo} returns this
 */
proto.payment.backend.PaymentMethodInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string code = 3;
 * @return {string}
 */
proto.payment.backend.PaymentMethodInfo.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.backend.PaymentMethodInfo} returns this
 */
proto.payment.backend.PaymentMethodInfo.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional PaymentMethod method = 4;
 * @return {!proto.payment.backend.PaymentMethod}
 */
proto.payment.backend.PaymentMethodInfo.prototype.getMethod = function() {
  return /** @type {!proto.payment.backend.PaymentMethod} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.payment.backend.PaymentMethod} value
 * @return {!proto.payment.backend.PaymentMethodInfo} returns this
 */
proto.payment.backend.PaymentMethodInfo.prototype.setMethod = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional double fee = 5;
 * @return {number}
 */
proto.payment.backend.PaymentMethodInfo.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.payment.backend.PaymentMethodInfo} returns this
 */
proto.payment.backend.PaymentMethodInfo.prototype.setFee = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double additional_fee = 6;
 * @return {number}
 */
proto.payment.backend.PaymentMethodInfo.prototype.getAdditionalFee = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.payment.backend.PaymentMethodInfo} returns this
 */
proto.payment.backend.PaymentMethodInfo.prototype.setAdditionalFee = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional string display_fee = 7;
 * @return {string}
 */
proto.payment.backend.PaymentMethodInfo.prototype.getDisplayFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.backend.PaymentMethodInfo} returns this
 */
proto.payment.backend.PaymentMethodInfo.prototype.setDisplayFee = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string icon = 8;
 * @return {string}
 */
proto.payment.backend.PaymentMethodInfo.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.backend.PaymentMethodInfo} returns this
 */
proto.payment.backend.PaymentMethodInfo.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string id = 9;
 * @return {string}
 */
proto.payment.backend.PaymentMethodInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.backend.PaymentMethodInfo} returns this
 */
proto.payment.backend.PaymentMethodInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string tag = 10;
 * @return {string}
 */
proto.payment.backend.PaymentMethodInfo.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.backend.PaymentMethodInfo} returns this
 */
proto.payment.backend.PaymentMethodInfo.prototype.setTag = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional bool is_enable = 11;
 * @return {boolean}
 */
proto.payment.backend.PaymentMethodInfo.prototype.getIsEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.payment.backend.PaymentMethodInfo} returns this
 */
proto.payment.backend.PaymentMethodInfo.prototype.setIsEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool include_fee = 12;
 * @return {boolean}
 */
proto.payment.backend.PaymentMethodInfo.prototype.getIncludeFee = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.payment.backend.PaymentMethodInfo} returns this
 */
proto.payment.backend.PaymentMethodInfo.prototype.setIncludeFee = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payment.backend.CreatePaymentMethodReq.prototype.toObject = function(opt_includeInstance) {
  return proto.payment.backend.CreatePaymentMethodReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payment.backend.CreatePaymentMethodReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.backend.CreatePaymentMethodReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    partnershipId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    code: jspb.Message.getFieldWithDefault(msg, 3, ""),
    method: jspb.Message.getFieldWithDefault(msg, 4, 0),
    fee: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    additionalFee: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    displayFee: jspb.Message.getFieldWithDefault(msg, 7, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 8, ""),
    tag: jspb.Message.getFieldWithDefault(msg, 9, ""),
    isEnable: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    includeFee: jspb.Message.getBooleanFieldWithDefault(msg, 12, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.backend.CreatePaymentMethodReq}
 */
proto.payment.backend.CreatePaymentMethodReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.backend.CreatePaymentMethodReq;
  return proto.payment.backend.CreatePaymentMethodReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.backend.CreatePaymentMethodReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.backend.CreatePaymentMethodReq}
 */
proto.payment.backend.CreatePaymentMethodReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnershipId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 4:
      var value = /** @type {!proto.payment.backend.PaymentMethod} */ (reader.readEnum());
      msg.setMethod(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFee(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAdditionalFee(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayFee(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsEnable(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.backend.CreatePaymentMethodReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payment.backend.CreatePaymentMethodReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.backend.CreatePaymentMethodReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.backend.CreatePaymentMethodReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartnershipId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMethod();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getFee();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getAdditionalFee();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getDisplayFee();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getIsEnable();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getIncludeFee();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
};


/**
 * optional string partnership_id = 1;
 * @return {string}
 */
proto.payment.backend.CreatePaymentMethodReq.prototype.getPartnershipId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.backend.CreatePaymentMethodReq} returns this
 */
proto.payment.backend.CreatePaymentMethodReq.prototype.setPartnershipId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.payment.backend.CreatePaymentMethodReq.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.backend.CreatePaymentMethodReq} returns this
 */
proto.payment.backend.CreatePaymentMethodReq.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string code = 3;
 * @return {string}
 */
proto.payment.backend.CreatePaymentMethodReq.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.backend.CreatePaymentMethodReq} returns this
 */
proto.payment.backend.CreatePaymentMethodReq.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional PaymentMethod method = 4;
 * @return {!proto.payment.backend.PaymentMethod}
 */
proto.payment.backend.CreatePaymentMethodReq.prototype.getMethod = function() {
  return /** @type {!proto.payment.backend.PaymentMethod} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.payment.backend.PaymentMethod} value
 * @return {!proto.payment.backend.CreatePaymentMethodReq} returns this
 */
proto.payment.backend.CreatePaymentMethodReq.prototype.setMethod = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional double fee = 5;
 * @return {number}
 */
proto.payment.backend.CreatePaymentMethodReq.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.payment.backend.CreatePaymentMethodReq} returns this
 */
proto.payment.backend.CreatePaymentMethodReq.prototype.setFee = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double additional_fee = 6;
 * @return {number}
 */
proto.payment.backend.CreatePaymentMethodReq.prototype.getAdditionalFee = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.payment.backend.CreatePaymentMethodReq} returns this
 */
proto.payment.backend.CreatePaymentMethodReq.prototype.setAdditionalFee = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional string display_fee = 7;
 * @return {string}
 */
proto.payment.backend.CreatePaymentMethodReq.prototype.getDisplayFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.backend.CreatePaymentMethodReq} returns this
 */
proto.payment.backend.CreatePaymentMethodReq.prototype.setDisplayFee = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string icon = 8;
 * @return {string}
 */
proto.payment.backend.CreatePaymentMethodReq.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.backend.CreatePaymentMethodReq} returns this
 */
proto.payment.backend.CreatePaymentMethodReq.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string tag = 9;
 * @return {string}
 */
proto.payment.backend.CreatePaymentMethodReq.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.backend.CreatePaymentMethodReq} returns this
 */
proto.payment.backend.CreatePaymentMethodReq.prototype.setTag = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bool is_enable = 10;
 * @return {boolean}
 */
proto.payment.backend.CreatePaymentMethodReq.prototype.getIsEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.payment.backend.CreatePaymentMethodReq} returns this
 */
proto.payment.backend.CreatePaymentMethodReq.prototype.setIsEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool include_fee = 12;
 * @return {boolean}
 */
proto.payment.backend.CreatePaymentMethodReq.prototype.getIncludeFee = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.payment.backend.CreatePaymentMethodReq} returns this
 */
proto.payment.backend.CreatePaymentMethodReq.prototype.setIncludeFee = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payment.backend.GetPaymentMethodByIdReq.prototype.toObject = function(opt_includeInstance) {
  return proto.payment.backend.GetPaymentMethodByIdReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payment.backend.GetPaymentMethodByIdReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.backend.GetPaymentMethodByIdReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    partnershipId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.backend.GetPaymentMethodByIdReq}
 */
proto.payment.backend.GetPaymentMethodByIdReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.backend.GetPaymentMethodByIdReq;
  return proto.payment.backend.GetPaymentMethodByIdReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.backend.GetPaymentMethodByIdReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.backend.GetPaymentMethodByIdReq}
 */
proto.payment.backend.GetPaymentMethodByIdReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnershipId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.backend.GetPaymentMethodByIdReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payment.backend.GetPaymentMethodByIdReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.backend.GetPaymentMethodByIdReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.backend.GetPaymentMethodByIdReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartnershipId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string partnership_id = 1;
 * @return {string}
 */
proto.payment.backend.GetPaymentMethodByIdReq.prototype.getPartnershipId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.backend.GetPaymentMethodByIdReq} returns this
 */
proto.payment.backend.GetPaymentMethodByIdReq.prototype.setPartnershipId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.payment.backend.GetPaymentMethodByIdReq.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.backend.GetPaymentMethodByIdReq} returns this
 */
proto.payment.backend.GetPaymentMethodByIdReq.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payment.backend.GetPaymentMethodByCodeReq.prototype.toObject = function(opt_includeInstance) {
  return proto.payment.backend.GetPaymentMethodByCodeReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payment.backend.GetPaymentMethodByCodeReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.backend.GetPaymentMethodByCodeReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    partnershipId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.backend.GetPaymentMethodByCodeReq}
 */
proto.payment.backend.GetPaymentMethodByCodeReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.backend.GetPaymentMethodByCodeReq;
  return proto.payment.backend.GetPaymentMethodByCodeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.backend.GetPaymentMethodByCodeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.backend.GetPaymentMethodByCodeReq}
 */
proto.payment.backend.GetPaymentMethodByCodeReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnershipId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.backend.GetPaymentMethodByCodeReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payment.backend.GetPaymentMethodByCodeReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.backend.GetPaymentMethodByCodeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.backend.GetPaymentMethodByCodeReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartnershipId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string partnership_id = 1;
 * @return {string}
 */
proto.payment.backend.GetPaymentMethodByCodeReq.prototype.getPartnershipId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.backend.GetPaymentMethodByCodeReq} returns this
 */
proto.payment.backend.GetPaymentMethodByCodeReq.prototype.setPartnershipId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.payment.backend.GetPaymentMethodByCodeReq.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.backend.GetPaymentMethodByCodeReq} returns this
 */
proto.payment.backend.GetPaymentMethodByCodeReq.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payment.backend.CreatePaymentMethodRes.prototype.toObject = function(opt_includeInstance) {
  return proto.payment.backend.CreatePaymentMethodRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payment.backend.CreatePaymentMethodRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.backend.CreatePaymentMethodRes.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.backend.CreatePaymentMethodRes}
 */
proto.payment.backend.CreatePaymentMethodRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.backend.CreatePaymentMethodRes;
  return proto.payment.backend.CreatePaymentMethodRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.backend.CreatePaymentMethodRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.backend.CreatePaymentMethodRes}
 */
proto.payment.backend.CreatePaymentMethodRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.backend.CreatePaymentMethodRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payment.backend.CreatePaymentMethodRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.backend.CreatePaymentMethodRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.backend.CreatePaymentMethodRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payment.backend.GetPaymentMethodByIdRes.prototype.toObject = function(opt_includeInstance) {
  return proto.payment.backend.GetPaymentMethodByIdRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payment.backend.GetPaymentMethodByIdRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.backend.GetPaymentMethodByIdRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentMethod: (f = msg.getPaymentMethod()) && proto.payment.backend.PaymentMethodInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.backend.GetPaymentMethodByIdRes}
 */
proto.payment.backend.GetPaymentMethodByIdRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.backend.GetPaymentMethodByIdRes;
  return proto.payment.backend.GetPaymentMethodByIdRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.backend.GetPaymentMethodByIdRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.backend.GetPaymentMethodByIdRes}
 */
proto.payment.backend.GetPaymentMethodByIdRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.payment.backend.PaymentMethodInfo;
      reader.readMessage(value,proto.payment.backend.PaymentMethodInfo.deserializeBinaryFromReader);
      msg.setPaymentMethod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.backend.GetPaymentMethodByIdRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payment.backend.GetPaymentMethodByIdRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.backend.GetPaymentMethodByIdRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.backend.GetPaymentMethodByIdRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentMethod();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.payment.backend.PaymentMethodInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional PaymentMethodInfo payment_method = 1;
 * @return {?proto.payment.backend.PaymentMethodInfo}
 */
proto.payment.backend.GetPaymentMethodByIdRes.prototype.getPaymentMethod = function() {
  return /** @type{?proto.payment.backend.PaymentMethodInfo} */ (
    jspb.Message.getWrapperField(this, proto.payment.backend.PaymentMethodInfo, 1));
};


/**
 * @param {?proto.payment.backend.PaymentMethodInfo|undefined} value
 * @return {!proto.payment.backend.GetPaymentMethodByIdRes} returns this
*/
proto.payment.backend.GetPaymentMethodByIdRes.prototype.setPaymentMethod = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payment.backend.GetPaymentMethodByIdRes} returns this
 */
proto.payment.backend.GetPaymentMethodByIdRes.prototype.clearPaymentMethod = function() {
  return this.setPaymentMethod(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payment.backend.GetPaymentMethodByIdRes.prototype.hasPaymentMethod = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payment.backend.GetPaymentMethodByCodeRes.prototype.toObject = function(opt_includeInstance) {
  return proto.payment.backend.GetPaymentMethodByCodeRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payment.backend.GetPaymentMethodByCodeRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.backend.GetPaymentMethodByCodeRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentMethod: (f = msg.getPaymentMethod()) && proto.payment.backend.PaymentMethodInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.backend.GetPaymentMethodByCodeRes}
 */
proto.payment.backend.GetPaymentMethodByCodeRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.backend.GetPaymentMethodByCodeRes;
  return proto.payment.backend.GetPaymentMethodByCodeRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.backend.GetPaymentMethodByCodeRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.backend.GetPaymentMethodByCodeRes}
 */
proto.payment.backend.GetPaymentMethodByCodeRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.payment.backend.PaymentMethodInfo;
      reader.readMessage(value,proto.payment.backend.PaymentMethodInfo.deserializeBinaryFromReader);
      msg.setPaymentMethod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.backend.GetPaymentMethodByCodeRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payment.backend.GetPaymentMethodByCodeRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.backend.GetPaymentMethodByCodeRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.backend.GetPaymentMethodByCodeRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentMethod();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.payment.backend.PaymentMethodInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional PaymentMethodInfo payment_method = 1;
 * @return {?proto.payment.backend.PaymentMethodInfo}
 */
proto.payment.backend.GetPaymentMethodByCodeRes.prototype.getPaymentMethod = function() {
  return /** @type{?proto.payment.backend.PaymentMethodInfo} */ (
    jspb.Message.getWrapperField(this, proto.payment.backend.PaymentMethodInfo, 1));
};


/**
 * @param {?proto.payment.backend.PaymentMethodInfo|undefined} value
 * @return {!proto.payment.backend.GetPaymentMethodByCodeRes} returns this
*/
proto.payment.backend.GetPaymentMethodByCodeRes.prototype.setPaymentMethod = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payment.backend.GetPaymentMethodByCodeRes} returns this
 */
proto.payment.backend.GetPaymentMethodByCodeRes.prototype.clearPaymentMethod = function() {
  return this.setPaymentMethod(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payment.backend.GetPaymentMethodByCodeRes.prototype.hasPaymentMethod = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.payment.backend.PaymentMethod = {
  PAYMENT_METHOD_INVALID: 0,
  PAYMENT_METHOD_PAYPAL: 1,
  PAYMENT_METHOD_VNPAY_EWALLET: 2,
  PAYMENT_METHOD_VNPAY_CREDITCARD: 3,
  PAYMENT_METHOD_VNPAY_BANKTRANSFER: 4,
  PAYMENT_METHOD_VNPAY_QRCODE: 5,
  PAYMENT_METHOD_MANUAL_BANKTRANSFER: 6,
  PAYMENT_METHOD_MOMO: 7,
  PAYMENT_METHOD_TWO_CHECKOUT: 8,
  PAYMENT_METHOD_PAYOO_CREDITCARD: 9,
  PAYMENT_METHOD_PAYOO_DOMESTIC_CARD: 10,
  PAYMENT_METHOD_PAYOO_QRCODE: 11,
  PAYMENT_METHOD_ONE_PAY_CREDITCARD: 12,
  PAYMENT_METHOD_ONE_PAY_CREDITCARD_DOMESTIC_ISSUE: 13,
  PAYMENT_METHOD_ONE_PAY_DOMESTIC_CARD: 14,
  PAYMENT_METHOD_ONE_PAY_QRCODE: 15
};

goog.object.extend(exports, proto.payment.backend);
