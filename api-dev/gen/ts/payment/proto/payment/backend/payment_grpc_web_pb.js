/**
 * @fileoverview gRPC-Web generated client stub for payment.backend
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.20.3
// source: proto/payment/backend/payment.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.payment = {};
proto.payment.backend = require('./payment_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.payment.backend.PaymentServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.payment.backend.PaymentServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.payment.backend.CreatePaymentMethodReq,
 *   !proto.payment.backend.CreatePaymentMethodRes>}
 */
const methodDescriptor_PaymentService_CreatePaymentMethod = new grpc.web.MethodDescriptor(
  '/payment.backend.PaymentService/CreatePaymentMethod',
  grpc.web.MethodType.UNARY,
  proto.payment.backend.CreatePaymentMethodReq,
  proto.payment.backend.CreatePaymentMethodRes,
  /**
   * @param {!proto.payment.backend.CreatePaymentMethodReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.payment.backend.CreatePaymentMethodRes.deserializeBinary
);


/**
 * @param {!proto.payment.backend.CreatePaymentMethodReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.payment.backend.CreatePaymentMethodRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.payment.backend.CreatePaymentMethodRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.payment.backend.PaymentServiceClient.prototype.createPaymentMethod =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/payment.backend.PaymentService/CreatePaymentMethod',
      request,
      metadata || {},
      methodDescriptor_PaymentService_CreatePaymentMethod,
      callback);
};


/**
 * @param {!proto.payment.backend.CreatePaymentMethodReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.payment.backend.CreatePaymentMethodRes>}
 *     Promise that resolves to the response
 */
proto.payment.backend.PaymentServicePromiseClient.prototype.createPaymentMethod =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/payment.backend.PaymentService/CreatePaymentMethod',
      request,
      metadata || {},
      methodDescriptor_PaymentService_CreatePaymentMethod);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.payment.backend.GetPaymentMethodByIdReq,
 *   !proto.payment.backend.GetPaymentMethodByIdRes>}
 */
const methodDescriptor_PaymentService_GetPaymentMethodById = new grpc.web.MethodDescriptor(
  '/payment.backend.PaymentService/GetPaymentMethodById',
  grpc.web.MethodType.UNARY,
  proto.payment.backend.GetPaymentMethodByIdReq,
  proto.payment.backend.GetPaymentMethodByIdRes,
  /**
   * @param {!proto.payment.backend.GetPaymentMethodByIdReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.payment.backend.GetPaymentMethodByIdRes.deserializeBinary
);


/**
 * @param {!proto.payment.backend.GetPaymentMethodByIdReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.payment.backend.GetPaymentMethodByIdRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.payment.backend.GetPaymentMethodByIdRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.payment.backend.PaymentServiceClient.prototype.getPaymentMethodById =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/payment.backend.PaymentService/GetPaymentMethodById',
      request,
      metadata || {},
      methodDescriptor_PaymentService_GetPaymentMethodById,
      callback);
};


/**
 * @param {!proto.payment.backend.GetPaymentMethodByIdReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.payment.backend.GetPaymentMethodByIdRes>}
 *     Promise that resolves to the response
 */
proto.payment.backend.PaymentServicePromiseClient.prototype.getPaymentMethodById =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/payment.backend.PaymentService/GetPaymentMethodById',
      request,
      metadata || {},
      methodDescriptor_PaymentService_GetPaymentMethodById);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.payment.backend.GetPaymentMethodByCodeReq,
 *   !proto.payment.backend.GetPaymentMethodByCodeRes>}
 */
const methodDescriptor_PaymentService_GetPaymentMethodByCode = new grpc.web.MethodDescriptor(
  '/payment.backend.PaymentService/GetPaymentMethodByCode',
  grpc.web.MethodType.UNARY,
  proto.payment.backend.GetPaymentMethodByCodeReq,
  proto.payment.backend.GetPaymentMethodByCodeRes,
  /**
   * @param {!proto.payment.backend.GetPaymentMethodByCodeReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.payment.backend.GetPaymentMethodByCodeRes.deserializeBinary
);


/**
 * @param {!proto.payment.backend.GetPaymentMethodByCodeReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.payment.backend.GetPaymentMethodByCodeRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.payment.backend.GetPaymentMethodByCodeRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.payment.backend.PaymentServiceClient.prototype.getPaymentMethodByCode =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/payment.backend.PaymentService/GetPaymentMethodByCode',
      request,
      metadata || {},
      methodDescriptor_PaymentService_GetPaymentMethodByCode,
      callback);
};


/**
 * @param {!proto.payment.backend.GetPaymentMethodByCodeReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.payment.backend.GetPaymentMethodByCodeRes>}
 *     Promise that resolves to the response
 */
proto.payment.backend.PaymentServicePromiseClient.prototype.getPaymentMethodByCode =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/payment.backend.PaymentService/GetPaymentMethodByCode',
      request,
      metadata || {},
      methodDescriptor_PaymentService_GetPaymentMethodByCode);
};


module.exports = proto.payment.backend;

