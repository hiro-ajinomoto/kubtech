// source: proto/search/backend/seat.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.search.backend.GetSeatsReq', null, global);
goog.exportSymbol('proto.search.backend.GetSeatsRes', null, global);
goog.exportSymbol('proto.search.backend.InternalCheckModifyPriceBlockReq', null, global);
goog.exportSymbol('proto.search.backend.InternalCheckModifyPriceBlockRes', null, global);
goog.exportSymbol('proto.search.backend.SeatAccessoryBasicInfo', null, global);
goog.exportSymbol('proto.search.backend.SeatBasicInfo', null, global);
goog.exportSymbol('proto.search.backend.SeatPosition', null, global);
goog.exportSymbol('proto.search.backend.SeatPriceCurrencyInfo', null, global);
goog.exportSymbol('proto.search.backend.SeatPriceInfo', null, global);
goog.exportSymbol('proto.search.backend.SeatStatus', null, global);
goog.exportSymbol('proto.search.backend.SeatTypeBasicInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.search.backend.SeatBasicInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.search.backend.SeatBasicInfo.repeatedFields_, null);
};
goog.inherits(proto.search.backend.SeatBasicInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.search.backend.SeatBasicInfo.displayName = 'proto.search.backend.SeatBasicInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.search.backend.SeatPriceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.search.backend.SeatPriceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.search.backend.SeatPriceInfo.displayName = 'proto.search.backend.SeatPriceInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.search.backend.SeatPriceCurrencyInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.search.backend.SeatPriceCurrencyInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.search.backend.SeatPriceCurrencyInfo.displayName = 'proto.search.backend.SeatPriceCurrencyInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.search.backend.SeatAccessoryBasicInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.search.backend.SeatAccessoryBasicInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.search.backend.SeatAccessoryBasicInfo.displayName = 'proto.search.backend.SeatAccessoryBasicInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.search.backend.SeatTypeBasicInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.search.backend.SeatTypeBasicInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.search.backend.SeatTypeBasicInfo.displayName = 'proto.search.backend.SeatTypeBasicInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.search.backend.SeatPosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.search.backend.SeatPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.search.backend.SeatPosition.displayName = 'proto.search.backend.SeatPosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.search.backend.GetSeatsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.search.backend.GetSeatsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.search.backend.GetSeatsReq.displayName = 'proto.search.backend.GetSeatsReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.search.backend.InternalCheckModifyPriceBlockReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.search.backend.InternalCheckModifyPriceBlockReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.search.backend.InternalCheckModifyPriceBlockReq.displayName = 'proto.search.backend.InternalCheckModifyPriceBlockReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.search.backend.GetSeatsRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.search.backend.GetSeatsRes.repeatedFields_, null);
};
goog.inherits(proto.search.backend.GetSeatsRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.search.backend.GetSeatsRes.displayName = 'proto.search.backend.GetSeatsRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.search.backend.InternalCheckModifyPriceBlockRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.search.backend.InternalCheckModifyPriceBlockRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.search.backend.InternalCheckModifyPriceBlockRes.displayName = 'proto.search.backend.InternalCheckModifyPriceBlockRes';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.search.backend.SeatBasicInfo.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.search.backend.SeatBasicInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.search.backend.SeatBasicInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.search.backend.SeatBasicInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.search.backend.SeatBasicInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    generalSeatMapId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    seatPriceBlockId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    position: (f = msg.getPosition()) && proto.search.backend.SeatPosition.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 6, ""),
    seatType: (f = msg.getSeatType()) && proto.search.backend.SeatTypeBasicInfo.toObject(includeInstance, f),
    price: (f = msg.getPrice()) && proto.search.backend.SeatPriceInfo.toObject(includeInstance, f),
    seatAccessoriesList: jspb.Message.toObjectList(msg.getSeatAccessoriesList(),
    proto.search.backend.SeatAccessoryBasicInfo.toObject, includeInstance),
    lockExpiredTime: jspb.Message.getFieldWithDefault(msg, 10, 0),
    status: jspb.Message.getFieldWithDefault(msg, 11, 0),
    isMine: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    partnershipId: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.search.backend.SeatBasicInfo}
 */
proto.search.backend.SeatBasicInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.search.backend.SeatBasicInfo;
  return proto.search.backend.SeatBasicInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.search.backend.SeatBasicInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.search.backend.SeatBasicInfo}
 */
proto.search.backend.SeatBasicInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGeneralSeatMapId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatPriceBlockId(value);
      break;
    case 5:
      var value = new proto.search.backend.SeatPosition;
      reader.readMessage(value,proto.search.backend.SeatPosition.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 7:
      var value = new proto.search.backend.SeatTypeBasicInfo;
      reader.readMessage(value,proto.search.backend.SeatTypeBasicInfo.deserializeBinaryFromReader);
      msg.setSeatType(value);
      break;
    case 8:
      var value = new proto.search.backend.SeatPriceInfo;
      reader.readMessage(value,proto.search.backend.SeatPriceInfo.deserializeBinaryFromReader);
      msg.setPrice(value);
      break;
    case 9:
      var value = new proto.search.backend.SeatAccessoryBasicInfo;
      reader.readMessage(value,proto.search.backend.SeatAccessoryBasicInfo.deserializeBinaryFromReader);
      msg.addSeatAccessories(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLockExpiredTime(value);
      break;
    case 11:
      var value = /** @type {!proto.search.backend.SeatStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsMine(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnershipId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.search.backend.SeatBasicInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.search.backend.SeatBasicInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.search.backend.SeatBasicInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.search.backend.SeatBasicInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGeneralSeatMapId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSeatPriceBlockId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.search.backend.SeatPosition.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSeatType();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.search.backend.SeatTypeBasicInfo.serializeBinaryToWriter
    );
  }
  f = message.getPrice();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.search.backend.SeatPriceInfo.serializeBinaryToWriter
    );
  }
  f = message.getSeatAccessoriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.search.backend.SeatAccessoryBasicInfo.serializeBinaryToWriter
    );
  }
  f = message.getLockExpiredTime();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getIsMine();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getPartnershipId();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.search.backend.SeatBasicInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.search.backend.SeatBasicInfo} returns this
 */
proto.search.backend.SeatBasicInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.search.backend.SeatBasicInfo.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.search.backend.SeatBasicInfo} returns this
 */
proto.search.backend.SeatBasicInfo.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string general_seat_map_id = 3;
 * @return {string}
 */
proto.search.backend.SeatBasicInfo.prototype.getGeneralSeatMapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.search.backend.SeatBasicInfo} returns this
 */
proto.search.backend.SeatBasicInfo.prototype.setGeneralSeatMapId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string seat_price_block_id = 4;
 * @return {string}
 */
proto.search.backend.SeatBasicInfo.prototype.getSeatPriceBlockId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.search.backend.SeatBasicInfo} returns this
 */
proto.search.backend.SeatBasicInfo.prototype.setSeatPriceBlockId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional SeatPosition position = 5;
 * @return {?proto.search.backend.SeatPosition}
 */
proto.search.backend.SeatBasicInfo.prototype.getPosition = function() {
  return /** @type{?proto.search.backend.SeatPosition} */ (
    jspb.Message.getWrapperField(this, proto.search.backend.SeatPosition, 5));
};


/**
 * @param {?proto.search.backend.SeatPosition|undefined} value
 * @return {!proto.search.backend.SeatBasicInfo} returns this
*/
proto.search.backend.SeatBasicInfo.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.search.backend.SeatBasicInfo} returns this
 */
proto.search.backend.SeatBasicInfo.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.search.backend.SeatBasicInfo.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string name = 6;
 * @return {string}
 */
proto.search.backend.SeatBasicInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.search.backend.SeatBasicInfo} returns this
 */
proto.search.backend.SeatBasicInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional SeatTypeBasicInfo seat_type = 7;
 * @return {?proto.search.backend.SeatTypeBasicInfo}
 */
proto.search.backend.SeatBasicInfo.prototype.getSeatType = function() {
  return /** @type{?proto.search.backend.SeatTypeBasicInfo} */ (
    jspb.Message.getWrapperField(this, proto.search.backend.SeatTypeBasicInfo, 7));
};


/**
 * @param {?proto.search.backend.SeatTypeBasicInfo|undefined} value
 * @return {!proto.search.backend.SeatBasicInfo} returns this
*/
proto.search.backend.SeatBasicInfo.prototype.setSeatType = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.search.backend.SeatBasicInfo} returns this
 */
proto.search.backend.SeatBasicInfo.prototype.clearSeatType = function() {
  return this.setSeatType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.search.backend.SeatBasicInfo.prototype.hasSeatType = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional SeatPriceInfo price = 8;
 * @return {?proto.search.backend.SeatPriceInfo}
 */
proto.search.backend.SeatBasicInfo.prototype.getPrice = function() {
  return /** @type{?proto.search.backend.SeatPriceInfo} */ (
    jspb.Message.getWrapperField(this, proto.search.backend.SeatPriceInfo, 8));
};


/**
 * @param {?proto.search.backend.SeatPriceInfo|undefined} value
 * @return {!proto.search.backend.SeatBasicInfo} returns this
*/
proto.search.backend.SeatBasicInfo.prototype.setPrice = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.search.backend.SeatBasicInfo} returns this
 */
proto.search.backend.SeatBasicInfo.prototype.clearPrice = function() {
  return this.setPrice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.search.backend.SeatBasicInfo.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated SeatAccessoryBasicInfo seat_accessories = 9;
 * @return {!Array<!proto.search.backend.SeatAccessoryBasicInfo>}
 */
proto.search.backend.SeatBasicInfo.prototype.getSeatAccessoriesList = function() {
  return /** @type{!Array<!proto.search.backend.SeatAccessoryBasicInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.search.backend.SeatAccessoryBasicInfo, 9));
};


/**
 * @param {!Array<!proto.search.backend.SeatAccessoryBasicInfo>} value
 * @return {!proto.search.backend.SeatBasicInfo} returns this
*/
proto.search.backend.SeatBasicInfo.prototype.setSeatAccessoriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.search.backend.SeatAccessoryBasicInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.search.backend.SeatAccessoryBasicInfo}
 */
proto.search.backend.SeatBasicInfo.prototype.addSeatAccessories = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.search.backend.SeatAccessoryBasicInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.search.backend.SeatBasicInfo} returns this
 */
proto.search.backend.SeatBasicInfo.prototype.clearSeatAccessoriesList = function() {
  return this.setSeatAccessoriesList([]);
};


/**
 * optional int64 lock_expired_time = 10;
 * @return {number}
 */
proto.search.backend.SeatBasicInfo.prototype.getLockExpiredTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.search.backend.SeatBasicInfo} returns this
 */
proto.search.backend.SeatBasicInfo.prototype.setLockExpiredTime = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional SeatStatus status = 11;
 * @return {!proto.search.backend.SeatStatus}
 */
proto.search.backend.SeatBasicInfo.prototype.getStatus = function() {
  return /** @type {!proto.search.backend.SeatStatus} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.search.backend.SeatStatus} value
 * @return {!proto.search.backend.SeatBasicInfo} returns this
 */
proto.search.backend.SeatBasicInfo.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional bool is_mine = 12;
 * @return {boolean}
 */
proto.search.backend.SeatBasicInfo.prototype.getIsMine = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.search.backend.SeatBasicInfo} returns this
 */
proto.search.backend.SeatBasicInfo.prototype.setIsMine = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional string partnership_id = 13;
 * @return {string}
 */
proto.search.backend.SeatBasicInfo.prototype.getPartnershipId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.search.backend.SeatBasicInfo} returns this
 */
proto.search.backend.SeatBasicInfo.prototype.setPartnershipId = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.search.backend.SeatPriceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.search.backend.SeatPriceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.search.backend.SeatPriceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.search.backend.SeatPriceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 3, ""),
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    currency: (f = msg.getCurrency()) && proto.search.backend.SeatPriceCurrencyInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.search.backend.SeatPriceInfo}
 */
proto.search.backend.SeatPriceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.search.backend.SeatPriceInfo;
  return proto.search.backend.SeatPriceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.search.backend.SeatPriceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.search.backend.SeatPriceInfo}
 */
proto.search.backend.SeatPriceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 5:
      var value = new proto.search.backend.SeatPriceCurrencyInfo;
      reader.readMessage(value,proto.search.backend.SeatPriceCurrencyInfo.deserializeBinaryFromReader);
      msg.setCurrency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.search.backend.SeatPriceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.search.backend.SeatPriceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.search.backend.SeatPriceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.search.backend.SeatPriceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getCurrency();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.search.backend.SeatPriceCurrencyInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.search.backend.SeatPriceInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.search.backend.SeatPriceInfo} returns this
 */
proto.search.backend.SeatPriceInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.search.backend.SeatPriceInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.search.backend.SeatPriceInfo} returns this
 */
proto.search.backend.SeatPriceInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string icon = 3;
 * @return {string}
 */
proto.search.backend.SeatPriceInfo.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.search.backend.SeatPriceInfo} returns this
 */
proto.search.backend.SeatPriceInfo.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double price = 4;
 * @return {number}
 */
proto.search.backend.SeatPriceInfo.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.search.backend.SeatPriceInfo} returns this
 */
proto.search.backend.SeatPriceInfo.prototype.setPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional SeatPriceCurrencyInfo currency = 5;
 * @return {?proto.search.backend.SeatPriceCurrencyInfo}
 */
proto.search.backend.SeatPriceInfo.prototype.getCurrency = function() {
  return /** @type{?proto.search.backend.SeatPriceCurrencyInfo} */ (
    jspb.Message.getWrapperField(this, proto.search.backend.SeatPriceCurrencyInfo, 5));
};


/**
 * @param {?proto.search.backend.SeatPriceCurrencyInfo|undefined} value
 * @return {!proto.search.backend.SeatPriceInfo} returns this
*/
proto.search.backend.SeatPriceInfo.prototype.setCurrency = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.search.backend.SeatPriceInfo} returns this
 */
proto.search.backend.SeatPriceInfo.prototype.clearCurrency = function() {
  return this.setCurrency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.search.backend.SeatPriceInfo.prototype.hasCurrency = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.search.backend.SeatPriceCurrencyInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.search.backend.SeatPriceCurrencyInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.search.backend.SeatPriceCurrencyInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.search.backend.SeatPriceCurrencyInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    code: jspb.Message.getFieldWithDefault(msg, 3, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.search.backend.SeatPriceCurrencyInfo}
 */
proto.search.backend.SeatPriceCurrencyInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.search.backend.SeatPriceCurrencyInfo;
  return proto.search.backend.SeatPriceCurrencyInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.search.backend.SeatPriceCurrencyInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.search.backend.SeatPriceCurrencyInfo}
 */
proto.search.backend.SeatPriceCurrencyInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.search.backend.SeatPriceCurrencyInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.search.backend.SeatPriceCurrencyInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.search.backend.SeatPriceCurrencyInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.search.backend.SeatPriceCurrencyInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.search.backend.SeatPriceCurrencyInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.search.backend.SeatPriceCurrencyInfo} returns this
 */
proto.search.backend.SeatPriceCurrencyInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.search.backend.SeatPriceCurrencyInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.search.backend.SeatPriceCurrencyInfo} returns this
 */
proto.search.backend.SeatPriceCurrencyInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string code = 3;
 * @return {string}
 */
proto.search.backend.SeatPriceCurrencyInfo.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.search.backend.SeatPriceCurrencyInfo} returns this
 */
proto.search.backend.SeatPriceCurrencyInfo.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string icon = 4;
 * @return {string}
 */
proto.search.backend.SeatPriceCurrencyInfo.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.search.backend.SeatPriceCurrencyInfo} returns this
 */
proto.search.backend.SeatPriceCurrencyInfo.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.search.backend.SeatAccessoryBasicInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.search.backend.SeatAccessoryBasicInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.search.backend.SeatAccessoryBasicInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.search.backend.SeatAccessoryBasicInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.search.backend.SeatAccessoryBasicInfo}
 */
proto.search.backend.SeatAccessoryBasicInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.search.backend.SeatAccessoryBasicInfo;
  return proto.search.backend.SeatAccessoryBasicInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.search.backend.SeatAccessoryBasicInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.search.backend.SeatAccessoryBasicInfo}
 */
proto.search.backend.SeatAccessoryBasicInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.search.backend.SeatAccessoryBasicInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.search.backend.SeatAccessoryBasicInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.search.backend.SeatAccessoryBasicInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.search.backend.SeatAccessoryBasicInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.search.backend.SeatAccessoryBasicInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.search.backend.SeatAccessoryBasicInfo} returns this
 */
proto.search.backend.SeatAccessoryBasicInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.search.backend.SeatAccessoryBasicInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.search.backend.SeatAccessoryBasicInfo} returns this
 */
proto.search.backend.SeatAccessoryBasicInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.search.backend.SeatTypeBasicInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.search.backend.SeatTypeBasicInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.search.backend.SeatTypeBasicInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.search.backend.SeatTypeBasicInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.search.backend.SeatTypeBasicInfo}
 */
proto.search.backend.SeatTypeBasicInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.search.backend.SeatTypeBasicInfo;
  return proto.search.backend.SeatTypeBasicInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.search.backend.SeatTypeBasicInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.search.backend.SeatTypeBasicInfo}
 */
proto.search.backend.SeatTypeBasicInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.search.backend.SeatTypeBasicInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.search.backend.SeatTypeBasicInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.search.backend.SeatTypeBasicInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.search.backend.SeatTypeBasicInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.search.backend.SeatTypeBasicInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.search.backend.SeatTypeBasicInfo} returns this
 */
proto.search.backend.SeatTypeBasicInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.search.backend.SeatTypeBasicInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.search.backend.SeatTypeBasicInfo} returns this
 */
proto.search.backend.SeatTypeBasicInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.search.backend.SeatPosition.prototype.toObject = function(opt_includeInstance) {
  return proto.search.backend.SeatPosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.search.backend.SeatPosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.search.backend.SeatPosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.search.backend.SeatPosition}
 */
proto.search.backend.SeatPosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.search.backend.SeatPosition;
  return proto.search.backend.SeatPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.search.backend.SeatPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.search.backend.SeatPosition}
 */
proto.search.backend.SeatPosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.search.backend.SeatPosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.search.backend.SeatPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.search.backend.SeatPosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.search.backend.SeatPosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 x = 1;
 * @return {number}
 */
proto.search.backend.SeatPosition.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.search.backend.SeatPosition} returns this
 */
proto.search.backend.SeatPosition.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 y = 2;
 * @return {number}
 */
proto.search.backend.SeatPosition.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.search.backend.SeatPosition} returns this
 */
proto.search.backend.SeatPosition.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.search.backend.GetSeatsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.search.backend.GetSeatsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.search.backend.GetSeatsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.search.backend.GetSeatsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatPriceBlockId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.search.backend.GetSeatsReq}
 */
proto.search.backend.GetSeatsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.search.backend.GetSeatsReq;
  return proto.search.backend.GetSeatsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.search.backend.GetSeatsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.search.backend.GetSeatsReq}
 */
proto.search.backend.GetSeatsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatPriceBlockId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.search.backend.GetSeatsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.search.backend.GetSeatsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.search.backend.GetSeatsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.search.backend.GetSeatsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatPriceBlockId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string seat_price_block_id = 1;
 * @return {string}
 */
proto.search.backend.GetSeatsReq.prototype.getSeatPriceBlockId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.search.backend.GetSeatsReq} returns this
 */
proto.search.backend.GetSeatsReq.prototype.setSeatPriceBlockId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.search.backend.InternalCheckModifyPriceBlockReq.prototype.toObject = function(opt_includeInstance) {
  return proto.search.backend.InternalCheckModifyPriceBlockReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.search.backend.InternalCheckModifyPriceBlockReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.search.backend.InternalCheckModifyPriceBlockReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatPriceBlockId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    generalSeatMapId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.search.backend.InternalCheckModifyPriceBlockReq}
 */
proto.search.backend.InternalCheckModifyPriceBlockReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.search.backend.InternalCheckModifyPriceBlockReq;
  return proto.search.backend.InternalCheckModifyPriceBlockReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.search.backend.InternalCheckModifyPriceBlockReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.search.backend.InternalCheckModifyPriceBlockReq}
 */
proto.search.backend.InternalCheckModifyPriceBlockReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatPriceBlockId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGeneralSeatMapId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.search.backend.InternalCheckModifyPriceBlockReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.search.backend.InternalCheckModifyPriceBlockReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.search.backend.InternalCheckModifyPriceBlockReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.search.backend.InternalCheckModifyPriceBlockReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatPriceBlockId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGeneralSeatMapId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string seat_price_block_id = 1;
 * @return {string}
 */
proto.search.backend.InternalCheckModifyPriceBlockReq.prototype.getSeatPriceBlockId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.search.backend.InternalCheckModifyPriceBlockReq} returns this
 */
proto.search.backend.InternalCheckModifyPriceBlockReq.prototype.setSeatPriceBlockId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string general_seat_map_id = 2;
 * @return {string}
 */
proto.search.backend.InternalCheckModifyPriceBlockReq.prototype.getGeneralSeatMapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.search.backend.InternalCheckModifyPriceBlockReq} returns this
 */
proto.search.backend.InternalCheckModifyPriceBlockReq.prototype.setGeneralSeatMapId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.search.backend.GetSeatsRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.search.backend.GetSeatsRes.prototype.toObject = function(opt_includeInstance) {
  return proto.search.backend.GetSeatsRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.search.backend.GetSeatsRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.search.backend.GetSeatsRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    infosList: jspb.Message.toObjectList(msg.getInfosList(),
    proto.search.backend.SeatBasicInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.search.backend.GetSeatsRes}
 */
proto.search.backend.GetSeatsRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.search.backend.GetSeatsRes;
  return proto.search.backend.GetSeatsRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.search.backend.GetSeatsRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.search.backend.GetSeatsRes}
 */
proto.search.backend.GetSeatsRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.search.backend.SeatBasicInfo;
      reader.readMessage(value,proto.search.backend.SeatBasicInfo.deserializeBinaryFromReader);
      msg.addInfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.search.backend.GetSeatsRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.search.backend.GetSeatsRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.search.backend.GetSeatsRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.search.backend.GetSeatsRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.search.backend.SeatBasicInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SeatBasicInfo infos = 1;
 * @return {!Array<!proto.search.backend.SeatBasicInfo>}
 */
proto.search.backend.GetSeatsRes.prototype.getInfosList = function() {
  return /** @type{!Array<!proto.search.backend.SeatBasicInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.search.backend.SeatBasicInfo, 1));
};


/**
 * @param {!Array<!proto.search.backend.SeatBasicInfo>} value
 * @return {!proto.search.backend.GetSeatsRes} returns this
*/
proto.search.backend.GetSeatsRes.prototype.setInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.search.backend.SeatBasicInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.search.backend.SeatBasicInfo}
 */
proto.search.backend.GetSeatsRes.prototype.addInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.search.backend.SeatBasicInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.search.backend.GetSeatsRes} returns this
 */
proto.search.backend.GetSeatsRes.prototype.clearInfosList = function() {
  return this.setInfosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.search.backend.InternalCheckModifyPriceBlockRes.prototype.toObject = function(opt_includeInstance) {
  return proto.search.backend.InternalCheckModifyPriceBlockRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.search.backend.InternalCheckModifyPriceBlockRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.search.backend.InternalCheckModifyPriceBlockRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    isAble: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.search.backend.InternalCheckModifyPriceBlockRes}
 */
proto.search.backend.InternalCheckModifyPriceBlockRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.search.backend.InternalCheckModifyPriceBlockRes;
  return proto.search.backend.InternalCheckModifyPriceBlockRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.search.backend.InternalCheckModifyPriceBlockRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.search.backend.InternalCheckModifyPriceBlockRes}
 */
proto.search.backend.InternalCheckModifyPriceBlockRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsAble(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.search.backend.InternalCheckModifyPriceBlockRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.search.backend.InternalCheckModifyPriceBlockRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.search.backend.InternalCheckModifyPriceBlockRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.search.backend.InternalCheckModifyPriceBlockRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsAble();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool is_able = 1;
 * @return {boolean}
 */
proto.search.backend.InternalCheckModifyPriceBlockRes.prototype.getIsAble = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.search.backend.InternalCheckModifyPriceBlockRes} returns this
 */
proto.search.backend.InternalCheckModifyPriceBlockRes.prototype.setIsAble = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.search.backend.SeatStatus = {
  SEAT_STATUS_INVALID: 0,
  SEAT_STATUS_UNAVAILABLE: 1,
  SEAT_STATUS_AVAILABLE: 2,
  SEAT_STATUS_BLOCKED: 3,
  SEAT_STATUS_BOOKED: 4
};

goog.object.extend(exports, proto.search.backend);
