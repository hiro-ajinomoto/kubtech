/**
 * @fileoverview gRPC-Web generated client stub for streaming
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.20.3
// source: proto/streaming/streaming.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.streaming = require('./streaming_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.streaming.StreamingServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.streaming.StreamingServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.streaming.GetEpisodesReq,
 *   !proto.streaming.GetEpisodesRes>}
 */
const methodDescriptor_StreamingService_GetEpisodes = new grpc.web.MethodDescriptor(
  '/streaming.StreamingService/GetEpisodes',
  grpc.web.MethodType.UNARY,
  proto.streaming.GetEpisodesReq,
  proto.streaming.GetEpisodesRes,
  /**
   * @param {!proto.streaming.GetEpisodesReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.streaming.GetEpisodesRes.deserializeBinary
);


/**
 * @param {!proto.streaming.GetEpisodesReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.streaming.GetEpisodesRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.streaming.GetEpisodesRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.streaming.StreamingServiceClient.prototype.getEpisodes =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/streaming.StreamingService/GetEpisodes',
      request,
      metadata || {},
      methodDescriptor_StreamingService_GetEpisodes,
      callback);
};


/**
 * @param {!proto.streaming.GetEpisodesReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.streaming.GetEpisodesRes>}
 *     Promise that resolves to the response
 */
proto.streaming.StreamingServicePromiseClient.prototype.getEpisodes =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/streaming.StreamingService/GetEpisodes',
      request,
      metadata || {},
      methodDescriptor_StreamingService_GetEpisodes);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.streaming.GetStreamingInfoReq,
 *   !proto.streaming.GetStreamingInfoRes>}
 */
const methodDescriptor_StreamingService_GetStreamingInfo = new grpc.web.MethodDescriptor(
  '/streaming.StreamingService/GetStreamingInfo',
  grpc.web.MethodType.UNARY,
  proto.streaming.GetStreamingInfoReq,
  proto.streaming.GetStreamingInfoRes,
  /**
   * @param {!proto.streaming.GetStreamingInfoReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.streaming.GetStreamingInfoRes.deserializeBinary
);


/**
 * @param {!proto.streaming.GetStreamingInfoReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.streaming.GetStreamingInfoRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.streaming.GetStreamingInfoRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.streaming.StreamingServiceClient.prototype.getStreamingInfo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/streaming.StreamingService/GetStreamingInfo',
      request,
      metadata || {},
      methodDescriptor_StreamingService_GetStreamingInfo,
      callback);
};


/**
 * @param {!proto.streaming.GetStreamingInfoReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.streaming.GetStreamingInfoRes>}
 *     Promise that resolves to the response
 */
proto.streaming.StreamingServicePromiseClient.prototype.getStreamingInfo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/streaming.StreamingService/GetStreamingInfo',
      request,
      metadata || {},
      methodDescriptor_StreamingService_GetStreamingInfo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.streaming.NewSessionReq,
 *   !proto.streaming.NewSessionRes>}
 */
const methodDescriptor_StreamingService_NewSession = new grpc.web.MethodDescriptor(
  '/streaming.StreamingService/NewSession',
  grpc.web.MethodType.UNARY,
  proto.streaming.NewSessionReq,
  proto.streaming.NewSessionRes,
  /**
   * @param {!proto.streaming.NewSessionReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.streaming.NewSessionRes.deserializeBinary
);


/**
 * @param {!proto.streaming.NewSessionReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.streaming.NewSessionRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.streaming.NewSessionRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.streaming.StreamingServiceClient.prototype.newSession =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/streaming.StreamingService/NewSession',
      request,
      metadata || {},
      methodDescriptor_StreamingService_NewSession,
      callback);
};


/**
 * @param {!proto.streaming.NewSessionReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.streaming.NewSessionRes>}
 *     Promise that resolves to the response
 */
proto.streaming.StreamingServicePromiseClient.prototype.newSession =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/streaming.StreamingService/NewSession',
      request,
      metadata || {},
      methodDescriptor_StreamingService_NewSession);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.streaming.HeartbeatSessionReq,
 *   !proto.streaming.HeartbeatSessionRes>}
 */
const methodDescriptor_StreamingService_HeartbeatSession = new grpc.web.MethodDescriptor(
  '/streaming.StreamingService/HeartbeatSession',
  grpc.web.MethodType.UNARY,
  proto.streaming.HeartbeatSessionReq,
  proto.streaming.HeartbeatSessionRes,
  /**
   * @param {!proto.streaming.HeartbeatSessionReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.streaming.HeartbeatSessionRes.deserializeBinary
);


/**
 * @param {!proto.streaming.HeartbeatSessionReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.streaming.HeartbeatSessionRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.streaming.HeartbeatSessionRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.streaming.StreamingServiceClient.prototype.heartbeatSession =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/streaming.StreamingService/HeartbeatSession',
      request,
      metadata || {},
      methodDescriptor_StreamingService_HeartbeatSession,
      callback);
};


/**
 * @param {!proto.streaming.HeartbeatSessionReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.streaming.HeartbeatSessionRes>}
 *     Promise that resolves to the response
 */
proto.streaming.StreamingServicePromiseClient.prototype.heartbeatSession =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/streaming.StreamingService/HeartbeatSession',
      request,
      metadata || {},
      methodDescriptor_StreamingService_HeartbeatSession);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.streaming.EndSessionReq,
 *   !proto.streaming.EndSessionRes>}
 */
const methodDescriptor_StreamingService_EndSession = new grpc.web.MethodDescriptor(
  '/streaming.StreamingService/EndSession',
  grpc.web.MethodType.UNARY,
  proto.streaming.EndSessionReq,
  proto.streaming.EndSessionRes,
  /**
   * @param {!proto.streaming.EndSessionReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.streaming.EndSessionRes.deserializeBinary
);


/**
 * @param {!proto.streaming.EndSessionReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.streaming.EndSessionRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.streaming.EndSessionRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.streaming.StreamingServiceClient.prototype.endSession =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/streaming.StreamingService/EndSession',
      request,
      metadata || {},
      methodDescriptor_StreamingService_EndSession,
      callback);
};


/**
 * @param {!proto.streaming.EndSessionReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.streaming.EndSessionRes>}
 *     Promise that resolves to the response
 */
proto.streaming.StreamingServicePromiseClient.prototype.endSession =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/streaming.StreamingService/EndSession',
      request,
      metadata || {},
      methodDescriptor_StreamingService_EndSession);
};


module.exports = proto.streaming;

