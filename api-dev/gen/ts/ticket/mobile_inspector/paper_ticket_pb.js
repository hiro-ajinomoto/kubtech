// source: ticket/mobile_inspector/paper_ticket.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var ticket_mobile_inspector_base_pb = require('../../ticket/mobile_inspector/base_pb.js');
goog.object.extend(proto, ticket_mobile_inspector_base_pb);
goog.exportSymbol('proto.ticket.mobile_inspector.GetPaperTicketByCodeReq', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.GetPaperTicketByCodeRes', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.PaperTicketEventInfo', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.PaperTicketEventLocation', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.PaperTicketInfo', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.PaperTicketStatus', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.PaperTicketInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.mobile_inspector.PaperTicketInfo.repeatedFields_, null);
};
goog.inherits(proto.ticket.mobile_inspector.PaperTicketInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.PaperTicketInfo.displayName = 'proto.ticket.mobile_inspector.PaperTicketInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.PaperTicketEventLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.PaperTicketEventLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.PaperTicketEventLocation.displayName = 'proto.ticket.mobile_inspector.PaperTicketEventLocation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.PaperTicketEventInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.PaperTicketEventInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.PaperTicketEventInfo.displayName = 'proto.ticket.mobile_inspector.PaperTicketEventInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo.displayName = 'proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq.displayName = 'proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.GetPaperTicketByCodeReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.GetPaperTicketByCodeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.GetPaperTicketByCodeReq.displayName = 'proto.ticket.mobile_inspector.GetPaperTicketByCodeReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.GetPaperTicketByCodeRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.GetPaperTicketByCodeRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.GetPaperTicketByCodeRes.displayName = 'proto.ticket.mobile_inspector.GetPaperTicketByCodeRes';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.mobile_inspector.PaperTicketInfo.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.PaperTicketInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.PaperTicketInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.PaperTicketInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.PaperTicketInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 3, 0),
    inspectorImage: jspb.Message.getFieldWithDefault(msg, 4, ""),
    eventInfo: (f = msg.getEventInfo()) && proto.ticket.mobile_inspector.PaperTicketEventInfo.toObject(includeInstance, f),
    secretCode: jspb.Message.getFieldWithDefault(msg, 6, ""),
    checkinLogsList: jspb.Message.toObjectList(msg.getCheckinLogsList(),
    proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo.toObject, includeInstance),
    partnershipId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    status: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.PaperTicketInfo}
 */
proto.ticket.mobile_inspector.PaperTicketInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.PaperTicketInfo;
  return proto.ticket.mobile_inspector.PaperTicketInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.PaperTicketInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.PaperTicketInfo}
 */
proto.ticket.mobile_inspector.PaperTicketInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatedAt(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInspectorImage(value);
      break;
    case 5:
      var value = new proto.ticket.mobile_inspector.PaperTicketEventInfo;
      reader.readMessage(value,proto.ticket.mobile_inspector.PaperTicketEventInfo.deserializeBinaryFromReader);
      msg.setEventInfo(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretCode(value);
      break;
    case 7:
      var value = new proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo;
      reader.readMessage(value,proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo.deserializeBinaryFromReader);
      msg.addCheckinLogs(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnershipId(value);
      break;
    case 9:
      var value = /** @type {!proto.ticket.mobile_inspector.PaperTicketStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.PaperTicketInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.PaperTicketInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.PaperTicketInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.PaperTicketInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getInspectorImage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEventInfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ticket.mobile_inspector.PaperTicketEventInfo.serializeBinaryToWriter
    );
  }
  f = message.getSecretCode();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCheckinLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo.serializeBinaryToWriter
    );
  }
  f = message.getPartnershipId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ticket.mobile_inspector.PaperTicketInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.PaperTicketInfo} returns this
 */
proto.ticket.mobile_inspector.PaperTicketInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 created_at = 2;
 * @return {number}
 */
proto.ticket.mobile_inspector.PaperTicketInfo.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile_inspector.PaperTicketInfo} returns this
 */
proto.ticket.mobile_inspector.PaperTicketInfo.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 updated_at = 3;
 * @return {number}
 */
proto.ticket.mobile_inspector.PaperTicketInfo.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile_inspector.PaperTicketInfo} returns this
 */
proto.ticket.mobile_inspector.PaperTicketInfo.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string inspector_image = 4;
 * @return {string}
 */
proto.ticket.mobile_inspector.PaperTicketInfo.prototype.getInspectorImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.PaperTicketInfo} returns this
 */
proto.ticket.mobile_inspector.PaperTicketInfo.prototype.setInspectorImage = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional PaperTicketEventInfo event_info = 5;
 * @return {?proto.ticket.mobile_inspector.PaperTicketEventInfo}
 */
proto.ticket.mobile_inspector.PaperTicketInfo.prototype.getEventInfo = function() {
  return /** @type{?proto.ticket.mobile_inspector.PaperTicketEventInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile_inspector.PaperTicketEventInfo, 5));
};


/**
 * @param {?proto.ticket.mobile_inspector.PaperTicketEventInfo|undefined} value
 * @return {!proto.ticket.mobile_inspector.PaperTicketInfo} returns this
*/
proto.ticket.mobile_inspector.PaperTicketInfo.prototype.setEventInfo = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile_inspector.PaperTicketInfo} returns this
 */
proto.ticket.mobile_inspector.PaperTicketInfo.prototype.clearEventInfo = function() {
  return this.setEventInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile_inspector.PaperTicketInfo.prototype.hasEventInfo = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string secret_code = 6;
 * @return {string}
 */
proto.ticket.mobile_inspector.PaperTicketInfo.prototype.getSecretCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.PaperTicketInfo} returns this
 */
proto.ticket.mobile_inspector.PaperTicketInfo.prototype.setSecretCode = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated PaperTicketCheckInLogInfo checkin_logs = 7;
 * @return {!Array<!proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo>}
 */
proto.ticket.mobile_inspector.PaperTicketInfo.prototype.getCheckinLogsList = function() {
  return /** @type{!Array<!proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo, 7));
};


/**
 * @param {!Array<!proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo>} value
 * @return {!proto.ticket.mobile_inspector.PaperTicketInfo} returns this
*/
proto.ticket.mobile_inspector.PaperTicketInfo.prototype.setCheckinLogsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo}
 */
proto.ticket.mobile_inspector.PaperTicketInfo.prototype.addCheckinLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.mobile_inspector.PaperTicketInfo} returns this
 */
proto.ticket.mobile_inspector.PaperTicketInfo.prototype.clearCheckinLogsList = function() {
  return this.setCheckinLogsList([]);
};


/**
 * optional string partnership_id = 8;
 * @return {string}
 */
proto.ticket.mobile_inspector.PaperTicketInfo.prototype.getPartnershipId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.PaperTicketInfo} returns this
 */
proto.ticket.mobile_inspector.PaperTicketInfo.prototype.setPartnershipId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional PaperTicketStatus status = 9;
 * @return {!proto.ticket.mobile_inspector.PaperTicketStatus}
 */
proto.ticket.mobile_inspector.PaperTicketInfo.prototype.getStatus = function() {
  return /** @type {!proto.ticket.mobile_inspector.PaperTicketStatus} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.ticket.mobile_inspector.PaperTicketStatus} value
 * @return {!proto.ticket.mobile_inspector.PaperTicketInfo} returns this
 */
proto.ticket.mobile_inspector.PaperTicketInfo.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.PaperTicketEventLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.PaperTicketEventLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.PaperTicketEventLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.PaperTicketEventLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ward: jspb.Message.getFieldWithDefault(msg, 3, ""),
    district: jspb.Message.getFieldWithDefault(msg, 4, ""),
    city: jspb.Message.getFieldWithDefault(msg, 5, ""),
    country: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.PaperTicketEventLocation}
 */
proto.ticket.mobile_inspector.PaperTicketEventLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.PaperTicketEventLocation;
  return proto.ticket.mobile_inspector.PaperTicketEventLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.PaperTicketEventLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.PaperTicketEventLocation}
 */
proto.ticket.mobile_inspector.PaperTicketEventLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWard(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDistrict(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.PaperTicketEventLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.PaperTicketEventLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.PaperTicketEventLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.PaperTicketEventLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWard();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDistrict();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ticket.mobile_inspector.PaperTicketEventLocation.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.PaperTicketEventLocation} returns this
 */
proto.ticket.mobile_inspector.PaperTicketEventLocation.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.ticket.mobile_inspector.PaperTicketEventLocation.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.PaperTicketEventLocation} returns this
 */
proto.ticket.mobile_inspector.PaperTicketEventLocation.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ward = 3;
 * @return {string}
 */
proto.ticket.mobile_inspector.PaperTicketEventLocation.prototype.getWard = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.PaperTicketEventLocation} returns this
 */
proto.ticket.mobile_inspector.PaperTicketEventLocation.prototype.setWard = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string district = 4;
 * @return {string}
 */
proto.ticket.mobile_inspector.PaperTicketEventLocation.prototype.getDistrict = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.PaperTicketEventLocation} returns this
 */
proto.ticket.mobile_inspector.PaperTicketEventLocation.prototype.setDistrict = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string city = 5;
 * @return {string}
 */
proto.ticket.mobile_inspector.PaperTicketEventLocation.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.PaperTicketEventLocation} returns this
 */
proto.ticket.mobile_inspector.PaperTicketEventLocation.prototype.setCity = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string country = 6;
 * @return {string}
 */
proto.ticket.mobile_inspector.PaperTicketEventLocation.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.PaperTicketEventLocation} returns this
 */
proto.ticket.mobile_inspector.PaperTicketEventLocation.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.PaperTicketEventInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.PaperTicketEventInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.PaperTicketEventInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.PaperTicketEventInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    startTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    checkinStartTime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    checkinEndTime: jspb.Message.getFieldWithDefault(msg, 6, 0),
    location: (f = msg.getLocation()) && proto.ticket.mobile_inspector.PaperTicketEventLocation.toObject(includeInstance, f),
    timezone: jspb.Message.getFieldWithDefault(msg, 8, ""),
    checkinEnded: jspb.Message.getBooleanFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.PaperTicketEventInfo}
 */
proto.ticket.mobile_inspector.PaperTicketEventInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.PaperTicketEventInfo;
  return proto.ticket.mobile_inspector.PaperTicketEventInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.PaperTicketEventInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.PaperTicketEventInfo}
 */
proto.ticket.mobile_inspector.PaperTicketEventInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCheckinStartTime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCheckinEndTime(value);
      break;
    case 7:
      var value = new proto.ticket.mobile_inspector.PaperTicketEventLocation;
      reader.readMessage(value,proto.ticket.mobile_inspector.PaperTicketEventLocation.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimezone(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCheckinEnded(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.PaperTicketEventInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.PaperTicketEventInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.PaperTicketEventInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.PaperTicketEventInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getCheckinStartTime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCheckinEndTime();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ticket.mobile_inspector.PaperTicketEventLocation.serializeBinaryToWriter
    );
  }
  f = message.getTimezone();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCheckinEnded();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * optional string event_id = 1;
 * @return {string}
 */
proto.ticket.mobile_inspector.PaperTicketEventInfo.prototype.getEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.PaperTicketEventInfo} returns this
 */
proto.ticket.mobile_inspector.PaperTicketEventInfo.prototype.setEventId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ticket.mobile_inspector.PaperTicketEventInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.PaperTicketEventInfo} returns this
 */
proto.ticket.mobile_inspector.PaperTicketEventInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 start_time = 3;
 * @return {number}
 */
proto.ticket.mobile_inspector.PaperTicketEventInfo.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile_inspector.PaperTicketEventInfo} returns this
 */
proto.ticket.mobile_inspector.PaperTicketEventInfo.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 end_time = 4;
 * @return {number}
 */
proto.ticket.mobile_inspector.PaperTicketEventInfo.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile_inspector.PaperTicketEventInfo} returns this
 */
proto.ticket.mobile_inspector.PaperTicketEventInfo.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 checkin_start_time = 5;
 * @return {number}
 */
proto.ticket.mobile_inspector.PaperTicketEventInfo.prototype.getCheckinStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile_inspector.PaperTicketEventInfo} returns this
 */
proto.ticket.mobile_inspector.PaperTicketEventInfo.prototype.setCheckinStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 checkin_end_time = 6;
 * @return {number}
 */
proto.ticket.mobile_inspector.PaperTicketEventInfo.prototype.getCheckinEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile_inspector.PaperTicketEventInfo} returns this
 */
proto.ticket.mobile_inspector.PaperTicketEventInfo.prototype.setCheckinEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional PaperTicketEventLocation location = 7;
 * @return {?proto.ticket.mobile_inspector.PaperTicketEventLocation}
 */
proto.ticket.mobile_inspector.PaperTicketEventInfo.prototype.getLocation = function() {
  return /** @type{?proto.ticket.mobile_inspector.PaperTicketEventLocation} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile_inspector.PaperTicketEventLocation, 7));
};


/**
 * @param {?proto.ticket.mobile_inspector.PaperTicketEventLocation|undefined} value
 * @return {!proto.ticket.mobile_inspector.PaperTicketEventInfo} returns this
*/
proto.ticket.mobile_inspector.PaperTicketEventInfo.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile_inspector.PaperTicketEventInfo} returns this
 */
proto.ticket.mobile_inspector.PaperTicketEventInfo.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile_inspector.PaperTicketEventInfo.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string timezone = 8;
 * @return {string}
 */
proto.ticket.mobile_inspector.PaperTicketEventInfo.prototype.getTimezone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.PaperTicketEventInfo} returns this
 */
proto.ticket.mobile_inspector.PaperTicketEventInfo.prototype.setTimezone = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional bool checkin_ended = 9;
 * @return {boolean}
 */
proto.ticket.mobile_inspector.PaperTicketEventInfo.prototype.getCheckinEnded = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.mobile_inspector.PaperTicketEventInfo} returns this
 */
proto.ticket.mobile_inspector.PaperTicketEventInfo.prototype.setCheckinEnded = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    inspectorId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    time: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo}
 */
proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo;
  return proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo}
 */
proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInspectorId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInspectorId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string inspector_id = 1;
 * @return {string}
 */
proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo.prototype.getInspectorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo} returns this
 */
proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo.prototype.setInspectorId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 time = 2;
 * @return {number}
 */
proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo} returns this
 */
proto.ticket.mobile_inspector.PaperTicketCheckInLogInfo.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventInfo: (f = msg.getEventInfo()) && proto.ticket.mobile_inspector.PaperTicketEventInfo.toObject(includeInstance, f),
    inspectorImage: jspb.Message.getFieldWithDefault(msg, 3, ""),
    partnershipId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq}
 */
proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq;
  return proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq}
 */
proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretCode(value);
      break;
    case 2:
      var value = new proto.ticket.mobile_inspector.PaperTicketEventInfo;
      reader.readMessage(value,proto.ticket.mobile_inspector.PaperTicketEventInfo.deserializeBinaryFromReader);
      msg.setEventInfo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInspectorImage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnershipId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ticket.mobile_inspector.PaperTicketEventInfo.serializeBinaryToWriter
    );
  }
  f = message.getInspectorImage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPartnershipId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string secret_code = 1;
 * @return {string}
 */
proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq.prototype.getSecretCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq} returns this
 */
proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq.prototype.setSecretCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PaperTicketEventInfo event_info = 2;
 * @return {?proto.ticket.mobile_inspector.PaperTicketEventInfo}
 */
proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq.prototype.getEventInfo = function() {
  return /** @type{?proto.ticket.mobile_inspector.PaperTicketEventInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile_inspector.PaperTicketEventInfo, 2));
};


/**
 * @param {?proto.ticket.mobile_inspector.PaperTicketEventInfo|undefined} value
 * @return {!proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq} returns this
*/
proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq.prototype.setEventInfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq} returns this
 */
proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq.prototype.clearEventInfo = function() {
  return this.setEventInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq.prototype.hasEventInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string inspector_image = 3;
 * @return {string}
 */
proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq.prototype.getInspectorImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq} returns this
 */
proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq.prototype.setInspectorImage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string partnership_id = 4;
 * @return {string}
 */
proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq.prototype.getPartnershipId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq} returns this
 */
proto.ticket.mobile_inspector.MapPaperTicketInfoAndCheckinReq.prototype.setPartnershipId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.GetPaperTicketByCodeReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.GetPaperTicketByCodeReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.GetPaperTicketByCodeReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.GetPaperTicketByCodeReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretCode: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.GetPaperTicketByCodeReq}
 */
proto.ticket.mobile_inspector.GetPaperTicketByCodeReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.GetPaperTicketByCodeReq;
  return proto.ticket.mobile_inspector.GetPaperTicketByCodeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.GetPaperTicketByCodeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.GetPaperTicketByCodeReq}
 */
proto.ticket.mobile_inspector.GetPaperTicketByCodeReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.GetPaperTicketByCodeReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.GetPaperTicketByCodeReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.GetPaperTicketByCodeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.GetPaperTicketByCodeReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string secret_code = 1;
 * @return {string}
 */
proto.ticket.mobile_inspector.GetPaperTicketByCodeReq.prototype.getSecretCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.GetPaperTicketByCodeReq} returns this
 */
proto.ticket.mobile_inspector.GetPaperTicketByCodeReq.prototype.setSecretCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.GetPaperTicketByCodeRes.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.GetPaperTicketByCodeRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.GetPaperTicketByCodeRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.GetPaperTicketByCodeRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.ticket.mobile_inspector.PaperTicketInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.GetPaperTicketByCodeRes}
 */
proto.ticket.mobile_inspector.GetPaperTicketByCodeRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.GetPaperTicketByCodeRes;
  return proto.ticket.mobile_inspector.GetPaperTicketByCodeRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.GetPaperTicketByCodeRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.GetPaperTicketByCodeRes}
 */
proto.ticket.mobile_inspector.GetPaperTicketByCodeRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.mobile_inspector.PaperTicketInfo;
      reader.readMessage(value,proto.ticket.mobile_inspector.PaperTicketInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.GetPaperTicketByCodeRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.GetPaperTicketByCodeRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.GetPaperTicketByCodeRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.GetPaperTicketByCodeRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ticket.mobile_inspector.PaperTicketInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional PaperTicketInfo info = 1;
 * @return {?proto.ticket.mobile_inspector.PaperTicketInfo}
 */
proto.ticket.mobile_inspector.GetPaperTicketByCodeRes.prototype.getInfo = function() {
  return /** @type{?proto.ticket.mobile_inspector.PaperTicketInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile_inspector.PaperTicketInfo, 1));
};


/**
 * @param {?proto.ticket.mobile_inspector.PaperTicketInfo|undefined} value
 * @return {!proto.ticket.mobile_inspector.GetPaperTicketByCodeRes} returns this
*/
proto.ticket.mobile_inspector.GetPaperTicketByCodeRes.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile_inspector.GetPaperTicketByCodeRes} returns this
 */
proto.ticket.mobile_inspector.GetPaperTicketByCodeRes.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile_inspector.GetPaperTicketByCodeRes.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.ticket.mobile_inspector.PaperTicketStatus = {
  PAPER_TICKET_STATUS_INVALID: 0,
  PAPER_TICKET_STATUS_NOT_USED: 1,
  PAPER_TICKET_STATUS_CHECKED_IN: 2
};

goog.object.extend(exports, proto.ticket.mobile_inspector);
