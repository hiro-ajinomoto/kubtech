// source: ticket/mobile_inspector/inspector.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var ticket_mobile_inspector_base_pb = require('../../ticket/mobile_inspector/base_pb.js');
goog.object.extend(proto, ticket_mobile_inspector_base_pb);
goog.exportSymbol('proto.ticket.mobile_inspector.AssignCheckinEventReq', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.CheckInLogInfo', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.CheckInReq', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.GetCurrentCheckinEventReq', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.GetCurrentCheckinEventRes', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.GetTicketByCodeReq', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.GetTicketByCodeRes', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.GetTicketByEmailReq', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.GetTicketByEmailRes', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.GetTicketByPhoneReq', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.GetTicketByPhoneRes', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.GetUpcomingCheckinEventReq', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.InspectorTicketEventInfo', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.InspectorTicketEventLocation', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.InspectorTicketInfo', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.InspectorTicketSeatInfo', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.InspectorTicketStatus', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.InspectorTicketType', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.InspectorTicketUserInfo', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.ListCheckInLogsReq', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.ListCheckInLogsRes', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq', null, global);
goog.exportSymbol('proto.ticket.mobile_inspector.MappingUserInfoToTicketReq', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.InspectorTicketInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.InspectorTicketInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.InspectorTicketInfo.displayName = 'proto.ticket.mobile_inspector.InspectorTicketInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo.displayName = 'proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo.displayName = 'proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.InspectorTicketEventLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.InspectorTicketEventLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.InspectorTicketEventLocation.displayName = 'proto.ticket.mobile_inspector.InspectorTicketEventLocation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.InspectorTicketEventInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.InspectorTicketEventInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.InspectorTicketEventInfo.displayName = 'proto.ticket.mobile_inspector.InspectorTicketEventInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.repeatedFields_, null);
};
goog.inherits(proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.displayName = 'proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.repeatedFields_, null);
};
goog.inherits(proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.displayName = 'proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.InspectorTicketUserInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.InspectorTicketUserInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.InspectorTicketUserInfo.displayName = 'proto.ticket.mobile_inspector.InspectorTicketUserInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.InspectorTicketSeatInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.InspectorTicketSeatInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.InspectorTicketSeatInfo.displayName = 'proto.ticket.mobile_inspector.InspectorTicketSeatInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.CheckInLogInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.CheckInLogInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.CheckInLogInfo.displayName = 'proto.ticket.mobile_inspector.CheckInLogInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.CheckInReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.CheckInReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.CheckInReq.displayName = 'proto.ticket.mobile_inspector.CheckInReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.displayName = 'proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.ListCheckInLogsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.ListCheckInLogsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.ListCheckInLogsReq.displayName = 'proto.ticket.mobile_inspector.ListCheckInLogsReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.GetTicketByCodeReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.GetTicketByCodeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.GetTicketByCodeReq.displayName = 'proto.ticket.mobile_inspector.GetTicketByCodeReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.GetTicketByPhoneReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.GetTicketByPhoneReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.GetTicketByPhoneReq.displayName = 'proto.ticket.mobile_inspector.GetTicketByPhoneReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.GetTicketByEmailReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.GetTicketByEmailReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.GetTicketByEmailReq.displayName = 'proto.ticket.mobile_inspector.GetTicketByEmailReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.AssignCheckinEventReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.AssignCheckinEventReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.AssignCheckinEventReq.displayName = 'proto.ticket.mobile_inspector.AssignCheckinEventReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.GetCurrentCheckinEventReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.GetCurrentCheckinEventReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.GetCurrentCheckinEventReq.displayName = 'proto.ticket.mobile_inspector.GetCurrentCheckinEventReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.GetUpcomingCheckinEventReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.GetUpcomingCheckinEventReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.GetUpcomingCheckinEventReq.displayName = 'proto.ticket.mobile_inspector.GetUpcomingCheckinEventReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.MappingUserInfoToTicketReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.displayName = 'proto.ticket.mobile_inspector.MappingUserInfoToTicketReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.ListCheckInLogsRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.mobile_inspector.ListCheckInLogsRes.repeatedFields_, null);
};
goog.inherits(proto.ticket.mobile_inspector.ListCheckInLogsRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.ListCheckInLogsRes.displayName = 'proto.ticket.mobile_inspector.ListCheckInLogsRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.GetTicketByPhoneRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.GetTicketByPhoneRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.GetTicketByPhoneRes.displayName = 'proto.ticket.mobile_inspector.GetTicketByPhoneRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.GetTicketByEmailRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.GetTicketByEmailRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.GetTicketByEmailRes.displayName = 'proto.ticket.mobile_inspector.GetTicketByEmailRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.GetTicketByCodeRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.GetTicketByCodeRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.GetTicketByCodeRes.displayName = 'proto.ticket.mobile_inspector.GetTicketByCodeRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.GetCurrentCheckinEventRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile_inspector.GetCurrentCheckinEventRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.GetCurrentCheckinEventRes.displayName = 'proto.ticket.mobile_inspector.GetCurrentCheckinEventRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes.repeatedFields_, null);
};
goog.inherits(proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes.displayName = 'proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.InspectorTicketInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.InspectorTicketInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 3, 0),
    orderId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    eventInfo: (f = msg.getEventInfo()) && proto.ticket.mobile_inspector.InspectorTicketEventInfo.toObject(includeInstance, f),
    seatInfo: (f = msg.getSeatInfo()) && proto.ticket.mobile_inspector.InspectorTicketSeatInfo.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 7, 0),
    secretCode: jspb.Message.getFieldWithDefault(msg, 8, ""),
    verificationCode: jspb.Message.getFieldWithDefault(msg, 9, ""),
    userInfo: (f = msg.getUserInfo()) && proto.ticket.mobile_inspector.InspectorTicketUserInfo.toObject(includeInstance, f),
    isEnabledVerificationCode: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    partnershipId: jspb.Message.getFieldWithDefault(msg, 12, ""),
    ticketType: jspb.Message.getFieldWithDefault(msg, 13, 0),
    ownerId: jspb.Message.getFieldWithDefault(msg, 14, ""),
    note: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketInfo}
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.InspectorTicketInfo;
  return proto.ticket.mobile_inspector.InspectorTicketInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.InspectorTicketInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketInfo}
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatedAt(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderId(value);
      break;
    case 5:
      var value = new proto.ticket.mobile_inspector.InspectorTicketEventInfo;
      reader.readMessage(value,proto.ticket.mobile_inspector.InspectorTicketEventInfo.deserializeBinaryFromReader);
      msg.setEventInfo(value);
      break;
    case 6:
      var value = new proto.ticket.mobile_inspector.InspectorTicketSeatInfo;
      reader.readMessage(value,proto.ticket.mobile_inspector.InspectorTicketSeatInfo.deserializeBinaryFromReader);
      msg.setSeatInfo(value);
      break;
    case 7:
      var value = /** @type {!proto.ticket.mobile_inspector.InspectorTicketStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretCode(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerificationCode(value);
      break;
    case 10:
      var value = new proto.ticket.mobile_inspector.InspectorTicketUserInfo;
      reader.readMessage(value,proto.ticket.mobile_inspector.InspectorTicketUserInfo.deserializeBinaryFromReader);
      msg.setUserInfo(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsEnabledVerificationCode(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnershipId(value);
      break;
    case 13:
      var value = /** @type {!proto.ticket.mobile_inspector.InspectorTicketType} */ (reader.readEnum());
      msg.setTicketType(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerId(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.InspectorTicketInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.InspectorTicketInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getOrderId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEventInfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ticket.mobile_inspector.InspectorTicketEventInfo.serializeBinaryToWriter
    );
  }
  f = message.getSeatInfo();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.ticket.mobile_inspector.InspectorTicketSeatInfo.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getSecretCode();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getVerificationCode();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getUserInfo();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.ticket.mobile_inspector.InspectorTicketUserInfo.serializeBinaryToWriter
    );
  }
  f = message.getIsEnabledVerificationCode();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getPartnershipId();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getTicketType();
  if (f !== 0.0) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getOwnerId();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 created_at = 2;
 * @return {number}
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 updated_at = 3;
 * @return {number}
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string order_id = 4;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.getOrderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.setOrderId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional InspectorTicketEventInfo event_info = 5;
 * @return {?proto.ticket.mobile_inspector.InspectorTicketEventInfo}
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.getEventInfo = function() {
  return /** @type{?proto.ticket.mobile_inspector.InspectorTicketEventInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile_inspector.InspectorTicketEventInfo, 5));
};


/**
 * @param {?proto.ticket.mobile_inspector.InspectorTicketEventInfo|undefined} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketInfo} returns this
*/
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.setEventInfo = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.clearEventInfo = function() {
  return this.setEventInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.hasEventInfo = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional InspectorTicketSeatInfo seat_info = 6;
 * @return {?proto.ticket.mobile_inspector.InspectorTicketSeatInfo}
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.getSeatInfo = function() {
  return /** @type{?proto.ticket.mobile_inspector.InspectorTicketSeatInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile_inspector.InspectorTicketSeatInfo, 6));
};


/**
 * @param {?proto.ticket.mobile_inspector.InspectorTicketSeatInfo|undefined} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketInfo} returns this
*/
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.setSeatInfo = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.clearSeatInfo = function() {
  return this.setSeatInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.hasSeatInfo = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional InspectorTicketStatus status = 7;
 * @return {!proto.ticket.mobile_inspector.InspectorTicketStatus}
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.getStatus = function() {
  return /** @type {!proto.ticket.mobile_inspector.InspectorTicketStatus} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.ticket.mobile_inspector.InspectorTicketStatus} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional string secret_code = 8;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.getSecretCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.setSecretCode = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string verification_code = 9;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.getVerificationCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.setVerificationCode = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional InspectorTicketUserInfo user_info = 10;
 * @return {?proto.ticket.mobile_inspector.InspectorTicketUserInfo}
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.getUserInfo = function() {
  return /** @type{?proto.ticket.mobile_inspector.InspectorTicketUserInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile_inspector.InspectorTicketUserInfo, 10));
};


/**
 * @param {?proto.ticket.mobile_inspector.InspectorTicketUserInfo|undefined} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketInfo} returns this
*/
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.setUserInfo = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.clearUserInfo = function() {
  return this.setUserInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.hasUserInfo = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool is_enabled_verification_code = 11;
 * @return {boolean}
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.getIsEnabledVerificationCode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.setIsEnabledVerificationCode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional string partnership_id = 12;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.getPartnershipId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.setPartnershipId = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional InspectorTicketType ticket_type = 13;
 * @return {!proto.ticket.mobile_inspector.InspectorTicketType}
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.getTicketType = function() {
  return /** @type {!proto.ticket.mobile_inspector.InspectorTicketType} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {!proto.ticket.mobile_inspector.InspectorTicketType} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.setTicketType = function(value) {
  return jspb.Message.setProto3EnumField(this, 13, value);
};


/**
 * optional string owner_id = 14;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.getOwnerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.setOwnerId = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string note = 15;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketInfo.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 3, ""),
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    currency: (f = msg.getCurrency()) && proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo}
 */
proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo;
  return proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo}
 */
proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 5:
      var value = new proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo;
      reader.readMessage(value,proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo.deserializeBinaryFromReader);
      msg.setCurrency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getCurrency();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string icon = 3;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double price = 4;
 * @return {number}
 */
proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo.prototype.setPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional InspectorTicketCurrencyInfo currency = 5;
 * @return {?proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo}
 */
proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo.prototype.getCurrency = function() {
  return /** @type{?proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo, 5));
};


/**
 * @param {?proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo|undefined} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo} returns this
*/
proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo.prototype.setCurrency = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo.prototype.clearCurrency = function() {
  return this.setCurrency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo.prototype.hasCurrency = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo}
 */
proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo;
  return proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo}
 */
proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string icon = 3;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCurrencyInfo.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.InspectorTicketEventLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.InspectorTicketEventLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.InspectorTicketEventLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.InspectorTicketEventLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ward: jspb.Message.getFieldWithDefault(msg, 3, ""),
    district: jspb.Message.getFieldWithDefault(msg, 4, ""),
    city: jspb.Message.getFieldWithDefault(msg, 5, ""),
    country: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketEventLocation}
 */
proto.ticket.mobile_inspector.InspectorTicketEventLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.InspectorTicketEventLocation;
  return proto.ticket.mobile_inspector.InspectorTicketEventLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.InspectorTicketEventLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketEventLocation}
 */
proto.ticket.mobile_inspector.InspectorTicketEventLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWard(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDistrict(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.InspectorTicketEventLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.InspectorTicketEventLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.InspectorTicketEventLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.InspectorTicketEventLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWard();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDistrict();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketEventLocation.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketEventLocation} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketEventLocation.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketEventLocation.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketEventLocation} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketEventLocation.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ward = 3;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketEventLocation.prototype.getWard = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketEventLocation} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketEventLocation.prototype.setWard = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string district = 4;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketEventLocation.prototype.getDistrict = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketEventLocation} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketEventLocation.prototype.setDistrict = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string city = 5;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketEventLocation.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketEventLocation} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketEventLocation.prototype.setCity = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string country = 6;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketEventLocation.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketEventLocation} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketEventLocation.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.InspectorTicketEventInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.InspectorTicketEventInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.InspectorTicketEventInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.InspectorTicketEventInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    startTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    checkinStartTime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    checkinEndTime: jspb.Message.getFieldWithDefault(msg, 6, 0),
    location: (f = msg.getLocation()) && proto.ticket.mobile_inspector.InspectorTicketEventLocation.toObject(includeInstance, f),
    timezone: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketEventInfo}
 */
proto.ticket.mobile_inspector.InspectorTicketEventInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.InspectorTicketEventInfo;
  return proto.ticket.mobile_inspector.InspectorTicketEventInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.InspectorTicketEventInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketEventInfo}
 */
proto.ticket.mobile_inspector.InspectorTicketEventInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCheckinStartTime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCheckinEndTime(value);
      break;
    case 7:
      var value = new proto.ticket.mobile_inspector.InspectorTicketEventLocation;
      reader.readMessage(value,proto.ticket.mobile_inspector.InspectorTicketEventLocation.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimezone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.InspectorTicketEventInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.InspectorTicketEventInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.InspectorTicketEventInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.InspectorTicketEventInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getCheckinStartTime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCheckinEndTime();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ticket.mobile_inspector.InspectorTicketEventLocation.serializeBinaryToWriter
    );
  }
  f = message.getTimezone();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string event_id = 1;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketEventInfo.prototype.getEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketEventInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketEventInfo.prototype.setEventId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketEventInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketEventInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketEventInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 start_time = 3;
 * @return {number}
 */
proto.ticket.mobile_inspector.InspectorTicketEventInfo.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketEventInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketEventInfo.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 end_time = 4;
 * @return {number}
 */
proto.ticket.mobile_inspector.InspectorTicketEventInfo.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketEventInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketEventInfo.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 checkin_start_time = 5;
 * @return {number}
 */
proto.ticket.mobile_inspector.InspectorTicketEventInfo.prototype.getCheckinStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketEventInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketEventInfo.prototype.setCheckinStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 checkin_end_time = 6;
 * @return {number}
 */
proto.ticket.mobile_inspector.InspectorTicketEventInfo.prototype.getCheckinEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketEventInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketEventInfo.prototype.setCheckinEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional InspectorTicketEventLocation location = 7;
 * @return {?proto.ticket.mobile_inspector.InspectorTicketEventLocation}
 */
proto.ticket.mobile_inspector.InspectorTicketEventInfo.prototype.getLocation = function() {
  return /** @type{?proto.ticket.mobile_inspector.InspectorTicketEventLocation} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile_inspector.InspectorTicketEventLocation, 7));
};


/**
 * @param {?proto.ticket.mobile_inspector.InspectorTicketEventLocation|undefined} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketEventInfo} returns this
*/
proto.ticket.mobile_inspector.InspectorTicketEventInfo.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketEventInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketEventInfo.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile_inspector.InspectorTicketEventInfo.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string timezone = 8;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketEventInfo.prototype.getTimezone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketEventInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketEventInfo.prototype.setTimezone = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.repeatedFields_ = [11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    startTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    checkinStartTime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    checkinEndTime: jspb.Message.getFieldWithDefault(msg, 6, 0),
    location: (f = msg.getLocation()) && proto.ticket.mobile_inspector.InspectorTicketEventLocation.toObject(includeInstance, f),
    timezone: jspb.Message.getFieldWithDefault(msg, 8, ""),
    partnershipId: jspb.Message.getFieldWithDefault(msg, 9, ""),
    generalSeatMapId: jspb.Message.getFieldWithDefault(msg, 10, ""),
    mediasList: jspb.Message.toObjectList(msg.getMediasList(),
    ticket_mobile_inspector_base_pb.Media.toObject, includeInstance),
    seatMapUrl: jspb.Message.getFieldWithDefault(msg, 12, ""),
    instructionUrl: jspb.Message.getFieldWithDefault(msg, 13, ""),
    safetyFormUrl: jspb.Message.getFieldWithDefault(msg, 14, ""),
    isLive: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    generalSeatMapName: jspb.Message.getFieldWithDefault(msg, 16, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo;
  return proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCheckinStartTime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCheckinEndTime(value);
      break;
    case 7:
      var value = new proto.ticket.mobile_inspector.InspectorTicketEventLocation;
      reader.readMessage(value,proto.ticket.mobile_inspector.InspectorTicketEventLocation.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimezone(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnershipId(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setGeneralSeatMapId(value);
      break;
    case 11:
      var value = new ticket_mobile_inspector_base_pb.Media;
      reader.readMessage(value,ticket_mobile_inspector_base_pb.Media.deserializeBinaryFromReader);
      msg.addMedias(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatMapUrl(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstructionUrl(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setSafetyFormUrl(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsLive(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setGeneralSeatMapName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getCheckinStartTime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCheckinEndTime();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ticket.mobile_inspector.InspectorTicketEventLocation.serializeBinaryToWriter
    );
  }
  f = message.getTimezone();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getPartnershipId();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getGeneralSeatMapId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getMediasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      ticket_mobile_inspector_base_pb.Media.serializeBinaryToWriter
    );
  }
  f = message.getSeatMapUrl();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getInstructionUrl();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getSafetyFormUrl();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getIsLive();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getGeneralSeatMapName();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
};


/**
 * optional string event_id = 1;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.getEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.setEventId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 start_time = 3;
 * @return {number}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 end_time = 4;
 * @return {number}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 checkin_start_time = 5;
 * @return {number}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.getCheckinStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.setCheckinStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 checkin_end_time = 6;
 * @return {number}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.getCheckinEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.setCheckinEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional InspectorTicketEventLocation location = 7;
 * @return {?proto.ticket.mobile_inspector.InspectorTicketEventLocation}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.getLocation = function() {
  return /** @type{?proto.ticket.mobile_inspector.InspectorTicketEventLocation} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile_inspector.InspectorTicketEventLocation, 7));
};


/**
 * @param {?proto.ticket.mobile_inspector.InspectorTicketEventLocation|undefined} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo} returns this
*/
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string timezone = 8;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.getTimezone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.setTimezone = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string partnership_id = 9;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.getPartnershipId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.setPartnershipId = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string general_seat_map_id = 10;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.getGeneralSeatMapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.setGeneralSeatMapId = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * repeated Media medias = 11;
 * @return {!Array<!proto.ticket.mobile_inspector.Media>}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.getMediasList = function() {
  return /** @type{!Array<!proto.ticket.mobile_inspector.Media>} */ (
    jspb.Message.getRepeatedWrapperField(this, ticket_mobile_inspector_base_pb.Media, 11));
};


/**
 * @param {!Array<!proto.ticket.mobile_inspector.Media>} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo} returns this
*/
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.setMediasList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.ticket.mobile_inspector.Media=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.mobile_inspector.Media}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.addMedias = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.ticket.mobile_inspector.Media, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.clearMediasList = function() {
  return this.setMediasList([]);
};


/**
 * optional string seat_map_url = 12;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.getSeatMapUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.setSeatMapUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string instruction_url = 13;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.getInstructionUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.setInstructionUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string safety_form_url = 14;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.getSafetyFormUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.setSafetyFormUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional bool is_live = 15;
 * @return {boolean}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.getIsLive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.setIsLive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional string general_seat_map_name = 16;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.getGeneralSeatMapName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.prototype.setGeneralSeatMapName = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.repeatedFields_ = [11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    startTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    checkinStartTime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    checkinEndTime: jspb.Message.getFieldWithDefault(msg, 6, 0),
    location: (f = msg.getLocation()) && proto.ticket.mobile_inspector.InspectorTicketEventLocation.toObject(includeInstance, f),
    timezone: jspb.Message.getFieldWithDefault(msg, 8, ""),
    partnershipId: jspb.Message.getFieldWithDefault(msg, 9, ""),
    generalSeatMapId: jspb.Message.getFieldWithDefault(msg, 10, ""),
    mediasList: jspb.Message.toObjectList(msg.getMediasList(),
    ticket_mobile_inspector_base_pb.Media.toObject, includeInstance),
    generalSeatMapName: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo;
  return proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCheckinStartTime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCheckinEndTime(value);
      break;
    case 7:
      var value = new proto.ticket.mobile_inspector.InspectorTicketEventLocation;
      reader.readMessage(value,proto.ticket.mobile_inspector.InspectorTicketEventLocation.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimezone(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnershipId(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setGeneralSeatMapId(value);
      break;
    case 11:
      var value = new ticket_mobile_inspector_base_pb.Media;
      reader.readMessage(value,ticket_mobile_inspector_base_pb.Media.deserializeBinaryFromReader);
      msg.addMedias(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setGeneralSeatMapName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getCheckinStartTime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCheckinEndTime();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ticket.mobile_inspector.InspectorTicketEventLocation.serializeBinaryToWriter
    );
  }
  f = message.getTimezone();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getPartnershipId();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getGeneralSeatMapId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getMediasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      ticket_mobile_inspector_base_pb.Media.serializeBinaryToWriter
    );
  }
  f = message.getGeneralSeatMapName();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string event_id = 1;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.getEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.setEventId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 start_time = 3;
 * @return {number}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 end_time = 4;
 * @return {number}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 checkin_start_time = 5;
 * @return {number}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.getCheckinStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.setCheckinStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 checkin_end_time = 6;
 * @return {number}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.getCheckinEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.setCheckinEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional InspectorTicketEventLocation location = 7;
 * @return {?proto.ticket.mobile_inspector.InspectorTicketEventLocation}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.getLocation = function() {
  return /** @type{?proto.ticket.mobile_inspector.InspectorTicketEventLocation} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile_inspector.InspectorTicketEventLocation, 7));
};


/**
 * @param {?proto.ticket.mobile_inspector.InspectorTicketEventLocation|undefined} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo} returns this
*/
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string timezone = 8;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.getTimezone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.setTimezone = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string partnership_id = 9;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.getPartnershipId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.setPartnershipId = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string general_seat_map_id = 10;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.getGeneralSeatMapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.setGeneralSeatMapId = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * repeated Media medias = 11;
 * @return {!Array<!proto.ticket.mobile_inspector.Media>}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.getMediasList = function() {
  return /** @type{!Array<!proto.ticket.mobile_inspector.Media>} */ (
    jspb.Message.getRepeatedWrapperField(this, ticket_mobile_inspector_base_pb.Media, 11));
};


/**
 * @param {!Array<!proto.ticket.mobile_inspector.Media>} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo} returns this
*/
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.setMediasList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.ticket.mobile_inspector.Media=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.mobile_inspector.Media}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.addMedias = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.ticket.mobile_inspector.Media, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.clearMediasList = function() {
  return this.setMediasList([]);
};


/**
 * optional string general_seat_map_name = 12;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.getGeneralSeatMapName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.prototype.setGeneralSeatMapName = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.InspectorTicketUserInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.InspectorTicketUserInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.InspectorTicketUserInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.InspectorTicketUserInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userFullName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userPhone: jspb.Message.getFieldWithDefault(msg, 3, ""),
    userEmail: jspb.Message.getFieldWithDefault(msg, 4, ""),
    userAddress: jspb.Message.getFieldWithDefault(msg, 5, ""),
    userImage: jspb.Message.getFieldWithDefault(msg, 6, ""),
    userPhoneCode: jspb.Message.getFieldWithDefault(msg, 7, ""),
    isDeclaredCovid: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    userInspectorImage: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketUserInfo}
 */
proto.ticket.mobile_inspector.InspectorTicketUserInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.InspectorTicketUserInfo;
  return proto.ticket.mobile_inspector.InspectorTicketUserInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.InspectorTicketUserInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketUserInfo}
 */
proto.ticket.mobile_inspector.InspectorTicketUserInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserFullName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserPhone(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserEmail(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserAddress(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserImage(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserPhoneCode(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDeclaredCovid(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserInspectorImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.InspectorTicketUserInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.InspectorTicketUserInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.InspectorTicketUserInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.InspectorTicketUserInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserFullName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserPhone();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUserEmail();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUserAddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUserImage();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUserPhoneCode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getIsDeclaredCovid();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getUserInspectorImage();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketUserInfo.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketUserInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketUserInfo.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_full_name = 2;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketUserInfo.prototype.getUserFullName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketUserInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketUserInfo.prototype.setUserFullName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string user_phone = 3;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketUserInfo.prototype.getUserPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketUserInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketUserInfo.prototype.setUserPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string user_email = 4;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketUserInfo.prototype.getUserEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketUserInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketUserInfo.prototype.setUserEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string user_address = 5;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketUserInfo.prototype.getUserAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketUserInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketUserInfo.prototype.setUserAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string user_image = 6;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketUserInfo.prototype.getUserImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketUserInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketUserInfo.prototype.setUserImage = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string user_phone_code = 7;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketUserInfo.prototype.getUserPhoneCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketUserInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketUserInfo.prototype.setUserPhoneCode = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool is_declared_covid = 8;
 * @return {boolean}
 */
proto.ticket.mobile_inspector.InspectorTicketUserInfo.prototype.getIsDeclaredCovid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketUserInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketUserInfo.prototype.setIsDeclaredCovid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string user_inspector_image = 9;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketUserInfo.prototype.getUserInspectorImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketUserInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketUserInfo.prototype.setUserInspectorImage = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.InspectorTicketSeatInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.InspectorTicketSeatInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.InspectorTicketSeatInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.InspectorTicketSeatInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    price: (f = msg.getPrice()) && proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo.toObject(includeInstance, f),
    priceBlockId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    priceBlockName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    generalSeatMapId: jspb.Message.getFieldWithDefault(msg, 6, ""),
    generalSeatMapName: jspb.Message.getFieldWithDefault(msg, 7, ""),
    seatTypeName: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketSeatInfo}
 */
proto.ticket.mobile_inspector.InspectorTicketSeatInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.InspectorTicketSeatInfo;
  return proto.ticket.mobile_inspector.InspectorTicketSeatInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.InspectorTicketSeatInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketSeatInfo}
 */
proto.ticket.mobile_inspector.InspectorTicketSeatInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo;
      reader.readMessage(value,proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo.deserializeBinaryFromReader);
      msg.setPrice(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriceBlockId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriceBlockName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setGeneralSeatMapId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setGeneralSeatMapName(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatTypeName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.InspectorTicketSeatInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.InspectorTicketSeatInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.InspectorTicketSeatInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.InspectorTicketSeatInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPrice();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo.serializeBinaryToWriter
    );
  }
  f = message.getPriceBlockId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPriceBlockName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getGeneralSeatMapId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getGeneralSeatMapName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSeatTypeName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketSeatInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketSeatInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketSeatInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketSeatInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketSeatInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketSeatInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional InspectorTicketPriceSimpleInfo price = 3;
 * @return {?proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo}
 */
proto.ticket.mobile_inspector.InspectorTicketSeatInfo.prototype.getPrice = function() {
  return /** @type{?proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo, 3));
};


/**
 * @param {?proto.ticket.mobile_inspector.InspectorTicketPriceSimpleInfo|undefined} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketSeatInfo} returns this
*/
proto.ticket.mobile_inspector.InspectorTicketSeatInfo.prototype.setPrice = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile_inspector.InspectorTicketSeatInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketSeatInfo.prototype.clearPrice = function() {
  return this.setPrice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile_inspector.InspectorTicketSeatInfo.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string price_block_id = 4;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketSeatInfo.prototype.getPriceBlockId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketSeatInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketSeatInfo.prototype.setPriceBlockId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string price_block_name = 5;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketSeatInfo.prototype.getPriceBlockName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketSeatInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketSeatInfo.prototype.setPriceBlockName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string general_seat_map_id = 6;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketSeatInfo.prototype.getGeneralSeatMapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketSeatInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketSeatInfo.prototype.setGeneralSeatMapId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string general_seat_map_name = 7;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketSeatInfo.prototype.getGeneralSeatMapName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketSeatInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketSeatInfo.prototype.setGeneralSeatMapName = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string seat_type_name = 8;
 * @return {string}
 */
proto.ticket.mobile_inspector.InspectorTicketSeatInfo.prototype.getSeatTypeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.InspectorTicketSeatInfo} returns this
 */
proto.ticket.mobile_inspector.InspectorTicketSeatInfo.prototype.setSeatTypeName = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.CheckInLogInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.CheckInLogInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.CheckInLogInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.CheckInLogInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticketId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    time: jspb.Message.getFieldWithDefault(msg, 3, 0),
    partnershipId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.CheckInLogInfo}
 */
proto.ticket.mobile_inspector.CheckInLogInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.CheckInLogInfo;
  return proto.ticket.mobile_inspector.CheckInLogInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.CheckInLogInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.CheckInLogInfo}
 */
proto.ticket.mobile_inspector.CheckInLogInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicketId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnershipId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.CheckInLogInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.CheckInLogInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.CheckInLogInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.CheckInLogInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getPartnershipId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string ticket_id = 1;
 * @return {string}
 */
proto.ticket.mobile_inspector.CheckInLogInfo.prototype.getTicketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.CheckInLogInfo} returns this
 */
proto.ticket.mobile_inspector.CheckInLogInfo.prototype.setTicketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.ticket.mobile_inspector.CheckInLogInfo.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.CheckInLogInfo} returns this
 */
proto.ticket.mobile_inspector.CheckInLogInfo.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 time = 3;
 * @return {number}
 */
proto.ticket.mobile_inspector.CheckInLogInfo.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile_inspector.CheckInLogInfo} returns this
 */
proto.ticket.mobile_inspector.CheckInLogInfo.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string partnership_id = 4;
 * @return {string}
 */
proto.ticket.mobile_inspector.CheckInLogInfo.prototype.getPartnershipId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.CheckInLogInfo} returns this
 */
proto.ticket.mobile_inspector.CheckInLogInfo.prototype.setPartnershipId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.CheckInReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.CheckInReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.CheckInReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.CheckInReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticketId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    verificationCode: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.CheckInReq}
 */
proto.ticket.mobile_inspector.CheckInReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.CheckInReq;
  return proto.ticket.mobile_inspector.CheckInReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.CheckInReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.CheckInReq}
 */
proto.ticket.mobile_inspector.CheckInReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicketId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerificationCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.CheckInReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.CheckInReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.CheckInReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.CheckInReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVerificationCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string ticket_id = 1;
 * @return {string}
 */
proto.ticket.mobile_inspector.CheckInReq.prototype.getTicketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.CheckInReq} returns this
 */
proto.ticket.mobile_inspector.CheckInReq.prototype.setTicketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string verification_code = 2;
 * @return {string}
 */
proto.ticket.mobile_inspector.CheckInReq.prototype.getVerificationCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.CheckInReq} returns this
 */
proto.ticket.mobile_inspector.CheckInReq.prototype.setVerificationCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticketId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userFullName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userPhone: jspb.Message.getFieldWithDefault(msg, 3, ""),
    userEmail: jspb.Message.getFieldWithDefault(msg, 4, ""),
    userAddress: jspb.Message.getFieldWithDefault(msg, 5, ""),
    userImage: jspb.Message.getFieldWithDefault(msg, 6, ""),
    userPhoneCode: jspb.Message.getFieldWithDefault(msg, 7, ""),
    verificationCode: jspb.Message.getFieldWithDefault(msg, 8, ""),
    userInspectorImage: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq}
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq;
  return proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq}
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicketId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserFullName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserPhone(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserEmail(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserAddress(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserImage(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserPhoneCode(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerificationCode(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserInspectorImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserFullName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserPhone();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUserEmail();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUserAddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUserImage();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUserPhoneCode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getVerificationCode();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getUserInspectorImage();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string ticket_id = 1;
 * @return {string}
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.prototype.getTicketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq} returns this
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.prototype.setTicketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_full_name = 2;
 * @return {string}
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.prototype.getUserFullName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq} returns this
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.prototype.setUserFullName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string user_phone = 3;
 * @return {string}
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.prototype.getUserPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq} returns this
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.prototype.setUserPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string user_email = 4;
 * @return {string}
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.prototype.getUserEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq} returns this
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.prototype.setUserEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string user_address = 5;
 * @return {string}
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.prototype.getUserAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq} returns this
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.prototype.setUserAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string user_image = 6;
 * @return {string}
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.prototype.getUserImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq} returns this
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.prototype.setUserImage = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string user_phone_code = 7;
 * @return {string}
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.prototype.getUserPhoneCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq} returns this
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.prototype.setUserPhoneCode = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string verification_code = 8;
 * @return {string}
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.prototype.getVerificationCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq} returns this
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.prototype.setVerificationCode = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string user_inspector_image = 9;
 * @return {string}
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.prototype.getUserInspectorImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq} returns this
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketAndCheckInReq.prototype.setUserInspectorImage = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.ListCheckInLogsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.ListCheckInLogsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.ListCheckInLogsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.ListCheckInLogsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticketId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partnershipId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.ListCheckInLogsReq}
 */
proto.ticket.mobile_inspector.ListCheckInLogsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.ListCheckInLogsReq;
  return proto.ticket.mobile_inspector.ListCheckInLogsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.ListCheckInLogsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.ListCheckInLogsReq}
 */
proto.ticket.mobile_inspector.ListCheckInLogsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicketId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnershipId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.ListCheckInLogsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.ListCheckInLogsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.ListCheckInLogsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.ListCheckInLogsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartnershipId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string ticket_id = 1;
 * @return {string}
 */
proto.ticket.mobile_inspector.ListCheckInLogsReq.prototype.getTicketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.ListCheckInLogsReq} returns this
 */
proto.ticket.mobile_inspector.ListCheckInLogsReq.prototype.setTicketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string partnership_id = 2;
 * @return {string}
 */
proto.ticket.mobile_inspector.ListCheckInLogsReq.prototype.getPartnershipId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.ListCheckInLogsReq} returns this
 */
proto.ticket.mobile_inspector.ListCheckInLogsReq.prototype.setPartnershipId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.GetTicketByCodeReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.GetTicketByCodeReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.GetTicketByCodeReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.GetTicketByCodeReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partnershipId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.GetTicketByCodeReq}
 */
proto.ticket.mobile_inspector.GetTicketByCodeReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.GetTicketByCodeReq;
  return proto.ticket.mobile_inspector.GetTicketByCodeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.GetTicketByCodeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.GetTicketByCodeReq}
 */
proto.ticket.mobile_inspector.GetTicketByCodeReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnershipId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.GetTicketByCodeReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.GetTicketByCodeReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.GetTicketByCodeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.GetTicketByCodeReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartnershipId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string secret_code = 1;
 * @return {string}
 */
proto.ticket.mobile_inspector.GetTicketByCodeReq.prototype.getSecretCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.GetTicketByCodeReq} returns this
 */
proto.ticket.mobile_inspector.GetTicketByCodeReq.prototype.setSecretCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string partnership_id = 2;
 * @return {string}
 */
proto.ticket.mobile_inspector.GetTicketByCodeReq.prototype.getPartnershipId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.GetTicketByCodeReq} returns this
 */
proto.ticket.mobile_inspector.GetTicketByCodeReq.prototype.setPartnershipId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.GetTicketByPhoneReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.GetTicketByPhoneReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.GetTicketByPhoneReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.GetTicketByPhoneReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userPhone: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userPhoneCode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    verificationCode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    partnershipId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.GetTicketByPhoneReq}
 */
proto.ticket.mobile_inspector.GetTicketByPhoneReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.GetTicketByPhoneReq;
  return proto.ticket.mobile_inspector.GetTicketByPhoneReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.GetTicketByPhoneReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.GetTicketByPhoneReq}
 */
proto.ticket.mobile_inspector.GetTicketByPhoneReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserPhone(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserPhoneCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerificationCode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnershipId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.GetTicketByPhoneReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.GetTicketByPhoneReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.GetTicketByPhoneReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.GetTicketByPhoneReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserPhone();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserPhoneCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVerificationCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPartnershipId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string user_phone = 1;
 * @return {string}
 */
proto.ticket.mobile_inspector.GetTicketByPhoneReq.prototype.getUserPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.GetTicketByPhoneReq} returns this
 */
proto.ticket.mobile_inspector.GetTicketByPhoneReq.prototype.setUserPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_phone_code = 2;
 * @return {string}
 */
proto.ticket.mobile_inspector.GetTicketByPhoneReq.prototype.getUserPhoneCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.GetTicketByPhoneReq} returns this
 */
proto.ticket.mobile_inspector.GetTicketByPhoneReq.prototype.setUserPhoneCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string verification_code = 3;
 * @return {string}
 */
proto.ticket.mobile_inspector.GetTicketByPhoneReq.prototype.getVerificationCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.GetTicketByPhoneReq} returns this
 */
proto.ticket.mobile_inspector.GetTicketByPhoneReq.prototype.setVerificationCode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string partnership_id = 4;
 * @return {string}
 */
proto.ticket.mobile_inspector.GetTicketByPhoneReq.prototype.getPartnershipId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.GetTicketByPhoneReq} returns this
 */
proto.ticket.mobile_inspector.GetTicketByPhoneReq.prototype.setPartnershipId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.GetTicketByEmailReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.GetTicketByEmailReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.GetTicketByEmailReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.GetTicketByEmailReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userEmail: jspb.Message.getFieldWithDefault(msg, 1, ""),
    verificationCode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    partnershipId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.GetTicketByEmailReq}
 */
proto.ticket.mobile_inspector.GetTicketByEmailReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.GetTicketByEmailReq;
  return proto.ticket.mobile_inspector.GetTicketByEmailReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.GetTicketByEmailReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.GetTicketByEmailReq}
 */
proto.ticket.mobile_inspector.GetTicketByEmailReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserEmail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerificationCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnershipId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.GetTicketByEmailReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.GetTicketByEmailReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.GetTicketByEmailReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.GetTicketByEmailReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVerificationCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPartnershipId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string user_email = 1;
 * @return {string}
 */
proto.ticket.mobile_inspector.GetTicketByEmailReq.prototype.getUserEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.GetTicketByEmailReq} returns this
 */
proto.ticket.mobile_inspector.GetTicketByEmailReq.prototype.setUserEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string verification_code = 2;
 * @return {string}
 */
proto.ticket.mobile_inspector.GetTicketByEmailReq.prototype.getVerificationCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.GetTicketByEmailReq} returns this
 */
proto.ticket.mobile_inspector.GetTicketByEmailReq.prototype.setVerificationCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string partnership_id = 3;
 * @return {string}
 */
proto.ticket.mobile_inspector.GetTicketByEmailReq.prototype.getPartnershipId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.GetTicketByEmailReq} returns this
 */
proto.ticket.mobile_inspector.GetTicketByEmailReq.prototype.setPartnershipId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.AssignCheckinEventReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.AssignCheckinEventReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.AssignCheckinEventReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.AssignCheckinEventReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    inspectorId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventInfo: (f = msg.getEventInfo()) && proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.AssignCheckinEventReq}
 */
proto.ticket.mobile_inspector.AssignCheckinEventReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.AssignCheckinEventReq;
  return proto.ticket.mobile_inspector.AssignCheckinEventReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.AssignCheckinEventReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.AssignCheckinEventReq}
 */
proto.ticket.mobile_inspector.AssignCheckinEventReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInspectorId(value);
      break;
    case 2:
      var value = new proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo;
      reader.readMessage(value,proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.deserializeBinaryFromReader);
      msg.setEventInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.AssignCheckinEventReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.AssignCheckinEventReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.AssignCheckinEventReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.AssignCheckinEventReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInspectorId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string inspector_id = 1;
 * @return {string}
 */
proto.ticket.mobile_inspector.AssignCheckinEventReq.prototype.getInspectorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.AssignCheckinEventReq} returns this
 */
proto.ticket.mobile_inspector.AssignCheckinEventReq.prototype.setInspectorId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional InspectorTicketCheckinEventAssignInfo event_info = 2;
 * @return {?proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo}
 */
proto.ticket.mobile_inspector.AssignCheckinEventReq.prototype.getEventInfo = function() {
  return /** @type{?proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo, 2));
};


/**
 * @param {?proto.ticket.mobile_inspector.InspectorTicketCheckinEventAssignInfo|undefined} value
 * @return {!proto.ticket.mobile_inspector.AssignCheckinEventReq} returns this
*/
proto.ticket.mobile_inspector.AssignCheckinEventReq.prototype.setEventInfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile_inspector.AssignCheckinEventReq} returns this
 */
proto.ticket.mobile_inspector.AssignCheckinEventReq.prototype.clearEventInfo = function() {
  return this.setEventInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile_inspector.AssignCheckinEventReq.prototype.hasEventInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.GetCurrentCheckinEventReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.GetCurrentCheckinEventReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.GetCurrentCheckinEventReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.GetCurrentCheckinEventReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.GetCurrentCheckinEventReq}
 */
proto.ticket.mobile_inspector.GetCurrentCheckinEventReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.GetCurrentCheckinEventReq;
  return proto.ticket.mobile_inspector.GetCurrentCheckinEventReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.GetCurrentCheckinEventReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.GetCurrentCheckinEventReq}
 */
proto.ticket.mobile_inspector.GetCurrentCheckinEventReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.GetCurrentCheckinEventReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.GetCurrentCheckinEventReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.GetCurrentCheckinEventReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.GetCurrentCheckinEventReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.GetUpcomingCheckinEventReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.GetUpcomingCheckinEventReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.GetUpcomingCheckinEventReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.GetUpcomingCheckinEventReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.GetUpcomingCheckinEventReq}
 */
proto.ticket.mobile_inspector.GetUpcomingCheckinEventReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.GetUpcomingCheckinEventReq;
  return proto.ticket.mobile_inspector.GetUpcomingCheckinEventReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.GetUpcomingCheckinEventReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.GetUpcomingCheckinEventReq}
 */
proto.ticket.mobile_inspector.GetUpcomingCheckinEventReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.GetUpcomingCheckinEventReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.GetUpcomingCheckinEventReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.GetUpcomingCheckinEventReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.GetUpcomingCheckinEventReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.MappingUserInfoToTicketReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticketId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userFullName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userPhone: jspb.Message.getFieldWithDefault(msg, 3, ""),
    userEmail: jspb.Message.getFieldWithDefault(msg, 4, ""),
    userAddress: jspb.Message.getFieldWithDefault(msg, 5, ""),
    userImage: jspb.Message.getFieldWithDefault(msg, 6, ""),
    userPhoneCode: jspb.Message.getFieldWithDefault(msg, 7, ""),
    verificationCode: jspb.Message.getFieldWithDefault(msg, 8, ""),
    userInspectorImage: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.MappingUserInfoToTicketReq}
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.MappingUserInfoToTicketReq;
  return proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.MappingUserInfoToTicketReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.MappingUserInfoToTicketReq}
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicketId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserFullName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserPhone(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserEmail(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserAddress(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserImage(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserPhoneCode(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerificationCode(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserInspectorImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.MappingUserInfoToTicketReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserFullName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserPhone();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUserEmail();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUserAddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUserImage();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUserPhoneCode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getVerificationCode();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getUserInspectorImage();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string ticket_id = 1;
 * @return {string}
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.prototype.getTicketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.MappingUserInfoToTicketReq} returns this
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.prototype.setTicketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_full_name = 2;
 * @return {string}
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.prototype.getUserFullName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.MappingUserInfoToTicketReq} returns this
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.prototype.setUserFullName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string user_phone = 3;
 * @return {string}
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.prototype.getUserPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.MappingUserInfoToTicketReq} returns this
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.prototype.setUserPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string user_email = 4;
 * @return {string}
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.prototype.getUserEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.MappingUserInfoToTicketReq} returns this
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.prototype.setUserEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string user_address = 5;
 * @return {string}
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.prototype.getUserAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.MappingUserInfoToTicketReq} returns this
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.prototype.setUserAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string user_image = 6;
 * @return {string}
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.prototype.getUserImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.MappingUserInfoToTicketReq} returns this
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.prototype.setUserImage = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string user_phone_code = 7;
 * @return {string}
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.prototype.getUserPhoneCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.MappingUserInfoToTicketReq} returns this
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.prototype.setUserPhoneCode = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string verification_code = 8;
 * @return {string}
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.prototype.getVerificationCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.MappingUserInfoToTicketReq} returns this
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.prototype.setVerificationCode = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string user_inspector_image = 9;
 * @return {string}
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.prototype.getUserInspectorImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile_inspector.MappingUserInfoToTicketReq} returns this
 */
proto.ticket.mobile_inspector.MappingUserInfoToTicketReq.prototype.setUserInspectorImage = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.mobile_inspector.ListCheckInLogsRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.ListCheckInLogsRes.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.ListCheckInLogsRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.ListCheckInLogsRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.ListCheckInLogsRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.ticket.mobile_inspector.CheckInLogInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.ListCheckInLogsRes}
 */
proto.ticket.mobile_inspector.ListCheckInLogsRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.ListCheckInLogsRes;
  return proto.ticket.mobile_inspector.ListCheckInLogsRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.ListCheckInLogsRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.ListCheckInLogsRes}
 */
proto.ticket.mobile_inspector.ListCheckInLogsRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.mobile_inspector.CheckInLogInfo;
      reader.readMessage(value,proto.ticket.mobile_inspector.CheckInLogInfo.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.ListCheckInLogsRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.ListCheckInLogsRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.ListCheckInLogsRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.ListCheckInLogsRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ticket.mobile_inspector.CheckInLogInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CheckInLogInfo logs = 1;
 * @return {!Array<!proto.ticket.mobile_inspector.CheckInLogInfo>}
 */
proto.ticket.mobile_inspector.ListCheckInLogsRes.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.ticket.mobile_inspector.CheckInLogInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ticket.mobile_inspector.CheckInLogInfo, 1));
};


/**
 * @param {!Array<!proto.ticket.mobile_inspector.CheckInLogInfo>} value
 * @return {!proto.ticket.mobile_inspector.ListCheckInLogsRes} returns this
*/
proto.ticket.mobile_inspector.ListCheckInLogsRes.prototype.setLogsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ticket.mobile_inspector.CheckInLogInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.mobile_inspector.CheckInLogInfo}
 */
proto.ticket.mobile_inspector.ListCheckInLogsRes.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ticket.mobile_inspector.CheckInLogInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.mobile_inspector.ListCheckInLogsRes} returns this
 */
proto.ticket.mobile_inspector.ListCheckInLogsRes.prototype.clearLogsList = function() {
  return this.setLogsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.GetTicketByPhoneRes.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.GetTicketByPhoneRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.GetTicketByPhoneRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.GetTicketByPhoneRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.ticket.mobile_inspector.InspectorTicketInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.GetTicketByPhoneRes}
 */
proto.ticket.mobile_inspector.GetTicketByPhoneRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.GetTicketByPhoneRes;
  return proto.ticket.mobile_inspector.GetTicketByPhoneRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.GetTicketByPhoneRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.GetTicketByPhoneRes}
 */
proto.ticket.mobile_inspector.GetTicketByPhoneRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.mobile_inspector.InspectorTicketInfo;
      reader.readMessage(value,proto.ticket.mobile_inspector.InspectorTicketInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.GetTicketByPhoneRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.GetTicketByPhoneRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.GetTicketByPhoneRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.GetTicketByPhoneRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ticket.mobile_inspector.InspectorTicketInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional InspectorTicketInfo info = 1;
 * @return {?proto.ticket.mobile_inspector.InspectorTicketInfo}
 */
proto.ticket.mobile_inspector.GetTicketByPhoneRes.prototype.getInfo = function() {
  return /** @type{?proto.ticket.mobile_inspector.InspectorTicketInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile_inspector.InspectorTicketInfo, 1));
};


/**
 * @param {?proto.ticket.mobile_inspector.InspectorTicketInfo|undefined} value
 * @return {!proto.ticket.mobile_inspector.GetTicketByPhoneRes} returns this
*/
proto.ticket.mobile_inspector.GetTicketByPhoneRes.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile_inspector.GetTicketByPhoneRes} returns this
 */
proto.ticket.mobile_inspector.GetTicketByPhoneRes.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile_inspector.GetTicketByPhoneRes.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.GetTicketByEmailRes.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.GetTicketByEmailRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.GetTicketByEmailRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.GetTicketByEmailRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.ticket.mobile_inspector.InspectorTicketInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.GetTicketByEmailRes}
 */
proto.ticket.mobile_inspector.GetTicketByEmailRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.GetTicketByEmailRes;
  return proto.ticket.mobile_inspector.GetTicketByEmailRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.GetTicketByEmailRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.GetTicketByEmailRes}
 */
proto.ticket.mobile_inspector.GetTicketByEmailRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.mobile_inspector.InspectorTicketInfo;
      reader.readMessage(value,proto.ticket.mobile_inspector.InspectorTicketInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.GetTicketByEmailRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.GetTicketByEmailRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.GetTicketByEmailRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.GetTicketByEmailRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ticket.mobile_inspector.InspectorTicketInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional InspectorTicketInfo info = 1;
 * @return {?proto.ticket.mobile_inspector.InspectorTicketInfo}
 */
proto.ticket.mobile_inspector.GetTicketByEmailRes.prototype.getInfo = function() {
  return /** @type{?proto.ticket.mobile_inspector.InspectorTicketInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile_inspector.InspectorTicketInfo, 1));
};


/**
 * @param {?proto.ticket.mobile_inspector.InspectorTicketInfo|undefined} value
 * @return {!proto.ticket.mobile_inspector.GetTicketByEmailRes} returns this
*/
proto.ticket.mobile_inspector.GetTicketByEmailRes.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile_inspector.GetTicketByEmailRes} returns this
 */
proto.ticket.mobile_inspector.GetTicketByEmailRes.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile_inspector.GetTicketByEmailRes.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.GetTicketByCodeRes.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.GetTicketByCodeRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.GetTicketByCodeRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.GetTicketByCodeRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.ticket.mobile_inspector.InspectorTicketInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.GetTicketByCodeRes}
 */
proto.ticket.mobile_inspector.GetTicketByCodeRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.GetTicketByCodeRes;
  return proto.ticket.mobile_inspector.GetTicketByCodeRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.GetTicketByCodeRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.GetTicketByCodeRes}
 */
proto.ticket.mobile_inspector.GetTicketByCodeRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.mobile_inspector.InspectorTicketInfo;
      reader.readMessage(value,proto.ticket.mobile_inspector.InspectorTicketInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.GetTicketByCodeRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.GetTicketByCodeRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.GetTicketByCodeRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.GetTicketByCodeRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ticket.mobile_inspector.InspectorTicketInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional InspectorTicketInfo info = 1;
 * @return {?proto.ticket.mobile_inspector.InspectorTicketInfo}
 */
proto.ticket.mobile_inspector.GetTicketByCodeRes.prototype.getInfo = function() {
  return /** @type{?proto.ticket.mobile_inspector.InspectorTicketInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile_inspector.InspectorTicketInfo, 1));
};


/**
 * @param {?proto.ticket.mobile_inspector.InspectorTicketInfo|undefined} value
 * @return {!proto.ticket.mobile_inspector.GetTicketByCodeRes} returns this
*/
proto.ticket.mobile_inspector.GetTicketByCodeRes.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile_inspector.GetTicketByCodeRes} returns this
 */
proto.ticket.mobile_inspector.GetTicketByCodeRes.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile_inspector.GetTicketByCodeRes.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.GetCurrentCheckinEventRes.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.GetCurrentCheckinEventRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.GetCurrentCheckinEventRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.GetCurrentCheckinEventRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventInfo: (f = msg.getEventInfo()) && proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.GetCurrentCheckinEventRes}
 */
proto.ticket.mobile_inspector.GetCurrentCheckinEventRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.GetCurrentCheckinEventRes;
  return proto.ticket.mobile_inspector.GetCurrentCheckinEventRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.GetCurrentCheckinEventRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.GetCurrentCheckinEventRes}
 */
proto.ticket.mobile_inspector.GetCurrentCheckinEventRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo;
      reader.readMessage(value,proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.deserializeBinaryFromReader);
      msg.setEventInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.GetCurrentCheckinEventRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.GetCurrentCheckinEventRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.GetCurrentCheckinEventRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.GetCurrentCheckinEventRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional InspectorTicketCheckinEventInfo event_info = 1;
 * @return {?proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo}
 */
proto.ticket.mobile_inspector.GetCurrentCheckinEventRes.prototype.getEventInfo = function() {
  return /** @type{?proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo, 1));
};


/**
 * @param {?proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo|undefined} value
 * @return {!proto.ticket.mobile_inspector.GetCurrentCheckinEventRes} returns this
*/
proto.ticket.mobile_inspector.GetCurrentCheckinEventRes.prototype.setEventInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile_inspector.GetCurrentCheckinEventRes} returns this
 */
proto.ticket.mobile_inspector.GetCurrentCheckinEventRes.prototype.clearEventInfo = function() {
  return this.setEventInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile_inspector.GetCurrentCheckinEventRes.prototype.hasEventInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventInfosList: jspb.Message.toObjectList(msg.getEventInfosList(),
    proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes}
 */
proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes;
  return proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes}
 */
proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo;
      reader.readMessage(value,proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.deserializeBinaryFromReader);
      msg.addEventInfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated InspectorTicketCheckinEventInfo event_infos = 1;
 * @return {!Array<!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo>}
 */
proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes.prototype.getEventInfosList = function() {
  return /** @type{!Array<!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo, 1));
};


/**
 * @param {!Array<!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo>} value
 * @return {!proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes} returns this
*/
proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes.prototype.setEventInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo}
 */
proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes.prototype.addEventInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ticket.mobile_inspector.InspectorTicketCheckinEventInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes} returns this
 */
proto.ticket.mobile_inspector.GetUpcomingCheckinEventRes.prototype.clearEventInfosList = function() {
  return this.setEventInfosList([]);
};


/**
 * @enum {number}
 */
proto.ticket.mobile_inspector.InspectorTicketStatus = {
  INSPECTOR_TICKET_STATUS_INVALID: 0,
  INSPECTOR_TICKET_STATUS_NOT_USED: 1,
  INSPECTOR_TICKET_STATUS_CHECKED_IN: 2
};

/**
 * @enum {number}
 */
proto.ticket.mobile_inspector.InspectorTicketType = {
  INSPECTOR_TICKET_TYPE_BUY: 0,
  INSPECTOR_TICKET_TYPE_RELEASE: 1,
  INSPECTOR_TICKET_TYPE_TRANSFER: 2
};

goog.object.extend(exports, proto.ticket.mobile_inspector);
