// source: ticket/mobile/transferred_ticket.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.ticket.mobile.GetMyTransferredTicketByOrderIdReq', null, global);
goog.exportSymbol('proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes', null, global);
goog.exportSymbol('proto.ticket.mobile.TransferredTicketCurrencyInfo', null, global);
goog.exportSymbol('proto.ticket.mobile.TransferredTicketEventInfo', null, global);
goog.exportSymbol('proto.ticket.mobile.TransferredTicketEventLocation', null, global);
goog.exportSymbol('proto.ticket.mobile.TransferredTicketInfo', null, global);
goog.exportSymbol('proto.ticket.mobile.TransferredTicketPriceSimpleInfo', null, global);
goog.exportSymbol('proto.ticket.mobile.TransferredTicketSeatInfo', null, global);
goog.exportSymbol('proto.ticket.mobile.TransferredTicketUserInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TransferredTicketInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.TransferredTicketInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TransferredTicketInfo.displayName = 'proto.ticket.mobile.TransferredTicketInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TransferredTicketPriceSimpleInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.TransferredTicketPriceSimpleInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TransferredTicketPriceSimpleInfo.displayName = 'proto.ticket.mobile.TransferredTicketPriceSimpleInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TransferredTicketCurrencyInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.TransferredTicketCurrencyInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TransferredTicketCurrencyInfo.displayName = 'proto.ticket.mobile.TransferredTicketCurrencyInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TransferredTicketEventLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.TransferredTicketEventLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TransferredTicketEventLocation.displayName = 'proto.ticket.mobile.TransferredTicketEventLocation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TransferredTicketEventInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.TransferredTicketEventInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TransferredTicketEventInfo.displayName = 'proto.ticket.mobile.TransferredTicketEventInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TransferredTicketUserInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.TransferredTicketUserInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TransferredTicketUserInfo.displayName = 'proto.ticket.mobile.TransferredTicketUserInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TransferredTicketSeatInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.TransferredTicketSeatInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TransferredTicketSeatInfo.displayName = 'proto.ticket.mobile.TransferredTicketSeatInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.GetMyTransferredTicketByOrderIdReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.GetMyTransferredTicketByOrderIdReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.GetMyTransferredTicketByOrderIdReq.displayName = 'proto.ticket.mobile.GetMyTransferredTicketByOrderIdReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes.repeatedFields_, null);
};
goog.inherits(proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes.displayName = 'proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TransferredTicketInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TransferredTicketInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TransferredTicketInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TransferredTicketInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 3, 0),
    orderId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    eventInfo: (f = msg.getEventInfo()) && proto.ticket.mobile.TransferredTicketEventInfo.toObject(includeInstance, f),
    seatInfo: (f = msg.getSeatInfo()) && proto.ticket.mobile.TransferredTicketSeatInfo.toObject(includeInstance, f),
    userInfo: (f = msg.getUserInfo()) && proto.ticket.mobile.TransferredTicketUserInfo.toObject(includeInstance, f),
    isEnabledVerificationCode: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    partnershipId: jspb.Message.getFieldWithDefault(msg, 9, ""),
    receiverInfo: (f = msg.getReceiverInfo()) && proto.ticket.mobile.TransferredTicketUserInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TransferredTicketInfo}
 */
proto.ticket.mobile.TransferredTicketInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TransferredTicketInfo;
  return proto.ticket.mobile.TransferredTicketInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TransferredTicketInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TransferredTicketInfo}
 */
proto.ticket.mobile.TransferredTicketInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatedAt(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderId(value);
      break;
    case 5:
      var value = new proto.ticket.mobile.TransferredTicketEventInfo;
      reader.readMessage(value,proto.ticket.mobile.TransferredTicketEventInfo.deserializeBinaryFromReader);
      msg.setEventInfo(value);
      break;
    case 6:
      var value = new proto.ticket.mobile.TransferredTicketSeatInfo;
      reader.readMessage(value,proto.ticket.mobile.TransferredTicketSeatInfo.deserializeBinaryFromReader);
      msg.setSeatInfo(value);
      break;
    case 7:
      var value = new proto.ticket.mobile.TransferredTicketUserInfo;
      reader.readMessage(value,proto.ticket.mobile.TransferredTicketUserInfo.deserializeBinaryFromReader);
      msg.setUserInfo(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsEnabledVerificationCode(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnershipId(value);
      break;
    case 10:
      var value = new proto.ticket.mobile.TransferredTicketUserInfo;
      reader.readMessage(value,proto.ticket.mobile.TransferredTicketUserInfo.deserializeBinaryFromReader);
      msg.setReceiverInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TransferredTicketInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TransferredTicketInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TransferredTicketInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TransferredTicketInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getOrderId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEventInfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ticket.mobile.TransferredTicketEventInfo.serializeBinaryToWriter
    );
  }
  f = message.getSeatInfo();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.ticket.mobile.TransferredTicketSeatInfo.serializeBinaryToWriter
    );
  }
  f = message.getUserInfo();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ticket.mobile.TransferredTicketUserInfo.serializeBinaryToWriter
    );
  }
  f = message.getIsEnabledVerificationCode();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getPartnershipId();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getReceiverInfo();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.ticket.mobile.TransferredTicketUserInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketInfo} returns this
 */
proto.ticket.mobile.TransferredTicketInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 created_at = 2;
 * @return {number}
 */
proto.ticket.mobile.TransferredTicketInfo.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.TransferredTicketInfo} returns this
 */
proto.ticket.mobile.TransferredTicketInfo.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 updated_at = 3;
 * @return {number}
 */
proto.ticket.mobile.TransferredTicketInfo.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.TransferredTicketInfo} returns this
 */
proto.ticket.mobile.TransferredTicketInfo.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string order_id = 4;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketInfo.prototype.getOrderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketInfo} returns this
 */
proto.ticket.mobile.TransferredTicketInfo.prototype.setOrderId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional TransferredTicketEventInfo event_info = 5;
 * @return {?proto.ticket.mobile.TransferredTicketEventInfo}
 */
proto.ticket.mobile.TransferredTicketInfo.prototype.getEventInfo = function() {
  return /** @type{?proto.ticket.mobile.TransferredTicketEventInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TransferredTicketEventInfo, 5));
};


/**
 * @param {?proto.ticket.mobile.TransferredTicketEventInfo|undefined} value
 * @return {!proto.ticket.mobile.TransferredTicketInfo} returns this
*/
proto.ticket.mobile.TransferredTicketInfo.prototype.setEventInfo = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.TransferredTicketInfo} returns this
 */
proto.ticket.mobile.TransferredTicketInfo.prototype.clearEventInfo = function() {
  return this.setEventInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.TransferredTicketInfo.prototype.hasEventInfo = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional TransferredTicketSeatInfo seat_info = 6;
 * @return {?proto.ticket.mobile.TransferredTicketSeatInfo}
 */
proto.ticket.mobile.TransferredTicketInfo.prototype.getSeatInfo = function() {
  return /** @type{?proto.ticket.mobile.TransferredTicketSeatInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TransferredTicketSeatInfo, 6));
};


/**
 * @param {?proto.ticket.mobile.TransferredTicketSeatInfo|undefined} value
 * @return {!proto.ticket.mobile.TransferredTicketInfo} returns this
*/
proto.ticket.mobile.TransferredTicketInfo.prototype.setSeatInfo = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.TransferredTicketInfo} returns this
 */
proto.ticket.mobile.TransferredTicketInfo.prototype.clearSeatInfo = function() {
  return this.setSeatInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.TransferredTicketInfo.prototype.hasSeatInfo = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional TransferredTicketUserInfo user_info = 7;
 * @return {?proto.ticket.mobile.TransferredTicketUserInfo}
 */
proto.ticket.mobile.TransferredTicketInfo.prototype.getUserInfo = function() {
  return /** @type{?proto.ticket.mobile.TransferredTicketUserInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TransferredTicketUserInfo, 7));
};


/**
 * @param {?proto.ticket.mobile.TransferredTicketUserInfo|undefined} value
 * @return {!proto.ticket.mobile.TransferredTicketInfo} returns this
*/
proto.ticket.mobile.TransferredTicketInfo.prototype.setUserInfo = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.TransferredTicketInfo} returns this
 */
proto.ticket.mobile.TransferredTicketInfo.prototype.clearUserInfo = function() {
  return this.setUserInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.TransferredTicketInfo.prototype.hasUserInfo = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool is_enabled_verification_code = 8;
 * @return {boolean}
 */
proto.ticket.mobile.TransferredTicketInfo.prototype.getIsEnabledVerificationCode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.mobile.TransferredTicketInfo} returns this
 */
proto.ticket.mobile.TransferredTicketInfo.prototype.setIsEnabledVerificationCode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string partnership_id = 9;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketInfo.prototype.getPartnershipId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketInfo} returns this
 */
proto.ticket.mobile.TransferredTicketInfo.prototype.setPartnershipId = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional TransferredTicketUserInfo receiver_info = 10;
 * @return {?proto.ticket.mobile.TransferredTicketUserInfo}
 */
proto.ticket.mobile.TransferredTicketInfo.prototype.getReceiverInfo = function() {
  return /** @type{?proto.ticket.mobile.TransferredTicketUserInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TransferredTicketUserInfo, 10));
};


/**
 * @param {?proto.ticket.mobile.TransferredTicketUserInfo|undefined} value
 * @return {!proto.ticket.mobile.TransferredTicketInfo} returns this
*/
proto.ticket.mobile.TransferredTicketInfo.prototype.setReceiverInfo = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.TransferredTicketInfo} returns this
 */
proto.ticket.mobile.TransferredTicketInfo.prototype.clearReceiverInfo = function() {
  return this.setReceiverInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.TransferredTicketInfo.prototype.hasReceiverInfo = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TransferredTicketPriceSimpleInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TransferredTicketPriceSimpleInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TransferredTicketPriceSimpleInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TransferredTicketPriceSimpleInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 3, ""),
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    currency: (f = msg.getCurrency()) && proto.ticket.mobile.TransferredTicketCurrencyInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TransferredTicketPriceSimpleInfo}
 */
proto.ticket.mobile.TransferredTicketPriceSimpleInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TransferredTicketPriceSimpleInfo;
  return proto.ticket.mobile.TransferredTicketPriceSimpleInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TransferredTicketPriceSimpleInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TransferredTicketPriceSimpleInfo}
 */
proto.ticket.mobile.TransferredTicketPriceSimpleInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 5:
      var value = new proto.ticket.mobile.TransferredTicketCurrencyInfo;
      reader.readMessage(value,proto.ticket.mobile.TransferredTicketCurrencyInfo.deserializeBinaryFromReader);
      msg.setCurrency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TransferredTicketPriceSimpleInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TransferredTicketPriceSimpleInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TransferredTicketPriceSimpleInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TransferredTicketPriceSimpleInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getCurrency();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ticket.mobile.TransferredTicketCurrencyInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketPriceSimpleInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketPriceSimpleInfo} returns this
 */
proto.ticket.mobile.TransferredTicketPriceSimpleInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketPriceSimpleInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketPriceSimpleInfo} returns this
 */
proto.ticket.mobile.TransferredTicketPriceSimpleInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string icon = 3;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketPriceSimpleInfo.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketPriceSimpleInfo} returns this
 */
proto.ticket.mobile.TransferredTicketPriceSimpleInfo.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double price = 4;
 * @return {number}
 */
proto.ticket.mobile.TransferredTicketPriceSimpleInfo.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.TransferredTicketPriceSimpleInfo} returns this
 */
proto.ticket.mobile.TransferredTicketPriceSimpleInfo.prototype.setPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional TransferredTicketCurrencyInfo currency = 5;
 * @return {?proto.ticket.mobile.TransferredTicketCurrencyInfo}
 */
proto.ticket.mobile.TransferredTicketPriceSimpleInfo.prototype.getCurrency = function() {
  return /** @type{?proto.ticket.mobile.TransferredTicketCurrencyInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TransferredTicketCurrencyInfo, 5));
};


/**
 * @param {?proto.ticket.mobile.TransferredTicketCurrencyInfo|undefined} value
 * @return {!proto.ticket.mobile.TransferredTicketPriceSimpleInfo} returns this
*/
proto.ticket.mobile.TransferredTicketPriceSimpleInfo.prototype.setCurrency = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.TransferredTicketPriceSimpleInfo} returns this
 */
proto.ticket.mobile.TransferredTicketPriceSimpleInfo.prototype.clearCurrency = function() {
  return this.setCurrency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.TransferredTicketPriceSimpleInfo.prototype.hasCurrency = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TransferredTicketCurrencyInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TransferredTicketCurrencyInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TransferredTicketCurrencyInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TransferredTicketCurrencyInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TransferredTicketCurrencyInfo}
 */
proto.ticket.mobile.TransferredTicketCurrencyInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TransferredTicketCurrencyInfo;
  return proto.ticket.mobile.TransferredTicketCurrencyInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TransferredTicketCurrencyInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TransferredTicketCurrencyInfo}
 */
proto.ticket.mobile.TransferredTicketCurrencyInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TransferredTicketCurrencyInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TransferredTicketCurrencyInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TransferredTicketCurrencyInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TransferredTicketCurrencyInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketCurrencyInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketCurrencyInfo} returns this
 */
proto.ticket.mobile.TransferredTicketCurrencyInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketCurrencyInfo.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketCurrencyInfo} returns this
 */
proto.ticket.mobile.TransferredTicketCurrencyInfo.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string icon = 3;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketCurrencyInfo.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketCurrencyInfo} returns this
 */
proto.ticket.mobile.TransferredTicketCurrencyInfo.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TransferredTicketEventLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TransferredTicketEventLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TransferredTicketEventLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TransferredTicketEventLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ward: jspb.Message.getFieldWithDefault(msg, 3, ""),
    district: jspb.Message.getFieldWithDefault(msg, 4, ""),
    city: jspb.Message.getFieldWithDefault(msg, 5, ""),
    country: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TransferredTicketEventLocation}
 */
proto.ticket.mobile.TransferredTicketEventLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TransferredTicketEventLocation;
  return proto.ticket.mobile.TransferredTicketEventLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TransferredTicketEventLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TransferredTicketEventLocation}
 */
proto.ticket.mobile.TransferredTicketEventLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWard(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDistrict(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TransferredTicketEventLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TransferredTicketEventLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TransferredTicketEventLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TransferredTicketEventLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWard();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDistrict();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketEventLocation.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketEventLocation} returns this
 */
proto.ticket.mobile.TransferredTicketEventLocation.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketEventLocation.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketEventLocation} returns this
 */
proto.ticket.mobile.TransferredTicketEventLocation.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ward = 3;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketEventLocation.prototype.getWard = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketEventLocation} returns this
 */
proto.ticket.mobile.TransferredTicketEventLocation.prototype.setWard = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string district = 4;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketEventLocation.prototype.getDistrict = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketEventLocation} returns this
 */
proto.ticket.mobile.TransferredTicketEventLocation.prototype.setDistrict = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string city = 5;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketEventLocation.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketEventLocation} returns this
 */
proto.ticket.mobile.TransferredTicketEventLocation.prototype.setCity = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string country = 6;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketEventLocation.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketEventLocation} returns this
 */
proto.ticket.mobile.TransferredTicketEventLocation.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TransferredTicketEventInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TransferredTicketEventInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TransferredTicketEventInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TransferredTicketEventInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    startTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    checkinStartTime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    checkinEndTime: jspb.Message.getFieldWithDefault(msg, 6, 0),
    location: (f = msg.getLocation()) && proto.ticket.mobile.TransferredTicketEventLocation.toObject(includeInstance, f),
    timezone: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TransferredTicketEventInfo}
 */
proto.ticket.mobile.TransferredTicketEventInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TransferredTicketEventInfo;
  return proto.ticket.mobile.TransferredTicketEventInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TransferredTicketEventInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TransferredTicketEventInfo}
 */
proto.ticket.mobile.TransferredTicketEventInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCheckinStartTime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCheckinEndTime(value);
      break;
    case 7:
      var value = new proto.ticket.mobile.TransferredTicketEventLocation;
      reader.readMessage(value,proto.ticket.mobile.TransferredTicketEventLocation.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimezone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TransferredTicketEventInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TransferredTicketEventInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TransferredTicketEventInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TransferredTicketEventInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getCheckinStartTime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCheckinEndTime();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ticket.mobile.TransferredTicketEventLocation.serializeBinaryToWriter
    );
  }
  f = message.getTimezone();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string event_id = 1;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketEventInfo.prototype.getEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketEventInfo} returns this
 */
proto.ticket.mobile.TransferredTicketEventInfo.prototype.setEventId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketEventInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketEventInfo} returns this
 */
proto.ticket.mobile.TransferredTicketEventInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 start_time = 3;
 * @return {number}
 */
proto.ticket.mobile.TransferredTicketEventInfo.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.TransferredTicketEventInfo} returns this
 */
proto.ticket.mobile.TransferredTicketEventInfo.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 end_time = 4;
 * @return {number}
 */
proto.ticket.mobile.TransferredTicketEventInfo.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.TransferredTicketEventInfo} returns this
 */
proto.ticket.mobile.TransferredTicketEventInfo.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 checkin_start_time = 5;
 * @return {number}
 */
proto.ticket.mobile.TransferredTicketEventInfo.prototype.getCheckinStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.TransferredTicketEventInfo} returns this
 */
proto.ticket.mobile.TransferredTicketEventInfo.prototype.setCheckinStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 checkin_end_time = 6;
 * @return {number}
 */
proto.ticket.mobile.TransferredTicketEventInfo.prototype.getCheckinEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.TransferredTicketEventInfo} returns this
 */
proto.ticket.mobile.TransferredTicketEventInfo.prototype.setCheckinEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional TransferredTicketEventLocation location = 7;
 * @return {?proto.ticket.mobile.TransferredTicketEventLocation}
 */
proto.ticket.mobile.TransferredTicketEventInfo.prototype.getLocation = function() {
  return /** @type{?proto.ticket.mobile.TransferredTicketEventLocation} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TransferredTicketEventLocation, 7));
};


/**
 * @param {?proto.ticket.mobile.TransferredTicketEventLocation|undefined} value
 * @return {!proto.ticket.mobile.TransferredTicketEventInfo} returns this
*/
proto.ticket.mobile.TransferredTicketEventInfo.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.TransferredTicketEventInfo} returns this
 */
proto.ticket.mobile.TransferredTicketEventInfo.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.TransferredTicketEventInfo.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string timezone = 8;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketEventInfo.prototype.getTimezone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketEventInfo} returns this
 */
proto.ticket.mobile.TransferredTicketEventInfo.prototype.setTimezone = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TransferredTicketUserInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TransferredTicketUserInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TransferredTicketUserInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TransferredTicketUserInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userFullName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userPhone: jspb.Message.getFieldWithDefault(msg, 3, ""),
    userEmail: jspb.Message.getFieldWithDefault(msg, 4, ""),
    userAddress: jspb.Message.getFieldWithDefault(msg, 5, ""),
    userImage: jspb.Message.getFieldWithDefault(msg, 6, ""),
    userPhoneCode: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TransferredTicketUserInfo}
 */
proto.ticket.mobile.TransferredTicketUserInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TransferredTicketUserInfo;
  return proto.ticket.mobile.TransferredTicketUserInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TransferredTicketUserInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TransferredTicketUserInfo}
 */
proto.ticket.mobile.TransferredTicketUserInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserFullName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserPhone(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserEmail(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserAddress(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserImage(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserPhoneCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TransferredTicketUserInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TransferredTicketUserInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TransferredTicketUserInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TransferredTicketUserInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserFullName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserPhone();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUserEmail();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUserAddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUserImage();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUserPhoneCode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketUserInfo.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketUserInfo} returns this
 */
proto.ticket.mobile.TransferredTicketUserInfo.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_full_name = 2;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketUserInfo.prototype.getUserFullName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketUserInfo} returns this
 */
proto.ticket.mobile.TransferredTicketUserInfo.prototype.setUserFullName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string user_phone = 3;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketUserInfo.prototype.getUserPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketUserInfo} returns this
 */
proto.ticket.mobile.TransferredTicketUserInfo.prototype.setUserPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string user_email = 4;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketUserInfo.prototype.getUserEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketUserInfo} returns this
 */
proto.ticket.mobile.TransferredTicketUserInfo.prototype.setUserEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string user_address = 5;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketUserInfo.prototype.getUserAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketUserInfo} returns this
 */
proto.ticket.mobile.TransferredTicketUserInfo.prototype.setUserAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string user_image = 6;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketUserInfo.prototype.getUserImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketUserInfo} returns this
 */
proto.ticket.mobile.TransferredTicketUserInfo.prototype.setUserImage = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string user_phone_code = 7;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketUserInfo.prototype.getUserPhoneCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketUserInfo} returns this
 */
proto.ticket.mobile.TransferredTicketUserInfo.prototype.setUserPhoneCode = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TransferredTicketSeatInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TransferredTicketSeatInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TransferredTicketSeatInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TransferredTicketSeatInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    price: (f = msg.getPrice()) && proto.ticket.mobile.TransferredTicketPriceSimpleInfo.toObject(includeInstance, f),
    priceBlockId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    priceBlockName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    generalSeatMapId: jspb.Message.getFieldWithDefault(msg, 6, ""),
    generalSeatMapName: jspb.Message.getFieldWithDefault(msg, 7, ""),
    seatTypeName: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TransferredTicketSeatInfo}
 */
proto.ticket.mobile.TransferredTicketSeatInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TransferredTicketSeatInfo;
  return proto.ticket.mobile.TransferredTicketSeatInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TransferredTicketSeatInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TransferredTicketSeatInfo}
 */
proto.ticket.mobile.TransferredTicketSeatInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.ticket.mobile.TransferredTicketPriceSimpleInfo;
      reader.readMessage(value,proto.ticket.mobile.TransferredTicketPriceSimpleInfo.deserializeBinaryFromReader);
      msg.setPrice(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriceBlockId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriceBlockName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setGeneralSeatMapId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setGeneralSeatMapName(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatTypeName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TransferredTicketSeatInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TransferredTicketSeatInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TransferredTicketSeatInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TransferredTicketSeatInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPrice();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ticket.mobile.TransferredTicketPriceSimpleInfo.serializeBinaryToWriter
    );
  }
  f = message.getPriceBlockId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPriceBlockName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getGeneralSeatMapId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getGeneralSeatMapName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSeatTypeName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketSeatInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketSeatInfo} returns this
 */
proto.ticket.mobile.TransferredTicketSeatInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketSeatInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketSeatInfo} returns this
 */
proto.ticket.mobile.TransferredTicketSeatInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TransferredTicketPriceSimpleInfo price = 3;
 * @return {?proto.ticket.mobile.TransferredTicketPriceSimpleInfo}
 */
proto.ticket.mobile.TransferredTicketSeatInfo.prototype.getPrice = function() {
  return /** @type{?proto.ticket.mobile.TransferredTicketPriceSimpleInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TransferredTicketPriceSimpleInfo, 3));
};


/**
 * @param {?proto.ticket.mobile.TransferredTicketPriceSimpleInfo|undefined} value
 * @return {!proto.ticket.mobile.TransferredTicketSeatInfo} returns this
*/
proto.ticket.mobile.TransferredTicketSeatInfo.prototype.setPrice = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.TransferredTicketSeatInfo} returns this
 */
proto.ticket.mobile.TransferredTicketSeatInfo.prototype.clearPrice = function() {
  return this.setPrice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.TransferredTicketSeatInfo.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string price_block_id = 4;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketSeatInfo.prototype.getPriceBlockId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketSeatInfo} returns this
 */
proto.ticket.mobile.TransferredTicketSeatInfo.prototype.setPriceBlockId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string price_block_name = 5;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketSeatInfo.prototype.getPriceBlockName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketSeatInfo} returns this
 */
proto.ticket.mobile.TransferredTicketSeatInfo.prototype.setPriceBlockName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string general_seat_map_id = 6;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketSeatInfo.prototype.getGeneralSeatMapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketSeatInfo} returns this
 */
proto.ticket.mobile.TransferredTicketSeatInfo.prototype.setGeneralSeatMapId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string general_seat_map_name = 7;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketSeatInfo.prototype.getGeneralSeatMapName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketSeatInfo} returns this
 */
proto.ticket.mobile.TransferredTicketSeatInfo.prototype.setGeneralSeatMapName = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string seat_type_name = 8;
 * @return {string}
 */
proto.ticket.mobile.TransferredTicketSeatInfo.prototype.getSeatTypeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferredTicketSeatInfo} returns this
 */
proto.ticket.mobile.TransferredTicketSeatInfo.prototype.setSeatTypeName = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.GetMyTransferredTicketByOrderIdReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.GetMyTransferredTicketByOrderIdReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.GetMyTransferredTicketByOrderIdReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTransferredTicketByOrderIdReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.GetMyTransferredTicketByOrderIdReq}
 */
proto.ticket.mobile.GetMyTransferredTicketByOrderIdReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.GetMyTransferredTicketByOrderIdReq;
  return proto.ticket.mobile.GetMyTransferredTicketByOrderIdReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.GetMyTransferredTicketByOrderIdReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.GetMyTransferredTicketByOrderIdReq}
 */
proto.ticket.mobile.GetMyTransferredTicketByOrderIdReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.GetMyTransferredTicketByOrderIdReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.GetMyTransferredTicketByOrderIdReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.GetMyTransferredTicketByOrderIdReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTransferredTicketByOrderIdReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string order_id = 1;
 * @return {string}
 */
proto.ticket.mobile.GetMyTransferredTicketByOrderIdReq.prototype.getOrderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.GetMyTransferredTicketByOrderIdReq} returns this
 */
proto.ticket.mobile.GetMyTransferredTicketByOrderIdReq.prototype.setOrderId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoList: jspb.Message.toObjectList(msg.getInfoList(),
    proto.ticket.mobile.TransferredTicketInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes}
 */
proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes;
  return proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes}
 */
proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.mobile.TransferredTicketInfo;
      reader.readMessage(value,proto.ticket.mobile.TransferredTicketInfo.deserializeBinaryFromReader);
      msg.addInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ticket.mobile.TransferredTicketInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TransferredTicketInfo info = 1;
 * @return {!Array<!proto.ticket.mobile.TransferredTicketInfo>}
 */
proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes.prototype.getInfoList = function() {
  return /** @type{!Array<!proto.ticket.mobile.TransferredTicketInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ticket.mobile.TransferredTicketInfo, 1));
};


/**
 * @param {!Array<!proto.ticket.mobile.TransferredTicketInfo>} value
 * @return {!proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes} returns this
*/
proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes.prototype.setInfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ticket.mobile.TransferredTicketInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.mobile.TransferredTicketInfo}
 */
proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes.prototype.addInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ticket.mobile.TransferredTicketInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes} returns this
 */
proto.ticket.mobile.GetMyTransferredTicketByOrderIdRes.prototype.clearInfoList = function() {
  return this.setInfoList([]);
};


goog.object.extend(exports, proto.ticket.mobile);
