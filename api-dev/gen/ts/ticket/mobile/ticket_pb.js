// source: ticket/mobile/ticket.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var ticket_mobile_base_pb = require('../../ticket/mobile/base_pb.js');
goog.object.extend(proto, ticket_mobile_base_pb);
var base_base_pb = require('../../base/base_pb.js');
goog.object.extend(proto, base_base_pb);
goog.exportSymbol('proto.ticket.mobile.GetMyTicketByOrderIdReq', null, global);
goog.exportSymbol('proto.ticket.mobile.GetMyTicketByOrderIdRes', null, global);
goog.exportSymbol('proto.ticket.mobile.GetMyTicketByPhoneReq', null, global);
goog.exportSymbol('proto.ticket.mobile.GetMyTicketByPhoneRes', null, global);
goog.exportSymbol('proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq', null, global);
goog.exportSymbol('proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes', null, global);
goog.exportSymbol('proto.ticket.mobile.GetMyTicketReq', null, global);
goog.exportSymbol('proto.ticket.mobile.GetMyTicketRes', null, global);
goog.exportSymbol('proto.ticket.mobile.GetMyTicketsByDeliveryIDReq', null, global);
goog.exportSymbol('proto.ticket.mobile.GetMyTicketsByDeliveryIDRes', null, global);
goog.exportSymbol('proto.ticket.mobile.GetMyTicketsRes', null, global);
goog.exportSymbol('proto.ticket.mobile.GetMyTransferTransactionHistoryReq', null, global);
goog.exportSymbol('proto.ticket.mobile.GetMyTransferTransactionHistoryRes', null, global);
goog.exportSymbol('proto.ticket.mobile.ListMyTicketByPriceBlockReq', null, global);
goog.exportSymbol('proto.ticket.mobile.ListMyTicketByPriceBlockRes', null, global);
goog.exportSymbol('proto.ticket.mobile.ListMyTicketByStatusReq', null, global);
goog.exportSymbol('proto.ticket.mobile.ListMyTicketByStatusRes', null, global);
goog.exportSymbol('proto.ticket.mobile.ListMyTicketReadyToCheckinReq', null, global);
goog.exportSymbol('proto.ticket.mobile.ListMyTicketReadyToCheckinRes', null, global);
goog.exportSymbol('proto.ticket.mobile.ListMyTicketReq', null, global);
goog.exportSymbol('proto.ticket.mobile.MarkTicketOfflineReq', null, global);
goog.exportSymbol('proto.ticket.mobile.TicketCurrencyInfo', null, global);
goog.exportSymbol('proto.ticket.mobile.TicketEventInfo', null, global);
goog.exportSymbol('proto.ticket.mobile.TicketEventLocation', null, global);
goog.exportSymbol('proto.ticket.mobile.TicketInfo', null, global);
goog.exportSymbol('proto.ticket.mobile.TicketPriceSimpleInfo', null, global);
goog.exportSymbol('proto.ticket.mobile.TicketSeatInfo', null, global);
goog.exportSymbol('proto.ticket.mobile.TicketStatus', null, global);
goog.exportSymbol('proto.ticket.mobile.TicketStatusFilter', null, global);
goog.exportSymbol('proto.ticket.mobile.TicketType', null, global);
goog.exportSymbol('proto.ticket.mobile.TicketUserInfo', null, global);
goog.exportSymbol('proto.ticket.mobile.TransferTicket', null, global);
goog.exportSymbol('proto.ticket.mobile.TransferTransaction', null, global);
goog.exportSymbol('proto.ticket.mobile.UpdateEnableVerificationCodeReq', null, global);
goog.exportSymbol('proto.ticket.mobile.UpdateStatusReq', null, global);
goog.exportSymbol('proto.ticket.mobile.UpdateUserInfoReq', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TicketInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.TicketInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TicketInfo.displayName = 'proto.ticket.mobile.TicketInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TicketPriceSimpleInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.TicketPriceSimpleInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TicketPriceSimpleInfo.displayName = 'proto.ticket.mobile.TicketPriceSimpleInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TicketCurrencyInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.TicketCurrencyInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TicketCurrencyInfo.displayName = 'proto.ticket.mobile.TicketCurrencyInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TicketEventLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.TicketEventLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TicketEventLocation.displayName = 'proto.ticket.mobile.TicketEventLocation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TicketEventInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.TicketEventInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TicketEventInfo.displayName = 'proto.ticket.mobile.TicketEventInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TicketUserInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.TicketUserInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TicketUserInfo.displayName = 'proto.ticket.mobile.TicketUserInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TicketSeatInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.TicketSeatInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TicketSeatInfo.displayName = 'proto.ticket.mobile.TicketSeatInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TransferTicket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.TransferTicket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TransferTicket.displayName = 'proto.ticket.mobile.TransferTicket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TransferTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.mobile.TransferTransaction.repeatedFields_, null);
};
goog.inherits(proto.ticket.mobile.TransferTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TransferTransaction.displayName = 'proto.ticket.mobile.TransferTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.UpdateUserInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.UpdateUserInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.UpdateUserInfoReq.displayName = 'proto.ticket.mobile.UpdateUserInfoReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.UpdateStatusReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.UpdateStatusReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.UpdateStatusReq.displayName = 'proto.ticket.mobile.UpdateStatusReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.UpdateEnableVerificationCodeReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.UpdateEnableVerificationCodeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.UpdateEnableVerificationCodeReq.displayName = 'proto.ticket.mobile.UpdateEnableVerificationCodeReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.GetMyTicketReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.GetMyTicketReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.GetMyTicketReq.displayName = 'proto.ticket.mobile.GetMyTicketReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.GetMyTicketByOrderIdReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.GetMyTicketByOrderIdReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.GetMyTicketByOrderIdReq.displayName = 'proto.ticket.mobile.GetMyTicketByOrderIdReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.GetMyTicketByPhoneReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.GetMyTicketByPhoneReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.GetMyTicketByPhoneReq.displayName = 'proto.ticket.mobile.GetMyTicketByPhoneReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq.displayName = 'proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.ListMyTicketReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.ListMyTicketReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.ListMyTicketReq.displayName = 'proto.ticket.mobile.ListMyTicketReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.ListMyTicketByStatusReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.ListMyTicketByStatusReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.ListMyTicketByStatusReq.displayName = 'proto.ticket.mobile.ListMyTicketByStatusReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.ListMyTicketByPriceBlockReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.ListMyTicketByPriceBlockReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.ListMyTicketByPriceBlockReq.displayName = 'proto.ticket.mobile.ListMyTicketByPriceBlockReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.ListMyTicketReadyToCheckinReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.ListMyTicketReadyToCheckinReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.ListMyTicketReadyToCheckinReq.displayName = 'proto.ticket.mobile.ListMyTicketReadyToCheckinReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.MarkTicketOfflineReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.mobile.MarkTicketOfflineReq.repeatedFields_, null);
};
goog.inherits(proto.ticket.mobile.MarkTicketOfflineReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.MarkTicketOfflineReq.displayName = 'proto.ticket.mobile.MarkTicketOfflineReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.GetMyTransferTransactionHistoryReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.GetMyTransferTransactionHistoryReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.GetMyTransferTransactionHistoryReq.displayName = 'proto.ticket.mobile.GetMyTransferTransactionHistoryReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.GetMyTicketsByDeliveryIDReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.GetMyTicketsByDeliveryIDReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.GetMyTicketsByDeliveryIDReq.displayName = 'proto.ticket.mobile.GetMyTicketsByDeliveryIDReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.GetMyTicketRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.GetMyTicketRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.GetMyTicketRes.displayName = 'proto.ticket.mobile.GetMyTicketRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.GetMyTicketByOrderIdRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.mobile.GetMyTicketByOrderIdRes.repeatedFields_, null);
};
goog.inherits(proto.ticket.mobile.GetMyTicketByOrderIdRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.GetMyTicketByOrderIdRes.displayName = 'proto.ticket.mobile.GetMyTicketByOrderIdRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.GetMyTicketByPhoneRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.GetMyTicketByPhoneRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.GetMyTicketByPhoneRes.displayName = 'proto.ticket.mobile.GetMyTicketByPhoneRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.GetMyTicketsRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.mobile.GetMyTicketsRes.repeatedFields_, null);
};
goog.inherits(proto.ticket.mobile.GetMyTicketsRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.GetMyTicketsRes.displayName = 'proto.ticket.mobile.GetMyTicketsRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes.repeatedFields_, null);
};
goog.inherits(proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes.displayName = 'proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.ListMyTicketByStatusRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.mobile.ListMyTicketByStatusRes.repeatedFields_, null);
};
goog.inherits(proto.ticket.mobile.ListMyTicketByStatusRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.ListMyTicketByStatusRes.displayName = 'proto.ticket.mobile.ListMyTicketByStatusRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.ListMyTicketByPriceBlockRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.mobile.ListMyTicketByPriceBlockRes.repeatedFields_, null);
};
goog.inherits(proto.ticket.mobile.ListMyTicketByPriceBlockRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.ListMyTicketByPriceBlockRes.displayName = 'proto.ticket.mobile.ListMyTicketByPriceBlockRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.ListMyTicketReadyToCheckinRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.mobile.ListMyTicketReadyToCheckinRes.repeatedFields_, null);
};
goog.inherits(proto.ticket.mobile.ListMyTicketReadyToCheckinRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.ListMyTicketReadyToCheckinRes.displayName = 'proto.ticket.mobile.ListMyTicketReadyToCheckinRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.GetMyTransferTransactionHistoryRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.mobile.GetMyTransferTransactionHistoryRes.repeatedFields_, null);
};
goog.inherits(proto.ticket.mobile.GetMyTransferTransactionHistoryRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.GetMyTransferTransactionHistoryRes.displayName = 'proto.ticket.mobile.GetMyTransferTransactionHistoryRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.GetMyTicketsByDeliveryIDRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.mobile.GetMyTicketsByDeliveryIDRes.repeatedFields_, null);
};
goog.inherits(proto.ticket.mobile.GetMyTicketsByDeliveryIDRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.GetMyTicketsByDeliveryIDRes.displayName = 'proto.ticket.mobile.GetMyTicketsByDeliveryIDRes';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TicketInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TicketInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TicketInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 3, 0),
    orderId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    eventInfo: (f = msg.getEventInfo()) && proto.ticket.mobile.TicketEventInfo.toObject(includeInstance, f),
    seatInfo: (f = msg.getSeatInfo()) && proto.ticket.mobile.TicketSeatInfo.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 7, 0),
    secretCode: jspb.Message.getFieldWithDefault(msg, 8, ""),
    verificationCode: jspb.Message.getFieldWithDefault(msg, 9, ""),
    userInfo: (f = msg.getUserInfo()) && proto.ticket.mobile.TicketUserInfo.toObject(includeInstance, f),
    isEnabledVerificationCode: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    partnershipId: jspb.Message.getFieldWithDefault(msg, 12, ""),
    ticketType: jspb.Message.getFieldWithDefault(msg, 13, 0),
    ownerId: jspb.Message.getFieldWithDefault(msg, 14, ""),
    isTransferableTicket: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    transferTransactionId: jspb.Message.getFieldWithDefault(msg, 16, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TicketInfo}
 */
proto.ticket.mobile.TicketInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TicketInfo;
  return proto.ticket.mobile.TicketInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TicketInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TicketInfo}
 */
proto.ticket.mobile.TicketInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatedAt(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderId(value);
      break;
    case 5:
      var value = new proto.ticket.mobile.TicketEventInfo;
      reader.readMessage(value,proto.ticket.mobile.TicketEventInfo.deserializeBinaryFromReader);
      msg.setEventInfo(value);
      break;
    case 6:
      var value = new proto.ticket.mobile.TicketSeatInfo;
      reader.readMessage(value,proto.ticket.mobile.TicketSeatInfo.deserializeBinaryFromReader);
      msg.setSeatInfo(value);
      break;
    case 7:
      var value = /** @type {!proto.ticket.mobile.TicketStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretCode(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerificationCode(value);
      break;
    case 10:
      var value = new proto.ticket.mobile.TicketUserInfo;
      reader.readMessage(value,proto.ticket.mobile.TicketUserInfo.deserializeBinaryFromReader);
      msg.setUserInfo(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsEnabledVerificationCode(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnershipId(value);
      break;
    case 13:
      var value = /** @type {!proto.ticket.mobile.TicketType} */ (reader.readEnum());
      msg.setTicketType(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerId(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsTransferableTicket(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransferTransactionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TicketInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TicketInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TicketInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getOrderId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEventInfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ticket.mobile.TicketEventInfo.serializeBinaryToWriter
    );
  }
  f = message.getSeatInfo();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.ticket.mobile.TicketSeatInfo.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getSecretCode();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getVerificationCode();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getUserInfo();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.ticket.mobile.TicketUserInfo.serializeBinaryToWriter
    );
  }
  f = message.getIsEnabledVerificationCode();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getPartnershipId();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getTicketType();
  if (f !== 0.0) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getOwnerId();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getIsTransferableTicket();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getTransferTransactionId();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ticket.mobile.TicketInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketInfo} returns this
 */
proto.ticket.mobile.TicketInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 created_at = 2;
 * @return {number}
 */
proto.ticket.mobile.TicketInfo.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.TicketInfo} returns this
 */
proto.ticket.mobile.TicketInfo.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 updated_at = 3;
 * @return {number}
 */
proto.ticket.mobile.TicketInfo.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.TicketInfo} returns this
 */
proto.ticket.mobile.TicketInfo.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string order_id = 4;
 * @return {string}
 */
proto.ticket.mobile.TicketInfo.prototype.getOrderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketInfo} returns this
 */
proto.ticket.mobile.TicketInfo.prototype.setOrderId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional TicketEventInfo event_info = 5;
 * @return {?proto.ticket.mobile.TicketEventInfo}
 */
proto.ticket.mobile.TicketInfo.prototype.getEventInfo = function() {
  return /** @type{?proto.ticket.mobile.TicketEventInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TicketEventInfo, 5));
};


/**
 * @param {?proto.ticket.mobile.TicketEventInfo|undefined} value
 * @return {!proto.ticket.mobile.TicketInfo} returns this
*/
proto.ticket.mobile.TicketInfo.prototype.setEventInfo = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.TicketInfo} returns this
 */
proto.ticket.mobile.TicketInfo.prototype.clearEventInfo = function() {
  return this.setEventInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.TicketInfo.prototype.hasEventInfo = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional TicketSeatInfo seat_info = 6;
 * @return {?proto.ticket.mobile.TicketSeatInfo}
 */
proto.ticket.mobile.TicketInfo.prototype.getSeatInfo = function() {
  return /** @type{?proto.ticket.mobile.TicketSeatInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TicketSeatInfo, 6));
};


/**
 * @param {?proto.ticket.mobile.TicketSeatInfo|undefined} value
 * @return {!proto.ticket.mobile.TicketInfo} returns this
*/
proto.ticket.mobile.TicketInfo.prototype.setSeatInfo = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.TicketInfo} returns this
 */
proto.ticket.mobile.TicketInfo.prototype.clearSeatInfo = function() {
  return this.setSeatInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.TicketInfo.prototype.hasSeatInfo = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional TicketStatus status = 7;
 * @return {!proto.ticket.mobile.TicketStatus}
 */
proto.ticket.mobile.TicketInfo.prototype.getStatus = function() {
  return /** @type {!proto.ticket.mobile.TicketStatus} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.ticket.mobile.TicketStatus} value
 * @return {!proto.ticket.mobile.TicketInfo} returns this
 */
proto.ticket.mobile.TicketInfo.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional string secret_code = 8;
 * @return {string}
 */
proto.ticket.mobile.TicketInfo.prototype.getSecretCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketInfo} returns this
 */
proto.ticket.mobile.TicketInfo.prototype.setSecretCode = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string verification_code = 9;
 * @return {string}
 */
proto.ticket.mobile.TicketInfo.prototype.getVerificationCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketInfo} returns this
 */
proto.ticket.mobile.TicketInfo.prototype.setVerificationCode = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional TicketUserInfo user_info = 10;
 * @return {?proto.ticket.mobile.TicketUserInfo}
 */
proto.ticket.mobile.TicketInfo.prototype.getUserInfo = function() {
  return /** @type{?proto.ticket.mobile.TicketUserInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TicketUserInfo, 10));
};


/**
 * @param {?proto.ticket.mobile.TicketUserInfo|undefined} value
 * @return {!proto.ticket.mobile.TicketInfo} returns this
*/
proto.ticket.mobile.TicketInfo.prototype.setUserInfo = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.TicketInfo} returns this
 */
proto.ticket.mobile.TicketInfo.prototype.clearUserInfo = function() {
  return this.setUserInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.TicketInfo.prototype.hasUserInfo = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool is_enabled_verification_code = 11;
 * @return {boolean}
 */
proto.ticket.mobile.TicketInfo.prototype.getIsEnabledVerificationCode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.mobile.TicketInfo} returns this
 */
proto.ticket.mobile.TicketInfo.prototype.setIsEnabledVerificationCode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional string partnership_id = 12;
 * @return {string}
 */
proto.ticket.mobile.TicketInfo.prototype.getPartnershipId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketInfo} returns this
 */
proto.ticket.mobile.TicketInfo.prototype.setPartnershipId = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional TicketType ticket_type = 13;
 * @return {!proto.ticket.mobile.TicketType}
 */
proto.ticket.mobile.TicketInfo.prototype.getTicketType = function() {
  return /** @type {!proto.ticket.mobile.TicketType} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {!proto.ticket.mobile.TicketType} value
 * @return {!proto.ticket.mobile.TicketInfo} returns this
 */
proto.ticket.mobile.TicketInfo.prototype.setTicketType = function(value) {
  return jspb.Message.setProto3EnumField(this, 13, value);
};


/**
 * optional string owner_id = 14;
 * @return {string}
 */
proto.ticket.mobile.TicketInfo.prototype.getOwnerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketInfo} returns this
 */
proto.ticket.mobile.TicketInfo.prototype.setOwnerId = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional bool is_transferable_ticket = 15;
 * @return {boolean}
 */
proto.ticket.mobile.TicketInfo.prototype.getIsTransferableTicket = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.mobile.TicketInfo} returns this
 */
proto.ticket.mobile.TicketInfo.prototype.setIsTransferableTicket = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional string transfer_transaction_id = 16;
 * @return {string}
 */
proto.ticket.mobile.TicketInfo.prototype.getTransferTransactionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketInfo} returns this
 */
proto.ticket.mobile.TicketInfo.prototype.setTransferTransactionId = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TicketPriceSimpleInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TicketPriceSimpleInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TicketPriceSimpleInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketPriceSimpleInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 3, ""),
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    currency: (f = msg.getCurrency()) && proto.ticket.mobile.TicketCurrencyInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TicketPriceSimpleInfo}
 */
proto.ticket.mobile.TicketPriceSimpleInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TicketPriceSimpleInfo;
  return proto.ticket.mobile.TicketPriceSimpleInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TicketPriceSimpleInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TicketPriceSimpleInfo}
 */
proto.ticket.mobile.TicketPriceSimpleInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 5:
      var value = new proto.ticket.mobile.TicketCurrencyInfo;
      reader.readMessage(value,proto.ticket.mobile.TicketCurrencyInfo.deserializeBinaryFromReader);
      msg.setCurrency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TicketPriceSimpleInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TicketPriceSimpleInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TicketPriceSimpleInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketPriceSimpleInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getCurrency();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ticket.mobile.TicketCurrencyInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ticket.mobile.TicketPriceSimpleInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketPriceSimpleInfo} returns this
 */
proto.ticket.mobile.TicketPriceSimpleInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ticket.mobile.TicketPriceSimpleInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketPriceSimpleInfo} returns this
 */
proto.ticket.mobile.TicketPriceSimpleInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string icon = 3;
 * @return {string}
 */
proto.ticket.mobile.TicketPriceSimpleInfo.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketPriceSimpleInfo} returns this
 */
proto.ticket.mobile.TicketPriceSimpleInfo.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double price = 4;
 * @return {number}
 */
proto.ticket.mobile.TicketPriceSimpleInfo.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.TicketPriceSimpleInfo} returns this
 */
proto.ticket.mobile.TicketPriceSimpleInfo.prototype.setPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional TicketCurrencyInfo currency = 5;
 * @return {?proto.ticket.mobile.TicketCurrencyInfo}
 */
proto.ticket.mobile.TicketPriceSimpleInfo.prototype.getCurrency = function() {
  return /** @type{?proto.ticket.mobile.TicketCurrencyInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TicketCurrencyInfo, 5));
};


/**
 * @param {?proto.ticket.mobile.TicketCurrencyInfo|undefined} value
 * @return {!proto.ticket.mobile.TicketPriceSimpleInfo} returns this
*/
proto.ticket.mobile.TicketPriceSimpleInfo.prototype.setCurrency = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.TicketPriceSimpleInfo} returns this
 */
proto.ticket.mobile.TicketPriceSimpleInfo.prototype.clearCurrency = function() {
  return this.setCurrency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.TicketPriceSimpleInfo.prototype.hasCurrency = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TicketCurrencyInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TicketCurrencyInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TicketCurrencyInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketCurrencyInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TicketCurrencyInfo}
 */
proto.ticket.mobile.TicketCurrencyInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TicketCurrencyInfo;
  return proto.ticket.mobile.TicketCurrencyInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TicketCurrencyInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TicketCurrencyInfo}
 */
proto.ticket.mobile.TicketCurrencyInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TicketCurrencyInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TicketCurrencyInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TicketCurrencyInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketCurrencyInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.ticket.mobile.TicketCurrencyInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketCurrencyInfo} returns this
 */
proto.ticket.mobile.TicketCurrencyInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.ticket.mobile.TicketCurrencyInfo.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketCurrencyInfo} returns this
 */
proto.ticket.mobile.TicketCurrencyInfo.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string icon = 3;
 * @return {string}
 */
proto.ticket.mobile.TicketCurrencyInfo.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketCurrencyInfo} returns this
 */
proto.ticket.mobile.TicketCurrencyInfo.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TicketEventLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TicketEventLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TicketEventLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketEventLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ward: jspb.Message.getFieldWithDefault(msg, 3, ""),
    district: jspb.Message.getFieldWithDefault(msg, 4, ""),
    city: jspb.Message.getFieldWithDefault(msg, 5, ""),
    country: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TicketEventLocation}
 */
proto.ticket.mobile.TicketEventLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TicketEventLocation;
  return proto.ticket.mobile.TicketEventLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TicketEventLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TicketEventLocation}
 */
proto.ticket.mobile.TicketEventLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWard(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDistrict(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TicketEventLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TicketEventLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TicketEventLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketEventLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWard();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDistrict();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ticket.mobile.TicketEventLocation.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketEventLocation} returns this
 */
proto.ticket.mobile.TicketEventLocation.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.ticket.mobile.TicketEventLocation.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketEventLocation} returns this
 */
proto.ticket.mobile.TicketEventLocation.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ward = 3;
 * @return {string}
 */
proto.ticket.mobile.TicketEventLocation.prototype.getWard = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketEventLocation} returns this
 */
proto.ticket.mobile.TicketEventLocation.prototype.setWard = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string district = 4;
 * @return {string}
 */
proto.ticket.mobile.TicketEventLocation.prototype.getDistrict = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketEventLocation} returns this
 */
proto.ticket.mobile.TicketEventLocation.prototype.setDistrict = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string city = 5;
 * @return {string}
 */
proto.ticket.mobile.TicketEventLocation.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketEventLocation} returns this
 */
proto.ticket.mobile.TicketEventLocation.prototype.setCity = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string country = 6;
 * @return {string}
 */
proto.ticket.mobile.TicketEventLocation.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketEventLocation} returns this
 */
proto.ticket.mobile.TicketEventLocation.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TicketEventInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TicketEventInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TicketEventInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketEventInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    startTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    checkinStartTime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    checkinEndTime: jspb.Message.getFieldWithDefault(msg, 6, 0),
    location: (f = msg.getLocation()) && proto.ticket.mobile.TicketEventLocation.toObject(includeInstance, f),
    timezone: jspb.Message.getFieldWithDefault(msg, 8, ""),
    checkinEnded: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    scheduleId: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TicketEventInfo}
 */
proto.ticket.mobile.TicketEventInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TicketEventInfo;
  return proto.ticket.mobile.TicketEventInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TicketEventInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TicketEventInfo}
 */
proto.ticket.mobile.TicketEventInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCheckinStartTime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCheckinEndTime(value);
      break;
    case 7:
      var value = new proto.ticket.mobile.TicketEventLocation;
      reader.readMessage(value,proto.ticket.mobile.TicketEventLocation.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimezone(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCheckinEnded(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setScheduleId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TicketEventInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TicketEventInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TicketEventInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketEventInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getCheckinStartTime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCheckinEndTime();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ticket.mobile.TicketEventLocation.serializeBinaryToWriter
    );
  }
  f = message.getTimezone();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCheckinEnded();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getScheduleId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string event_id = 1;
 * @return {string}
 */
proto.ticket.mobile.TicketEventInfo.prototype.getEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketEventInfo} returns this
 */
proto.ticket.mobile.TicketEventInfo.prototype.setEventId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ticket.mobile.TicketEventInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketEventInfo} returns this
 */
proto.ticket.mobile.TicketEventInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 start_time = 3;
 * @return {number}
 */
proto.ticket.mobile.TicketEventInfo.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.TicketEventInfo} returns this
 */
proto.ticket.mobile.TicketEventInfo.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 end_time = 4;
 * @return {number}
 */
proto.ticket.mobile.TicketEventInfo.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.TicketEventInfo} returns this
 */
proto.ticket.mobile.TicketEventInfo.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 checkin_start_time = 5;
 * @return {number}
 */
proto.ticket.mobile.TicketEventInfo.prototype.getCheckinStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.TicketEventInfo} returns this
 */
proto.ticket.mobile.TicketEventInfo.prototype.setCheckinStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 checkin_end_time = 6;
 * @return {number}
 */
proto.ticket.mobile.TicketEventInfo.prototype.getCheckinEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.TicketEventInfo} returns this
 */
proto.ticket.mobile.TicketEventInfo.prototype.setCheckinEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional TicketEventLocation location = 7;
 * @return {?proto.ticket.mobile.TicketEventLocation}
 */
proto.ticket.mobile.TicketEventInfo.prototype.getLocation = function() {
  return /** @type{?proto.ticket.mobile.TicketEventLocation} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TicketEventLocation, 7));
};


/**
 * @param {?proto.ticket.mobile.TicketEventLocation|undefined} value
 * @return {!proto.ticket.mobile.TicketEventInfo} returns this
*/
proto.ticket.mobile.TicketEventInfo.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.TicketEventInfo} returns this
 */
proto.ticket.mobile.TicketEventInfo.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.TicketEventInfo.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string timezone = 8;
 * @return {string}
 */
proto.ticket.mobile.TicketEventInfo.prototype.getTimezone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketEventInfo} returns this
 */
proto.ticket.mobile.TicketEventInfo.prototype.setTimezone = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional bool checkin_ended = 9;
 * @return {boolean}
 */
proto.ticket.mobile.TicketEventInfo.prototype.getCheckinEnded = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.mobile.TicketEventInfo} returns this
 */
proto.ticket.mobile.TicketEventInfo.prototype.setCheckinEnded = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional string schedule_id = 10;
 * @return {string}
 */
proto.ticket.mobile.TicketEventInfo.prototype.getScheduleId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketEventInfo} returns this
 */
proto.ticket.mobile.TicketEventInfo.prototype.setScheduleId = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TicketUserInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TicketUserInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TicketUserInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketUserInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userFullName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userPhone: jspb.Message.getFieldWithDefault(msg, 3, ""),
    userEmail: jspb.Message.getFieldWithDefault(msg, 4, ""),
    userAddress: jspb.Message.getFieldWithDefault(msg, 5, ""),
    userImage: jspb.Message.getFieldWithDefault(msg, 6, ""),
    userPhoneCode: jspb.Message.getFieldWithDefault(msg, 7, ""),
    isDeclaredCovid: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    userInspectorImage: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TicketUserInfo}
 */
proto.ticket.mobile.TicketUserInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TicketUserInfo;
  return proto.ticket.mobile.TicketUserInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TicketUserInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TicketUserInfo}
 */
proto.ticket.mobile.TicketUserInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserFullName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserPhone(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserEmail(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserAddress(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserImage(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserPhoneCode(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDeclaredCovid(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserInspectorImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TicketUserInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TicketUserInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TicketUserInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketUserInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserFullName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserPhone();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUserEmail();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUserAddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUserImage();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUserPhoneCode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getIsDeclaredCovid();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getUserInspectorImage();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.ticket.mobile.TicketUserInfo.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketUserInfo} returns this
 */
proto.ticket.mobile.TicketUserInfo.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_full_name = 2;
 * @return {string}
 */
proto.ticket.mobile.TicketUserInfo.prototype.getUserFullName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketUserInfo} returns this
 */
proto.ticket.mobile.TicketUserInfo.prototype.setUserFullName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string user_phone = 3;
 * @return {string}
 */
proto.ticket.mobile.TicketUserInfo.prototype.getUserPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketUserInfo} returns this
 */
proto.ticket.mobile.TicketUserInfo.prototype.setUserPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string user_email = 4;
 * @return {string}
 */
proto.ticket.mobile.TicketUserInfo.prototype.getUserEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketUserInfo} returns this
 */
proto.ticket.mobile.TicketUserInfo.prototype.setUserEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string user_address = 5;
 * @return {string}
 */
proto.ticket.mobile.TicketUserInfo.prototype.getUserAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketUserInfo} returns this
 */
proto.ticket.mobile.TicketUserInfo.prototype.setUserAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string user_image = 6;
 * @return {string}
 */
proto.ticket.mobile.TicketUserInfo.prototype.getUserImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketUserInfo} returns this
 */
proto.ticket.mobile.TicketUserInfo.prototype.setUserImage = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string user_phone_code = 7;
 * @return {string}
 */
proto.ticket.mobile.TicketUserInfo.prototype.getUserPhoneCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketUserInfo} returns this
 */
proto.ticket.mobile.TicketUserInfo.prototype.setUserPhoneCode = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool is_declared_covid = 8;
 * @return {boolean}
 */
proto.ticket.mobile.TicketUserInfo.prototype.getIsDeclaredCovid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.mobile.TicketUserInfo} returns this
 */
proto.ticket.mobile.TicketUserInfo.prototype.setIsDeclaredCovid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string user_inspector_image = 9;
 * @return {string}
 */
proto.ticket.mobile.TicketUserInfo.prototype.getUserInspectorImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketUserInfo} returns this
 */
proto.ticket.mobile.TicketUserInfo.prototype.setUserInspectorImage = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TicketSeatInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TicketSeatInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TicketSeatInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketSeatInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    price: (f = msg.getPrice()) && proto.ticket.mobile.TicketPriceSimpleInfo.toObject(includeInstance, f),
    priceBlockId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    priceBlockName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    generalSeatMapId: jspb.Message.getFieldWithDefault(msg, 6, ""),
    generalSeatMapName: jspb.Message.getFieldWithDefault(msg, 7, ""),
    seatTypeName: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TicketSeatInfo}
 */
proto.ticket.mobile.TicketSeatInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TicketSeatInfo;
  return proto.ticket.mobile.TicketSeatInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TicketSeatInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TicketSeatInfo}
 */
proto.ticket.mobile.TicketSeatInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.ticket.mobile.TicketPriceSimpleInfo;
      reader.readMessage(value,proto.ticket.mobile.TicketPriceSimpleInfo.deserializeBinaryFromReader);
      msg.setPrice(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriceBlockId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriceBlockName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setGeneralSeatMapId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setGeneralSeatMapName(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatTypeName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TicketSeatInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TicketSeatInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TicketSeatInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketSeatInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPrice();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ticket.mobile.TicketPriceSimpleInfo.serializeBinaryToWriter
    );
  }
  f = message.getPriceBlockId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPriceBlockName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getGeneralSeatMapId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getGeneralSeatMapName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSeatTypeName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ticket.mobile.TicketSeatInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketSeatInfo} returns this
 */
proto.ticket.mobile.TicketSeatInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ticket.mobile.TicketSeatInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketSeatInfo} returns this
 */
proto.ticket.mobile.TicketSeatInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TicketPriceSimpleInfo price = 3;
 * @return {?proto.ticket.mobile.TicketPriceSimpleInfo}
 */
proto.ticket.mobile.TicketSeatInfo.prototype.getPrice = function() {
  return /** @type{?proto.ticket.mobile.TicketPriceSimpleInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TicketPriceSimpleInfo, 3));
};


/**
 * @param {?proto.ticket.mobile.TicketPriceSimpleInfo|undefined} value
 * @return {!proto.ticket.mobile.TicketSeatInfo} returns this
*/
proto.ticket.mobile.TicketSeatInfo.prototype.setPrice = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.TicketSeatInfo} returns this
 */
proto.ticket.mobile.TicketSeatInfo.prototype.clearPrice = function() {
  return this.setPrice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.TicketSeatInfo.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string price_block_id = 4;
 * @return {string}
 */
proto.ticket.mobile.TicketSeatInfo.prototype.getPriceBlockId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketSeatInfo} returns this
 */
proto.ticket.mobile.TicketSeatInfo.prototype.setPriceBlockId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string price_block_name = 5;
 * @return {string}
 */
proto.ticket.mobile.TicketSeatInfo.prototype.getPriceBlockName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketSeatInfo} returns this
 */
proto.ticket.mobile.TicketSeatInfo.prototype.setPriceBlockName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string general_seat_map_id = 6;
 * @return {string}
 */
proto.ticket.mobile.TicketSeatInfo.prototype.getGeneralSeatMapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketSeatInfo} returns this
 */
proto.ticket.mobile.TicketSeatInfo.prototype.setGeneralSeatMapId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string general_seat_map_name = 7;
 * @return {string}
 */
proto.ticket.mobile.TicketSeatInfo.prototype.getGeneralSeatMapName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketSeatInfo} returns this
 */
proto.ticket.mobile.TicketSeatInfo.prototype.setGeneralSeatMapName = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string seat_type_name = 8;
 * @return {string}
 */
proto.ticket.mobile.TicketSeatInfo.prototype.getSeatTypeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketSeatInfo} returns this
 */
proto.ticket.mobile.TicketSeatInfo.prototype.setSeatTypeName = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TransferTicket.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TransferTicket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TransferTicket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TransferTicket.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    seatId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    seatName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    priceBlockId: jspb.Message.getFieldWithDefault(msg, 6, ""),
    priceBlockName: jspb.Message.getFieldWithDefault(msg, 7, ""),
    generalSeatMapId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    generalSeatMapName: jspb.Message.getFieldWithDefault(msg, 9, ""),
    seatTypeName: jspb.Message.getFieldWithDefault(msg, 10, ""),
    currencyCode: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TransferTicket}
 */
proto.ticket.mobile.TransferTicket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TransferTicket;
  return proto.ticket.mobile.TransferTicket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TransferTicket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TransferTicket}
 */
proto.ticket.mobile.TransferTicket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriceBlockId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriceBlockName(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setGeneralSeatMapId(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setGeneralSeatMapName(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatTypeName(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrencyCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TransferTicket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TransferTicket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TransferTicket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TransferTicket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSeatId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSeatName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getPriceBlockId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPriceBlockName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getGeneralSeatMapId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getGeneralSeatMapName();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getSeatTypeName();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCurrencyCode();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ticket.mobile.TransferTicket.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferTicket} returns this
 */
proto.ticket.mobile.TransferTicket.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string event_id = 2;
 * @return {string}
 */
proto.ticket.mobile.TransferTicket.prototype.getEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferTicket} returns this
 */
proto.ticket.mobile.TransferTicket.prototype.setEventId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string seat_id = 3;
 * @return {string}
 */
proto.ticket.mobile.TransferTicket.prototype.getSeatId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferTicket} returns this
 */
proto.ticket.mobile.TransferTicket.prototype.setSeatId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string seat_name = 4;
 * @return {string}
 */
proto.ticket.mobile.TransferTicket.prototype.getSeatName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferTicket} returns this
 */
proto.ticket.mobile.TransferTicket.prototype.setSeatName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional double price = 5;
 * @return {number}
 */
proto.ticket.mobile.TransferTicket.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.TransferTicket} returns this
 */
proto.ticket.mobile.TransferTicket.prototype.setPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional string price_block_id = 6;
 * @return {string}
 */
proto.ticket.mobile.TransferTicket.prototype.getPriceBlockId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferTicket} returns this
 */
proto.ticket.mobile.TransferTicket.prototype.setPriceBlockId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string price_block_name = 7;
 * @return {string}
 */
proto.ticket.mobile.TransferTicket.prototype.getPriceBlockName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferTicket} returns this
 */
proto.ticket.mobile.TransferTicket.prototype.setPriceBlockName = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string general_seat_map_id = 8;
 * @return {string}
 */
proto.ticket.mobile.TransferTicket.prototype.getGeneralSeatMapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferTicket} returns this
 */
proto.ticket.mobile.TransferTicket.prototype.setGeneralSeatMapId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string general_seat_map_name = 9;
 * @return {string}
 */
proto.ticket.mobile.TransferTicket.prototype.getGeneralSeatMapName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferTicket} returns this
 */
proto.ticket.mobile.TransferTicket.prototype.setGeneralSeatMapName = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string seat_type_name = 10;
 * @return {string}
 */
proto.ticket.mobile.TransferTicket.prototype.getSeatTypeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferTicket} returns this
 */
proto.ticket.mobile.TransferTicket.prototype.setSeatTypeName = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string currency_code = 11;
 * @return {string}
 */
proto.ticket.mobile.TransferTicket.prototype.getCurrencyCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferTicket} returns this
 */
proto.ticket.mobile.TransferTicket.prototype.setCurrencyCode = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.mobile.TransferTransaction.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TransferTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TransferTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TransferTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TransferTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ticketsList: jspb.Message.toObjectList(msg.getTicketsList(),
    proto.ticket.mobile.TransferTicket.toObject, includeInstance),
    from: jspb.Message.getFieldWithDefault(msg, 3, ""),
    to: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TransferTransaction}
 */
proto.ticket.mobile.TransferTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TransferTransaction;
  return proto.ticket.mobile.TransferTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TransferTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TransferTransaction}
 */
proto.ticket.mobile.TransferTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.ticket.mobile.TransferTicket;
      reader.readMessage(value,proto.ticket.mobile.TransferTicket.deserializeBinaryFromReader);
      msg.addTickets(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TransferTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TransferTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TransferTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TransferTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTicketsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ticket.mobile.TransferTicket.serializeBinaryToWriter
    );
  }
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ticket.mobile.TransferTransaction.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferTransaction} returns this
 */
proto.ticket.mobile.TransferTransaction.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated TransferTicket tickets = 2;
 * @return {!Array<!proto.ticket.mobile.TransferTicket>}
 */
proto.ticket.mobile.TransferTransaction.prototype.getTicketsList = function() {
  return /** @type{!Array<!proto.ticket.mobile.TransferTicket>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ticket.mobile.TransferTicket, 2));
};


/**
 * @param {!Array<!proto.ticket.mobile.TransferTicket>} value
 * @return {!proto.ticket.mobile.TransferTransaction} returns this
*/
proto.ticket.mobile.TransferTransaction.prototype.setTicketsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ticket.mobile.TransferTicket=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.mobile.TransferTicket}
 */
proto.ticket.mobile.TransferTransaction.prototype.addTickets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ticket.mobile.TransferTicket, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.mobile.TransferTransaction} returns this
 */
proto.ticket.mobile.TransferTransaction.prototype.clearTicketsList = function() {
  return this.setTicketsList([]);
};


/**
 * optional string from = 3;
 * @return {string}
 */
proto.ticket.mobile.TransferTransaction.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferTransaction} returns this
 */
proto.ticket.mobile.TransferTransaction.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string to = 4;
 * @return {string}
 */
proto.ticket.mobile.TransferTransaction.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TransferTransaction} returns this
 */
proto.ticket.mobile.TransferTransaction.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.UpdateUserInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.UpdateUserInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.UpdateUserInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.UpdateUserInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticketId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userFullName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    userPhone: jspb.Message.getFieldWithDefault(msg, 4, ""),
    userEmail: jspb.Message.getFieldWithDefault(msg, 5, ""),
    userAddress: jspb.Message.getFieldWithDefault(msg, 6, ""),
    userImage: jspb.Message.getFieldWithDefault(msg, 7, ""),
    userPhoneCode: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.UpdateUserInfoReq}
 */
proto.ticket.mobile.UpdateUserInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.UpdateUserInfoReq;
  return proto.ticket.mobile.UpdateUserInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.UpdateUserInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.UpdateUserInfoReq}
 */
proto.ticket.mobile.UpdateUserInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicketId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserFullName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserPhone(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserEmail(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserAddress(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserImage(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserPhoneCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.UpdateUserInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.UpdateUserInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.UpdateUserInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.UpdateUserInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserFullName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUserPhone();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUserEmail();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUserAddress();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUserImage();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getUserPhoneCode();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string ticket_id = 1;
 * @return {string}
 */
proto.ticket.mobile.UpdateUserInfoReq.prototype.getTicketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.UpdateUserInfoReq} returns this
 */
proto.ticket.mobile.UpdateUserInfoReq.prototype.setTicketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.ticket.mobile.UpdateUserInfoReq.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.UpdateUserInfoReq} returns this
 */
proto.ticket.mobile.UpdateUserInfoReq.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string user_full_name = 3;
 * @return {string}
 */
proto.ticket.mobile.UpdateUserInfoReq.prototype.getUserFullName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.UpdateUserInfoReq} returns this
 */
proto.ticket.mobile.UpdateUserInfoReq.prototype.setUserFullName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string user_phone = 4;
 * @return {string}
 */
proto.ticket.mobile.UpdateUserInfoReq.prototype.getUserPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.UpdateUserInfoReq} returns this
 */
proto.ticket.mobile.UpdateUserInfoReq.prototype.setUserPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string user_email = 5;
 * @return {string}
 */
proto.ticket.mobile.UpdateUserInfoReq.prototype.getUserEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.UpdateUserInfoReq} returns this
 */
proto.ticket.mobile.UpdateUserInfoReq.prototype.setUserEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string user_address = 6;
 * @return {string}
 */
proto.ticket.mobile.UpdateUserInfoReq.prototype.getUserAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.UpdateUserInfoReq} returns this
 */
proto.ticket.mobile.UpdateUserInfoReq.prototype.setUserAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string user_image = 7;
 * @return {string}
 */
proto.ticket.mobile.UpdateUserInfoReq.prototype.getUserImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.UpdateUserInfoReq} returns this
 */
proto.ticket.mobile.UpdateUserInfoReq.prototype.setUserImage = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string user_phone_code = 8;
 * @return {string}
 */
proto.ticket.mobile.UpdateUserInfoReq.prototype.getUserPhoneCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.UpdateUserInfoReq} returns this
 */
proto.ticket.mobile.UpdateUserInfoReq.prototype.setUserPhoneCode = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.UpdateStatusReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.UpdateStatusReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.UpdateStatusReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.UpdateStatusReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticketId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.UpdateStatusReq}
 */
proto.ticket.mobile.UpdateStatusReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.UpdateStatusReq;
  return proto.ticket.mobile.UpdateStatusReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.UpdateStatusReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.UpdateStatusReq}
 */
proto.ticket.mobile.UpdateStatusReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicketId(value);
      break;
    case 2:
      var value = /** @type {!proto.ticket.mobile.TicketStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.UpdateStatusReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.UpdateStatusReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.UpdateStatusReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.UpdateStatusReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string ticket_id = 1;
 * @return {string}
 */
proto.ticket.mobile.UpdateStatusReq.prototype.getTicketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.UpdateStatusReq} returns this
 */
proto.ticket.mobile.UpdateStatusReq.prototype.setTicketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TicketStatus status = 2;
 * @return {!proto.ticket.mobile.TicketStatus}
 */
proto.ticket.mobile.UpdateStatusReq.prototype.getStatus = function() {
  return /** @type {!proto.ticket.mobile.TicketStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ticket.mobile.TicketStatus} value
 * @return {!proto.ticket.mobile.UpdateStatusReq} returns this
 */
proto.ticket.mobile.UpdateStatusReq.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.UpdateEnableVerificationCodeReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.UpdateEnableVerificationCodeReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.UpdateEnableVerificationCodeReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.UpdateEnableVerificationCodeReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticketId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isEnabledVerificationCode: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.UpdateEnableVerificationCodeReq}
 */
proto.ticket.mobile.UpdateEnableVerificationCodeReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.UpdateEnableVerificationCodeReq;
  return proto.ticket.mobile.UpdateEnableVerificationCodeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.UpdateEnableVerificationCodeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.UpdateEnableVerificationCodeReq}
 */
proto.ticket.mobile.UpdateEnableVerificationCodeReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicketId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsEnabledVerificationCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.UpdateEnableVerificationCodeReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.UpdateEnableVerificationCodeReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.UpdateEnableVerificationCodeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.UpdateEnableVerificationCodeReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsEnabledVerificationCode();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string ticket_id = 1;
 * @return {string}
 */
proto.ticket.mobile.UpdateEnableVerificationCodeReq.prototype.getTicketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.UpdateEnableVerificationCodeReq} returns this
 */
proto.ticket.mobile.UpdateEnableVerificationCodeReq.prototype.setTicketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool is_enabled_verification_code = 2;
 * @return {boolean}
 */
proto.ticket.mobile.UpdateEnableVerificationCodeReq.prototype.getIsEnabledVerificationCode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.mobile.UpdateEnableVerificationCodeReq} returns this
 */
proto.ticket.mobile.UpdateEnableVerificationCodeReq.prototype.setIsEnabledVerificationCode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.GetMyTicketReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.GetMyTicketReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.GetMyTicketReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTicketReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.GetMyTicketReq}
 */
proto.ticket.mobile.GetMyTicketReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.GetMyTicketReq;
  return proto.ticket.mobile.GetMyTicketReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.GetMyTicketReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.GetMyTicketReq}
 */
proto.ticket.mobile.GetMyTicketReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.GetMyTicketReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.GetMyTicketReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.GetMyTicketReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTicketReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ticket.mobile.GetMyTicketReq.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.GetMyTicketReq} returns this
 */
proto.ticket.mobile.GetMyTicketReq.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.GetMyTicketByOrderIdReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.GetMyTicketByOrderIdReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.GetMyTicketByOrderIdReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTicketByOrderIdReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pagination: (f = msg.getPagination()) && ticket_mobile_base_pb.PaginationReq.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.GetMyTicketByOrderIdReq}
 */
proto.ticket.mobile.GetMyTicketByOrderIdReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.GetMyTicketByOrderIdReq;
  return proto.ticket.mobile.GetMyTicketByOrderIdReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.GetMyTicketByOrderIdReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.GetMyTicketByOrderIdReq}
 */
proto.ticket.mobile.GetMyTicketByOrderIdReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderId(value);
      break;
    case 2:
      var value = /** @type {!proto.ticket.mobile.TicketStatusFilter} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = new ticket_mobile_base_pb.PaginationReq;
      reader.readMessage(value,ticket_mobile_base_pb.PaginationReq.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.GetMyTicketByOrderIdReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.GetMyTicketByOrderIdReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.GetMyTicketByOrderIdReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTicketByOrderIdReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      ticket_mobile_base_pb.PaginationReq.serializeBinaryToWriter
    );
  }
};


/**
 * optional string order_id = 1;
 * @return {string}
 */
proto.ticket.mobile.GetMyTicketByOrderIdReq.prototype.getOrderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.GetMyTicketByOrderIdReq} returns this
 */
proto.ticket.mobile.GetMyTicketByOrderIdReq.prototype.setOrderId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TicketStatusFilter status = 2;
 * @return {!proto.ticket.mobile.TicketStatusFilter}
 */
proto.ticket.mobile.GetMyTicketByOrderIdReq.prototype.getStatus = function() {
  return /** @type {!proto.ticket.mobile.TicketStatusFilter} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ticket.mobile.TicketStatusFilter} value
 * @return {!proto.ticket.mobile.GetMyTicketByOrderIdReq} returns this
 */
proto.ticket.mobile.GetMyTicketByOrderIdReq.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional PaginationReq pagination = 3;
 * @return {?proto.ticket.mobile.PaginationReq}
 */
proto.ticket.mobile.GetMyTicketByOrderIdReq.prototype.getPagination = function() {
  return /** @type{?proto.ticket.mobile.PaginationReq} */ (
    jspb.Message.getWrapperField(this, ticket_mobile_base_pb.PaginationReq, 3));
};


/**
 * @param {?proto.ticket.mobile.PaginationReq|undefined} value
 * @return {!proto.ticket.mobile.GetMyTicketByOrderIdReq} returns this
*/
proto.ticket.mobile.GetMyTicketByOrderIdReq.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.GetMyTicketByOrderIdReq} returns this
 */
proto.ticket.mobile.GetMyTicketByOrderIdReq.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.GetMyTicketByOrderIdReq.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.GetMyTicketByPhoneReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.GetMyTicketByPhoneReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.GetMyTicketByPhoneReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTicketByPhoneReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userPhone: jspb.Message.getFieldWithDefault(msg, 1, ""),
    verificationCode: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.GetMyTicketByPhoneReq}
 */
proto.ticket.mobile.GetMyTicketByPhoneReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.GetMyTicketByPhoneReq;
  return proto.ticket.mobile.GetMyTicketByPhoneReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.GetMyTicketByPhoneReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.GetMyTicketByPhoneReq}
 */
proto.ticket.mobile.GetMyTicketByPhoneReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserPhone(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerificationCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.GetMyTicketByPhoneReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.GetMyTicketByPhoneReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.GetMyTicketByPhoneReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTicketByPhoneReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserPhone();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVerificationCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string user_phone = 1;
 * @return {string}
 */
proto.ticket.mobile.GetMyTicketByPhoneReq.prototype.getUserPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.GetMyTicketByPhoneReq} returns this
 */
proto.ticket.mobile.GetMyTicketByPhoneReq.prototype.setUserPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string verification_code = 2;
 * @return {string}
 */
proto.ticket.mobile.GetMyTicketByPhoneReq.prototype.getVerificationCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.GetMyTicketByPhoneReq} returns this
 */
proto.ticket.mobile.GetMyTicketByPhoneReq.prototype.setVerificationCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pagination: (f = msg.getPagination()) && ticket_mobile_base_pb.PaginationReq.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq}
 */
proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq;
  return proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq}
 */
proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionId(value);
      break;
    case 2:
      var value = new ticket_mobile_base_pb.PaginationReq;
      reader.readMessage(value,ticket_mobile_base_pb.PaginationReq.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ticket_mobile_base_pb.PaginationReq.serializeBinaryToWriter
    );
  }
};


/**
 * optional string transaction_id = 1;
 * @return {string}
 */
proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq.prototype.getTransactionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq} returns this
 */
proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq.prototype.setTransactionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PaginationReq pagination = 2;
 * @return {?proto.ticket.mobile.PaginationReq}
 */
proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq.prototype.getPagination = function() {
  return /** @type{?proto.ticket.mobile.PaginationReq} */ (
    jspb.Message.getWrapperField(this, ticket_mobile_base_pb.PaginationReq, 2));
};


/**
 * @param {?proto.ticket.mobile.PaginationReq|undefined} value
 * @return {!proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq} returns this
*/
proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq} returns this
 */
proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.GetMyTicketByTransferTransactionIdReq.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.ListMyTicketReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.ListMyTicketReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.ListMyTicketReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.ListMyTicketReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.ListMyTicketReq}
 */
proto.ticket.mobile.ListMyTicketReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.ListMyTicketReq;
  return proto.ticket.mobile.ListMyTicketReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.ListMyTicketReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.ListMyTicketReq}
 */
proto.ticket.mobile.ListMyTicketReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.ListMyTicketReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.ListMyTicketReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.ListMyTicketReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.ListMyTicketReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.ListMyTicketByStatusReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.ListMyTicketByStatusReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.ListMyTicketByStatusReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.ListMyTicketByStatusReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pagination: (f = msg.getPagination()) && ticket_mobile_base_pb.PaginationReq.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.ListMyTicketByStatusReq}
 */
proto.ticket.mobile.ListMyTicketByStatusReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.ListMyTicketByStatusReq;
  return proto.ticket.mobile.ListMyTicketByStatusReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.ListMyTicketByStatusReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.ListMyTicketByStatusReq}
 */
proto.ticket.mobile.ListMyTicketByStatusReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderId(value);
      break;
    case 2:
      var value = /** @type {!proto.ticket.mobile.TicketStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = new ticket_mobile_base_pb.PaginationReq;
      reader.readMessage(value,ticket_mobile_base_pb.PaginationReq.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.ListMyTicketByStatusReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.ListMyTicketByStatusReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.ListMyTicketByStatusReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.ListMyTicketByStatusReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      ticket_mobile_base_pb.PaginationReq.serializeBinaryToWriter
    );
  }
};


/**
 * optional string order_id = 1;
 * @return {string}
 */
proto.ticket.mobile.ListMyTicketByStatusReq.prototype.getOrderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.ListMyTicketByStatusReq} returns this
 */
proto.ticket.mobile.ListMyTicketByStatusReq.prototype.setOrderId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TicketStatus status = 2;
 * @return {!proto.ticket.mobile.TicketStatus}
 */
proto.ticket.mobile.ListMyTicketByStatusReq.prototype.getStatus = function() {
  return /** @type {!proto.ticket.mobile.TicketStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ticket.mobile.TicketStatus} value
 * @return {!proto.ticket.mobile.ListMyTicketByStatusReq} returns this
 */
proto.ticket.mobile.ListMyTicketByStatusReq.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional PaginationReq pagination = 3;
 * @return {?proto.ticket.mobile.PaginationReq}
 */
proto.ticket.mobile.ListMyTicketByStatusReq.prototype.getPagination = function() {
  return /** @type{?proto.ticket.mobile.PaginationReq} */ (
    jspb.Message.getWrapperField(this, ticket_mobile_base_pb.PaginationReq, 3));
};


/**
 * @param {?proto.ticket.mobile.PaginationReq|undefined} value
 * @return {!proto.ticket.mobile.ListMyTicketByStatusReq} returns this
*/
proto.ticket.mobile.ListMyTicketByStatusReq.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.ListMyTicketByStatusReq} returns this
 */
proto.ticket.mobile.ListMyTicketByStatusReq.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.ListMyTicketByStatusReq.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.ListMyTicketByPriceBlockReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.ListMyTicketByPriceBlockReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.ListMyTicketByPriceBlockReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.ListMyTicketByPriceBlockReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    priceBlockId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    seatNameFrom: jspb.Message.getFieldWithDefault(msg, 3, ""),
    seatNameTo: jspb.Message.getFieldWithDefault(msg, 4, ""),
    seatMapId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    pagination: (f = msg.getPagination()) && ticket_mobile_base_pb.PaginationReq.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.ListMyTicketByPriceBlockReq}
 */
proto.ticket.mobile.ListMyTicketByPriceBlockReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.ListMyTicketByPriceBlockReq;
  return proto.ticket.mobile.ListMyTicketByPriceBlockReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.ListMyTicketByPriceBlockReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.ListMyTicketByPriceBlockReq}
 */
proto.ticket.mobile.ListMyTicketByPriceBlockReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriceBlockId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatNameFrom(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatNameTo(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatMapId(value);
      break;
    case 6:
      var value = new ticket_mobile_base_pb.PaginationReq;
      reader.readMessage(value,ticket_mobile_base_pb.PaginationReq.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.ListMyTicketByPriceBlockReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.ListMyTicketByPriceBlockReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.ListMyTicketByPriceBlockReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.ListMyTicketByPriceBlockReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPriceBlockId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSeatNameFrom();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSeatNameTo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSeatMapId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      ticket_mobile_base_pb.PaginationReq.serializeBinaryToWriter
    );
  }
};


/**
 * optional string order_id = 1;
 * @return {string}
 */
proto.ticket.mobile.ListMyTicketByPriceBlockReq.prototype.getOrderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.ListMyTicketByPriceBlockReq} returns this
 */
proto.ticket.mobile.ListMyTicketByPriceBlockReq.prototype.setOrderId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string price_block_id = 2;
 * @return {string}
 */
proto.ticket.mobile.ListMyTicketByPriceBlockReq.prototype.getPriceBlockId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.ListMyTicketByPriceBlockReq} returns this
 */
proto.ticket.mobile.ListMyTicketByPriceBlockReq.prototype.setPriceBlockId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string seat_name_from = 3;
 * @return {string}
 */
proto.ticket.mobile.ListMyTicketByPriceBlockReq.prototype.getSeatNameFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.ListMyTicketByPriceBlockReq} returns this
 */
proto.ticket.mobile.ListMyTicketByPriceBlockReq.prototype.setSeatNameFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string seat_name_to = 4;
 * @return {string}
 */
proto.ticket.mobile.ListMyTicketByPriceBlockReq.prototype.getSeatNameTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.ListMyTicketByPriceBlockReq} returns this
 */
proto.ticket.mobile.ListMyTicketByPriceBlockReq.prototype.setSeatNameTo = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string seat_map_id = 5;
 * @return {string}
 */
proto.ticket.mobile.ListMyTicketByPriceBlockReq.prototype.getSeatMapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.ListMyTicketByPriceBlockReq} returns this
 */
proto.ticket.mobile.ListMyTicketByPriceBlockReq.prototype.setSeatMapId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional PaginationReq pagination = 6;
 * @return {?proto.ticket.mobile.PaginationReq}
 */
proto.ticket.mobile.ListMyTicketByPriceBlockReq.prototype.getPagination = function() {
  return /** @type{?proto.ticket.mobile.PaginationReq} */ (
    jspb.Message.getWrapperField(this, ticket_mobile_base_pb.PaginationReq, 6));
};


/**
 * @param {?proto.ticket.mobile.PaginationReq|undefined} value
 * @return {!proto.ticket.mobile.ListMyTicketByPriceBlockReq} returns this
*/
proto.ticket.mobile.ListMyTicketByPriceBlockReq.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.ListMyTicketByPriceBlockReq} returns this
 */
proto.ticket.mobile.ListMyTicketByPriceBlockReq.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.ListMyTicketByPriceBlockReq.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.ListMyTicketReadyToCheckinReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.ListMyTicketReadyToCheckinReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.ListMyTicketReadyToCheckinReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.ListMyTicketReadyToCheckinReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.ListMyTicketReadyToCheckinReq}
 */
proto.ticket.mobile.ListMyTicketReadyToCheckinReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.ListMyTicketReadyToCheckinReq;
  return proto.ticket.mobile.ListMyTicketReadyToCheckinReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.ListMyTicketReadyToCheckinReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.ListMyTicketReadyToCheckinReq}
 */
proto.ticket.mobile.ListMyTicketReadyToCheckinReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.ListMyTicketReadyToCheckinReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.ListMyTicketReadyToCheckinReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.ListMyTicketReadyToCheckinReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.ListMyTicketReadyToCheckinReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.mobile.MarkTicketOfflineReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.MarkTicketOfflineReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.MarkTicketOfflineReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.MarkTicketOfflineReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.MarkTicketOfflineReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticketIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.MarkTicketOfflineReq}
 */
proto.ticket.mobile.MarkTicketOfflineReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.MarkTicketOfflineReq;
  return proto.ticket.mobile.MarkTicketOfflineReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.MarkTicketOfflineReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.MarkTicketOfflineReq}
 */
proto.ticket.mobile.MarkTicketOfflineReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTicketIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.MarkTicketOfflineReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.MarkTicketOfflineReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.MarkTicketOfflineReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.MarkTicketOfflineReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicketIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string ticket_ids = 1;
 * @return {!Array<string>}
 */
proto.ticket.mobile.MarkTicketOfflineReq.prototype.getTicketIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ticket.mobile.MarkTicketOfflineReq} returns this
 */
proto.ticket.mobile.MarkTicketOfflineReq.prototype.setTicketIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ticket.mobile.MarkTicketOfflineReq} returns this
 */
proto.ticket.mobile.MarkTicketOfflineReq.prototype.addTicketIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.mobile.MarkTicketOfflineReq} returns this
 */
proto.ticket.mobile.MarkTicketOfflineReq.prototype.clearTicketIdsList = function() {
  return this.setTicketIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.GetMyTransferTransactionHistoryReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.GetMyTransferTransactionHistoryReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.GetMyTransferTransactionHistoryReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTransferTransactionHistoryReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    pagination: (f = msg.getPagination()) && ticket_mobile_base_pb.PaginationReq.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.GetMyTransferTransactionHistoryReq}
 */
proto.ticket.mobile.GetMyTransferTransactionHistoryReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.GetMyTransferTransactionHistoryReq;
  return proto.ticket.mobile.GetMyTransferTransactionHistoryReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.GetMyTransferTransactionHistoryReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.GetMyTransferTransactionHistoryReq}
 */
proto.ticket.mobile.GetMyTransferTransactionHistoryReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new ticket_mobile_base_pb.PaginationReq;
      reader.readMessage(value,ticket_mobile_base_pb.PaginationReq.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.GetMyTransferTransactionHistoryReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.GetMyTransferTransactionHistoryReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.GetMyTransferTransactionHistoryReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTransferTransactionHistoryReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      ticket_mobile_base_pb.PaginationReq.serializeBinaryToWriter
    );
  }
};


/**
 * optional PaginationReq pagination = 1;
 * @return {?proto.ticket.mobile.PaginationReq}
 */
proto.ticket.mobile.GetMyTransferTransactionHistoryReq.prototype.getPagination = function() {
  return /** @type{?proto.ticket.mobile.PaginationReq} */ (
    jspb.Message.getWrapperField(this, ticket_mobile_base_pb.PaginationReq, 1));
};


/**
 * @param {?proto.ticket.mobile.PaginationReq|undefined} value
 * @return {!proto.ticket.mobile.GetMyTransferTransactionHistoryReq} returns this
*/
proto.ticket.mobile.GetMyTransferTransactionHistoryReq.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.GetMyTransferTransactionHistoryReq} returns this
 */
proto.ticket.mobile.GetMyTransferTransactionHistoryReq.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.GetMyTransferTransactionHistoryReq.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.GetMyTicketsByDeliveryIDReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.GetMyTicketsByDeliveryIDReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.GetMyTicketsByDeliveryIDReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTicketsByDeliveryIDReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    deliveryId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pagination: (f = msg.getPagination()) && base_base_pb.PaginationReq.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.GetMyTicketsByDeliveryIDReq}
 */
proto.ticket.mobile.GetMyTicketsByDeliveryIDReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.GetMyTicketsByDeliveryIDReq;
  return proto.ticket.mobile.GetMyTicketsByDeliveryIDReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.GetMyTicketsByDeliveryIDReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.GetMyTicketsByDeliveryIDReq}
 */
proto.ticket.mobile.GetMyTicketsByDeliveryIDReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeliveryId(value);
      break;
    case 2:
      var value = new base_base_pb.PaginationReq;
      reader.readMessage(value,base_base_pb.PaginationReq.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.GetMyTicketsByDeliveryIDReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.GetMyTicketsByDeliveryIDReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.GetMyTicketsByDeliveryIDReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTicketsByDeliveryIDReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeliveryId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      base_base_pb.PaginationReq.serializeBinaryToWriter
    );
  }
};


/**
 * optional string delivery_id = 1;
 * @return {string}
 */
proto.ticket.mobile.GetMyTicketsByDeliveryIDReq.prototype.getDeliveryId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.GetMyTicketsByDeliveryIDReq} returns this
 */
proto.ticket.mobile.GetMyTicketsByDeliveryIDReq.prototype.setDeliveryId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional base.PaginationReq pagination = 2;
 * @return {?proto.base.PaginationReq}
 */
proto.ticket.mobile.GetMyTicketsByDeliveryIDReq.prototype.getPagination = function() {
  return /** @type{?proto.base.PaginationReq} */ (
    jspb.Message.getWrapperField(this, base_base_pb.PaginationReq, 2));
};


/**
 * @param {?proto.base.PaginationReq|undefined} value
 * @return {!proto.ticket.mobile.GetMyTicketsByDeliveryIDReq} returns this
*/
proto.ticket.mobile.GetMyTicketsByDeliveryIDReq.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.GetMyTicketsByDeliveryIDReq} returns this
 */
proto.ticket.mobile.GetMyTicketsByDeliveryIDReq.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.GetMyTicketsByDeliveryIDReq.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.GetMyTicketRes.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.GetMyTicketRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.GetMyTicketRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTicketRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.ticket.mobile.TicketInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.GetMyTicketRes}
 */
proto.ticket.mobile.GetMyTicketRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.GetMyTicketRes;
  return proto.ticket.mobile.GetMyTicketRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.GetMyTicketRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.GetMyTicketRes}
 */
proto.ticket.mobile.GetMyTicketRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.mobile.TicketInfo;
      reader.readMessage(value,proto.ticket.mobile.TicketInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.GetMyTicketRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.GetMyTicketRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.GetMyTicketRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTicketRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ticket.mobile.TicketInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional TicketInfo info = 1;
 * @return {?proto.ticket.mobile.TicketInfo}
 */
proto.ticket.mobile.GetMyTicketRes.prototype.getInfo = function() {
  return /** @type{?proto.ticket.mobile.TicketInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TicketInfo, 1));
};


/**
 * @param {?proto.ticket.mobile.TicketInfo|undefined} value
 * @return {!proto.ticket.mobile.GetMyTicketRes} returns this
*/
proto.ticket.mobile.GetMyTicketRes.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.GetMyTicketRes} returns this
 */
proto.ticket.mobile.GetMyTicketRes.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.GetMyTicketRes.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.mobile.GetMyTicketByOrderIdRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.GetMyTicketByOrderIdRes.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.GetMyTicketByOrderIdRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.GetMyTicketByOrderIdRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTicketByOrderIdRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoList: jspb.Message.toObjectList(msg.getInfoList(),
    proto.ticket.mobile.TicketInfo.toObject, includeInstance),
    pagination: (f = msg.getPagination()) && ticket_mobile_base_pb.PaginationRes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.GetMyTicketByOrderIdRes}
 */
proto.ticket.mobile.GetMyTicketByOrderIdRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.GetMyTicketByOrderIdRes;
  return proto.ticket.mobile.GetMyTicketByOrderIdRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.GetMyTicketByOrderIdRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.GetMyTicketByOrderIdRes}
 */
proto.ticket.mobile.GetMyTicketByOrderIdRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.mobile.TicketInfo;
      reader.readMessage(value,proto.ticket.mobile.TicketInfo.deserializeBinaryFromReader);
      msg.addInfo(value);
      break;
    case 2:
      var value = new ticket_mobile_base_pb.PaginationRes;
      reader.readMessage(value,ticket_mobile_base_pb.PaginationRes.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.GetMyTicketByOrderIdRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.GetMyTicketByOrderIdRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.GetMyTicketByOrderIdRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTicketByOrderIdRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ticket.mobile.TicketInfo.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ticket_mobile_base_pb.PaginationRes.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TicketInfo info = 1;
 * @return {!Array<!proto.ticket.mobile.TicketInfo>}
 */
proto.ticket.mobile.GetMyTicketByOrderIdRes.prototype.getInfoList = function() {
  return /** @type{!Array<!proto.ticket.mobile.TicketInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ticket.mobile.TicketInfo, 1));
};


/**
 * @param {!Array<!proto.ticket.mobile.TicketInfo>} value
 * @return {!proto.ticket.mobile.GetMyTicketByOrderIdRes} returns this
*/
proto.ticket.mobile.GetMyTicketByOrderIdRes.prototype.setInfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ticket.mobile.TicketInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.mobile.TicketInfo}
 */
proto.ticket.mobile.GetMyTicketByOrderIdRes.prototype.addInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ticket.mobile.TicketInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.mobile.GetMyTicketByOrderIdRes} returns this
 */
proto.ticket.mobile.GetMyTicketByOrderIdRes.prototype.clearInfoList = function() {
  return this.setInfoList([]);
};


/**
 * optional PaginationRes pagination = 2;
 * @return {?proto.ticket.mobile.PaginationRes}
 */
proto.ticket.mobile.GetMyTicketByOrderIdRes.prototype.getPagination = function() {
  return /** @type{?proto.ticket.mobile.PaginationRes} */ (
    jspb.Message.getWrapperField(this, ticket_mobile_base_pb.PaginationRes, 2));
};


/**
 * @param {?proto.ticket.mobile.PaginationRes|undefined} value
 * @return {!proto.ticket.mobile.GetMyTicketByOrderIdRes} returns this
*/
proto.ticket.mobile.GetMyTicketByOrderIdRes.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.GetMyTicketByOrderIdRes} returns this
 */
proto.ticket.mobile.GetMyTicketByOrderIdRes.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.GetMyTicketByOrderIdRes.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.GetMyTicketByPhoneRes.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.GetMyTicketByPhoneRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.GetMyTicketByPhoneRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTicketByPhoneRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.ticket.mobile.TicketInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.GetMyTicketByPhoneRes}
 */
proto.ticket.mobile.GetMyTicketByPhoneRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.GetMyTicketByPhoneRes;
  return proto.ticket.mobile.GetMyTicketByPhoneRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.GetMyTicketByPhoneRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.GetMyTicketByPhoneRes}
 */
proto.ticket.mobile.GetMyTicketByPhoneRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.mobile.TicketInfo;
      reader.readMessage(value,proto.ticket.mobile.TicketInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.GetMyTicketByPhoneRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.GetMyTicketByPhoneRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.GetMyTicketByPhoneRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTicketByPhoneRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ticket.mobile.TicketInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional TicketInfo info = 1;
 * @return {?proto.ticket.mobile.TicketInfo}
 */
proto.ticket.mobile.GetMyTicketByPhoneRes.prototype.getInfo = function() {
  return /** @type{?proto.ticket.mobile.TicketInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TicketInfo, 1));
};


/**
 * @param {?proto.ticket.mobile.TicketInfo|undefined} value
 * @return {!proto.ticket.mobile.GetMyTicketByPhoneRes} returns this
*/
proto.ticket.mobile.GetMyTicketByPhoneRes.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.GetMyTicketByPhoneRes} returns this
 */
proto.ticket.mobile.GetMyTicketByPhoneRes.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.GetMyTicketByPhoneRes.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.mobile.GetMyTicketsRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.GetMyTicketsRes.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.GetMyTicketsRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.GetMyTicketsRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTicketsRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoList: jspb.Message.toObjectList(msg.getInfoList(),
    proto.ticket.mobile.TicketInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.GetMyTicketsRes}
 */
proto.ticket.mobile.GetMyTicketsRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.GetMyTicketsRes;
  return proto.ticket.mobile.GetMyTicketsRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.GetMyTicketsRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.GetMyTicketsRes}
 */
proto.ticket.mobile.GetMyTicketsRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.mobile.TicketInfo;
      reader.readMessage(value,proto.ticket.mobile.TicketInfo.deserializeBinaryFromReader);
      msg.addInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.GetMyTicketsRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.GetMyTicketsRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.GetMyTicketsRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTicketsRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ticket.mobile.TicketInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TicketInfo info = 1;
 * @return {!Array<!proto.ticket.mobile.TicketInfo>}
 */
proto.ticket.mobile.GetMyTicketsRes.prototype.getInfoList = function() {
  return /** @type{!Array<!proto.ticket.mobile.TicketInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ticket.mobile.TicketInfo, 1));
};


/**
 * @param {!Array<!proto.ticket.mobile.TicketInfo>} value
 * @return {!proto.ticket.mobile.GetMyTicketsRes} returns this
*/
proto.ticket.mobile.GetMyTicketsRes.prototype.setInfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ticket.mobile.TicketInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.mobile.TicketInfo}
 */
proto.ticket.mobile.GetMyTicketsRes.prototype.addInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ticket.mobile.TicketInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.mobile.GetMyTicketsRes} returns this
 */
proto.ticket.mobile.GetMyTicketsRes.prototype.clearInfoList = function() {
  return this.setInfoList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoList: jspb.Message.toObjectList(msg.getInfoList(),
    proto.ticket.mobile.TicketInfo.toObject, includeInstance),
    pagination: (f = msg.getPagination()) && ticket_mobile_base_pb.PaginationRes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes}
 */
proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes;
  return proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes}
 */
proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.mobile.TicketInfo;
      reader.readMessage(value,proto.ticket.mobile.TicketInfo.deserializeBinaryFromReader);
      msg.addInfo(value);
      break;
    case 2:
      var value = new ticket_mobile_base_pb.PaginationRes;
      reader.readMessage(value,ticket_mobile_base_pb.PaginationRes.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ticket.mobile.TicketInfo.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ticket_mobile_base_pb.PaginationRes.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TicketInfo info = 1;
 * @return {!Array<!proto.ticket.mobile.TicketInfo>}
 */
proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes.prototype.getInfoList = function() {
  return /** @type{!Array<!proto.ticket.mobile.TicketInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ticket.mobile.TicketInfo, 1));
};


/**
 * @param {!Array<!proto.ticket.mobile.TicketInfo>} value
 * @return {!proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes} returns this
*/
proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes.prototype.setInfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ticket.mobile.TicketInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.mobile.TicketInfo}
 */
proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes.prototype.addInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ticket.mobile.TicketInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes} returns this
 */
proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes.prototype.clearInfoList = function() {
  return this.setInfoList([]);
};


/**
 * optional PaginationRes pagination = 2;
 * @return {?proto.ticket.mobile.PaginationRes}
 */
proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes.prototype.getPagination = function() {
  return /** @type{?proto.ticket.mobile.PaginationRes} */ (
    jspb.Message.getWrapperField(this, ticket_mobile_base_pb.PaginationRes, 2));
};


/**
 * @param {?proto.ticket.mobile.PaginationRes|undefined} value
 * @return {!proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes} returns this
*/
proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes} returns this
 */
proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.GetMyTicketByTransferTransactionIdRes.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.mobile.ListMyTicketByStatusRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.ListMyTicketByStatusRes.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.ListMyTicketByStatusRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.ListMyTicketByStatusRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.ListMyTicketByStatusRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoList: jspb.Message.toObjectList(msg.getInfoList(),
    proto.ticket.mobile.TicketInfo.toObject, includeInstance),
    pagination: (f = msg.getPagination()) && ticket_mobile_base_pb.PaginationRes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.ListMyTicketByStatusRes}
 */
proto.ticket.mobile.ListMyTicketByStatusRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.ListMyTicketByStatusRes;
  return proto.ticket.mobile.ListMyTicketByStatusRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.ListMyTicketByStatusRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.ListMyTicketByStatusRes}
 */
proto.ticket.mobile.ListMyTicketByStatusRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.mobile.TicketInfo;
      reader.readMessage(value,proto.ticket.mobile.TicketInfo.deserializeBinaryFromReader);
      msg.addInfo(value);
      break;
    case 2:
      var value = new ticket_mobile_base_pb.PaginationRes;
      reader.readMessage(value,ticket_mobile_base_pb.PaginationRes.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.ListMyTicketByStatusRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.ListMyTicketByStatusRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.ListMyTicketByStatusRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.ListMyTicketByStatusRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ticket.mobile.TicketInfo.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ticket_mobile_base_pb.PaginationRes.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TicketInfo info = 1;
 * @return {!Array<!proto.ticket.mobile.TicketInfo>}
 */
proto.ticket.mobile.ListMyTicketByStatusRes.prototype.getInfoList = function() {
  return /** @type{!Array<!proto.ticket.mobile.TicketInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ticket.mobile.TicketInfo, 1));
};


/**
 * @param {!Array<!proto.ticket.mobile.TicketInfo>} value
 * @return {!proto.ticket.mobile.ListMyTicketByStatusRes} returns this
*/
proto.ticket.mobile.ListMyTicketByStatusRes.prototype.setInfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ticket.mobile.TicketInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.mobile.TicketInfo}
 */
proto.ticket.mobile.ListMyTicketByStatusRes.prototype.addInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ticket.mobile.TicketInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.mobile.ListMyTicketByStatusRes} returns this
 */
proto.ticket.mobile.ListMyTicketByStatusRes.prototype.clearInfoList = function() {
  return this.setInfoList([]);
};


/**
 * optional PaginationRes pagination = 2;
 * @return {?proto.ticket.mobile.PaginationRes}
 */
proto.ticket.mobile.ListMyTicketByStatusRes.prototype.getPagination = function() {
  return /** @type{?proto.ticket.mobile.PaginationRes} */ (
    jspb.Message.getWrapperField(this, ticket_mobile_base_pb.PaginationRes, 2));
};


/**
 * @param {?proto.ticket.mobile.PaginationRes|undefined} value
 * @return {!proto.ticket.mobile.ListMyTicketByStatusRes} returns this
*/
proto.ticket.mobile.ListMyTicketByStatusRes.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.ListMyTicketByStatusRes} returns this
 */
proto.ticket.mobile.ListMyTicketByStatusRes.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.ListMyTicketByStatusRes.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.mobile.ListMyTicketByPriceBlockRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.ListMyTicketByPriceBlockRes.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.ListMyTicketByPriceBlockRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.ListMyTicketByPriceBlockRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.ListMyTicketByPriceBlockRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoList: jspb.Message.toObjectList(msg.getInfoList(),
    proto.ticket.mobile.TicketInfo.toObject, includeInstance),
    pagination: (f = msg.getPagination()) && ticket_mobile_base_pb.PaginationRes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.ListMyTicketByPriceBlockRes}
 */
proto.ticket.mobile.ListMyTicketByPriceBlockRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.ListMyTicketByPriceBlockRes;
  return proto.ticket.mobile.ListMyTicketByPriceBlockRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.ListMyTicketByPriceBlockRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.ListMyTicketByPriceBlockRes}
 */
proto.ticket.mobile.ListMyTicketByPriceBlockRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.mobile.TicketInfo;
      reader.readMessage(value,proto.ticket.mobile.TicketInfo.deserializeBinaryFromReader);
      msg.addInfo(value);
      break;
    case 2:
      var value = new ticket_mobile_base_pb.PaginationRes;
      reader.readMessage(value,ticket_mobile_base_pb.PaginationRes.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.ListMyTicketByPriceBlockRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.ListMyTicketByPriceBlockRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.ListMyTicketByPriceBlockRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.ListMyTicketByPriceBlockRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ticket.mobile.TicketInfo.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ticket_mobile_base_pb.PaginationRes.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TicketInfo info = 1;
 * @return {!Array<!proto.ticket.mobile.TicketInfo>}
 */
proto.ticket.mobile.ListMyTicketByPriceBlockRes.prototype.getInfoList = function() {
  return /** @type{!Array<!proto.ticket.mobile.TicketInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ticket.mobile.TicketInfo, 1));
};


/**
 * @param {!Array<!proto.ticket.mobile.TicketInfo>} value
 * @return {!proto.ticket.mobile.ListMyTicketByPriceBlockRes} returns this
*/
proto.ticket.mobile.ListMyTicketByPriceBlockRes.prototype.setInfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ticket.mobile.TicketInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.mobile.TicketInfo}
 */
proto.ticket.mobile.ListMyTicketByPriceBlockRes.prototype.addInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ticket.mobile.TicketInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.mobile.ListMyTicketByPriceBlockRes} returns this
 */
proto.ticket.mobile.ListMyTicketByPriceBlockRes.prototype.clearInfoList = function() {
  return this.setInfoList([]);
};


/**
 * optional PaginationRes pagination = 2;
 * @return {?proto.ticket.mobile.PaginationRes}
 */
proto.ticket.mobile.ListMyTicketByPriceBlockRes.prototype.getPagination = function() {
  return /** @type{?proto.ticket.mobile.PaginationRes} */ (
    jspb.Message.getWrapperField(this, ticket_mobile_base_pb.PaginationRes, 2));
};


/**
 * @param {?proto.ticket.mobile.PaginationRes|undefined} value
 * @return {!proto.ticket.mobile.ListMyTicketByPriceBlockRes} returns this
*/
proto.ticket.mobile.ListMyTicketByPriceBlockRes.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.ListMyTicketByPriceBlockRes} returns this
 */
proto.ticket.mobile.ListMyTicketByPriceBlockRes.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.ListMyTicketByPriceBlockRes.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.mobile.ListMyTicketReadyToCheckinRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.ListMyTicketReadyToCheckinRes.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.ListMyTicketReadyToCheckinRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.ListMyTicketReadyToCheckinRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.ListMyTicketReadyToCheckinRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoList: jspb.Message.toObjectList(msg.getInfoList(),
    proto.ticket.mobile.TicketInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.ListMyTicketReadyToCheckinRes}
 */
proto.ticket.mobile.ListMyTicketReadyToCheckinRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.ListMyTicketReadyToCheckinRes;
  return proto.ticket.mobile.ListMyTicketReadyToCheckinRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.ListMyTicketReadyToCheckinRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.ListMyTicketReadyToCheckinRes}
 */
proto.ticket.mobile.ListMyTicketReadyToCheckinRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.mobile.TicketInfo;
      reader.readMessage(value,proto.ticket.mobile.TicketInfo.deserializeBinaryFromReader);
      msg.addInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.ListMyTicketReadyToCheckinRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.ListMyTicketReadyToCheckinRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.ListMyTicketReadyToCheckinRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.ListMyTicketReadyToCheckinRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ticket.mobile.TicketInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TicketInfo info = 1;
 * @return {!Array<!proto.ticket.mobile.TicketInfo>}
 */
proto.ticket.mobile.ListMyTicketReadyToCheckinRes.prototype.getInfoList = function() {
  return /** @type{!Array<!proto.ticket.mobile.TicketInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ticket.mobile.TicketInfo, 1));
};


/**
 * @param {!Array<!proto.ticket.mobile.TicketInfo>} value
 * @return {!proto.ticket.mobile.ListMyTicketReadyToCheckinRes} returns this
*/
proto.ticket.mobile.ListMyTicketReadyToCheckinRes.prototype.setInfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ticket.mobile.TicketInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.mobile.TicketInfo}
 */
proto.ticket.mobile.ListMyTicketReadyToCheckinRes.prototype.addInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ticket.mobile.TicketInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.mobile.ListMyTicketReadyToCheckinRes} returns this
 */
proto.ticket.mobile.ListMyTicketReadyToCheckinRes.prototype.clearInfoList = function() {
  return this.setInfoList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.mobile.GetMyTransferTransactionHistoryRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.GetMyTransferTransactionHistoryRes.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.GetMyTransferTransactionHistoryRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.GetMyTransferTransactionHistoryRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTransferTransactionHistoryRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.ticket.mobile.TransferTransaction.toObject, includeInstance),
    pagination: (f = msg.getPagination()) && ticket_mobile_base_pb.PaginationRes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.GetMyTransferTransactionHistoryRes}
 */
proto.ticket.mobile.GetMyTransferTransactionHistoryRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.GetMyTransferTransactionHistoryRes;
  return proto.ticket.mobile.GetMyTransferTransactionHistoryRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.GetMyTransferTransactionHistoryRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.GetMyTransferTransactionHistoryRes}
 */
proto.ticket.mobile.GetMyTransferTransactionHistoryRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.mobile.TransferTransaction;
      reader.readMessage(value,proto.ticket.mobile.TransferTransaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    case 2:
      var value = new ticket_mobile_base_pb.PaginationRes;
      reader.readMessage(value,ticket_mobile_base_pb.PaginationRes.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.GetMyTransferTransactionHistoryRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.GetMyTransferTransactionHistoryRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.GetMyTransferTransactionHistoryRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTransferTransactionHistoryRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ticket.mobile.TransferTransaction.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ticket_mobile_base_pb.PaginationRes.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TransferTransaction transactions = 1;
 * @return {!Array<!proto.ticket.mobile.TransferTransaction>}
 */
proto.ticket.mobile.GetMyTransferTransactionHistoryRes.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.ticket.mobile.TransferTransaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ticket.mobile.TransferTransaction, 1));
};


/**
 * @param {!Array<!proto.ticket.mobile.TransferTransaction>} value
 * @return {!proto.ticket.mobile.GetMyTransferTransactionHistoryRes} returns this
*/
proto.ticket.mobile.GetMyTransferTransactionHistoryRes.prototype.setTransactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ticket.mobile.TransferTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.mobile.TransferTransaction}
 */
proto.ticket.mobile.GetMyTransferTransactionHistoryRes.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ticket.mobile.TransferTransaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.mobile.GetMyTransferTransactionHistoryRes} returns this
 */
proto.ticket.mobile.GetMyTransferTransactionHistoryRes.prototype.clearTransactionsList = function() {
  return this.setTransactionsList([]);
};


/**
 * optional PaginationRes pagination = 2;
 * @return {?proto.ticket.mobile.PaginationRes}
 */
proto.ticket.mobile.GetMyTransferTransactionHistoryRes.prototype.getPagination = function() {
  return /** @type{?proto.ticket.mobile.PaginationRes} */ (
    jspb.Message.getWrapperField(this, ticket_mobile_base_pb.PaginationRes, 2));
};


/**
 * @param {?proto.ticket.mobile.PaginationRes|undefined} value
 * @return {!proto.ticket.mobile.GetMyTransferTransactionHistoryRes} returns this
*/
proto.ticket.mobile.GetMyTransferTransactionHistoryRes.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.GetMyTransferTransactionHistoryRes} returns this
 */
proto.ticket.mobile.GetMyTransferTransactionHistoryRes.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.GetMyTransferTransactionHistoryRes.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.mobile.GetMyTicketsByDeliveryIDRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.GetMyTicketsByDeliveryIDRes.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.GetMyTicketsByDeliveryIDRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.GetMyTicketsByDeliveryIDRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTicketsByDeliveryIDRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.ticket.mobile.TicketInfo.toObject, includeInstance),
    pagination: (f = msg.getPagination()) && base_base_pb.PaginationRes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.GetMyTicketsByDeliveryIDRes}
 */
proto.ticket.mobile.GetMyTicketsByDeliveryIDRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.GetMyTicketsByDeliveryIDRes;
  return proto.ticket.mobile.GetMyTicketsByDeliveryIDRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.GetMyTicketsByDeliveryIDRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.GetMyTicketsByDeliveryIDRes}
 */
proto.ticket.mobile.GetMyTicketsByDeliveryIDRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.mobile.TicketInfo;
      reader.readMessage(value,proto.ticket.mobile.TicketInfo.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    case 2:
      var value = new base_base_pb.PaginationRes;
      reader.readMessage(value,base_base_pb.PaginationRes.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.GetMyTicketsByDeliveryIDRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.GetMyTicketsByDeliveryIDRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.GetMyTicketsByDeliveryIDRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetMyTicketsByDeliveryIDRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ticket.mobile.TicketInfo.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      base_base_pb.PaginationRes.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TicketInfo items = 1;
 * @return {!Array<!proto.ticket.mobile.TicketInfo>}
 */
proto.ticket.mobile.GetMyTicketsByDeliveryIDRes.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.ticket.mobile.TicketInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ticket.mobile.TicketInfo, 1));
};


/**
 * @param {!Array<!proto.ticket.mobile.TicketInfo>} value
 * @return {!proto.ticket.mobile.GetMyTicketsByDeliveryIDRes} returns this
*/
proto.ticket.mobile.GetMyTicketsByDeliveryIDRes.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ticket.mobile.TicketInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.mobile.TicketInfo}
 */
proto.ticket.mobile.GetMyTicketsByDeliveryIDRes.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ticket.mobile.TicketInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.mobile.GetMyTicketsByDeliveryIDRes} returns this
 */
proto.ticket.mobile.GetMyTicketsByDeliveryIDRes.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};


/**
 * optional base.PaginationRes pagination = 2;
 * @return {?proto.base.PaginationRes}
 */
proto.ticket.mobile.GetMyTicketsByDeliveryIDRes.prototype.getPagination = function() {
  return /** @type{?proto.base.PaginationRes} */ (
    jspb.Message.getWrapperField(this, base_base_pb.PaginationRes, 2));
};


/**
 * @param {?proto.base.PaginationRes|undefined} value
 * @return {!proto.ticket.mobile.GetMyTicketsByDeliveryIDRes} returns this
*/
proto.ticket.mobile.GetMyTicketsByDeliveryIDRes.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.GetMyTicketsByDeliveryIDRes} returns this
 */
proto.ticket.mobile.GetMyTicketsByDeliveryIDRes.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.GetMyTicketsByDeliveryIDRes.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.ticket.mobile.TicketStatus = {
  TICKET_STATUS_INVALID: 0,
  TICKET_STATUS_NOT_USED: 1,
  TICKET_STATUS_CHECKED_IN: 2
};

/**
 * @enum {number}
 */
proto.ticket.mobile.TicketStatusFilter = {
  TICKET_FILTER_STATUS_INVALID: 0,
  TICKET_FILTER_STATUS_NOT_USED: 1,
  TICKET_FILTER_STATUS_CHECKED_IN: 2,
  TICKET_FILTER_STATUS_TRANSFERRED: 3
};

/**
 * @enum {number}
 */
proto.ticket.mobile.TicketType = {
  TICKET_TYPE_BUY: 0,
  TICKET_TYPE_RELEASE: 1,
  TICKET_TYPE_TRANSFER: 2
};

goog.object.extend(exports, proto.ticket.mobile);
