// source: ticket/mobile/ticket_transferable.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var ticket_mobile_base_pb = require('../../ticket/mobile/base_pb.js');
goog.object.extend(proto, ticket_mobile_base_pb);
goog.exportSymbol('proto.ticket.mobile.CreateTicketTransferableAllExcludeReq', null, global);
goog.exportSymbol('proto.ticket.mobile.CreateTicketTransferableAllExcludeRes', null, global);
goog.exportSymbol('proto.ticket.mobile.CreateTicketTransferableAllReq', null, global);
goog.exportSymbol('proto.ticket.mobile.CreateTicketTransferableAllRes', null, global);
goog.exportSymbol('proto.ticket.mobile.CreateTicketTransferableReq', null, global);
goog.exportSymbol('proto.ticket.mobile.CreateTicketTransferableRes', null, global);
goog.exportSymbol('proto.ticket.mobile.GetDetailTicketTransferableReq', null, global);
goog.exportSymbol('proto.ticket.mobile.GetDetailTicketTransferableRes', null, global);
goog.exportSymbol('proto.ticket.mobile.MapUserInfoReq', null, global);
goog.exportSymbol('proto.ticket.mobile.SubmitTicketTransferableReq', null, global);
goog.exportSymbol('proto.ticket.mobile.TicketTransferableCurrencyInfo', null, global);
goog.exportSymbol('proto.ticket.mobile.TicketTransferableEventInfo', null, global);
goog.exportSymbol('proto.ticket.mobile.TicketTransferableEventLocation', null, global);
goog.exportSymbol('proto.ticket.mobile.TicketTransferableEventSchedule', null, global);
goog.exportSymbol('proto.ticket.mobile.TicketTransferableEventTime', null, global);
goog.exportSymbol('proto.ticket.mobile.TicketTransferableEventVoucherInfo', null, global);
goog.exportSymbol('proto.ticket.mobile.TicketTransferableInfo', null, global);
goog.exportSymbol('proto.ticket.mobile.TicketTransferablePriceSimpleInfo', null, global);
goog.exportSymbol('proto.ticket.mobile.TicketTransferableSeatInfo', null, global);
goog.exportSymbol('proto.ticket.mobile.TicketTransferableTicketInfo', null, global);
goog.exportSymbol('proto.ticket.mobile.TicketTransferableUserInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TicketTransferableInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.mobile.TicketTransferableInfo.repeatedFields_, null);
};
goog.inherits(proto.ticket.mobile.TicketTransferableInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TicketTransferableInfo.displayName = 'proto.ticket.mobile.TicketTransferableInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TicketTransferableTicketInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.TicketTransferableTicketInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TicketTransferableTicketInfo.displayName = 'proto.ticket.mobile.TicketTransferableTicketInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TicketTransferablePriceSimpleInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.TicketTransferablePriceSimpleInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TicketTransferablePriceSimpleInfo.displayName = 'proto.ticket.mobile.TicketTransferablePriceSimpleInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TicketTransferableCurrencyInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.TicketTransferableCurrencyInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TicketTransferableCurrencyInfo.displayName = 'proto.ticket.mobile.TicketTransferableCurrencyInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TicketTransferableUserInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.TicketTransferableUserInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TicketTransferableUserInfo.displayName = 'proto.ticket.mobile.TicketTransferableUserInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TicketTransferableSeatInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.TicketTransferableSeatInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TicketTransferableSeatInfo.displayName = 'proto.ticket.mobile.TicketTransferableSeatInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TicketTransferableEventInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.TicketTransferableEventInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TicketTransferableEventInfo.displayName = 'proto.ticket.mobile.TicketTransferableEventInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TicketTransferableEventLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.TicketTransferableEventLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TicketTransferableEventLocation.displayName = 'proto.ticket.mobile.TicketTransferableEventLocation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TicketTransferableEventVoucherInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.TicketTransferableEventVoucherInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TicketTransferableEventVoucherInfo.displayName = 'proto.ticket.mobile.TicketTransferableEventVoucherInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TicketTransferableEventSchedule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.mobile.TicketTransferableEventSchedule.repeatedFields_, null);
};
goog.inherits(proto.ticket.mobile.TicketTransferableEventSchedule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TicketTransferableEventSchedule.displayName = 'proto.ticket.mobile.TicketTransferableEventSchedule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.TicketTransferableEventTime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.TicketTransferableEventTime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.TicketTransferableEventTime.displayName = 'proto.ticket.mobile.TicketTransferableEventTime';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.CreateTicketTransferableReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.mobile.CreateTicketTransferableReq.repeatedFields_, null);
};
goog.inherits(proto.ticket.mobile.CreateTicketTransferableReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.CreateTicketTransferableReq.displayName = 'proto.ticket.mobile.CreateTicketTransferableReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.CreateTicketTransferableAllReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.CreateTicketTransferableAllReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.CreateTicketTransferableAllReq.displayName = 'proto.ticket.mobile.CreateTicketTransferableAllReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.repeatedFields_, null);
};
goog.inherits(proto.ticket.mobile.CreateTicketTransferableAllExcludeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.displayName = 'proto.ticket.mobile.CreateTicketTransferableAllExcludeReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.MapUserInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.MapUserInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.MapUserInfoReq.displayName = 'proto.ticket.mobile.MapUserInfoReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.SubmitTicketTransferableReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.SubmitTicketTransferableReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.SubmitTicketTransferableReq.displayName = 'proto.ticket.mobile.SubmitTicketTransferableReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.GetDetailTicketTransferableReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.GetDetailTicketTransferableReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.GetDetailTicketTransferableReq.displayName = 'proto.ticket.mobile.GetDetailTicketTransferableReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.CreateTicketTransferableRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.CreateTicketTransferableRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.CreateTicketTransferableRes.displayName = 'proto.ticket.mobile.CreateTicketTransferableRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.CreateTicketTransferableAllRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.CreateTicketTransferableAllRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.CreateTicketTransferableAllRes.displayName = 'proto.ticket.mobile.CreateTicketTransferableAllRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.CreateTicketTransferableAllExcludeRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.CreateTicketTransferableAllExcludeRes.displayName = 'proto.ticket.mobile.CreateTicketTransferableAllExcludeRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.GetDetailTicketTransferableRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.GetDetailTicketTransferableRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.GetDetailTicketTransferableRes.displayName = 'proto.ticket.mobile.GetDetailTicketTransferableRes';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.mobile.TicketTransferableInfo.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TicketTransferableInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TicketTransferableInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TicketTransferableInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketTransferableInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 3, 0),
    createdBy: jspb.Message.getFieldWithDefault(msg, 4, ""),
    updatedBy: jspb.Message.getFieldWithDefault(msg, 5, ""),
    ticketsList: jspb.Message.toObjectList(msg.getTicketsList(),
    proto.ticket.mobile.TicketTransferableTicketInfo.toObject, includeInstance),
    userInfo: (f = msg.getUserInfo()) && proto.ticket.mobile.TicketTransferableUserInfo.toObject(includeInstance, f),
    partnershipId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    eventInfo: (f = msg.getEventInfo()) && proto.ticket.mobile.TicketTransferableEventInfo.toObject(includeInstance, f),
    orderId: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TicketTransferableInfo}
 */
proto.ticket.mobile.TicketTransferableInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TicketTransferableInfo;
  return proto.ticket.mobile.TicketTransferableInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TicketTransferableInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TicketTransferableInfo}
 */
proto.ticket.mobile.TicketTransferableInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatedAt(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedBy(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedBy(value);
      break;
    case 6:
      var value = new proto.ticket.mobile.TicketTransferableTicketInfo;
      reader.readMessage(value,proto.ticket.mobile.TicketTransferableTicketInfo.deserializeBinaryFromReader);
      msg.addTickets(value);
      break;
    case 7:
      var value = new proto.ticket.mobile.TicketTransferableUserInfo;
      reader.readMessage(value,proto.ticket.mobile.TicketTransferableUserInfo.deserializeBinaryFromReader);
      msg.setUserInfo(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnershipId(value);
      break;
    case 9:
      var value = new proto.ticket.mobile.TicketTransferableEventInfo;
      reader.readMessage(value,proto.ticket.mobile.TicketTransferableEventInfo.deserializeBinaryFromReader);
      msg.setEventInfo(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TicketTransferableInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TicketTransferableInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TicketTransferableInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketTransferableInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCreatedBy();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUpdatedBy();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTicketsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.ticket.mobile.TicketTransferableTicketInfo.serializeBinaryToWriter
    );
  }
  f = message.getUserInfo();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ticket.mobile.TicketTransferableUserInfo.serializeBinaryToWriter
    );
  }
  f = message.getPartnershipId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getEventInfo();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.ticket.mobile.TicketTransferableEventInfo.serializeBinaryToWriter
    );
  }
  f = message.getOrderId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableInfo} returns this
 */
proto.ticket.mobile.TicketTransferableInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 created_at = 2;
 * @return {number}
 */
proto.ticket.mobile.TicketTransferableInfo.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.TicketTransferableInfo} returns this
 */
proto.ticket.mobile.TicketTransferableInfo.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 updated_at = 3;
 * @return {number}
 */
proto.ticket.mobile.TicketTransferableInfo.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.TicketTransferableInfo} returns this
 */
proto.ticket.mobile.TicketTransferableInfo.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string created_by = 4;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableInfo.prototype.getCreatedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableInfo} returns this
 */
proto.ticket.mobile.TicketTransferableInfo.prototype.setCreatedBy = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string updated_by = 5;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableInfo.prototype.getUpdatedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableInfo} returns this
 */
proto.ticket.mobile.TicketTransferableInfo.prototype.setUpdatedBy = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated TicketTransferableTicketInfo tickets = 6;
 * @return {!Array<!proto.ticket.mobile.TicketTransferableTicketInfo>}
 */
proto.ticket.mobile.TicketTransferableInfo.prototype.getTicketsList = function() {
  return /** @type{!Array<!proto.ticket.mobile.TicketTransferableTicketInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ticket.mobile.TicketTransferableTicketInfo, 6));
};


/**
 * @param {!Array<!proto.ticket.mobile.TicketTransferableTicketInfo>} value
 * @return {!proto.ticket.mobile.TicketTransferableInfo} returns this
*/
proto.ticket.mobile.TicketTransferableInfo.prototype.setTicketsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.ticket.mobile.TicketTransferableTicketInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.mobile.TicketTransferableTicketInfo}
 */
proto.ticket.mobile.TicketTransferableInfo.prototype.addTickets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.ticket.mobile.TicketTransferableTicketInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.mobile.TicketTransferableInfo} returns this
 */
proto.ticket.mobile.TicketTransferableInfo.prototype.clearTicketsList = function() {
  return this.setTicketsList([]);
};


/**
 * optional TicketTransferableUserInfo user_info = 7;
 * @return {?proto.ticket.mobile.TicketTransferableUserInfo}
 */
proto.ticket.mobile.TicketTransferableInfo.prototype.getUserInfo = function() {
  return /** @type{?proto.ticket.mobile.TicketTransferableUserInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TicketTransferableUserInfo, 7));
};


/**
 * @param {?proto.ticket.mobile.TicketTransferableUserInfo|undefined} value
 * @return {!proto.ticket.mobile.TicketTransferableInfo} returns this
*/
proto.ticket.mobile.TicketTransferableInfo.prototype.setUserInfo = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.TicketTransferableInfo} returns this
 */
proto.ticket.mobile.TicketTransferableInfo.prototype.clearUserInfo = function() {
  return this.setUserInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.TicketTransferableInfo.prototype.hasUserInfo = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string partnership_id = 8;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableInfo.prototype.getPartnershipId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableInfo} returns this
 */
proto.ticket.mobile.TicketTransferableInfo.prototype.setPartnershipId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional TicketTransferableEventInfo event_info = 9;
 * @return {?proto.ticket.mobile.TicketTransferableEventInfo}
 */
proto.ticket.mobile.TicketTransferableInfo.prototype.getEventInfo = function() {
  return /** @type{?proto.ticket.mobile.TicketTransferableEventInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TicketTransferableEventInfo, 9));
};


/**
 * @param {?proto.ticket.mobile.TicketTransferableEventInfo|undefined} value
 * @return {!proto.ticket.mobile.TicketTransferableInfo} returns this
*/
proto.ticket.mobile.TicketTransferableInfo.prototype.setEventInfo = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.TicketTransferableInfo} returns this
 */
proto.ticket.mobile.TicketTransferableInfo.prototype.clearEventInfo = function() {
  return this.setEventInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.TicketTransferableInfo.prototype.hasEventInfo = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string order_id = 10;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableInfo.prototype.getOrderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableInfo} returns this
 */
proto.ticket.mobile.TicketTransferableInfo.prototype.setOrderId = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TicketTransferableTicketInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TicketTransferableTicketInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TicketTransferableTicketInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketTransferableTicketInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seatInfo: (f = msg.getSeatInfo()) && proto.ticket.mobile.TicketTransferableSeatInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TicketTransferableTicketInfo}
 */
proto.ticket.mobile.TicketTransferableTicketInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TicketTransferableTicketInfo;
  return proto.ticket.mobile.TicketTransferableTicketInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TicketTransferableTicketInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TicketTransferableTicketInfo}
 */
proto.ticket.mobile.TicketTransferableTicketInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.ticket.mobile.TicketTransferableSeatInfo;
      reader.readMessage(value,proto.ticket.mobile.TicketTransferableSeatInfo.deserializeBinaryFromReader);
      msg.setSeatInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TicketTransferableTicketInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TicketTransferableTicketInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TicketTransferableTicketInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketTransferableTicketInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeatInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ticket.mobile.TicketTransferableSeatInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableTicketInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableTicketInfo} returns this
 */
proto.ticket.mobile.TicketTransferableTicketInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TicketTransferableSeatInfo seat_info = 2;
 * @return {?proto.ticket.mobile.TicketTransferableSeatInfo}
 */
proto.ticket.mobile.TicketTransferableTicketInfo.prototype.getSeatInfo = function() {
  return /** @type{?proto.ticket.mobile.TicketTransferableSeatInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TicketTransferableSeatInfo, 2));
};


/**
 * @param {?proto.ticket.mobile.TicketTransferableSeatInfo|undefined} value
 * @return {!proto.ticket.mobile.TicketTransferableTicketInfo} returns this
*/
proto.ticket.mobile.TicketTransferableTicketInfo.prototype.setSeatInfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.TicketTransferableTicketInfo} returns this
 */
proto.ticket.mobile.TicketTransferableTicketInfo.prototype.clearSeatInfo = function() {
  return this.setSeatInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.TicketTransferableTicketInfo.prototype.hasSeatInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TicketTransferablePriceSimpleInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TicketTransferablePriceSimpleInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TicketTransferablePriceSimpleInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketTransferablePriceSimpleInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 3, ""),
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    currency: (f = msg.getCurrency()) && proto.ticket.mobile.TicketTransferableCurrencyInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TicketTransferablePriceSimpleInfo}
 */
proto.ticket.mobile.TicketTransferablePriceSimpleInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TicketTransferablePriceSimpleInfo;
  return proto.ticket.mobile.TicketTransferablePriceSimpleInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TicketTransferablePriceSimpleInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TicketTransferablePriceSimpleInfo}
 */
proto.ticket.mobile.TicketTransferablePriceSimpleInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 5:
      var value = new proto.ticket.mobile.TicketTransferableCurrencyInfo;
      reader.readMessage(value,proto.ticket.mobile.TicketTransferableCurrencyInfo.deserializeBinaryFromReader);
      msg.setCurrency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TicketTransferablePriceSimpleInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TicketTransferablePriceSimpleInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TicketTransferablePriceSimpleInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketTransferablePriceSimpleInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getCurrency();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ticket.mobile.TicketTransferableCurrencyInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferablePriceSimpleInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferablePriceSimpleInfo} returns this
 */
proto.ticket.mobile.TicketTransferablePriceSimpleInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferablePriceSimpleInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferablePriceSimpleInfo} returns this
 */
proto.ticket.mobile.TicketTransferablePriceSimpleInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string icon = 3;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferablePriceSimpleInfo.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferablePriceSimpleInfo} returns this
 */
proto.ticket.mobile.TicketTransferablePriceSimpleInfo.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double price = 4;
 * @return {number}
 */
proto.ticket.mobile.TicketTransferablePriceSimpleInfo.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.TicketTransferablePriceSimpleInfo} returns this
 */
proto.ticket.mobile.TicketTransferablePriceSimpleInfo.prototype.setPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional TicketTransferableCurrencyInfo currency = 5;
 * @return {?proto.ticket.mobile.TicketTransferableCurrencyInfo}
 */
proto.ticket.mobile.TicketTransferablePriceSimpleInfo.prototype.getCurrency = function() {
  return /** @type{?proto.ticket.mobile.TicketTransferableCurrencyInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TicketTransferableCurrencyInfo, 5));
};


/**
 * @param {?proto.ticket.mobile.TicketTransferableCurrencyInfo|undefined} value
 * @return {!proto.ticket.mobile.TicketTransferablePriceSimpleInfo} returns this
*/
proto.ticket.mobile.TicketTransferablePriceSimpleInfo.prototype.setCurrency = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.TicketTransferablePriceSimpleInfo} returns this
 */
proto.ticket.mobile.TicketTransferablePriceSimpleInfo.prototype.clearCurrency = function() {
  return this.setCurrency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.TicketTransferablePriceSimpleInfo.prototype.hasCurrency = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TicketTransferableCurrencyInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TicketTransferableCurrencyInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TicketTransferableCurrencyInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketTransferableCurrencyInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TicketTransferableCurrencyInfo}
 */
proto.ticket.mobile.TicketTransferableCurrencyInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TicketTransferableCurrencyInfo;
  return proto.ticket.mobile.TicketTransferableCurrencyInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TicketTransferableCurrencyInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TicketTransferableCurrencyInfo}
 */
proto.ticket.mobile.TicketTransferableCurrencyInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TicketTransferableCurrencyInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TicketTransferableCurrencyInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TicketTransferableCurrencyInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketTransferableCurrencyInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableCurrencyInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableCurrencyInfo} returns this
 */
proto.ticket.mobile.TicketTransferableCurrencyInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableCurrencyInfo.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableCurrencyInfo} returns this
 */
proto.ticket.mobile.TicketTransferableCurrencyInfo.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string icon = 3;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableCurrencyInfo.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableCurrencyInfo} returns this
 */
proto.ticket.mobile.TicketTransferableCurrencyInfo.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TicketTransferableUserInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TicketTransferableUserInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TicketTransferableUserInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketTransferableUserInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userFullName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userPhone: jspb.Message.getFieldWithDefault(msg, 3, ""),
    userEmail: jspb.Message.getFieldWithDefault(msg, 4, ""),
    userAddress: jspb.Message.getFieldWithDefault(msg, 5, ""),
    userImage: jspb.Message.getFieldWithDefault(msg, 6, ""),
    userPhoneCode: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TicketTransferableUserInfo}
 */
proto.ticket.mobile.TicketTransferableUserInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TicketTransferableUserInfo;
  return proto.ticket.mobile.TicketTransferableUserInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TicketTransferableUserInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TicketTransferableUserInfo}
 */
proto.ticket.mobile.TicketTransferableUserInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserFullName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserPhone(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserEmail(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserAddress(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserImage(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserPhoneCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TicketTransferableUserInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TicketTransferableUserInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TicketTransferableUserInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketTransferableUserInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserFullName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserPhone();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUserEmail();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUserAddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUserImage();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUserPhoneCode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableUserInfo.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableUserInfo} returns this
 */
proto.ticket.mobile.TicketTransferableUserInfo.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_full_name = 2;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableUserInfo.prototype.getUserFullName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableUserInfo} returns this
 */
proto.ticket.mobile.TicketTransferableUserInfo.prototype.setUserFullName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string user_phone = 3;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableUserInfo.prototype.getUserPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableUserInfo} returns this
 */
proto.ticket.mobile.TicketTransferableUserInfo.prototype.setUserPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string user_email = 4;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableUserInfo.prototype.getUserEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableUserInfo} returns this
 */
proto.ticket.mobile.TicketTransferableUserInfo.prototype.setUserEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string user_address = 5;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableUserInfo.prototype.getUserAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableUserInfo} returns this
 */
proto.ticket.mobile.TicketTransferableUserInfo.prototype.setUserAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string user_image = 6;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableUserInfo.prototype.getUserImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableUserInfo} returns this
 */
proto.ticket.mobile.TicketTransferableUserInfo.prototype.setUserImage = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string user_phone_code = 7;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableUserInfo.prototype.getUserPhoneCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableUserInfo} returns this
 */
proto.ticket.mobile.TicketTransferableUserInfo.prototype.setUserPhoneCode = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TicketTransferableSeatInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TicketTransferableSeatInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TicketTransferableSeatInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketTransferableSeatInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    price: (f = msg.getPrice()) && proto.ticket.mobile.TicketTransferablePriceSimpleInfo.toObject(includeInstance, f),
    priceBlockId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    priceBlockName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    generalSeatMapId: jspb.Message.getFieldWithDefault(msg, 6, ""),
    generalSeatMapName: jspb.Message.getFieldWithDefault(msg, 7, ""),
    seatTypeName: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TicketTransferableSeatInfo}
 */
proto.ticket.mobile.TicketTransferableSeatInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TicketTransferableSeatInfo;
  return proto.ticket.mobile.TicketTransferableSeatInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TicketTransferableSeatInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TicketTransferableSeatInfo}
 */
proto.ticket.mobile.TicketTransferableSeatInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.ticket.mobile.TicketTransferablePriceSimpleInfo;
      reader.readMessage(value,proto.ticket.mobile.TicketTransferablePriceSimpleInfo.deserializeBinaryFromReader);
      msg.setPrice(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriceBlockId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriceBlockName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setGeneralSeatMapId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setGeneralSeatMapName(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatTypeName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TicketTransferableSeatInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TicketTransferableSeatInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TicketTransferableSeatInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketTransferableSeatInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPrice();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ticket.mobile.TicketTransferablePriceSimpleInfo.serializeBinaryToWriter
    );
  }
  f = message.getPriceBlockId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPriceBlockName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getGeneralSeatMapId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getGeneralSeatMapName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSeatTypeName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableSeatInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableSeatInfo} returns this
 */
proto.ticket.mobile.TicketTransferableSeatInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableSeatInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableSeatInfo} returns this
 */
proto.ticket.mobile.TicketTransferableSeatInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TicketTransferablePriceSimpleInfo price = 3;
 * @return {?proto.ticket.mobile.TicketTransferablePriceSimpleInfo}
 */
proto.ticket.mobile.TicketTransferableSeatInfo.prototype.getPrice = function() {
  return /** @type{?proto.ticket.mobile.TicketTransferablePriceSimpleInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TicketTransferablePriceSimpleInfo, 3));
};


/**
 * @param {?proto.ticket.mobile.TicketTransferablePriceSimpleInfo|undefined} value
 * @return {!proto.ticket.mobile.TicketTransferableSeatInfo} returns this
*/
proto.ticket.mobile.TicketTransferableSeatInfo.prototype.setPrice = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.TicketTransferableSeatInfo} returns this
 */
proto.ticket.mobile.TicketTransferableSeatInfo.prototype.clearPrice = function() {
  return this.setPrice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.TicketTransferableSeatInfo.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string price_block_id = 4;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableSeatInfo.prototype.getPriceBlockId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableSeatInfo} returns this
 */
proto.ticket.mobile.TicketTransferableSeatInfo.prototype.setPriceBlockId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string price_block_name = 5;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableSeatInfo.prototype.getPriceBlockName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableSeatInfo} returns this
 */
proto.ticket.mobile.TicketTransferableSeatInfo.prototype.setPriceBlockName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string general_seat_map_id = 6;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableSeatInfo.prototype.getGeneralSeatMapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableSeatInfo} returns this
 */
proto.ticket.mobile.TicketTransferableSeatInfo.prototype.setGeneralSeatMapId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string general_seat_map_name = 7;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableSeatInfo.prototype.getGeneralSeatMapName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableSeatInfo} returns this
 */
proto.ticket.mobile.TicketTransferableSeatInfo.prototype.setGeneralSeatMapName = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string seat_type_name = 8;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableSeatInfo.prototype.getSeatTypeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableSeatInfo} returns this
 */
proto.ticket.mobile.TicketTransferableSeatInfo.prototype.setSeatTypeName = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TicketTransferableEventInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TicketTransferableEventInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TicketTransferableEventInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketTransferableEventInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    schedule: (f = msg.getSchedule()) && proto.ticket.mobile.TicketTransferableEventSchedule.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TicketTransferableEventInfo}
 */
proto.ticket.mobile.TicketTransferableEventInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TicketTransferableEventInfo;
  return proto.ticket.mobile.TicketTransferableEventInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TicketTransferableEventInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TicketTransferableEventInfo}
 */
proto.ticket.mobile.TicketTransferableEventInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventId(value);
      break;
    case 2:
      var value = new proto.ticket.mobile.TicketTransferableEventSchedule;
      reader.readMessage(value,proto.ticket.mobile.TicketTransferableEventSchedule.deserializeBinaryFromReader);
      msg.setSchedule(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TicketTransferableEventInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TicketTransferableEventInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TicketTransferableEventInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketTransferableEventInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSchedule();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ticket.mobile.TicketTransferableEventSchedule.serializeBinaryToWriter
    );
  }
};


/**
 * optional string event_id = 1;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableEventInfo.prototype.getEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableEventInfo} returns this
 */
proto.ticket.mobile.TicketTransferableEventInfo.prototype.setEventId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TicketTransferableEventSchedule schedule = 2;
 * @return {?proto.ticket.mobile.TicketTransferableEventSchedule}
 */
proto.ticket.mobile.TicketTransferableEventInfo.prototype.getSchedule = function() {
  return /** @type{?proto.ticket.mobile.TicketTransferableEventSchedule} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TicketTransferableEventSchedule, 2));
};


/**
 * @param {?proto.ticket.mobile.TicketTransferableEventSchedule|undefined} value
 * @return {!proto.ticket.mobile.TicketTransferableEventInfo} returns this
*/
proto.ticket.mobile.TicketTransferableEventInfo.prototype.setSchedule = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.TicketTransferableEventInfo} returns this
 */
proto.ticket.mobile.TicketTransferableEventInfo.prototype.clearSchedule = function() {
  return this.setSchedule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.TicketTransferableEventInfo.prototype.hasSchedule = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TicketTransferableEventLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TicketTransferableEventLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TicketTransferableEventLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketTransferableEventLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ward: jspb.Message.getFieldWithDefault(msg, 3, ""),
    district: jspb.Message.getFieldWithDefault(msg, 4, ""),
    city: jspb.Message.getFieldWithDefault(msg, 5, ""),
    country: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TicketTransferableEventLocation}
 */
proto.ticket.mobile.TicketTransferableEventLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TicketTransferableEventLocation;
  return proto.ticket.mobile.TicketTransferableEventLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TicketTransferableEventLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TicketTransferableEventLocation}
 */
proto.ticket.mobile.TicketTransferableEventLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWard(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDistrict(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TicketTransferableEventLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TicketTransferableEventLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TicketTransferableEventLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketTransferableEventLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWard();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDistrict();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableEventLocation.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableEventLocation} returns this
 */
proto.ticket.mobile.TicketTransferableEventLocation.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableEventLocation.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableEventLocation} returns this
 */
proto.ticket.mobile.TicketTransferableEventLocation.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ward = 3;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableEventLocation.prototype.getWard = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableEventLocation} returns this
 */
proto.ticket.mobile.TicketTransferableEventLocation.prototype.setWard = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string district = 4;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableEventLocation.prototype.getDistrict = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableEventLocation} returns this
 */
proto.ticket.mobile.TicketTransferableEventLocation.prototype.setDistrict = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string city = 5;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableEventLocation.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableEventLocation} returns this
 */
proto.ticket.mobile.TicketTransferableEventLocation.prototype.setCity = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string country = 6;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableEventLocation.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableEventLocation} returns this
 */
proto.ticket.mobile.TicketTransferableEventLocation.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TicketTransferableEventVoucherInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TicketTransferableEventVoucherInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TicketTransferableEventVoucherInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketTransferableEventVoucherInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    thumbnail: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sponsorId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    expiredAt: jspb.Message.getFieldWithDefault(msg, 5, 0),
    eventId: jspb.Message.getFieldWithDefault(msg, 6, ""),
    detail: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TicketTransferableEventVoucherInfo}
 */
proto.ticket.mobile.TicketTransferableEventVoucherInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TicketTransferableEventVoucherInfo;
  return proto.ticket.mobile.TicketTransferableEventVoucherInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TicketTransferableEventVoucherInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TicketTransferableEventVoucherInfo}
 */
proto.ticket.mobile.TicketTransferableEventVoucherInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setThumbnail(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSponsorId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpiredAt(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TicketTransferableEventVoucherInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TicketTransferableEventVoucherInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TicketTransferableEventVoucherInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketTransferableEventVoucherInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getThumbnail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSponsorId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getExpiredAt();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getEventId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDetail();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableEventVoucherInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableEventVoucherInfo} returns this
 */
proto.ticket.mobile.TicketTransferableEventVoucherInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableEventVoucherInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableEventVoucherInfo} returns this
 */
proto.ticket.mobile.TicketTransferableEventVoucherInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string thumbnail = 3;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableEventVoucherInfo.prototype.getThumbnail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableEventVoucherInfo} returns this
 */
proto.ticket.mobile.TicketTransferableEventVoucherInfo.prototype.setThumbnail = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string sponsor_id = 4;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableEventVoucherInfo.prototype.getSponsorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableEventVoucherInfo} returns this
 */
proto.ticket.mobile.TicketTransferableEventVoucherInfo.prototype.setSponsorId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 expired_at = 5;
 * @return {number}
 */
proto.ticket.mobile.TicketTransferableEventVoucherInfo.prototype.getExpiredAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.TicketTransferableEventVoucherInfo} returns this
 */
proto.ticket.mobile.TicketTransferableEventVoucherInfo.prototype.setExpiredAt = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string event_id = 6;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableEventVoucherInfo.prototype.getEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableEventVoucherInfo} returns this
 */
proto.ticket.mobile.TicketTransferableEventVoucherInfo.prototype.setEventId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string detail = 7;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableEventVoucherInfo.prototype.getDetail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableEventVoucherInfo} returns this
 */
proto.ticket.mobile.TicketTransferableEventVoucherInfo.prototype.setDetail = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.mobile.TicketTransferableEventSchedule.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TicketTransferableEventSchedule.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TicketTransferableEventSchedule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TicketTransferableEventSchedule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketTransferableEventSchedule.toObject = function(includeInstance, msg) {
  var f, obj = {
    location: (f = msg.getLocation()) && proto.ticket.mobile.TicketTransferableEventLocation.toObject(includeInstance, f),
    vouchersList: jspb.Message.toObjectList(msg.getVouchersList(),
    proto.ticket.mobile.TicketTransferableEventVoucherInfo.toObject, includeInstance),
    time: (f = msg.getTime()) && proto.ticket.mobile.TicketTransferableEventTime.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TicketTransferableEventSchedule}
 */
proto.ticket.mobile.TicketTransferableEventSchedule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TicketTransferableEventSchedule;
  return proto.ticket.mobile.TicketTransferableEventSchedule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TicketTransferableEventSchedule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TicketTransferableEventSchedule}
 */
proto.ticket.mobile.TicketTransferableEventSchedule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.mobile.TicketTransferableEventLocation;
      reader.readMessage(value,proto.ticket.mobile.TicketTransferableEventLocation.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 2:
      var value = new proto.ticket.mobile.TicketTransferableEventVoucherInfo;
      reader.readMessage(value,proto.ticket.mobile.TicketTransferableEventVoucherInfo.deserializeBinaryFromReader);
      msg.addVouchers(value);
      break;
    case 3:
      var value = new proto.ticket.mobile.TicketTransferableEventTime;
      reader.readMessage(value,proto.ticket.mobile.TicketTransferableEventTime.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TicketTransferableEventSchedule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TicketTransferableEventSchedule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TicketTransferableEventSchedule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketTransferableEventSchedule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ticket.mobile.TicketTransferableEventLocation.serializeBinaryToWriter
    );
  }
  f = message.getVouchersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ticket.mobile.TicketTransferableEventVoucherInfo.serializeBinaryToWriter
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ticket.mobile.TicketTransferableEventTime.serializeBinaryToWriter
    );
  }
};


/**
 * optional TicketTransferableEventLocation location = 1;
 * @return {?proto.ticket.mobile.TicketTransferableEventLocation}
 */
proto.ticket.mobile.TicketTransferableEventSchedule.prototype.getLocation = function() {
  return /** @type{?proto.ticket.mobile.TicketTransferableEventLocation} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TicketTransferableEventLocation, 1));
};


/**
 * @param {?proto.ticket.mobile.TicketTransferableEventLocation|undefined} value
 * @return {!proto.ticket.mobile.TicketTransferableEventSchedule} returns this
*/
proto.ticket.mobile.TicketTransferableEventSchedule.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.TicketTransferableEventSchedule} returns this
 */
proto.ticket.mobile.TicketTransferableEventSchedule.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.TicketTransferableEventSchedule.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TicketTransferableEventVoucherInfo vouchers = 2;
 * @return {!Array<!proto.ticket.mobile.TicketTransferableEventVoucherInfo>}
 */
proto.ticket.mobile.TicketTransferableEventSchedule.prototype.getVouchersList = function() {
  return /** @type{!Array<!proto.ticket.mobile.TicketTransferableEventVoucherInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ticket.mobile.TicketTransferableEventVoucherInfo, 2));
};


/**
 * @param {!Array<!proto.ticket.mobile.TicketTransferableEventVoucherInfo>} value
 * @return {!proto.ticket.mobile.TicketTransferableEventSchedule} returns this
*/
proto.ticket.mobile.TicketTransferableEventSchedule.prototype.setVouchersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ticket.mobile.TicketTransferableEventVoucherInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.mobile.TicketTransferableEventVoucherInfo}
 */
proto.ticket.mobile.TicketTransferableEventSchedule.prototype.addVouchers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ticket.mobile.TicketTransferableEventVoucherInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.mobile.TicketTransferableEventSchedule} returns this
 */
proto.ticket.mobile.TicketTransferableEventSchedule.prototype.clearVouchersList = function() {
  return this.setVouchersList([]);
};


/**
 * optional TicketTransferableEventTime time = 3;
 * @return {?proto.ticket.mobile.TicketTransferableEventTime}
 */
proto.ticket.mobile.TicketTransferableEventSchedule.prototype.getTime = function() {
  return /** @type{?proto.ticket.mobile.TicketTransferableEventTime} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TicketTransferableEventTime, 3));
};


/**
 * @param {?proto.ticket.mobile.TicketTransferableEventTime|undefined} value
 * @return {!proto.ticket.mobile.TicketTransferableEventSchedule} returns this
*/
proto.ticket.mobile.TicketTransferableEventSchedule.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.TicketTransferableEventSchedule} returns this
 */
proto.ticket.mobile.TicketTransferableEventSchedule.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.TicketTransferableEventSchedule.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.TicketTransferableEventTime.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.TicketTransferableEventTime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.TicketTransferableEventTime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketTransferableEventTime.toObject = function(includeInstance, msg) {
  var f, obj = {
    startTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    bookingStartTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    bookingEndTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    checkinStartTime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    checkinEndTime: jspb.Message.getFieldWithDefault(msg, 6, 0),
    timezone: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.TicketTransferableEventTime}
 */
proto.ticket.mobile.TicketTransferableEventTime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.TicketTransferableEventTime;
  return proto.ticket.mobile.TicketTransferableEventTime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.TicketTransferableEventTime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.TicketTransferableEventTime}
 */
proto.ticket.mobile.TicketTransferableEventTime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBookingStartTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBookingEndTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCheckinStartTime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCheckinEndTime(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimezone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.TicketTransferableEventTime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.TicketTransferableEventTime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.TicketTransferableEventTime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.TicketTransferableEventTime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getBookingStartTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getBookingEndTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getCheckinStartTime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCheckinEndTime();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getTimezone();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional int64 start_time = 1;
 * @return {number}
 */
proto.ticket.mobile.TicketTransferableEventTime.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.TicketTransferableEventTime} returns this
 */
proto.ticket.mobile.TicketTransferableEventTime.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 end_time = 2;
 * @return {number}
 */
proto.ticket.mobile.TicketTransferableEventTime.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.TicketTransferableEventTime} returns this
 */
proto.ticket.mobile.TicketTransferableEventTime.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 booking_start_time = 3;
 * @return {number}
 */
proto.ticket.mobile.TicketTransferableEventTime.prototype.getBookingStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.TicketTransferableEventTime} returns this
 */
proto.ticket.mobile.TicketTransferableEventTime.prototype.setBookingStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 booking_end_time = 4;
 * @return {number}
 */
proto.ticket.mobile.TicketTransferableEventTime.prototype.getBookingEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.TicketTransferableEventTime} returns this
 */
proto.ticket.mobile.TicketTransferableEventTime.prototype.setBookingEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 checkin_start_time = 5;
 * @return {number}
 */
proto.ticket.mobile.TicketTransferableEventTime.prototype.getCheckinStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.TicketTransferableEventTime} returns this
 */
proto.ticket.mobile.TicketTransferableEventTime.prototype.setCheckinStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 checkin_end_time = 6;
 * @return {number}
 */
proto.ticket.mobile.TicketTransferableEventTime.prototype.getCheckinEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.TicketTransferableEventTime} returns this
 */
proto.ticket.mobile.TicketTransferableEventTime.prototype.setCheckinEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string timezone = 7;
 * @return {string}
 */
proto.ticket.mobile.TicketTransferableEventTime.prototype.getTimezone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.TicketTransferableEventTime} returns this
 */
proto.ticket.mobile.TicketTransferableEventTime.prototype.setTimezone = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.mobile.CreateTicketTransferableReq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.CreateTicketTransferableReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.CreateTicketTransferableReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.CreateTicketTransferableReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.CreateTicketTransferableReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    transferableId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ticketIdsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    eventInfo: (f = msg.getEventInfo()) && proto.ticket.mobile.TicketTransferableEventInfo.toObject(includeInstance, f),
    orderId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.CreateTicketTransferableReq}
 */
proto.ticket.mobile.CreateTicketTransferableReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.CreateTicketTransferableReq;
  return proto.ticket.mobile.CreateTicketTransferableReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.CreateTicketTransferableReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.CreateTicketTransferableReq}
 */
proto.ticket.mobile.CreateTicketTransferableReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransferableId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTicketIds(value);
      break;
    case 3:
      var value = new proto.ticket.mobile.TicketTransferableEventInfo;
      reader.readMessage(value,proto.ticket.mobile.TicketTransferableEventInfo.deserializeBinaryFromReader);
      msg.setEventInfo(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.CreateTicketTransferableReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.CreateTicketTransferableReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.CreateTicketTransferableReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.CreateTicketTransferableReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransferableId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTicketIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getEventInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ticket.mobile.TicketTransferableEventInfo.serializeBinaryToWriter
    );
  }
  f = message.getOrderId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string transferable_id = 1;
 * @return {string}
 */
proto.ticket.mobile.CreateTicketTransferableReq.prototype.getTransferableId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.CreateTicketTransferableReq} returns this
 */
proto.ticket.mobile.CreateTicketTransferableReq.prototype.setTransferableId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string ticket_ids = 2;
 * @return {!Array<string>}
 */
proto.ticket.mobile.CreateTicketTransferableReq.prototype.getTicketIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ticket.mobile.CreateTicketTransferableReq} returns this
 */
proto.ticket.mobile.CreateTicketTransferableReq.prototype.setTicketIdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ticket.mobile.CreateTicketTransferableReq} returns this
 */
proto.ticket.mobile.CreateTicketTransferableReq.prototype.addTicketIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.mobile.CreateTicketTransferableReq} returns this
 */
proto.ticket.mobile.CreateTicketTransferableReq.prototype.clearTicketIdsList = function() {
  return this.setTicketIdsList([]);
};


/**
 * optional TicketTransferableEventInfo event_info = 3;
 * @return {?proto.ticket.mobile.TicketTransferableEventInfo}
 */
proto.ticket.mobile.CreateTicketTransferableReq.prototype.getEventInfo = function() {
  return /** @type{?proto.ticket.mobile.TicketTransferableEventInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TicketTransferableEventInfo, 3));
};


/**
 * @param {?proto.ticket.mobile.TicketTransferableEventInfo|undefined} value
 * @return {!proto.ticket.mobile.CreateTicketTransferableReq} returns this
*/
proto.ticket.mobile.CreateTicketTransferableReq.prototype.setEventInfo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.CreateTicketTransferableReq} returns this
 */
proto.ticket.mobile.CreateTicketTransferableReq.prototype.clearEventInfo = function() {
  return this.setEventInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.CreateTicketTransferableReq.prototype.hasEventInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string order_id = 4;
 * @return {string}
 */
proto.ticket.mobile.CreateTicketTransferableReq.prototype.getOrderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.CreateTicketTransferableReq} returns this
 */
proto.ticket.mobile.CreateTicketTransferableReq.prototype.setOrderId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.CreateTicketTransferableAllReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.CreateTicketTransferableAllReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.CreateTicketTransferableAllReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.CreateTicketTransferableAllReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    transferableId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seatMapId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    priceBlockId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    seatNameFrom: jspb.Message.getFieldWithDefault(msg, 4, ""),
    seatNameTo: jspb.Message.getFieldWithDefault(msg, 5, ""),
    eventInfo: (f = msg.getEventInfo()) && proto.ticket.mobile.TicketTransferableEventInfo.toObject(includeInstance, f),
    orderId: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllReq}
 */
proto.ticket.mobile.CreateTicketTransferableAllReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.CreateTicketTransferableAllReq;
  return proto.ticket.mobile.CreateTicketTransferableAllReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.CreateTicketTransferableAllReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllReq}
 */
proto.ticket.mobile.CreateTicketTransferableAllReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransferableId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatMapId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriceBlockId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatNameFrom(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatNameTo(value);
      break;
    case 6:
      var value = new proto.ticket.mobile.TicketTransferableEventInfo;
      reader.readMessage(value,proto.ticket.mobile.TicketTransferableEventInfo.deserializeBinaryFromReader);
      msg.setEventInfo(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.CreateTicketTransferableAllReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.CreateTicketTransferableAllReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.CreateTicketTransferableAllReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.CreateTicketTransferableAllReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransferableId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeatMapId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPriceBlockId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSeatNameFrom();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSeatNameTo();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEventInfo();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.ticket.mobile.TicketTransferableEventInfo.serializeBinaryToWriter
    );
  }
  f = message.getOrderId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string transferable_id = 1;
 * @return {string}
 */
proto.ticket.mobile.CreateTicketTransferableAllReq.prototype.getTransferableId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllReq} returns this
 */
proto.ticket.mobile.CreateTicketTransferableAllReq.prototype.setTransferableId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string seat_map_id = 2;
 * @return {string}
 */
proto.ticket.mobile.CreateTicketTransferableAllReq.prototype.getSeatMapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllReq} returns this
 */
proto.ticket.mobile.CreateTicketTransferableAllReq.prototype.setSeatMapId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string price_block_id = 3;
 * @return {string}
 */
proto.ticket.mobile.CreateTicketTransferableAllReq.prototype.getPriceBlockId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllReq} returns this
 */
proto.ticket.mobile.CreateTicketTransferableAllReq.prototype.setPriceBlockId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string seat_name_from = 4;
 * @return {string}
 */
proto.ticket.mobile.CreateTicketTransferableAllReq.prototype.getSeatNameFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllReq} returns this
 */
proto.ticket.mobile.CreateTicketTransferableAllReq.prototype.setSeatNameFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string seat_name_to = 5;
 * @return {string}
 */
proto.ticket.mobile.CreateTicketTransferableAllReq.prototype.getSeatNameTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllReq} returns this
 */
proto.ticket.mobile.CreateTicketTransferableAllReq.prototype.setSeatNameTo = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional TicketTransferableEventInfo event_info = 6;
 * @return {?proto.ticket.mobile.TicketTransferableEventInfo}
 */
proto.ticket.mobile.CreateTicketTransferableAllReq.prototype.getEventInfo = function() {
  return /** @type{?proto.ticket.mobile.TicketTransferableEventInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TicketTransferableEventInfo, 6));
};


/**
 * @param {?proto.ticket.mobile.TicketTransferableEventInfo|undefined} value
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllReq} returns this
*/
proto.ticket.mobile.CreateTicketTransferableAllReq.prototype.setEventInfo = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllReq} returns this
 */
proto.ticket.mobile.CreateTicketTransferableAllReq.prototype.clearEventInfo = function() {
  return this.setEventInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.CreateTicketTransferableAllReq.prototype.hasEventInfo = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string order_id = 7;
 * @return {string}
 */
proto.ticket.mobile.CreateTicketTransferableAllReq.prototype.getOrderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllReq} returns this
 */
proto.ticket.mobile.CreateTicketTransferableAllReq.prototype.setOrderId = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.CreateTicketTransferableAllExcludeReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    transferableId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seatMapId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    priceBlockId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    seatNameFrom: jspb.Message.getFieldWithDefault(msg, 4, ""),
    seatNameTo: jspb.Message.getFieldWithDefault(msg, 5, ""),
    excludeTicketIdsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    eventInfo: (f = msg.getEventInfo()) && proto.ticket.mobile.TicketTransferableEventInfo.toObject(includeInstance, f),
    orderId: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllExcludeReq}
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.CreateTicketTransferableAllExcludeReq;
  return proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.CreateTicketTransferableAllExcludeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllExcludeReq}
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransferableId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatMapId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriceBlockId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatNameFrom(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatNameTo(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addExcludeTicketIds(value);
      break;
    case 7:
      var value = new proto.ticket.mobile.TicketTransferableEventInfo;
      reader.readMessage(value,proto.ticket.mobile.TicketTransferableEventInfo.deserializeBinaryFromReader);
      msg.setEventInfo(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.CreateTicketTransferableAllExcludeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransferableId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeatMapId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPriceBlockId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSeatNameFrom();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSeatNameTo();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getExcludeTicketIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getEventInfo();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ticket.mobile.TicketTransferableEventInfo.serializeBinaryToWriter
    );
  }
  f = message.getOrderId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string transferable_id = 1;
 * @return {string}
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.prototype.getTransferableId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllExcludeReq} returns this
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.prototype.setTransferableId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string seat_map_id = 2;
 * @return {string}
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.prototype.getSeatMapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllExcludeReq} returns this
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.prototype.setSeatMapId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string price_block_id = 3;
 * @return {string}
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.prototype.getPriceBlockId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllExcludeReq} returns this
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.prototype.setPriceBlockId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string seat_name_from = 4;
 * @return {string}
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.prototype.getSeatNameFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllExcludeReq} returns this
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.prototype.setSeatNameFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string seat_name_to = 5;
 * @return {string}
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.prototype.getSeatNameTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllExcludeReq} returns this
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.prototype.setSeatNameTo = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated string exclude_ticket_ids = 6;
 * @return {!Array<string>}
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.prototype.getExcludeTicketIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllExcludeReq} returns this
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.prototype.setExcludeTicketIdsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllExcludeReq} returns this
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.prototype.addExcludeTicketIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllExcludeReq} returns this
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.prototype.clearExcludeTicketIdsList = function() {
  return this.setExcludeTicketIdsList([]);
};


/**
 * optional TicketTransferableEventInfo event_info = 7;
 * @return {?proto.ticket.mobile.TicketTransferableEventInfo}
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.prototype.getEventInfo = function() {
  return /** @type{?proto.ticket.mobile.TicketTransferableEventInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TicketTransferableEventInfo, 7));
};


/**
 * @param {?proto.ticket.mobile.TicketTransferableEventInfo|undefined} value
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllExcludeReq} returns this
*/
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.prototype.setEventInfo = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllExcludeReq} returns this
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.prototype.clearEventInfo = function() {
  return this.setEventInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.prototype.hasEventInfo = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string order_id = 8;
 * @return {string}
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.prototype.getOrderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllExcludeReq} returns this
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeReq.prototype.setOrderId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.MapUserInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.MapUserInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.MapUserInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.MapUserInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    transferableId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userInfo: (f = msg.getUserInfo()) && proto.ticket.mobile.TicketTransferableUserInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.MapUserInfoReq}
 */
proto.ticket.mobile.MapUserInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.MapUserInfoReq;
  return proto.ticket.mobile.MapUserInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.MapUserInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.MapUserInfoReq}
 */
proto.ticket.mobile.MapUserInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransferableId(value);
      break;
    case 2:
      var value = new proto.ticket.mobile.TicketTransferableUserInfo;
      reader.readMessage(value,proto.ticket.mobile.TicketTransferableUserInfo.deserializeBinaryFromReader);
      msg.setUserInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.MapUserInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.MapUserInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.MapUserInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.MapUserInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransferableId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ticket.mobile.TicketTransferableUserInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string transferable_id = 1;
 * @return {string}
 */
proto.ticket.mobile.MapUserInfoReq.prototype.getTransferableId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.MapUserInfoReq} returns this
 */
proto.ticket.mobile.MapUserInfoReq.prototype.setTransferableId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TicketTransferableUserInfo user_info = 2;
 * @return {?proto.ticket.mobile.TicketTransferableUserInfo}
 */
proto.ticket.mobile.MapUserInfoReq.prototype.getUserInfo = function() {
  return /** @type{?proto.ticket.mobile.TicketTransferableUserInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TicketTransferableUserInfo, 2));
};


/**
 * @param {?proto.ticket.mobile.TicketTransferableUserInfo|undefined} value
 * @return {!proto.ticket.mobile.MapUserInfoReq} returns this
*/
proto.ticket.mobile.MapUserInfoReq.prototype.setUserInfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.MapUserInfoReq} returns this
 */
proto.ticket.mobile.MapUserInfoReq.prototype.clearUserInfo = function() {
  return this.setUserInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.MapUserInfoReq.prototype.hasUserInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.SubmitTicketTransferableReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.SubmitTicketTransferableReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.SubmitTicketTransferableReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.SubmitTicketTransferableReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    transferableId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.SubmitTicketTransferableReq}
 */
proto.ticket.mobile.SubmitTicketTransferableReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.SubmitTicketTransferableReq;
  return proto.ticket.mobile.SubmitTicketTransferableReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.SubmitTicketTransferableReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.SubmitTicketTransferableReq}
 */
proto.ticket.mobile.SubmitTicketTransferableReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransferableId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.SubmitTicketTransferableReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.SubmitTicketTransferableReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.SubmitTicketTransferableReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.SubmitTicketTransferableReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransferableId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string transferable_id = 1;
 * @return {string}
 */
proto.ticket.mobile.SubmitTicketTransferableReq.prototype.getTransferableId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.SubmitTicketTransferableReq} returns this
 */
proto.ticket.mobile.SubmitTicketTransferableReq.prototype.setTransferableId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.GetDetailTicketTransferableReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.GetDetailTicketTransferableReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.GetDetailTicketTransferableReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetDetailTicketTransferableReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    transferableId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.GetDetailTicketTransferableReq}
 */
proto.ticket.mobile.GetDetailTicketTransferableReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.GetDetailTicketTransferableReq;
  return proto.ticket.mobile.GetDetailTicketTransferableReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.GetDetailTicketTransferableReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.GetDetailTicketTransferableReq}
 */
proto.ticket.mobile.GetDetailTicketTransferableReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransferableId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.GetDetailTicketTransferableReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.GetDetailTicketTransferableReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.GetDetailTicketTransferableReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetDetailTicketTransferableReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransferableId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string transferable_id = 1;
 * @return {string}
 */
proto.ticket.mobile.GetDetailTicketTransferableReq.prototype.getTransferableId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.GetDetailTicketTransferableReq} returns this
 */
proto.ticket.mobile.GetDetailTicketTransferableReq.prototype.setTransferableId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.CreateTicketTransferableRes.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.CreateTicketTransferableRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.CreateTicketTransferableRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.CreateTicketTransferableRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    transferableId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.CreateTicketTransferableRes}
 */
proto.ticket.mobile.CreateTicketTransferableRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.CreateTicketTransferableRes;
  return proto.ticket.mobile.CreateTicketTransferableRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.CreateTicketTransferableRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.CreateTicketTransferableRes}
 */
proto.ticket.mobile.CreateTicketTransferableRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransferableId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.CreateTicketTransferableRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.CreateTicketTransferableRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.CreateTicketTransferableRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.CreateTicketTransferableRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransferableId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string transferable_id = 1;
 * @return {string}
 */
proto.ticket.mobile.CreateTicketTransferableRes.prototype.getTransferableId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.CreateTicketTransferableRes} returns this
 */
proto.ticket.mobile.CreateTicketTransferableRes.prototype.setTransferableId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.CreateTicketTransferableAllRes.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.CreateTicketTransferableAllRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.CreateTicketTransferableAllRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.CreateTicketTransferableAllRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    transferableId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllRes}
 */
proto.ticket.mobile.CreateTicketTransferableAllRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.CreateTicketTransferableAllRes;
  return proto.ticket.mobile.CreateTicketTransferableAllRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.CreateTicketTransferableAllRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllRes}
 */
proto.ticket.mobile.CreateTicketTransferableAllRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransferableId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.CreateTicketTransferableAllRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.CreateTicketTransferableAllRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.CreateTicketTransferableAllRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.CreateTicketTransferableAllRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransferableId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string transferable_id = 1;
 * @return {string}
 */
proto.ticket.mobile.CreateTicketTransferableAllRes.prototype.getTransferableId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllRes} returns this
 */
proto.ticket.mobile.CreateTicketTransferableAllRes.prototype.setTransferableId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeRes.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.CreateTicketTransferableAllExcludeRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.CreateTicketTransferableAllExcludeRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    transferableId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllExcludeRes}
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.CreateTicketTransferableAllExcludeRes;
  return proto.ticket.mobile.CreateTicketTransferableAllExcludeRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.CreateTicketTransferableAllExcludeRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllExcludeRes}
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransferableId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.CreateTicketTransferableAllExcludeRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.CreateTicketTransferableAllExcludeRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransferableId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string transferable_id = 1;
 * @return {string}
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeRes.prototype.getTransferableId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.CreateTicketTransferableAllExcludeRes} returns this
 */
proto.ticket.mobile.CreateTicketTransferableAllExcludeRes.prototype.setTransferableId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.GetDetailTicketTransferableRes.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.GetDetailTicketTransferableRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.GetDetailTicketTransferableRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetDetailTicketTransferableRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    transferableInfo: (f = msg.getTransferableInfo()) && proto.ticket.mobile.TicketTransferableInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.GetDetailTicketTransferableRes}
 */
proto.ticket.mobile.GetDetailTicketTransferableRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.GetDetailTicketTransferableRes;
  return proto.ticket.mobile.GetDetailTicketTransferableRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.GetDetailTicketTransferableRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.GetDetailTicketTransferableRes}
 */
proto.ticket.mobile.GetDetailTicketTransferableRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.mobile.TicketTransferableInfo;
      reader.readMessage(value,proto.ticket.mobile.TicketTransferableInfo.deserializeBinaryFromReader);
      msg.setTransferableInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.GetDetailTicketTransferableRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.GetDetailTicketTransferableRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.GetDetailTicketTransferableRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetDetailTicketTransferableRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransferableInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ticket.mobile.TicketTransferableInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional TicketTransferableInfo transferable_info = 1;
 * @return {?proto.ticket.mobile.TicketTransferableInfo}
 */
proto.ticket.mobile.GetDetailTicketTransferableRes.prototype.getTransferableInfo = function() {
  return /** @type{?proto.ticket.mobile.TicketTransferableInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.TicketTransferableInfo, 1));
};


/**
 * @param {?proto.ticket.mobile.TicketTransferableInfo|undefined} value
 * @return {!proto.ticket.mobile.GetDetailTicketTransferableRes} returns this
*/
proto.ticket.mobile.GetDetailTicketTransferableRes.prototype.setTransferableInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.GetDetailTicketTransferableRes} returns this
 */
proto.ticket.mobile.GetDetailTicketTransferableRes.prototype.clearTransferableInfo = function() {
  return this.setTransferableInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.GetDetailTicketTransferableRes.prototype.hasTransferableInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.ticket.mobile);
