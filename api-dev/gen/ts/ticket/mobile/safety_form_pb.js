// source: ticket/mobile/safety_form.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var ticket_mobile_base_pb = require('../../ticket/mobile/base_pb.js');
goog.object.extend(proto, ticket_mobile_base_pb);
goog.exportSymbol('proto.ticket.mobile.DeclareSafetyFormReq', null, global);
goog.exportSymbol('proto.ticket.mobile.DeclareSafetyFormRes', null, global);
goog.exportSymbol('proto.ticket.mobile.FactorTestInfo', null, global);
goog.exportSymbol('proto.ticket.mobile.GetSafetyFormDetailReq', null, global);
goog.exportSymbol('proto.ticket.mobile.GetSafetyFormDetailRes', null, global);
goog.exportSymbol('proto.ticket.mobile.InjectionInfo', null, global);
goog.exportSymbol('proto.ticket.mobile.SafetyFormInfo', null, global);
goog.exportSymbol('proto.ticket.mobile.SafetyFormUserInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.SafetyFormInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.mobile.SafetyFormInfo.repeatedFields_, null);
};
goog.inherits(proto.ticket.mobile.SafetyFormInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.SafetyFormInfo.displayName = 'proto.ticket.mobile.SafetyFormInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.InjectionInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.InjectionInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.InjectionInfo.displayName = 'proto.ticket.mobile.InjectionInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.SafetyFormUserInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.SafetyFormUserInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.SafetyFormUserInfo.displayName = 'proto.ticket.mobile.SafetyFormUserInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.FactorTestInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.FactorTestInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.FactorTestInfo.displayName = 'proto.ticket.mobile.FactorTestInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.DeclareSafetyFormReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.mobile.DeclareSafetyFormReq.repeatedFields_, null);
};
goog.inherits(proto.ticket.mobile.DeclareSafetyFormReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.DeclareSafetyFormReq.displayName = 'proto.ticket.mobile.DeclareSafetyFormReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.GetSafetyFormDetailReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.GetSafetyFormDetailReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.GetSafetyFormDetailReq.displayName = 'proto.ticket.mobile.GetSafetyFormDetailReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.DeclareSafetyFormRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.DeclareSafetyFormRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.DeclareSafetyFormRes.displayName = 'proto.ticket.mobile.DeclareSafetyFormRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.mobile.GetSafetyFormDetailRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.mobile.GetSafetyFormDetailRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.mobile.GetSafetyFormDetailRes.displayName = 'proto.ticket.mobile.GetSafetyFormDetailRes';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.mobile.SafetyFormInfo.repeatedFields_ = [7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.SafetyFormInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.SafetyFormInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.SafetyFormInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.SafetyFormInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ticketId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    isUnsafe: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    isSymptomatic: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    isInjected: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    injectionsList: jspb.Message.toObjectList(msg.getInjectionsList(),
    proto.ticket.mobile.InjectionInfo.toObject, includeInstance),
    attachmentsList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    userInfo: (f = msg.getUserInfo()) && proto.ticket.mobile.SafetyFormUserInfo.toObject(includeInstance, f),
    declaredAt: jspb.Message.getFieldWithDefault(msg, 10, ""),
    factorTest: (f = msg.getFactorTest()) && proto.ticket.mobile.FactorTestInfo.toObject(includeInstance, f),
    injectionNumber: jspb.Message.getFieldWithDefault(msg, 12, 0),
    partnershipId: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.SafetyFormInfo}
 */
proto.ticket.mobile.SafetyFormInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.SafetyFormInfo;
  return proto.ticket.mobile.SafetyFormInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.SafetyFormInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.SafetyFormInfo}
 */
proto.ticket.mobile.SafetyFormInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicketId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsUnsafe(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSymptomatic(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsInjected(value);
      break;
    case 7:
      var value = new proto.ticket.mobile.InjectionInfo;
      reader.readMessage(value,proto.ticket.mobile.InjectionInfo.deserializeBinaryFromReader);
      msg.addInjections(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addAttachments(value);
      break;
    case 9:
      var value = new proto.ticket.mobile.SafetyFormUserInfo;
      reader.readMessage(value,proto.ticket.mobile.SafetyFormUserInfo.deserializeBinaryFromReader);
      msg.setUserInfo(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeclaredAt(value);
      break;
    case 11:
      var value = new proto.ticket.mobile.FactorTestInfo;
      reader.readMessage(value,proto.ticket.mobile.FactorTestInfo.deserializeBinaryFromReader);
      msg.setFactorTest(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInjectionNumber(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnershipId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.SafetyFormInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.SafetyFormInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.SafetyFormInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.SafetyFormInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTicketId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIsUnsafe();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getIsSymptomatic();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIsInjected();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getInjectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.ticket.mobile.InjectionInfo.serializeBinaryToWriter
    );
  }
  f = message.getAttachmentsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getUserInfo();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.ticket.mobile.SafetyFormUserInfo.serializeBinaryToWriter
    );
  }
  f = message.getDeclaredAt();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getFactorTest();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.ticket.mobile.FactorTestInfo.serializeBinaryToWriter
    );
  }
  f = message.getInjectionNumber();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = message.getPartnershipId();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ticket.mobile.SafetyFormInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.SafetyFormInfo} returns this
 */
proto.ticket.mobile.SafetyFormInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ticket_id = 2;
 * @return {string}
 */
proto.ticket.mobile.SafetyFormInfo.prototype.getTicketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.SafetyFormInfo} returns this
 */
proto.ticket.mobile.SafetyFormInfo.prototype.setTicketId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string user_id = 3;
 * @return {string}
 */
proto.ticket.mobile.SafetyFormInfo.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.SafetyFormInfo} returns this
 */
proto.ticket.mobile.SafetyFormInfo.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool is_unsafe = 4;
 * @return {boolean}
 */
proto.ticket.mobile.SafetyFormInfo.prototype.getIsUnsafe = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.mobile.SafetyFormInfo} returns this
 */
proto.ticket.mobile.SafetyFormInfo.prototype.setIsUnsafe = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool is_symptomatic = 5;
 * @return {boolean}
 */
proto.ticket.mobile.SafetyFormInfo.prototype.getIsSymptomatic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.mobile.SafetyFormInfo} returns this
 */
proto.ticket.mobile.SafetyFormInfo.prototype.setIsSymptomatic = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool is_injected = 6;
 * @return {boolean}
 */
proto.ticket.mobile.SafetyFormInfo.prototype.getIsInjected = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.mobile.SafetyFormInfo} returns this
 */
proto.ticket.mobile.SafetyFormInfo.prototype.setIsInjected = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * repeated InjectionInfo injections = 7;
 * @return {!Array<!proto.ticket.mobile.InjectionInfo>}
 */
proto.ticket.mobile.SafetyFormInfo.prototype.getInjectionsList = function() {
  return /** @type{!Array<!proto.ticket.mobile.InjectionInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ticket.mobile.InjectionInfo, 7));
};


/**
 * @param {!Array<!proto.ticket.mobile.InjectionInfo>} value
 * @return {!proto.ticket.mobile.SafetyFormInfo} returns this
*/
proto.ticket.mobile.SafetyFormInfo.prototype.setInjectionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.ticket.mobile.InjectionInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.mobile.InjectionInfo}
 */
proto.ticket.mobile.SafetyFormInfo.prototype.addInjections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.ticket.mobile.InjectionInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.mobile.SafetyFormInfo} returns this
 */
proto.ticket.mobile.SafetyFormInfo.prototype.clearInjectionsList = function() {
  return this.setInjectionsList([]);
};


/**
 * repeated string attachments = 8;
 * @return {!Array<string>}
 */
proto.ticket.mobile.SafetyFormInfo.prototype.getAttachmentsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ticket.mobile.SafetyFormInfo} returns this
 */
proto.ticket.mobile.SafetyFormInfo.prototype.setAttachmentsList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ticket.mobile.SafetyFormInfo} returns this
 */
proto.ticket.mobile.SafetyFormInfo.prototype.addAttachments = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.mobile.SafetyFormInfo} returns this
 */
proto.ticket.mobile.SafetyFormInfo.prototype.clearAttachmentsList = function() {
  return this.setAttachmentsList([]);
};


/**
 * optional SafetyFormUserInfo user_info = 9;
 * @return {?proto.ticket.mobile.SafetyFormUserInfo}
 */
proto.ticket.mobile.SafetyFormInfo.prototype.getUserInfo = function() {
  return /** @type{?proto.ticket.mobile.SafetyFormUserInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.SafetyFormUserInfo, 9));
};


/**
 * @param {?proto.ticket.mobile.SafetyFormUserInfo|undefined} value
 * @return {!proto.ticket.mobile.SafetyFormInfo} returns this
*/
proto.ticket.mobile.SafetyFormInfo.prototype.setUserInfo = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.SafetyFormInfo} returns this
 */
proto.ticket.mobile.SafetyFormInfo.prototype.clearUserInfo = function() {
  return this.setUserInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.SafetyFormInfo.prototype.hasUserInfo = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string declared_at = 10;
 * @return {string}
 */
proto.ticket.mobile.SafetyFormInfo.prototype.getDeclaredAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.SafetyFormInfo} returns this
 */
proto.ticket.mobile.SafetyFormInfo.prototype.setDeclaredAt = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional FactorTestInfo factor_test = 11;
 * @return {?proto.ticket.mobile.FactorTestInfo}
 */
proto.ticket.mobile.SafetyFormInfo.prototype.getFactorTest = function() {
  return /** @type{?proto.ticket.mobile.FactorTestInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.FactorTestInfo, 11));
};


/**
 * @param {?proto.ticket.mobile.FactorTestInfo|undefined} value
 * @return {!proto.ticket.mobile.SafetyFormInfo} returns this
*/
proto.ticket.mobile.SafetyFormInfo.prototype.setFactorTest = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.SafetyFormInfo} returns this
 */
proto.ticket.mobile.SafetyFormInfo.prototype.clearFactorTest = function() {
  return this.setFactorTest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.SafetyFormInfo.prototype.hasFactorTest = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional uint32 injection_number = 12;
 * @return {number}
 */
proto.ticket.mobile.SafetyFormInfo.prototype.getInjectionNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.SafetyFormInfo} returns this
 */
proto.ticket.mobile.SafetyFormInfo.prototype.setInjectionNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string partnership_id = 13;
 * @return {string}
 */
proto.ticket.mobile.SafetyFormInfo.prototype.getPartnershipId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.SafetyFormInfo} returns this
 */
proto.ticket.mobile.SafetyFormInfo.prototype.setPartnershipId = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.InjectionInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.InjectionInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.InjectionInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.InjectionInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    injectedAt: jspb.Message.getFieldWithDefault(msg, 1, ""),
    vaccineType: jspb.Message.getFieldWithDefault(msg, 2, ""),
    otherVaccineType: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.InjectionInfo}
 */
proto.ticket.mobile.InjectionInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.InjectionInfo;
  return proto.ticket.mobile.InjectionInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.InjectionInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.InjectionInfo}
 */
proto.ticket.mobile.InjectionInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInjectedAt(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVaccineType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtherVaccineType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.InjectionInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.InjectionInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.InjectionInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.InjectionInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInjectedAt();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVaccineType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOtherVaccineType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string injected_at = 1;
 * @return {string}
 */
proto.ticket.mobile.InjectionInfo.prototype.getInjectedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.InjectionInfo} returns this
 */
proto.ticket.mobile.InjectionInfo.prototype.setInjectedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string vaccine_type = 2;
 * @return {string}
 */
proto.ticket.mobile.InjectionInfo.prototype.getVaccineType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.InjectionInfo} returns this
 */
proto.ticket.mobile.InjectionInfo.prototype.setVaccineType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string other_vaccine_type = 3;
 * @return {string}
 */
proto.ticket.mobile.InjectionInfo.prototype.getOtherVaccineType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.InjectionInfo} returns this
 */
proto.ticket.mobile.InjectionInfo.prototype.setOtherVaccineType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.SafetyFormUserInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.SafetyFormUserInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.SafetyFormUserInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.SafetyFormUserInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    userFullName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contact: jspb.Message.getFieldWithDefault(msg, 2, ""),
    companyName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.SafetyFormUserInfo}
 */
proto.ticket.mobile.SafetyFormUserInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.SafetyFormUserInfo;
  return proto.ticket.mobile.SafetyFormUserInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.SafetyFormUserInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.SafetyFormUserInfo}
 */
proto.ticket.mobile.SafetyFormUserInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserFullName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContact(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompanyName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.SafetyFormUserInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.SafetyFormUserInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.SafetyFormUserInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.SafetyFormUserInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserFullName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContact();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCompanyName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string user_full_name = 1;
 * @return {string}
 */
proto.ticket.mobile.SafetyFormUserInfo.prototype.getUserFullName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.SafetyFormUserInfo} returns this
 */
proto.ticket.mobile.SafetyFormUserInfo.prototype.setUserFullName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string contact = 2;
 * @return {string}
 */
proto.ticket.mobile.SafetyFormUserInfo.prototype.getContact = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.SafetyFormUserInfo} returns this
 */
proto.ticket.mobile.SafetyFormUserInfo.prototype.setContact = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string company_name = 3;
 * @return {string}
 */
proto.ticket.mobile.SafetyFormUserInfo.prototype.getCompanyName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.SafetyFormUserInfo} returns this
 */
proto.ticket.mobile.SafetyFormUserInfo.prototype.setCompanyName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.FactorTestInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.FactorTestInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.FactorTestInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.FactorTestInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    testDate: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isPositive: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.FactorTestInfo}
 */
proto.ticket.mobile.FactorTestInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.FactorTestInfo;
  return proto.ticket.mobile.FactorTestInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.FactorTestInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.FactorTestInfo}
 */
proto.ticket.mobile.FactorTestInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTestDate(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPositive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.FactorTestInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.FactorTestInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.FactorTestInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.FactorTestInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTestDate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsPositive();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string test_date = 1;
 * @return {string}
 */
proto.ticket.mobile.FactorTestInfo.prototype.getTestDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.FactorTestInfo} returns this
 */
proto.ticket.mobile.FactorTestInfo.prototype.setTestDate = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool is_positive = 2;
 * @return {boolean}
 */
proto.ticket.mobile.FactorTestInfo.prototype.getIsPositive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.mobile.FactorTestInfo} returns this
 */
proto.ticket.mobile.FactorTestInfo.prototype.setIsPositive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.mobile.DeclareSafetyFormReq.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.DeclareSafetyFormReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.DeclareSafetyFormReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.DeclareSafetyFormReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticketId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isUnsafe: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    isSymptomatic: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    isInjected: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    injectionsList: jspb.Message.toObjectList(msg.getInjectionsList(),
    proto.ticket.mobile.InjectionInfo.toObject, includeInstance),
    attachmentsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    userInfo: (f = msg.getUserInfo()) && proto.ticket.mobile.SafetyFormUserInfo.toObject(includeInstance, f),
    factorTest: (f = msg.getFactorTest()) && proto.ticket.mobile.FactorTestInfo.toObject(includeInstance, f),
    injectionNumber: jspb.Message.getFieldWithDefault(msg, 9, 0),
    partnershipId: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.DeclareSafetyFormReq}
 */
proto.ticket.mobile.DeclareSafetyFormReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.DeclareSafetyFormReq;
  return proto.ticket.mobile.DeclareSafetyFormReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.DeclareSafetyFormReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.DeclareSafetyFormReq}
 */
proto.ticket.mobile.DeclareSafetyFormReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicketId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsUnsafe(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSymptomatic(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsInjected(value);
      break;
    case 5:
      var value = new proto.ticket.mobile.InjectionInfo;
      reader.readMessage(value,proto.ticket.mobile.InjectionInfo.deserializeBinaryFromReader);
      msg.addInjections(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addAttachments(value);
      break;
    case 7:
      var value = new proto.ticket.mobile.SafetyFormUserInfo;
      reader.readMessage(value,proto.ticket.mobile.SafetyFormUserInfo.deserializeBinaryFromReader);
      msg.setUserInfo(value);
      break;
    case 8:
      var value = new proto.ticket.mobile.FactorTestInfo;
      reader.readMessage(value,proto.ticket.mobile.FactorTestInfo.deserializeBinaryFromReader);
      msg.setFactorTest(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInjectionNumber(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnershipId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.DeclareSafetyFormReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.DeclareSafetyFormReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.DeclareSafetyFormReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsUnsafe();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getIsSymptomatic();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getIsInjected();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getInjectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.ticket.mobile.InjectionInfo.serializeBinaryToWriter
    );
  }
  f = message.getAttachmentsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getUserInfo();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ticket.mobile.SafetyFormUserInfo.serializeBinaryToWriter
    );
  }
  f = message.getFactorTest();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.ticket.mobile.FactorTestInfo.serializeBinaryToWriter
    );
  }
  f = message.getInjectionNumber();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getPartnershipId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string ticket_id = 1;
 * @return {string}
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.getTicketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.DeclareSafetyFormReq} returns this
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.setTicketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool is_unsafe = 2;
 * @return {boolean}
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.getIsUnsafe = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.mobile.DeclareSafetyFormReq} returns this
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.setIsUnsafe = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool is_symptomatic = 3;
 * @return {boolean}
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.getIsSymptomatic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.mobile.DeclareSafetyFormReq} returns this
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.setIsSymptomatic = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool is_injected = 4;
 * @return {boolean}
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.getIsInjected = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.mobile.DeclareSafetyFormReq} returns this
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.setIsInjected = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * repeated InjectionInfo injections = 5;
 * @return {!Array<!proto.ticket.mobile.InjectionInfo>}
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.getInjectionsList = function() {
  return /** @type{!Array<!proto.ticket.mobile.InjectionInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ticket.mobile.InjectionInfo, 5));
};


/**
 * @param {!Array<!proto.ticket.mobile.InjectionInfo>} value
 * @return {!proto.ticket.mobile.DeclareSafetyFormReq} returns this
*/
proto.ticket.mobile.DeclareSafetyFormReq.prototype.setInjectionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ticket.mobile.InjectionInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.mobile.InjectionInfo}
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.addInjections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ticket.mobile.InjectionInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.mobile.DeclareSafetyFormReq} returns this
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.clearInjectionsList = function() {
  return this.setInjectionsList([]);
};


/**
 * repeated string attachments = 6;
 * @return {!Array<string>}
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.getAttachmentsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ticket.mobile.DeclareSafetyFormReq} returns this
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.setAttachmentsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ticket.mobile.DeclareSafetyFormReq} returns this
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.addAttachments = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.mobile.DeclareSafetyFormReq} returns this
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.clearAttachmentsList = function() {
  return this.setAttachmentsList([]);
};


/**
 * optional SafetyFormUserInfo user_info = 7;
 * @return {?proto.ticket.mobile.SafetyFormUserInfo}
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.getUserInfo = function() {
  return /** @type{?proto.ticket.mobile.SafetyFormUserInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.SafetyFormUserInfo, 7));
};


/**
 * @param {?proto.ticket.mobile.SafetyFormUserInfo|undefined} value
 * @return {!proto.ticket.mobile.DeclareSafetyFormReq} returns this
*/
proto.ticket.mobile.DeclareSafetyFormReq.prototype.setUserInfo = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.DeclareSafetyFormReq} returns this
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.clearUserInfo = function() {
  return this.setUserInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.hasUserInfo = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional FactorTestInfo factor_test = 8;
 * @return {?proto.ticket.mobile.FactorTestInfo}
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.getFactorTest = function() {
  return /** @type{?proto.ticket.mobile.FactorTestInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.FactorTestInfo, 8));
};


/**
 * @param {?proto.ticket.mobile.FactorTestInfo|undefined} value
 * @return {!proto.ticket.mobile.DeclareSafetyFormReq} returns this
*/
proto.ticket.mobile.DeclareSafetyFormReq.prototype.setFactorTest = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.DeclareSafetyFormReq} returns this
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.clearFactorTest = function() {
  return this.setFactorTest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.hasFactorTest = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 injection_number = 9;
 * @return {number}
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.getInjectionNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.mobile.DeclareSafetyFormReq} returns this
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.setInjectionNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string partnership_id = 10;
 * @return {string}
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.getPartnershipId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.DeclareSafetyFormReq} returns this
 */
proto.ticket.mobile.DeclareSafetyFormReq.prototype.setPartnershipId = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.GetSafetyFormDetailReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.GetSafetyFormDetailReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.GetSafetyFormDetailReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetSafetyFormDetailReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticketId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.GetSafetyFormDetailReq}
 */
proto.ticket.mobile.GetSafetyFormDetailReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.GetSafetyFormDetailReq;
  return proto.ticket.mobile.GetSafetyFormDetailReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.GetSafetyFormDetailReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.GetSafetyFormDetailReq}
 */
proto.ticket.mobile.GetSafetyFormDetailReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicketId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.GetSafetyFormDetailReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.GetSafetyFormDetailReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.GetSafetyFormDetailReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetSafetyFormDetailReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ticket_id = 1;
 * @return {string}
 */
proto.ticket.mobile.GetSafetyFormDetailReq.prototype.getTicketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.mobile.GetSafetyFormDetailReq} returns this
 */
proto.ticket.mobile.GetSafetyFormDetailReq.prototype.setTicketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.DeclareSafetyFormRes.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.DeclareSafetyFormRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.DeclareSafetyFormRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.DeclareSafetyFormRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.ticket.mobile.SafetyFormInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.DeclareSafetyFormRes}
 */
proto.ticket.mobile.DeclareSafetyFormRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.DeclareSafetyFormRes;
  return proto.ticket.mobile.DeclareSafetyFormRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.DeclareSafetyFormRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.DeclareSafetyFormRes}
 */
proto.ticket.mobile.DeclareSafetyFormRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.mobile.SafetyFormInfo;
      reader.readMessage(value,proto.ticket.mobile.SafetyFormInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.DeclareSafetyFormRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.DeclareSafetyFormRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.DeclareSafetyFormRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.DeclareSafetyFormRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ticket.mobile.SafetyFormInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional SafetyFormInfo info = 1;
 * @return {?proto.ticket.mobile.SafetyFormInfo}
 */
proto.ticket.mobile.DeclareSafetyFormRes.prototype.getInfo = function() {
  return /** @type{?proto.ticket.mobile.SafetyFormInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.SafetyFormInfo, 1));
};


/**
 * @param {?proto.ticket.mobile.SafetyFormInfo|undefined} value
 * @return {!proto.ticket.mobile.DeclareSafetyFormRes} returns this
*/
proto.ticket.mobile.DeclareSafetyFormRes.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.DeclareSafetyFormRes} returns this
 */
proto.ticket.mobile.DeclareSafetyFormRes.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.DeclareSafetyFormRes.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.mobile.GetSafetyFormDetailRes.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.mobile.GetSafetyFormDetailRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.mobile.GetSafetyFormDetailRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetSafetyFormDetailRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.ticket.mobile.SafetyFormInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.mobile.GetSafetyFormDetailRes}
 */
proto.ticket.mobile.GetSafetyFormDetailRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.mobile.GetSafetyFormDetailRes;
  return proto.ticket.mobile.GetSafetyFormDetailRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.mobile.GetSafetyFormDetailRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.mobile.GetSafetyFormDetailRes}
 */
proto.ticket.mobile.GetSafetyFormDetailRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.mobile.SafetyFormInfo;
      reader.readMessage(value,proto.ticket.mobile.SafetyFormInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.mobile.GetSafetyFormDetailRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.mobile.GetSafetyFormDetailRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.mobile.GetSafetyFormDetailRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.mobile.GetSafetyFormDetailRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ticket.mobile.SafetyFormInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional SafetyFormInfo info = 1;
 * @return {?proto.ticket.mobile.SafetyFormInfo}
 */
proto.ticket.mobile.GetSafetyFormDetailRes.prototype.getInfo = function() {
  return /** @type{?proto.ticket.mobile.SafetyFormInfo} */ (
    jspb.Message.getWrapperField(this, proto.ticket.mobile.SafetyFormInfo, 1));
};


/**
 * @param {?proto.ticket.mobile.SafetyFormInfo|undefined} value
 * @return {!proto.ticket.mobile.GetSafetyFormDetailRes} returns this
*/
proto.ticket.mobile.GetSafetyFormDetailRes.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.mobile.GetSafetyFormDetailRes} returns this
 */
proto.ticket.mobile.GetSafetyFormDetailRes.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.mobile.GetSafetyFormDetailRes.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.ticket.mobile);
