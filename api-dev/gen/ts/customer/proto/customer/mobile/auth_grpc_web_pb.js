/**
 * @fileoverview gRPC-Web generated client stub for customer.mobile
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.20.3
// source: proto/customer/mobile/auth.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var proto_customer_mobile_base_pb = require('../../../proto/customer/mobile/base_pb.js')

var proto_customer_mobile_customer_pb = require('../../../proto/customer/mobile/customer_pb.js')
const proto = {};
proto.customer = {};
proto.customer.mobile = require('./auth_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.customer.mobile.AuthServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.customer.mobile.AuthServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.customer.mobile.RegisterReq,
 *   !proto.customer.mobile.RegisterRes>}
 */
const methodDescriptor_AuthService_Register = new grpc.web.MethodDescriptor(
  '/customer.mobile.AuthService/Register',
  grpc.web.MethodType.UNARY,
  proto.customer.mobile.RegisterReq,
  proto.customer.mobile.RegisterRes,
  /**
   * @param {!proto.customer.mobile.RegisterReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.customer.mobile.RegisterRes.deserializeBinary
);


/**
 * @param {!proto.customer.mobile.RegisterReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.customer.mobile.RegisterRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.customer.mobile.RegisterRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.customer.mobile.AuthServiceClient.prototype.register =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/customer.mobile.AuthService/Register',
      request,
      metadata || {},
      methodDescriptor_AuthService_Register,
      callback);
};


/**
 * @param {!proto.customer.mobile.RegisterReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.customer.mobile.RegisterRes>}
 *     Promise that resolves to the response
 */
proto.customer.mobile.AuthServicePromiseClient.prototype.register =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/customer.mobile.AuthService/Register',
      request,
      metadata || {},
      methodDescriptor_AuthService_Register);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.customer.mobile.LoginReq,
 *   !proto.customer.mobile.LoginRes>}
 */
const methodDescriptor_AuthService_Login = new grpc.web.MethodDescriptor(
  '/customer.mobile.AuthService/Login',
  grpc.web.MethodType.UNARY,
  proto.customer.mobile.LoginReq,
  proto.customer.mobile.LoginRes,
  /**
   * @param {!proto.customer.mobile.LoginReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.customer.mobile.LoginRes.deserializeBinary
);


/**
 * @param {!proto.customer.mobile.LoginReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.customer.mobile.LoginRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.customer.mobile.LoginRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.customer.mobile.AuthServiceClient.prototype.login =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/customer.mobile.AuthService/Login',
      request,
      metadata || {},
      methodDescriptor_AuthService_Login,
      callback);
};


/**
 * @param {!proto.customer.mobile.LoginReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.customer.mobile.LoginRes>}
 *     Promise that resolves to the response
 */
proto.customer.mobile.AuthServicePromiseClient.prototype.login =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/customer.mobile.AuthService/Login',
      request,
      metadata || {},
      methodDescriptor_AuthService_Login);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.customer.mobile.SocialLoginReq,
 *   !proto.customer.mobile.LoginRes>}
 */
const methodDescriptor_AuthService_SocialLogin = new grpc.web.MethodDescriptor(
  '/customer.mobile.AuthService/SocialLogin',
  grpc.web.MethodType.UNARY,
  proto.customer.mobile.SocialLoginReq,
  proto.customer.mobile.LoginRes,
  /**
   * @param {!proto.customer.mobile.SocialLoginReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.customer.mobile.LoginRes.deserializeBinary
);


/**
 * @param {!proto.customer.mobile.SocialLoginReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.customer.mobile.LoginRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.customer.mobile.LoginRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.customer.mobile.AuthServiceClient.prototype.socialLogin =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/customer.mobile.AuthService/SocialLogin',
      request,
      metadata || {},
      methodDescriptor_AuthService_SocialLogin,
      callback);
};


/**
 * @param {!proto.customer.mobile.SocialLoginReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.customer.mobile.LoginRes>}
 *     Promise that resolves to the response
 */
proto.customer.mobile.AuthServicePromiseClient.prototype.socialLogin =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/customer.mobile.AuthService/SocialLogin',
      request,
      metadata || {},
      methodDescriptor_AuthService_SocialLogin);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.customer.mobile.RefreshTokenReq,
 *   !proto.customer.mobile.RefreshTokenRes>}
 */
const methodDescriptor_AuthService_RefreshToken = new grpc.web.MethodDescriptor(
  '/customer.mobile.AuthService/RefreshToken',
  grpc.web.MethodType.UNARY,
  proto.customer.mobile.RefreshTokenReq,
  proto.customer.mobile.RefreshTokenRes,
  /**
   * @param {!proto.customer.mobile.RefreshTokenReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.customer.mobile.RefreshTokenRes.deserializeBinary
);


/**
 * @param {!proto.customer.mobile.RefreshTokenReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.customer.mobile.RefreshTokenRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.customer.mobile.RefreshTokenRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.customer.mobile.AuthServiceClient.prototype.refreshToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/customer.mobile.AuthService/RefreshToken',
      request,
      metadata || {},
      methodDescriptor_AuthService_RefreshToken,
      callback);
};


/**
 * @param {!proto.customer.mobile.RefreshTokenReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.customer.mobile.RefreshTokenRes>}
 *     Promise that resolves to the response
 */
proto.customer.mobile.AuthServicePromiseClient.prototype.refreshToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/customer.mobile.AuthService/RefreshToken',
      request,
      metadata || {},
      methodDescriptor_AuthService_RefreshToken);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.customer.mobile.LinkSocialAccountReq,
 *   !proto.customer.mobile.LinkSocialAccountRes>}
 */
const methodDescriptor_AuthService_LinkSocialAccount = new grpc.web.MethodDescriptor(
  '/customer.mobile.AuthService/LinkSocialAccount',
  grpc.web.MethodType.UNARY,
  proto.customer.mobile.LinkSocialAccountReq,
  proto.customer.mobile.LinkSocialAccountRes,
  /**
   * @param {!proto.customer.mobile.LinkSocialAccountReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.customer.mobile.LinkSocialAccountRes.deserializeBinary
);


/**
 * @param {!proto.customer.mobile.LinkSocialAccountReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.customer.mobile.LinkSocialAccountRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.customer.mobile.LinkSocialAccountRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.customer.mobile.AuthServiceClient.prototype.linkSocialAccount =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/customer.mobile.AuthService/LinkSocialAccount',
      request,
      metadata || {},
      methodDescriptor_AuthService_LinkSocialAccount,
      callback);
};


/**
 * @param {!proto.customer.mobile.LinkSocialAccountReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.customer.mobile.LinkSocialAccountRes>}
 *     Promise that resolves to the response
 */
proto.customer.mobile.AuthServicePromiseClient.prototype.linkSocialAccount =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/customer.mobile.AuthService/LinkSocialAccount',
      request,
      metadata || {},
      methodDescriptor_AuthService_LinkSocialAccount);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.customer.mobile.Empty,
 *   !proto.customer.mobile.Empty>}
 */
const methodDescriptor_AuthService_Logout = new grpc.web.MethodDescriptor(
  '/customer.mobile.AuthService/Logout',
  grpc.web.MethodType.UNARY,
  proto_customer_mobile_base_pb.Empty,
  proto_customer_mobile_base_pb.Empty,
  /**
   * @param {!proto.customer.mobile.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto_customer_mobile_base_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.customer.mobile.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.customer.mobile.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.customer.mobile.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.customer.mobile.AuthServiceClient.prototype.logout =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/customer.mobile.AuthService/Logout',
      request,
      metadata || {},
      methodDescriptor_AuthService_Logout,
      callback);
};


/**
 * @param {!proto.customer.mobile.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.customer.mobile.Empty>}
 *     Promise that resolves to the response
 */
proto.customer.mobile.AuthServicePromiseClient.prototype.logout =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/customer.mobile.AuthService/Logout',
      request,
      metadata || {},
      methodDescriptor_AuthService_Logout);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.customer.mobile.Empty,
 *   !proto.customer.mobile.Empty>}
 */
const methodDescriptor_AuthService_LogoutAllDevice = new grpc.web.MethodDescriptor(
  '/customer.mobile.AuthService/LogoutAllDevice',
  grpc.web.MethodType.UNARY,
  proto_customer_mobile_base_pb.Empty,
  proto_customer_mobile_base_pb.Empty,
  /**
   * @param {!proto.customer.mobile.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto_customer_mobile_base_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.customer.mobile.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.customer.mobile.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.customer.mobile.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.customer.mobile.AuthServiceClient.prototype.logoutAllDevice =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/customer.mobile.AuthService/LogoutAllDevice',
      request,
      metadata || {},
      methodDescriptor_AuthService_LogoutAllDevice,
      callback);
};


/**
 * @param {!proto.customer.mobile.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.customer.mobile.Empty>}
 *     Promise that resolves to the response
 */
proto.customer.mobile.AuthServicePromiseClient.prototype.logoutAllDevice =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/customer.mobile.AuthService/LogoutAllDevice',
      request,
      metadata || {},
      methodDescriptor_AuthService_LogoutAllDevice);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.customer.mobile.VerifySocialTokenReq,
 *   !proto.customer.mobile.Empty>}
 */
const methodDescriptor_AuthService_VerifySocialToken = new grpc.web.MethodDescriptor(
  '/customer.mobile.AuthService/VerifySocialToken',
  grpc.web.MethodType.UNARY,
  proto.customer.mobile.VerifySocialTokenReq,
  proto_customer_mobile_base_pb.Empty,
  /**
   * @param {!proto.customer.mobile.VerifySocialTokenReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto_customer_mobile_base_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.customer.mobile.VerifySocialTokenReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.customer.mobile.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.customer.mobile.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.customer.mobile.AuthServiceClient.prototype.verifySocialToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/customer.mobile.AuthService/VerifySocialToken',
      request,
      metadata || {},
      methodDescriptor_AuthService_VerifySocialToken,
      callback);
};


/**
 * @param {!proto.customer.mobile.VerifySocialTokenReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.customer.mobile.Empty>}
 *     Promise that resolves to the response
 */
proto.customer.mobile.AuthServicePromiseClient.prototype.verifySocialToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/customer.mobile.AuthService/VerifySocialToken',
      request,
      metadata || {},
      methodDescriptor_AuthService_VerifySocialToken);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.customer.mobile.ScanQRCodeReq,
 *   !proto.customer.mobile.Empty>}
 */
const methodDescriptor_AuthService_ScanQRCode = new grpc.web.MethodDescriptor(
  '/customer.mobile.AuthService/ScanQRCode',
  grpc.web.MethodType.UNARY,
  proto.customer.mobile.ScanQRCodeReq,
  proto_customer_mobile_base_pb.Empty,
  /**
   * @param {!proto.customer.mobile.ScanQRCodeReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto_customer_mobile_base_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.customer.mobile.ScanQRCodeReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.customer.mobile.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.customer.mobile.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.customer.mobile.AuthServiceClient.prototype.scanQRCode =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/customer.mobile.AuthService/ScanQRCode',
      request,
      metadata || {},
      methodDescriptor_AuthService_ScanQRCode,
      callback);
};


/**
 * @param {!proto.customer.mobile.ScanQRCodeReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.customer.mobile.Empty>}
 *     Promise that resolves to the response
 */
proto.customer.mobile.AuthServicePromiseClient.prototype.scanQRCode =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/customer.mobile.AuthService/ScanQRCode',
      request,
      metadata || {},
      methodDescriptor_AuthService_ScanQRCode);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.customer.mobile.LoginByQRCodeReq,
 *   !proto.customer.mobile.LoginByQRCodeRes>}
 */
const methodDescriptor_AuthService_LoginByQRCode = new grpc.web.MethodDescriptor(
  '/customer.mobile.AuthService/LoginByQRCode',
  grpc.web.MethodType.UNARY,
  proto.customer.mobile.LoginByQRCodeReq,
  proto.customer.mobile.LoginByQRCodeRes,
  /**
   * @param {!proto.customer.mobile.LoginByQRCodeReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.customer.mobile.LoginByQRCodeRes.deserializeBinary
);


/**
 * @param {!proto.customer.mobile.LoginByQRCodeReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.customer.mobile.LoginByQRCodeRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.customer.mobile.LoginByQRCodeRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.customer.mobile.AuthServiceClient.prototype.loginByQRCode =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/customer.mobile.AuthService/LoginByQRCode',
      request,
      metadata || {},
      methodDescriptor_AuthService_LoginByQRCode,
      callback);
};


/**
 * @param {!proto.customer.mobile.LoginByQRCodeReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.customer.mobile.LoginByQRCodeRes>}
 *     Promise that resolves to the response
 */
proto.customer.mobile.AuthServicePromiseClient.prototype.loginByQRCode =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/customer.mobile.AuthService/LoginByQRCode',
      request,
      metadata || {},
      methodDescriptor_AuthService_LoginByQRCode);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.customer.mobile.VerifyPasswordSecurityReq,
 *   !proto.customer.mobile.VerifyPasswordSecurityRes>}
 */
const methodDescriptor_AuthService_VerifyPasswordSecurity = new grpc.web.MethodDescriptor(
  '/customer.mobile.AuthService/VerifyPasswordSecurity',
  grpc.web.MethodType.UNARY,
  proto.customer.mobile.VerifyPasswordSecurityReq,
  proto.customer.mobile.VerifyPasswordSecurityRes,
  /**
   * @param {!proto.customer.mobile.VerifyPasswordSecurityReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.customer.mobile.VerifyPasswordSecurityRes.deserializeBinary
);


/**
 * @param {!proto.customer.mobile.VerifyPasswordSecurityReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.customer.mobile.VerifyPasswordSecurityRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.customer.mobile.VerifyPasswordSecurityRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.customer.mobile.AuthServiceClient.prototype.verifyPasswordSecurity =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/customer.mobile.AuthService/VerifyPasswordSecurity',
      request,
      metadata || {},
      methodDescriptor_AuthService_VerifyPasswordSecurity,
      callback);
};


/**
 * @param {!proto.customer.mobile.VerifyPasswordSecurityReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.customer.mobile.VerifyPasswordSecurityRes>}
 *     Promise that resolves to the response
 */
proto.customer.mobile.AuthServicePromiseClient.prototype.verifyPasswordSecurity =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/customer.mobile.AuthService/VerifyPasswordSecurity',
      request,
      metadata || {},
      methodDescriptor_AuthService_VerifyPasswordSecurity);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.customer.mobile.CheckAccountHavePhoneNumberReq,
 *   !proto.customer.mobile.CheckAccountHavePhoneNumberRes>}
 */
const methodDescriptor_AuthService_CheckAccountHavePhoneNumber = new grpc.web.MethodDescriptor(
  '/customer.mobile.AuthService/CheckAccountHavePhoneNumber',
  grpc.web.MethodType.UNARY,
  proto.customer.mobile.CheckAccountHavePhoneNumberReq,
  proto.customer.mobile.CheckAccountHavePhoneNumberRes,
  /**
   * @param {!proto.customer.mobile.CheckAccountHavePhoneNumberReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.customer.mobile.CheckAccountHavePhoneNumberRes.deserializeBinary
);


/**
 * @param {!proto.customer.mobile.CheckAccountHavePhoneNumberReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.customer.mobile.CheckAccountHavePhoneNumberRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.customer.mobile.CheckAccountHavePhoneNumberRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.customer.mobile.AuthServiceClient.prototype.checkAccountHavePhoneNumber =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/customer.mobile.AuthService/CheckAccountHavePhoneNumber',
      request,
      metadata || {},
      methodDescriptor_AuthService_CheckAccountHavePhoneNumber,
      callback);
};


/**
 * @param {!proto.customer.mobile.CheckAccountHavePhoneNumberReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.customer.mobile.CheckAccountHavePhoneNumberRes>}
 *     Promise that resolves to the response
 */
proto.customer.mobile.AuthServicePromiseClient.prototype.checkAccountHavePhoneNumber =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/customer.mobile.AuthService/CheckAccountHavePhoneNumber',
      request,
      metadata || {},
      methodDescriptor_AuthService_CheckAccountHavePhoneNumber);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.customer.mobile.UpdateImportantInformationReq,
 *   !proto.customer.mobile.Empty>}
 */
const methodDescriptor_AuthService_UpdateImportantInformation = new grpc.web.MethodDescriptor(
  '/customer.mobile.AuthService/UpdateImportantInformation',
  grpc.web.MethodType.UNARY,
  proto.customer.mobile.UpdateImportantInformationReq,
  proto_customer_mobile_base_pb.Empty,
  /**
   * @param {!proto.customer.mobile.UpdateImportantInformationReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto_customer_mobile_base_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.customer.mobile.UpdateImportantInformationReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.customer.mobile.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.customer.mobile.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.customer.mobile.AuthServiceClient.prototype.updateImportantInformation =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/customer.mobile.AuthService/UpdateImportantInformation',
      request,
      metadata || {},
      methodDescriptor_AuthService_UpdateImportantInformation,
      callback);
};


/**
 * @param {!proto.customer.mobile.UpdateImportantInformationReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.customer.mobile.Empty>}
 *     Promise that resolves to the response
 */
proto.customer.mobile.AuthServicePromiseClient.prototype.updateImportantInformation =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/customer.mobile.AuthService/UpdateImportantInformation',
      request,
      metadata || {},
      methodDescriptor_AuthService_UpdateImportantInformation);
};


module.exports = proto.customer.mobile;

