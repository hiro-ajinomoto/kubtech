/**
 * @fileoverview gRPC-Web generated client stub for partnership.web_admin
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.20.3
// source: proto/partnership/web_admin/partnership.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var proto_partnership_web_admin_base_pb = require('../../../proto/partnership/web_admin/base_pb.js')
const proto = {};
proto.partnership = {};
proto.partnership.web_admin = require('./partnership_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.partnership.web_admin.PartnershipServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.partnership.web_admin.PartnershipServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.partnership.web_admin.CreatePartnershipReq,
 *   !proto.partnership.web_admin.CreatePartnershipRes>}
 */
const methodDescriptor_PartnershipService_CreatePartnership = new grpc.web.MethodDescriptor(
  '/partnership.web_admin.PartnershipService/CreatePartnership',
  grpc.web.MethodType.UNARY,
  proto.partnership.web_admin.CreatePartnershipReq,
  proto.partnership.web_admin.CreatePartnershipRes,
  /**
   * @param {!proto.partnership.web_admin.CreatePartnershipReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.partnership.web_admin.CreatePartnershipRes.deserializeBinary
);


/**
 * @param {!proto.partnership.web_admin.CreatePartnershipReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.partnership.web_admin.CreatePartnershipRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.partnership.web_admin.CreatePartnershipRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.partnership.web_admin.PartnershipServiceClient.prototype.createPartnership =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/partnership.web_admin.PartnershipService/CreatePartnership',
      request,
      metadata || {},
      methodDescriptor_PartnershipService_CreatePartnership,
      callback);
};


/**
 * @param {!proto.partnership.web_admin.CreatePartnershipReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.partnership.web_admin.CreatePartnershipRes>}
 *     Promise that resolves to the response
 */
proto.partnership.web_admin.PartnershipServicePromiseClient.prototype.createPartnership =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/partnership.web_admin.PartnershipService/CreatePartnership',
      request,
      metadata || {},
      methodDescriptor_PartnershipService_CreatePartnership);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.partnership.web_admin.RetrievePartnershipReq,
 *   !proto.partnership.web_admin.RetrievePartnershipRes>}
 */
const methodDescriptor_PartnershipService_RetrievePartnership = new grpc.web.MethodDescriptor(
  '/partnership.web_admin.PartnershipService/RetrievePartnership',
  grpc.web.MethodType.UNARY,
  proto.partnership.web_admin.RetrievePartnershipReq,
  proto.partnership.web_admin.RetrievePartnershipRes,
  /**
   * @param {!proto.partnership.web_admin.RetrievePartnershipReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.partnership.web_admin.RetrievePartnershipRes.deserializeBinary
);


/**
 * @param {!proto.partnership.web_admin.RetrievePartnershipReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.partnership.web_admin.RetrievePartnershipRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.partnership.web_admin.RetrievePartnershipRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.partnership.web_admin.PartnershipServiceClient.prototype.retrievePartnership =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/partnership.web_admin.PartnershipService/RetrievePartnership',
      request,
      metadata || {},
      methodDescriptor_PartnershipService_RetrievePartnership,
      callback);
};


/**
 * @param {!proto.partnership.web_admin.RetrievePartnershipReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.partnership.web_admin.RetrievePartnershipRes>}
 *     Promise that resolves to the response
 */
proto.partnership.web_admin.PartnershipServicePromiseClient.prototype.retrievePartnership =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/partnership.web_admin.PartnershipService/RetrievePartnership',
      request,
      metadata || {},
      methodDescriptor_PartnershipService_RetrievePartnership);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.partnership.web_admin.ListPartnershipReq,
 *   !proto.partnership.web_admin.ListPartnershipRes>}
 */
const methodDescriptor_PartnershipService_ListPartnership = new grpc.web.MethodDescriptor(
  '/partnership.web_admin.PartnershipService/ListPartnership',
  grpc.web.MethodType.UNARY,
  proto.partnership.web_admin.ListPartnershipReq,
  proto.partnership.web_admin.ListPartnershipRes,
  /**
   * @param {!proto.partnership.web_admin.ListPartnershipReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.partnership.web_admin.ListPartnershipRes.deserializeBinary
);


/**
 * @param {!proto.partnership.web_admin.ListPartnershipReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.partnership.web_admin.ListPartnershipRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.partnership.web_admin.ListPartnershipRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.partnership.web_admin.PartnershipServiceClient.prototype.listPartnership =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/partnership.web_admin.PartnershipService/ListPartnership',
      request,
      metadata || {},
      methodDescriptor_PartnershipService_ListPartnership,
      callback);
};


/**
 * @param {!proto.partnership.web_admin.ListPartnershipReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.partnership.web_admin.ListPartnershipRes>}
 *     Promise that resolves to the response
 */
proto.partnership.web_admin.PartnershipServicePromiseClient.prototype.listPartnership =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/partnership.web_admin.PartnershipService/ListPartnership',
      request,
      metadata || {},
      methodDescriptor_PartnershipService_ListPartnership);
};


module.exports = proto.partnership.web_admin;

