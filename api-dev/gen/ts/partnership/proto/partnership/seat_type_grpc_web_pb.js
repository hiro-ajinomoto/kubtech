/**
 * @fileoverview gRPC-Web generated client stub for partnership
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.20.3
// source: proto/partnership/seat_type.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var proto_partnership_base_pb = require('../../proto/partnership/base_pb.js')
const proto = {};
proto.partnership = require('./seat_type_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.partnership.SeatTypeServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.partnership.SeatTypeServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.partnership.RetrieveSeatTypeReq,
 *   !proto.partnership.RetrieveSeatTypeRes>}
 */
const methodDescriptor_SeatTypeService_RetrieveSeatType = new grpc.web.MethodDescriptor(
  '/partnership.SeatTypeService/RetrieveSeatType',
  grpc.web.MethodType.UNARY,
  proto.partnership.RetrieveSeatTypeReq,
  proto.partnership.RetrieveSeatTypeRes,
  /**
   * @param {!proto.partnership.RetrieveSeatTypeReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.partnership.RetrieveSeatTypeRes.deserializeBinary
);


/**
 * @param {!proto.partnership.RetrieveSeatTypeReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.partnership.RetrieveSeatTypeRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.partnership.RetrieveSeatTypeRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.partnership.SeatTypeServiceClient.prototype.retrieveSeatType =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/partnership.SeatTypeService/RetrieveSeatType',
      request,
      metadata || {},
      methodDescriptor_SeatTypeService_RetrieveSeatType,
      callback);
};


/**
 * @param {!proto.partnership.RetrieveSeatTypeReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.partnership.RetrieveSeatTypeRes>}
 *     Promise that resolves to the response
 */
proto.partnership.SeatTypeServicePromiseClient.prototype.retrieveSeatType =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/partnership.SeatTypeService/RetrieveSeatType',
      request,
      metadata || {},
      methodDescriptor_SeatTypeService_RetrieveSeatType);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.partnership.ListSeatTypeReq,
 *   !proto.partnership.ListSeatTypeRes>}
 */
const methodDescriptor_SeatTypeService_ListSeatType = new grpc.web.MethodDescriptor(
  '/partnership.SeatTypeService/ListSeatType',
  grpc.web.MethodType.UNARY,
  proto.partnership.ListSeatTypeReq,
  proto.partnership.ListSeatTypeRes,
  /**
   * @param {!proto.partnership.ListSeatTypeReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.partnership.ListSeatTypeRes.deserializeBinary
);


/**
 * @param {!proto.partnership.ListSeatTypeReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.partnership.ListSeatTypeRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.partnership.ListSeatTypeRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.partnership.SeatTypeServiceClient.prototype.listSeatType =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/partnership.SeatTypeService/ListSeatType',
      request,
      metadata || {},
      methodDescriptor_SeatTypeService_ListSeatType,
      callback);
};


/**
 * @param {!proto.partnership.ListSeatTypeReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.partnership.ListSeatTypeRes>}
 *     Promise that resolves to the response
 */
proto.partnership.SeatTypeServicePromiseClient.prototype.listSeatType =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/partnership.SeatTypeService/ListSeatType',
      request,
      metadata || {},
      methodDescriptor_SeatTypeService_ListSeatType);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.partnership.CreateSeatTypeReq,
 *   !proto.partnership.CreateSeatTypeRes>}
 */
const methodDescriptor_SeatTypeService_CreateSeatType = new grpc.web.MethodDescriptor(
  '/partnership.SeatTypeService/CreateSeatType',
  grpc.web.MethodType.UNARY,
  proto.partnership.CreateSeatTypeReq,
  proto.partnership.CreateSeatTypeRes,
  /**
   * @param {!proto.partnership.CreateSeatTypeReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.partnership.CreateSeatTypeRes.deserializeBinary
);


/**
 * @param {!proto.partnership.CreateSeatTypeReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.partnership.CreateSeatTypeRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.partnership.CreateSeatTypeRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.partnership.SeatTypeServiceClient.prototype.createSeatType =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/partnership.SeatTypeService/CreateSeatType',
      request,
      metadata || {},
      methodDescriptor_SeatTypeService_CreateSeatType,
      callback);
};


/**
 * @param {!proto.partnership.CreateSeatTypeReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.partnership.CreateSeatTypeRes>}
 *     Promise that resolves to the response
 */
proto.partnership.SeatTypeServicePromiseClient.prototype.createSeatType =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/partnership.SeatTypeService/CreateSeatType',
      request,
      metadata || {},
      methodDescriptor_SeatTypeService_CreateSeatType);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.partnership.UpdateSeatTypeReq,
 *   !proto.partnership.Empty>}
 */
const methodDescriptor_SeatTypeService_UpdateSeatType = new grpc.web.MethodDescriptor(
  '/partnership.SeatTypeService/UpdateSeatType',
  grpc.web.MethodType.UNARY,
  proto.partnership.UpdateSeatTypeReq,
  proto_partnership_base_pb.Empty,
  /**
   * @param {!proto.partnership.UpdateSeatTypeReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto_partnership_base_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.partnership.UpdateSeatTypeReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.partnership.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.partnership.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.partnership.SeatTypeServiceClient.prototype.updateSeatType =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/partnership.SeatTypeService/UpdateSeatType',
      request,
      metadata || {},
      methodDescriptor_SeatTypeService_UpdateSeatType,
      callback);
};


/**
 * @param {!proto.partnership.UpdateSeatTypeReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.partnership.Empty>}
 *     Promise that resolves to the response
 */
proto.partnership.SeatTypeServicePromiseClient.prototype.updateSeatType =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/partnership.SeatTypeService/UpdateSeatType',
      request,
      metadata || {},
      methodDescriptor_SeatTypeService_UpdateSeatType);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.partnership.DeleteSeatTypeReq,
 *   !proto.partnership.Empty>}
 */
const methodDescriptor_SeatTypeService_DeleteSeatType = new grpc.web.MethodDescriptor(
  '/partnership.SeatTypeService/DeleteSeatType',
  grpc.web.MethodType.UNARY,
  proto.partnership.DeleteSeatTypeReq,
  proto_partnership_base_pb.Empty,
  /**
   * @param {!proto.partnership.DeleteSeatTypeReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto_partnership_base_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.partnership.DeleteSeatTypeReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.partnership.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.partnership.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.partnership.SeatTypeServiceClient.prototype.deleteSeatType =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/partnership.SeatTypeService/DeleteSeatType',
      request,
      metadata || {},
      methodDescriptor_SeatTypeService_DeleteSeatType,
      callback);
};


/**
 * @param {!proto.partnership.DeleteSeatTypeReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.partnership.Empty>}
 *     Promise that resolves to the response
 */
proto.partnership.SeatTypeServicePromiseClient.prototype.deleteSeatType =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/partnership.SeatTypeService/DeleteSeatType',
      request,
      metadata || {},
      methodDescriptor_SeatTypeService_DeleteSeatType);
};


module.exports = proto.partnership;

