/**
 * @fileoverview gRPC-Web generated client stub for partnership
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.20.3
// source: proto/partnership/news.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var proto_partnership_base_pb = require('../../proto/partnership/base_pb.js')
const proto = {};
proto.partnership = require('./news_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.partnership.NewsServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.partnership.NewsServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.partnership.CreateNewsReq,
 *   !proto.partnership.CreateNewsRes>}
 */
const methodDescriptor_NewsService_CreateNews = new grpc.web.MethodDescriptor(
  '/partnership.NewsService/CreateNews',
  grpc.web.MethodType.UNARY,
  proto.partnership.CreateNewsReq,
  proto.partnership.CreateNewsRes,
  /**
   * @param {!proto.partnership.CreateNewsReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.partnership.CreateNewsRes.deserializeBinary
);


/**
 * @param {!proto.partnership.CreateNewsReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.partnership.CreateNewsRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.partnership.CreateNewsRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.partnership.NewsServiceClient.prototype.createNews =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/partnership.NewsService/CreateNews',
      request,
      metadata || {},
      methodDescriptor_NewsService_CreateNews,
      callback);
};


/**
 * @param {!proto.partnership.CreateNewsReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.partnership.CreateNewsRes>}
 *     Promise that resolves to the response
 */
proto.partnership.NewsServicePromiseClient.prototype.createNews =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/partnership.NewsService/CreateNews',
      request,
      metadata || {},
      methodDescriptor_NewsService_CreateNews);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.partnership.UpdateNewsReq,
 *   !proto.partnership.Empty>}
 */
const methodDescriptor_NewsService_UpdateNews = new grpc.web.MethodDescriptor(
  '/partnership.NewsService/UpdateNews',
  grpc.web.MethodType.UNARY,
  proto.partnership.UpdateNewsReq,
  proto_partnership_base_pb.Empty,
  /**
   * @param {!proto.partnership.UpdateNewsReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto_partnership_base_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.partnership.UpdateNewsReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.partnership.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.partnership.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.partnership.NewsServiceClient.prototype.updateNews =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/partnership.NewsService/UpdateNews',
      request,
      metadata || {},
      methodDescriptor_NewsService_UpdateNews,
      callback);
};


/**
 * @param {!proto.partnership.UpdateNewsReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.partnership.Empty>}
 *     Promise that resolves to the response
 */
proto.partnership.NewsServicePromiseClient.prototype.updateNews =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/partnership.NewsService/UpdateNews',
      request,
      metadata || {},
      methodDescriptor_NewsService_UpdateNews);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.partnership.DeleteNewsReq,
 *   !proto.partnership.Empty>}
 */
const methodDescriptor_NewsService_DeleteNews = new grpc.web.MethodDescriptor(
  '/partnership.NewsService/DeleteNews',
  grpc.web.MethodType.UNARY,
  proto.partnership.DeleteNewsReq,
  proto_partnership_base_pb.Empty,
  /**
   * @param {!proto.partnership.DeleteNewsReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto_partnership_base_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.partnership.DeleteNewsReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.partnership.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.partnership.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.partnership.NewsServiceClient.prototype.deleteNews =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/partnership.NewsService/DeleteNews',
      request,
      metadata || {},
      methodDescriptor_NewsService_DeleteNews,
      callback);
};


/**
 * @param {!proto.partnership.DeleteNewsReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.partnership.Empty>}
 *     Promise that resolves to the response
 */
proto.partnership.NewsServicePromiseClient.prototype.deleteNews =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/partnership.NewsService/DeleteNews',
      request,
      metadata || {},
      methodDescriptor_NewsService_DeleteNews);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.partnership.RetrieveNewsReq,
 *   !proto.partnership.RetrieveNewsRes>}
 */
const methodDescriptor_NewsService_RetrieveNews = new grpc.web.MethodDescriptor(
  '/partnership.NewsService/RetrieveNews',
  grpc.web.MethodType.UNARY,
  proto.partnership.RetrieveNewsReq,
  proto.partnership.RetrieveNewsRes,
  /**
   * @param {!proto.partnership.RetrieveNewsReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.partnership.RetrieveNewsRes.deserializeBinary
);


/**
 * @param {!proto.partnership.RetrieveNewsReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.partnership.RetrieveNewsRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.partnership.RetrieveNewsRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.partnership.NewsServiceClient.prototype.retrieveNews =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/partnership.NewsService/RetrieveNews',
      request,
      metadata || {},
      methodDescriptor_NewsService_RetrieveNews,
      callback);
};


/**
 * @param {!proto.partnership.RetrieveNewsReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.partnership.RetrieveNewsRes>}
 *     Promise that resolves to the response
 */
proto.partnership.NewsServicePromiseClient.prototype.retrieveNews =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/partnership.NewsService/RetrieveNews',
      request,
      metadata || {},
      methodDescriptor_NewsService_RetrieveNews);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.partnership.ListNewsReq,
 *   !proto.partnership.ListNewsRes>}
 */
const methodDescriptor_NewsService_ListNews = new grpc.web.MethodDescriptor(
  '/partnership.NewsService/ListNews',
  grpc.web.MethodType.UNARY,
  proto.partnership.ListNewsReq,
  proto.partnership.ListNewsRes,
  /**
   * @param {!proto.partnership.ListNewsReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.partnership.ListNewsRes.deserializeBinary
);


/**
 * @param {!proto.partnership.ListNewsReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.partnership.ListNewsRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.partnership.ListNewsRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.partnership.NewsServiceClient.prototype.listNews =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/partnership.NewsService/ListNews',
      request,
      metadata || {},
      methodDescriptor_NewsService_ListNews,
      callback);
};


/**
 * @param {!proto.partnership.ListNewsReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.partnership.ListNewsRes>}
 *     Promise that resolves to the response
 */
proto.partnership.NewsServicePromiseClient.prototype.listNews =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/partnership.NewsService/ListNews',
      request,
      metadata || {},
      methodDescriptor_NewsService_ListNews);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.partnership.PublicRetrieveNewsReq,
 *   !proto.partnership.RetrieveNewsRes>}
 */
const methodDescriptor_NewsService_PublicRetrieveNews = new grpc.web.MethodDescriptor(
  '/partnership.NewsService/PublicRetrieveNews',
  grpc.web.MethodType.UNARY,
  proto.partnership.PublicRetrieveNewsReq,
  proto.partnership.RetrieveNewsRes,
  /**
   * @param {!proto.partnership.PublicRetrieveNewsReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.partnership.RetrieveNewsRes.deserializeBinary
);


/**
 * @param {!proto.partnership.PublicRetrieveNewsReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.partnership.RetrieveNewsRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.partnership.RetrieveNewsRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.partnership.NewsServiceClient.prototype.publicRetrieveNews =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/partnership.NewsService/PublicRetrieveNews',
      request,
      metadata || {},
      methodDescriptor_NewsService_PublicRetrieveNews,
      callback);
};


/**
 * @param {!proto.partnership.PublicRetrieveNewsReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.partnership.RetrieveNewsRes>}
 *     Promise that resolves to the response
 */
proto.partnership.NewsServicePromiseClient.prototype.publicRetrieveNews =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/partnership.NewsService/PublicRetrieveNews',
      request,
      metadata || {},
      methodDescriptor_NewsService_PublicRetrieveNews);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.partnership.PublicListNewsReq,
 *   !proto.partnership.PublicListNewsRes>}
 */
const methodDescriptor_NewsService_PublicListNews = new grpc.web.MethodDescriptor(
  '/partnership.NewsService/PublicListNews',
  grpc.web.MethodType.UNARY,
  proto.partnership.PublicListNewsReq,
  proto.partnership.PublicListNewsRes,
  /**
   * @param {!proto.partnership.PublicListNewsReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.partnership.PublicListNewsRes.deserializeBinary
);


/**
 * @param {!proto.partnership.PublicListNewsReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.partnership.PublicListNewsRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.partnership.PublicListNewsRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.partnership.NewsServiceClient.prototype.publicListNews =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/partnership.NewsService/PublicListNews',
      request,
      metadata || {},
      methodDescriptor_NewsService_PublicListNews,
      callback);
};


/**
 * @param {!proto.partnership.PublicListNewsReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.partnership.PublicListNewsRes>}
 *     Promise that resolves to the response
 */
proto.partnership.NewsServicePromiseClient.prototype.publicListNews =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/partnership.NewsService/PublicListNews',
      request,
      metadata || {},
      methodDescriptor_NewsService_PublicListNews);
};


module.exports = proto.partnership;

