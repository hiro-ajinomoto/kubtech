/**
 * @fileoverview gRPC-Web generated client stub for partnership
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.20.3
// source: proto/partnership/currency.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var proto_partnership_base_pb = require('../../proto/partnership/base_pb.js')
const proto = {};
proto.partnership = require('./currency_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.partnership.CurrencyServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.partnership.CurrencyServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.partnership.CreateCurrencyReq,
 *   !proto.partnership.CreateCurrencyRes>}
 */
const methodDescriptor_CurrencyService_CreateCurrency = new grpc.web.MethodDescriptor(
  '/partnership.CurrencyService/CreateCurrency',
  grpc.web.MethodType.UNARY,
  proto.partnership.CreateCurrencyReq,
  proto.partnership.CreateCurrencyRes,
  /**
   * @param {!proto.partnership.CreateCurrencyReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.partnership.CreateCurrencyRes.deserializeBinary
);


/**
 * @param {!proto.partnership.CreateCurrencyReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.partnership.CreateCurrencyRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.partnership.CreateCurrencyRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.partnership.CurrencyServiceClient.prototype.createCurrency =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/partnership.CurrencyService/CreateCurrency',
      request,
      metadata || {},
      methodDescriptor_CurrencyService_CreateCurrency,
      callback);
};


/**
 * @param {!proto.partnership.CreateCurrencyReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.partnership.CreateCurrencyRes>}
 *     Promise that resolves to the response
 */
proto.partnership.CurrencyServicePromiseClient.prototype.createCurrency =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/partnership.CurrencyService/CreateCurrency',
      request,
      metadata || {},
      methodDescriptor_CurrencyService_CreateCurrency);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.partnership.UpdateCurrencyReq,
 *   !proto.partnership.Empty>}
 */
const methodDescriptor_CurrencyService_UpdateCurrency = new grpc.web.MethodDescriptor(
  '/partnership.CurrencyService/UpdateCurrency',
  grpc.web.MethodType.UNARY,
  proto.partnership.UpdateCurrencyReq,
  proto_partnership_base_pb.Empty,
  /**
   * @param {!proto.partnership.UpdateCurrencyReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto_partnership_base_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.partnership.UpdateCurrencyReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.partnership.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.partnership.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.partnership.CurrencyServiceClient.prototype.updateCurrency =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/partnership.CurrencyService/UpdateCurrency',
      request,
      metadata || {},
      methodDescriptor_CurrencyService_UpdateCurrency,
      callback);
};


/**
 * @param {!proto.partnership.UpdateCurrencyReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.partnership.Empty>}
 *     Promise that resolves to the response
 */
proto.partnership.CurrencyServicePromiseClient.prototype.updateCurrency =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/partnership.CurrencyService/UpdateCurrency',
      request,
      metadata || {},
      methodDescriptor_CurrencyService_UpdateCurrency);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.partnership.DeleteCurrencyReq,
 *   !proto.partnership.Empty>}
 */
const methodDescriptor_CurrencyService_DeleteCurrency = new grpc.web.MethodDescriptor(
  '/partnership.CurrencyService/DeleteCurrency',
  grpc.web.MethodType.UNARY,
  proto.partnership.DeleteCurrencyReq,
  proto_partnership_base_pb.Empty,
  /**
   * @param {!proto.partnership.DeleteCurrencyReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto_partnership_base_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.partnership.DeleteCurrencyReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.partnership.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.partnership.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.partnership.CurrencyServiceClient.prototype.deleteCurrency =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/partnership.CurrencyService/DeleteCurrency',
      request,
      metadata || {},
      methodDescriptor_CurrencyService_DeleteCurrency,
      callback);
};


/**
 * @param {!proto.partnership.DeleteCurrencyReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.partnership.Empty>}
 *     Promise that resolves to the response
 */
proto.partnership.CurrencyServicePromiseClient.prototype.deleteCurrency =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/partnership.CurrencyService/DeleteCurrency',
      request,
      metadata || {},
      methodDescriptor_CurrencyService_DeleteCurrency);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.partnership.RetrieveCurrencyReq,
 *   !proto.partnership.RetrieveCurrencyRes>}
 */
const methodDescriptor_CurrencyService_RetrieveCurrency = new grpc.web.MethodDescriptor(
  '/partnership.CurrencyService/RetrieveCurrency',
  grpc.web.MethodType.UNARY,
  proto.partnership.RetrieveCurrencyReq,
  proto.partnership.RetrieveCurrencyRes,
  /**
   * @param {!proto.partnership.RetrieveCurrencyReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.partnership.RetrieveCurrencyRes.deserializeBinary
);


/**
 * @param {!proto.partnership.RetrieveCurrencyReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.partnership.RetrieveCurrencyRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.partnership.RetrieveCurrencyRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.partnership.CurrencyServiceClient.prototype.retrieveCurrency =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/partnership.CurrencyService/RetrieveCurrency',
      request,
      metadata || {},
      methodDescriptor_CurrencyService_RetrieveCurrency,
      callback);
};


/**
 * @param {!proto.partnership.RetrieveCurrencyReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.partnership.RetrieveCurrencyRes>}
 *     Promise that resolves to the response
 */
proto.partnership.CurrencyServicePromiseClient.prototype.retrieveCurrency =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/partnership.CurrencyService/RetrieveCurrency',
      request,
      metadata || {},
      methodDescriptor_CurrencyService_RetrieveCurrency);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.partnership.ListCurrencyReq,
 *   !proto.partnership.ListCurrencyRes>}
 */
const methodDescriptor_CurrencyService_ListCurrency = new grpc.web.MethodDescriptor(
  '/partnership.CurrencyService/ListCurrency',
  grpc.web.MethodType.UNARY,
  proto.partnership.ListCurrencyReq,
  proto.partnership.ListCurrencyRes,
  /**
   * @param {!proto.partnership.ListCurrencyReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.partnership.ListCurrencyRes.deserializeBinary
);


/**
 * @param {!proto.partnership.ListCurrencyReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.partnership.ListCurrencyRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.partnership.ListCurrencyRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.partnership.CurrencyServiceClient.prototype.listCurrency =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/partnership.CurrencyService/ListCurrency',
      request,
      metadata || {},
      methodDescriptor_CurrencyService_ListCurrency,
      callback);
};


/**
 * @param {!proto.partnership.ListCurrencyReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.partnership.ListCurrencyRes>}
 *     Promise that resolves to the response
 */
proto.partnership.CurrencyServicePromiseClient.prototype.listCurrency =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/partnership.CurrencyService/ListCurrency',
      request,
      metadata || {},
      methodDescriptor_CurrencyService_ListCurrency);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.partnership.InternalRetrieveCurrencyReq,
 *   !proto.partnership.InternalRetrieveCurrencyRes>}
 */
const methodDescriptor_CurrencyService_InternalRetrieveCurrency = new grpc.web.MethodDescriptor(
  '/partnership.CurrencyService/InternalRetrieveCurrency',
  grpc.web.MethodType.UNARY,
  proto.partnership.InternalRetrieveCurrencyReq,
  proto.partnership.InternalRetrieveCurrencyRes,
  /**
   * @param {!proto.partnership.InternalRetrieveCurrencyReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.partnership.InternalRetrieveCurrencyRes.deserializeBinary
);


/**
 * @param {!proto.partnership.InternalRetrieveCurrencyReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.partnership.InternalRetrieveCurrencyRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.partnership.InternalRetrieveCurrencyRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.partnership.CurrencyServiceClient.prototype.internalRetrieveCurrency =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/partnership.CurrencyService/InternalRetrieveCurrency',
      request,
      metadata || {},
      methodDescriptor_CurrencyService_InternalRetrieveCurrency,
      callback);
};


/**
 * @param {!proto.partnership.InternalRetrieveCurrencyReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.partnership.InternalRetrieveCurrencyRes>}
 *     Promise that resolves to the response
 */
proto.partnership.CurrencyServicePromiseClient.prototype.internalRetrieveCurrency =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/partnership.CurrencyService/InternalRetrieveCurrency',
      request,
      metadata || {},
      methodDescriptor_CurrencyService_InternalRetrieveCurrency);
};


module.exports = proto.partnership;

