// source: event/mobile/seat_map.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var base_base_pb = require('../../base/base_pb.js');
goog.object.extend(proto, base_base_pb);
goog.exportSymbol('proto.event.mobile.BlockStats', null, global);
goog.exportSymbol('proto.event.mobile.Currency', null, global);
goog.exportSymbol('proto.event.mobile.ListDecorationReq', null, global);
goog.exportSymbol('proto.event.mobile.ListDecorationRes', null, global);
goog.exportSymbol('proto.event.mobile.ListSeatBlockReq', null, global);
goog.exportSymbol('proto.event.mobile.ListSeatBlockRes', null, global);
goog.exportSymbol('proto.event.mobile.ListSeatMapReq', null, global);
goog.exportSymbol('proto.event.mobile.ListSeatMapRes', null, global);
goog.exportSymbol('proto.event.mobile.Position', null, global);
goog.exportSymbol('proto.event.mobile.RetrieveSeatBlockReq', null, global);
goog.exportSymbol('proto.event.mobile.RetrieveSeatBlockRes', null, global);
goog.exportSymbol('proto.event.mobile.RetrieveSeatMapReq', null, global);
goog.exportSymbol('proto.event.mobile.RetrieveSeatMapRes', null, global);
goog.exportSymbol('proto.event.mobile.Seat', null, global);
goog.exportSymbol('proto.event.mobile.SeatBlock', null, global);
goog.exportSymbol('proto.event.mobile.SeatBlockInfo', null, global);
goog.exportSymbol('proto.event.mobile.SeatLine', null, global);
goog.exportSymbol('proto.event.mobile.SeatMap', null, global);
goog.exportSymbol('proto.event.mobile.SeatMapInfo', null, global);
goog.exportSymbol('proto.event.mobile.SeatStatus', null, global);
goog.exportSymbol('proto.event.mobile.SeatStatusLog', null, global);
goog.exportSymbol('proto.event.mobile.Sharp', null, global);
goog.exportSymbol('proto.event.mobile.UpdateSeatStatusDetailReq', null, global);
goog.exportSymbol('proto.event.mobile.UpdateSeatStatusReq', null, global);
goog.exportSymbol('proto.event.mobile.UpdateSeatStatusRes', null, global);
goog.exportSymbol('proto.event.mobile.UpsertDecorationReq', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.mobile.SeatMapInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.mobile.SeatMapInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.mobile.SeatMapInfo.displayName = 'proto.event.mobile.SeatMapInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.mobile.SeatMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.mobile.SeatMap.repeatedFields_, null);
};
goog.inherits(proto.event.mobile.SeatMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.mobile.SeatMap.displayName = 'proto.event.mobile.SeatMap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.mobile.SeatBlockInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.mobile.SeatBlockInfo.repeatedFields_, null);
};
goog.inherits(proto.event.mobile.SeatBlockInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.mobile.SeatBlockInfo.displayName = 'proto.event.mobile.SeatBlockInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.mobile.SeatBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.mobile.SeatBlock.repeatedFields_, null);
};
goog.inherits(proto.event.mobile.SeatBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.mobile.SeatBlock.displayName = 'proto.event.mobile.SeatBlock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.mobile.Sharp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.mobile.Sharp.repeatedFields_, null);
};
goog.inherits(proto.event.mobile.Sharp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.mobile.Sharp.displayName = 'proto.event.mobile.Sharp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.mobile.BlockStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.mobile.BlockStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.mobile.BlockStats.displayName = 'proto.event.mobile.BlockStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.mobile.SeatLine = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.mobile.SeatLine, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.mobile.SeatLine.displayName = 'proto.event.mobile.SeatLine';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.mobile.Currency = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.mobile.Currency, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.mobile.Currency.displayName = 'proto.event.mobile.Currency';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.mobile.Position = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.mobile.Position, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.mobile.Position.displayName = 'proto.event.mobile.Position';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.mobile.Seat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.mobile.Seat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.mobile.Seat.displayName = 'proto.event.mobile.Seat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.mobile.SeatStatusLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.mobile.SeatStatusLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.mobile.SeatStatusLog.displayName = 'proto.event.mobile.SeatStatusLog';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.mobile.ListSeatMapReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.mobile.ListSeatMapReq.repeatedFields_, null);
};
goog.inherits(proto.event.mobile.ListSeatMapReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.mobile.ListSeatMapReq.displayName = 'proto.event.mobile.ListSeatMapReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.mobile.RetrieveSeatMapReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.mobile.RetrieveSeatMapReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.mobile.RetrieveSeatMapReq.displayName = 'proto.event.mobile.RetrieveSeatMapReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.mobile.ListSeatBlockReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.mobile.ListSeatBlockReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.mobile.ListSeatBlockReq.displayName = 'proto.event.mobile.ListSeatBlockReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.mobile.RetrieveSeatBlockReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.mobile.RetrieveSeatBlockReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.mobile.RetrieveSeatBlockReq.displayName = 'proto.event.mobile.RetrieveSeatBlockReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.mobile.UpsertDecorationReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.mobile.UpsertDecorationReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.mobile.UpsertDecorationReq.displayName = 'proto.event.mobile.UpsertDecorationReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.mobile.UpdateSeatStatusReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.mobile.UpdateSeatStatusReq.repeatedFields_, null);
};
goog.inherits(proto.event.mobile.UpdateSeatStatusReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.mobile.UpdateSeatStatusReq.displayName = 'proto.event.mobile.UpdateSeatStatusReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.mobile.UpdateSeatStatusDetailReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.mobile.UpdateSeatStatusDetailReq.repeatedFields_, null);
};
goog.inherits(proto.event.mobile.UpdateSeatStatusDetailReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.mobile.UpdateSeatStatusDetailReq.displayName = 'proto.event.mobile.UpdateSeatStatusDetailReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.mobile.ListDecorationReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.mobile.ListDecorationReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.mobile.ListDecorationReq.displayName = 'proto.event.mobile.ListDecorationReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.mobile.RetrieveSeatMapRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.mobile.RetrieveSeatMapRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.mobile.RetrieveSeatMapRes.displayName = 'proto.event.mobile.RetrieveSeatMapRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.mobile.ListSeatMapRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.mobile.ListSeatMapRes.repeatedFields_, null);
};
goog.inherits(proto.event.mobile.ListSeatMapRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.mobile.ListSeatMapRes.displayName = 'proto.event.mobile.ListSeatMapRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.mobile.ListSeatBlockRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.mobile.ListSeatBlockRes.repeatedFields_, null);
};
goog.inherits(proto.event.mobile.ListSeatBlockRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.mobile.ListSeatBlockRes.displayName = 'proto.event.mobile.ListSeatBlockRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.mobile.ListDecorationRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.mobile.ListDecorationRes.repeatedFields_, null);
};
goog.inherits(proto.event.mobile.ListDecorationRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.mobile.ListDecorationRes.displayName = 'proto.event.mobile.ListDecorationRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.mobile.UpdateSeatStatusRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.mobile.UpdateSeatStatusRes.repeatedFields_, null);
};
goog.inherits(proto.event.mobile.UpdateSeatStatusRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.mobile.UpdateSeatStatusRes.displayName = 'proto.event.mobile.UpdateSeatStatusRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.mobile.RetrieveSeatBlockRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.mobile.RetrieveSeatBlockRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.mobile.RetrieveSeatBlockRes.displayName = 'proto.event.mobile.RetrieveSeatBlockRes';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.mobile.SeatMapInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.event.mobile.SeatMapInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.mobile.SeatMapInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.SeatMapInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    mapPicture: jspb.Message.getFieldWithDefault(msg, 4, ""),
    maxSeatPerOrder: jspb.Message.getFieldWithDefault(msg, 5, 0),
    currency: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.mobile.SeatMapInfo}
 */
proto.event.mobile.SeatMapInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.mobile.SeatMapInfo;
  return proto.event.mobile.SeatMapInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.mobile.SeatMapInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.mobile.SeatMapInfo}
 */
proto.event.mobile.SeatMapInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMapPicture(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxSeatPerOrder(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.mobile.SeatMapInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.mobile.SeatMapInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.mobile.SeatMapInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.SeatMapInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMapPicture();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMaxSeatPerOrder();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.event.mobile.SeatMapInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.SeatMapInfo} returns this
 */
proto.event.mobile.SeatMapInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.event.mobile.SeatMapInfo.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.SeatMapInfo} returns this
 */
proto.event.mobile.SeatMapInfo.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string map_picture = 4;
 * @return {string}
 */
proto.event.mobile.SeatMapInfo.prototype.getMapPicture = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.SeatMapInfo} returns this
 */
proto.event.mobile.SeatMapInfo.prototype.setMapPicture = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 max_seat_per_order = 5;
 * @return {number}
 */
proto.event.mobile.SeatMapInfo.prototype.getMaxSeatPerOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.SeatMapInfo} returns this
 */
proto.event.mobile.SeatMapInfo.prototype.setMaxSeatPerOrder = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string currency = 6;
 * @return {string}
 */
proto.event.mobile.SeatMapInfo.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.SeatMapInfo} returns this
 */
proto.event.mobile.SeatMapInfo.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.mobile.SeatMap.repeatedFields_ = [15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.mobile.SeatMap.prototype.toObject = function(opt_includeInstance) {
  return proto.event.mobile.SeatMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.mobile.SeatMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.SeatMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    mapPicture: jspb.Message.getFieldWithDefault(msg, 4, ""),
    maxSeatPerOrder: jspb.Message.getFieldWithDefault(msg, 5, 0),
    currency: jspb.Message.getFieldWithDefault(msg, 6, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 7, 0),
    createdBy: jspb.Message.getFieldWithDefault(msg, 8, ""),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 9, 0),
    updatedBy: jspb.Message.getFieldWithDefault(msg, 10, ""),
    countBlock: jspb.Message.getFieldWithDefault(msg, 11, 0),
    countSeat: jspb.Message.getFieldWithDefault(msg, 12, 0),
    minPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    maxPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    decorationItemsList: jspb.Message.toObjectList(msg.getDecorationItemsList(),
    proto.event.mobile.Sharp.toObject, includeInstance),
    eventId: jspb.Message.getFieldWithDefault(msg, 16, ""),
    scheduleId: jspb.Message.getFieldWithDefault(msg, 17, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.mobile.SeatMap}
 */
proto.event.mobile.SeatMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.mobile.SeatMap;
  return proto.event.mobile.SeatMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.mobile.SeatMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.mobile.SeatMap}
 */
proto.event.mobile.SeatMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMapPicture(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxSeatPerOrder(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedBy(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatedAt(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedBy(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCountBlock(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCountSeat(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinPrice(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxPrice(value);
      break;
    case 15:
      var value = new proto.event.mobile.Sharp;
      reader.readMessage(value,proto.event.mobile.Sharp.deserializeBinaryFromReader);
      msg.addDecorationItems(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventId(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setScheduleId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.mobile.SeatMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.mobile.SeatMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.mobile.SeatMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.SeatMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMapPicture();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMaxSeatPerOrder();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getCreatedBy();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getUpdatedBy();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCountBlock();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getCountSeat();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getMinPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = message.getMaxPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = message.getDecorationItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.event.mobile.Sharp.serializeBinaryToWriter
    );
  }
  f = message.getEventId();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getScheduleId();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.mobile.SeatMap.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.SeatMap} returns this
 */
proto.event.mobile.SeatMap.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.event.mobile.SeatMap.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.SeatMap} returns this
 */
proto.event.mobile.SeatMap.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.event.mobile.SeatMap.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.SeatMap} returns this
 */
proto.event.mobile.SeatMap.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string map_picture = 4;
 * @return {string}
 */
proto.event.mobile.SeatMap.prototype.getMapPicture = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.SeatMap} returns this
 */
proto.event.mobile.SeatMap.prototype.setMapPicture = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 max_seat_per_order = 5;
 * @return {number}
 */
proto.event.mobile.SeatMap.prototype.getMaxSeatPerOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.SeatMap} returns this
 */
proto.event.mobile.SeatMap.prototype.setMaxSeatPerOrder = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string currency = 6;
 * @return {string}
 */
proto.event.mobile.SeatMap.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.SeatMap} returns this
 */
proto.event.mobile.SeatMap.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int64 created_at = 7;
 * @return {number}
 */
proto.event.mobile.SeatMap.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.SeatMap} returns this
 */
proto.event.mobile.SeatMap.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string created_by = 8;
 * @return {string}
 */
proto.event.mobile.SeatMap.prototype.getCreatedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.SeatMap} returns this
 */
proto.event.mobile.SeatMap.prototype.setCreatedBy = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int64 updated_at = 9;
 * @return {number}
 */
proto.event.mobile.SeatMap.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.SeatMap} returns this
 */
proto.event.mobile.SeatMap.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string updated_by = 10;
 * @return {string}
 */
proto.event.mobile.SeatMap.prototype.getUpdatedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.SeatMap} returns this
 */
proto.event.mobile.SeatMap.prototype.setUpdatedBy = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int64 count_block = 11;
 * @return {number}
 */
proto.event.mobile.SeatMap.prototype.getCountBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.SeatMap} returns this
 */
proto.event.mobile.SeatMap.prototype.setCountBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 count_seat = 12;
 * @return {number}
 */
proto.event.mobile.SeatMap.prototype.getCountSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.SeatMap} returns this
 */
proto.event.mobile.SeatMap.prototype.setCountSeat = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional double min_price = 13;
 * @return {number}
 */
proto.event.mobile.SeatMap.prototype.getMinPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.SeatMap} returns this
 */
proto.event.mobile.SeatMap.prototype.setMinPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional double max_price = 14;
 * @return {number}
 */
proto.event.mobile.SeatMap.prototype.getMaxPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.SeatMap} returns this
 */
proto.event.mobile.SeatMap.prototype.setMaxPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * repeated Sharp decoration_items = 15;
 * @return {!Array<!proto.event.mobile.Sharp>}
 */
proto.event.mobile.SeatMap.prototype.getDecorationItemsList = function() {
  return /** @type{!Array<!proto.event.mobile.Sharp>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.mobile.Sharp, 15));
};


/**
 * @param {!Array<!proto.event.mobile.Sharp>} value
 * @return {!proto.event.mobile.SeatMap} returns this
*/
proto.event.mobile.SeatMap.prototype.setDecorationItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.event.mobile.Sharp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.mobile.Sharp}
 */
proto.event.mobile.SeatMap.prototype.addDecorationItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.event.mobile.Sharp, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.mobile.SeatMap} returns this
 */
proto.event.mobile.SeatMap.prototype.clearDecorationItemsList = function() {
  return this.setDecorationItemsList([]);
};


/**
 * optional string event_id = 16;
 * @return {string}
 */
proto.event.mobile.SeatMap.prototype.getEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.SeatMap} returns this
 */
proto.event.mobile.SeatMap.prototype.setEventId = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string schedule_id = 17;
 * @return {string}
 */
proto.event.mobile.SeatMap.prototype.getScheduleId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.SeatMap} returns this
 */
proto.event.mobile.SeatMap.prototype.setScheduleId = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.mobile.SeatBlockInfo.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.mobile.SeatBlockInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.event.mobile.SeatBlockInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.mobile.SeatBlockInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.SeatBlockInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    color: jspb.Message.getFieldWithDefault(msg, 2, ""),
    row: (f = msg.getRow()) && proto.event.mobile.SeatLine.toObject(includeInstance, f),
    col: (f = msg.getCol()) && proto.event.mobile.SeatLine.toObject(includeInstance, f),
    width: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    height: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    totalSeat: jspb.Message.getFieldWithDefault(msg, 7, 0),
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    position: (f = msg.getPosition()) && proto.event.mobile.Position.toObject(includeInstance, f),
    seatMapId: jspb.Message.getFieldWithDefault(msg, 10, ""),
    canSelectSeat: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    seatsList: jspb.Message.toObjectList(msg.getSeatsList(),
    proto.event.mobile.Seat.toObject, includeInstance),
    rotation: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.mobile.SeatBlockInfo}
 */
proto.event.mobile.SeatBlockInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.mobile.SeatBlockInfo;
  return proto.event.mobile.SeatBlockInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.mobile.SeatBlockInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.mobile.SeatBlockInfo}
 */
proto.event.mobile.SeatBlockInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 3:
      var value = new proto.event.mobile.SeatLine;
      reader.readMessage(value,proto.event.mobile.SeatLine.deserializeBinaryFromReader);
      msg.setRow(value);
      break;
    case 4:
      var value = new proto.event.mobile.SeatLine;
      reader.readMessage(value,proto.event.mobile.SeatLine.deserializeBinaryFromReader);
      msg.setCol(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWidth(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeight(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalSeat(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 9:
      var value = new proto.event.mobile.Position;
      reader.readMessage(value,proto.event.mobile.Position.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatMapId(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanSelectSeat(value);
      break;
    case 12:
      var value = new proto.event.mobile.Seat;
      reader.readMessage(value,proto.event.mobile.Seat.deserializeBinaryFromReader);
      msg.addSeats(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRotation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.mobile.SeatBlockInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.mobile.SeatBlockInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.mobile.SeatBlockInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.SeatBlockInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRow();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.event.mobile.SeatLine.serializeBinaryToWriter
    );
  }
  f = message.getCol();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.event.mobile.SeatLine.serializeBinaryToWriter
    );
  }
  f = message.getWidth();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getTotalSeat();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.event.mobile.Position.serializeBinaryToWriter
    );
  }
  f = message.getSeatMapId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCanSelectSeat();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getSeatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.event.mobile.Seat.serializeBinaryToWriter
    );
  }
  f = message.getRotation();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.event.mobile.SeatBlockInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.SeatBlockInfo} returns this
 */
proto.event.mobile.SeatBlockInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string color = 2;
 * @return {string}
 */
proto.event.mobile.SeatBlockInfo.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.SeatBlockInfo} returns this
 */
proto.event.mobile.SeatBlockInfo.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional SeatLine row = 3;
 * @return {?proto.event.mobile.SeatLine}
 */
proto.event.mobile.SeatBlockInfo.prototype.getRow = function() {
  return /** @type{?proto.event.mobile.SeatLine} */ (
    jspb.Message.getWrapperField(this, proto.event.mobile.SeatLine, 3));
};


/**
 * @param {?proto.event.mobile.SeatLine|undefined} value
 * @return {!proto.event.mobile.SeatBlockInfo} returns this
*/
proto.event.mobile.SeatBlockInfo.prototype.setRow = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.mobile.SeatBlockInfo} returns this
 */
proto.event.mobile.SeatBlockInfo.prototype.clearRow = function() {
  return this.setRow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.mobile.SeatBlockInfo.prototype.hasRow = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SeatLine col = 4;
 * @return {?proto.event.mobile.SeatLine}
 */
proto.event.mobile.SeatBlockInfo.prototype.getCol = function() {
  return /** @type{?proto.event.mobile.SeatLine} */ (
    jspb.Message.getWrapperField(this, proto.event.mobile.SeatLine, 4));
};


/**
 * @param {?proto.event.mobile.SeatLine|undefined} value
 * @return {!proto.event.mobile.SeatBlockInfo} returns this
*/
proto.event.mobile.SeatBlockInfo.prototype.setCol = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.mobile.SeatBlockInfo} returns this
 */
proto.event.mobile.SeatBlockInfo.prototype.clearCol = function() {
  return this.setCol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.mobile.SeatBlockInfo.prototype.hasCol = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double width = 5;
 * @return {number}
 */
proto.event.mobile.SeatBlockInfo.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.SeatBlockInfo} returns this
 */
proto.event.mobile.SeatBlockInfo.prototype.setWidth = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double height = 6;
 * @return {number}
 */
proto.event.mobile.SeatBlockInfo.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.SeatBlockInfo} returns this
 */
proto.event.mobile.SeatBlockInfo.prototype.setHeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional int64 total_seat = 7;
 * @return {number}
 */
proto.event.mobile.SeatBlockInfo.prototype.getTotalSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.SeatBlockInfo} returns this
 */
proto.event.mobile.SeatBlockInfo.prototype.setTotalSeat = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional double price = 8;
 * @return {number}
 */
proto.event.mobile.SeatBlockInfo.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.SeatBlockInfo} returns this
 */
proto.event.mobile.SeatBlockInfo.prototype.setPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional Position position = 9;
 * @return {?proto.event.mobile.Position}
 */
proto.event.mobile.SeatBlockInfo.prototype.getPosition = function() {
  return /** @type{?proto.event.mobile.Position} */ (
    jspb.Message.getWrapperField(this, proto.event.mobile.Position, 9));
};


/**
 * @param {?proto.event.mobile.Position|undefined} value
 * @return {!proto.event.mobile.SeatBlockInfo} returns this
*/
proto.event.mobile.SeatBlockInfo.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.mobile.SeatBlockInfo} returns this
 */
proto.event.mobile.SeatBlockInfo.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.mobile.SeatBlockInfo.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string seat_map_id = 10;
 * @return {string}
 */
proto.event.mobile.SeatBlockInfo.prototype.getSeatMapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.SeatBlockInfo} returns this
 */
proto.event.mobile.SeatBlockInfo.prototype.setSeatMapId = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional bool can_select_seat = 11;
 * @return {boolean}
 */
proto.event.mobile.SeatBlockInfo.prototype.getCanSelectSeat = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.mobile.SeatBlockInfo} returns this
 */
proto.event.mobile.SeatBlockInfo.prototype.setCanSelectSeat = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * repeated Seat seats = 12;
 * @return {!Array<!proto.event.mobile.Seat>}
 */
proto.event.mobile.SeatBlockInfo.prototype.getSeatsList = function() {
  return /** @type{!Array<!proto.event.mobile.Seat>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.mobile.Seat, 12));
};


/**
 * @param {!Array<!proto.event.mobile.Seat>} value
 * @return {!proto.event.mobile.SeatBlockInfo} returns this
*/
proto.event.mobile.SeatBlockInfo.prototype.setSeatsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.event.mobile.Seat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.mobile.Seat}
 */
proto.event.mobile.SeatBlockInfo.prototype.addSeats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.event.mobile.Seat, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.mobile.SeatBlockInfo} returns this
 */
proto.event.mobile.SeatBlockInfo.prototype.clearSeatsList = function() {
  return this.setSeatsList([]);
};


/**
 * optional double rotation = 13;
 * @return {number}
 */
proto.event.mobile.SeatBlockInfo.prototype.getRotation = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.SeatBlockInfo} returns this
 */
proto.event.mobile.SeatBlockInfo.prototype.setRotation = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.mobile.SeatBlock.repeatedFields_ = [11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.mobile.SeatBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.event.mobile.SeatBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.mobile.SeatBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.SeatBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    color: jspb.Message.getFieldWithDefault(msg, 3, ""),
    row: (f = msg.getRow()) && proto.event.mobile.SeatLine.toObject(includeInstance, f),
    col: (f = msg.getCol()) && proto.event.mobile.SeatLine.toObject(includeInstance, f),
    width: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    height: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    totalSeat: jspb.Message.getFieldWithDefault(msg, 8, 0),
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    position: (f = msg.getPosition()) && proto.event.mobile.Position.toObject(includeInstance, f),
    seatsList: jspb.Message.toObjectList(msg.getSeatsList(),
    proto.event.mobile.Seat.toObject, includeInstance),
    seatMapId: jspb.Message.getFieldWithDefault(msg, 12, ""),
    canSelectSeat: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    createdAt: jspb.Message.getFieldWithDefault(msg, 14, 0),
    createdBy: jspb.Message.getFieldWithDefault(msg, 15, ""),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 16, 0),
    updatedBy: jspb.Message.getFieldWithDefault(msg, 17, ""),
    rotation: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, 0.0),
    stats: (f = msg.getStats()) && proto.event.mobile.BlockStats.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.mobile.SeatBlock}
 */
proto.event.mobile.SeatBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.mobile.SeatBlock;
  return proto.event.mobile.SeatBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.mobile.SeatBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.mobile.SeatBlock}
 */
proto.event.mobile.SeatBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 4:
      var value = new proto.event.mobile.SeatLine;
      reader.readMessage(value,proto.event.mobile.SeatLine.deserializeBinaryFromReader);
      msg.setRow(value);
      break;
    case 5:
      var value = new proto.event.mobile.SeatLine;
      reader.readMessage(value,proto.event.mobile.SeatLine.deserializeBinaryFromReader);
      msg.setCol(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWidth(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeight(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalSeat(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 10:
      var value = new proto.event.mobile.Position;
      reader.readMessage(value,proto.event.mobile.Position.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 11:
      var value = new proto.event.mobile.Seat;
      reader.readMessage(value,proto.event.mobile.Seat.deserializeBinaryFromReader);
      msg.addSeats(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatMapId(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanSelectSeat(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedBy(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatedAt(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedBy(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRotation(value);
      break;
    case 19:
      var value = new proto.event.mobile.BlockStats;
      reader.readMessage(value,proto.event.mobile.BlockStats.deserializeBinaryFromReader);
      msg.setStats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.mobile.SeatBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.mobile.SeatBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.mobile.SeatBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.SeatBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRow();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.event.mobile.SeatLine.serializeBinaryToWriter
    );
  }
  f = message.getCol();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.event.mobile.SeatLine.serializeBinaryToWriter
    );
  }
  f = message.getWidth();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getTotalSeat();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.event.mobile.Position.serializeBinaryToWriter
    );
  }
  f = message.getSeatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.event.mobile.Seat.serializeBinaryToWriter
    );
  }
  f = message.getSeatMapId();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getCanSelectSeat();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = message.getCreatedBy();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeInt64(
      16,
      f
    );
  }
  f = message.getUpdatedBy();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getRotation();
  if (f !== 0.0) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = message.getStats();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.event.mobile.BlockStats.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.mobile.SeatBlock.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.SeatBlock} returns this
 */
proto.event.mobile.SeatBlock.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.event.mobile.SeatBlock.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.SeatBlock} returns this
 */
proto.event.mobile.SeatBlock.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string color = 3;
 * @return {string}
 */
proto.event.mobile.SeatBlock.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.SeatBlock} returns this
 */
proto.event.mobile.SeatBlock.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional SeatLine row = 4;
 * @return {?proto.event.mobile.SeatLine}
 */
proto.event.mobile.SeatBlock.prototype.getRow = function() {
  return /** @type{?proto.event.mobile.SeatLine} */ (
    jspb.Message.getWrapperField(this, proto.event.mobile.SeatLine, 4));
};


/**
 * @param {?proto.event.mobile.SeatLine|undefined} value
 * @return {!proto.event.mobile.SeatBlock} returns this
*/
proto.event.mobile.SeatBlock.prototype.setRow = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.mobile.SeatBlock} returns this
 */
proto.event.mobile.SeatBlock.prototype.clearRow = function() {
  return this.setRow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.mobile.SeatBlock.prototype.hasRow = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SeatLine col = 5;
 * @return {?proto.event.mobile.SeatLine}
 */
proto.event.mobile.SeatBlock.prototype.getCol = function() {
  return /** @type{?proto.event.mobile.SeatLine} */ (
    jspb.Message.getWrapperField(this, proto.event.mobile.SeatLine, 5));
};


/**
 * @param {?proto.event.mobile.SeatLine|undefined} value
 * @return {!proto.event.mobile.SeatBlock} returns this
*/
proto.event.mobile.SeatBlock.prototype.setCol = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.mobile.SeatBlock} returns this
 */
proto.event.mobile.SeatBlock.prototype.clearCol = function() {
  return this.setCol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.mobile.SeatBlock.prototype.hasCol = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double width = 6;
 * @return {number}
 */
proto.event.mobile.SeatBlock.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.SeatBlock} returns this
 */
proto.event.mobile.SeatBlock.prototype.setWidth = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double height = 7;
 * @return {number}
 */
proto.event.mobile.SeatBlock.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.SeatBlock} returns this
 */
proto.event.mobile.SeatBlock.prototype.setHeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional int64 total_seat = 8;
 * @return {number}
 */
proto.event.mobile.SeatBlock.prototype.getTotalSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.SeatBlock} returns this
 */
proto.event.mobile.SeatBlock.prototype.setTotalSeat = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional double price = 9;
 * @return {number}
 */
proto.event.mobile.SeatBlock.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.SeatBlock} returns this
 */
proto.event.mobile.SeatBlock.prototype.setPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional Position position = 10;
 * @return {?proto.event.mobile.Position}
 */
proto.event.mobile.SeatBlock.prototype.getPosition = function() {
  return /** @type{?proto.event.mobile.Position} */ (
    jspb.Message.getWrapperField(this, proto.event.mobile.Position, 10));
};


/**
 * @param {?proto.event.mobile.Position|undefined} value
 * @return {!proto.event.mobile.SeatBlock} returns this
*/
proto.event.mobile.SeatBlock.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.mobile.SeatBlock} returns this
 */
proto.event.mobile.SeatBlock.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.mobile.SeatBlock.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated Seat seats = 11;
 * @return {!Array<!proto.event.mobile.Seat>}
 */
proto.event.mobile.SeatBlock.prototype.getSeatsList = function() {
  return /** @type{!Array<!proto.event.mobile.Seat>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.mobile.Seat, 11));
};


/**
 * @param {!Array<!proto.event.mobile.Seat>} value
 * @return {!proto.event.mobile.SeatBlock} returns this
*/
proto.event.mobile.SeatBlock.prototype.setSeatsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.event.mobile.Seat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.mobile.Seat}
 */
proto.event.mobile.SeatBlock.prototype.addSeats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.event.mobile.Seat, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.mobile.SeatBlock} returns this
 */
proto.event.mobile.SeatBlock.prototype.clearSeatsList = function() {
  return this.setSeatsList([]);
};


/**
 * optional string seat_map_id = 12;
 * @return {string}
 */
proto.event.mobile.SeatBlock.prototype.getSeatMapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.SeatBlock} returns this
 */
proto.event.mobile.SeatBlock.prototype.setSeatMapId = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional bool can_select_seat = 13;
 * @return {boolean}
 */
proto.event.mobile.SeatBlock.prototype.getCanSelectSeat = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.mobile.SeatBlock} returns this
 */
proto.event.mobile.SeatBlock.prototype.setCanSelectSeat = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional int64 created_at = 14;
 * @return {number}
 */
proto.event.mobile.SeatBlock.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.SeatBlock} returns this
 */
proto.event.mobile.SeatBlock.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional string created_by = 15;
 * @return {string}
 */
proto.event.mobile.SeatBlock.prototype.getCreatedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.SeatBlock} returns this
 */
proto.event.mobile.SeatBlock.prototype.setCreatedBy = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional int64 updated_at = 16;
 * @return {number}
 */
proto.event.mobile.SeatBlock.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.SeatBlock} returns this
 */
proto.event.mobile.SeatBlock.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional string updated_by = 17;
 * @return {string}
 */
proto.event.mobile.SeatBlock.prototype.getUpdatedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.SeatBlock} returns this
 */
proto.event.mobile.SeatBlock.prototype.setUpdatedBy = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional double rotation = 18;
 * @return {number}
 */
proto.event.mobile.SeatBlock.prototype.getRotation = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.SeatBlock} returns this
 */
proto.event.mobile.SeatBlock.prototype.setRotation = function(value) {
  return jspb.Message.setProto3FloatField(this, 18, value);
};


/**
 * optional BlockStats stats = 19;
 * @return {?proto.event.mobile.BlockStats}
 */
proto.event.mobile.SeatBlock.prototype.getStats = function() {
  return /** @type{?proto.event.mobile.BlockStats} */ (
    jspb.Message.getWrapperField(this, proto.event.mobile.BlockStats, 19));
};


/**
 * @param {?proto.event.mobile.BlockStats|undefined} value
 * @return {!proto.event.mobile.SeatBlock} returns this
*/
proto.event.mobile.SeatBlock.prototype.setStats = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.mobile.SeatBlock} returns this
 */
proto.event.mobile.SeatBlock.prototype.clearStats = function() {
  return this.setStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.mobile.SeatBlock.prototype.hasStats = function() {
  return jspb.Message.getField(this, 19) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.mobile.Sharp.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.mobile.Sharp.prototype.toObject = function(opt_includeInstance) {
  return proto.event.mobile.Sharp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.mobile.Sharp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.Sharp.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    color: jspb.Message.getFieldWithDefault(msg, 3, ""),
    position: (f = msg.getPosition()) && proto.event.mobile.Position.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 5, ""),
    pointsList: jspb.Message.toObjectList(msg.getPointsList(),
    proto.event.mobile.Position.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.mobile.Sharp}
 */
proto.event.mobile.Sharp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.mobile.Sharp;
  return proto.event.mobile.Sharp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.mobile.Sharp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.mobile.Sharp}
 */
proto.event.mobile.Sharp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 4:
      var value = new proto.event.mobile.Position;
      reader.readMessage(value,proto.event.mobile.Position.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 6:
      var value = new proto.event.mobile.Position;
      reader.readMessage(value,proto.event.mobile.Position.deserializeBinaryFromReader);
      msg.addPoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.mobile.Sharp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.mobile.Sharp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.mobile.Sharp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.Sharp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.event.mobile.Position.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.event.mobile.Position.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.mobile.Sharp.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.Sharp} returns this
 */
proto.event.mobile.Sharp.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.event.mobile.Sharp.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.Sharp} returns this
 */
proto.event.mobile.Sharp.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string color = 3;
 * @return {string}
 */
proto.event.mobile.Sharp.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.Sharp} returns this
 */
proto.event.mobile.Sharp.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Position position = 4;
 * @return {?proto.event.mobile.Position}
 */
proto.event.mobile.Sharp.prototype.getPosition = function() {
  return /** @type{?proto.event.mobile.Position} */ (
    jspb.Message.getWrapperField(this, proto.event.mobile.Position, 4));
};


/**
 * @param {?proto.event.mobile.Position|undefined} value
 * @return {!proto.event.mobile.Sharp} returns this
*/
proto.event.mobile.Sharp.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.mobile.Sharp} returns this
 */
proto.event.mobile.Sharp.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.mobile.Sharp.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string type = 5;
 * @return {string}
 */
proto.event.mobile.Sharp.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.Sharp} returns this
 */
proto.event.mobile.Sharp.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated Position points = 6;
 * @return {!Array<!proto.event.mobile.Position>}
 */
proto.event.mobile.Sharp.prototype.getPointsList = function() {
  return /** @type{!Array<!proto.event.mobile.Position>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.mobile.Position, 6));
};


/**
 * @param {!Array<!proto.event.mobile.Position>} value
 * @return {!proto.event.mobile.Sharp} returns this
*/
proto.event.mobile.Sharp.prototype.setPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.event.mobile.Position=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.mobile.Position}
 */
proto.event.mobile.Sharp.prototype.addPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.event.mobile.Position, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.mobile.Sharp} returns this
 */
proto.event.mobile.Sharp.prototype.clearPointsList = function() {
  return this.setPointsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.mobile.BlockStats.prototype.toObject = function(opt_includeInstance) {
  return proto.event.mobile.BlockStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.mobile.BlockStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.BlockStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    available: jspb.Message.getFieldWithDefault(msg, 1, 0),
    booking: jspb.Message.getFieldWithDefault(msg, 2, 0),
    locked: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sold: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.mobile.BlockStats}
 */
proto.event.mobile.BlockStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.mobile.BlockStats;
  return proto.event.mobile.BlockStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.mobile.BlockStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.mobile.BlockStats}
 */
proto.event.mobile.BlockStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAvailable(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBooking(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLocked(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.mobile.BlockStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.mobile.BlockStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.mobile.BlockStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.BlockStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAvailable();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getBooking();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getLocked();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getSold();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional int64 available = 1;
 * @return {number}
 */
proto.event.mobile.BlockStats.prototype.getAvailable = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.BlockStats} returns this
 */
proto.event.mobile.BlockStats.prototype.setAvailable = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 booking = 2;
 * @return {number}
 */
proto.event.mobile.BlockStats.prototype.getBooking = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.BlockStats} returns this
 */
proto.event.mobile.BlockStats.prototype.setBooking = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 locked = 3;
 * @return {number}
 */
proto.event.mobile.BlockStats.prototype.getLocked = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.BlockStats} returns this
 */
proto.event.mobile.BlockStats.prototype.setLocked = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 sold = 4;
 * @return {number}
 */
proto.event.mobile.BlockStats.prototype.getSold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.BlockStats} returns this
 */
proto.event.mobile.BlockStats.prototype.setSold = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.mobile.SeatLine.prototype.toObject = function(opt_includeInstance) {
  return proto.event.mobile.SeatLine.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.mobile.SeatLine} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.SeatLine.toObject = function(includeInstance, msg) {
  var f, obj = {
    quantity: jspb.Message.getFieldWithDefault(msg, 1, 0),
    beginCharacter: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.mobile.SeatLine}
 */
proto.event.mobile.SeatLine.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.mobile.SeatLine;
  return proto.event.mobile.SeatLine.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.mobile.SeatLine} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.mobile.SeatLine}
 */
proto.event.mobile.SeatLine.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setQuantity(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeginCharacter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.mobile.SeatLine.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.mobile.SeatLine.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.mobile.SeatLine} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.SeatLine.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getBeginCharacter();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 quantity = 1;
 * @return {number}
 */
proto.event.mobile.SeatLine.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.SeatLine} returns this
 */
proto.event.mobile.SeatLine.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string begin_character = 2;
 * @return {string}
 */
proto.event.mobile.SeatLine.prototype.getBeginCharacter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.SeatLine} returns this
 */
proto.event.mobile.SeatLine.prototype.setBeginCharacter = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.mobile.Currency.prototype.toObject = function(opt_includeInstance) {
  return proto.event.mobile.Currency.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.mobile.Currency} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.Currency.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    code: jspb.Message.getFieldWithDefault(msg, 3, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.mobile.Currency}
 */
proto.event.mobile.Currency.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.mobile.Currency;
  return proto.event.mobile.Currency.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.mobile.Currency} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.mobile.Currency}
 */
proto.event.mobile.Currency.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.mobile.Currency.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.mobile.Currency.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.mobile.Currency} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.Currency.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.mobile.Currency.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.Currency} returns this
 */
proto.event.mobile.Currency.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.event.mobile.Currency.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.Currency} returns this
 */
proto.event.mobile.Currency.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string code = 3;
 * @return {string}
 */
proto.event.mobile.Currency.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.Currency} returns this
 */
proto.event.mobile.Currency.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string icon = 4;
 * @return {string}
 */
proto.event.mobile.Currency.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.Currency} returns this
 */
proto.event.mobile.Currency.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.mobile.Position.prototype.toObject = function(opt_includeInstance) {
  return proto.event.mobile.Position.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.mobile.Position} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.Position.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.mobile.Position}
 */
proto.event.mobile.Position.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.mobile.Position;
  return proto.event.mobile.Position.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.mobile.Position} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.mobile.Position}
 */
proto.event.mobile.Position.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.mobile.Position.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.mobile.Position.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.mobile.Position} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.Position.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.event.mobile.Position.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.Position} returns this
 */
proto.event.mobile.Position.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.event.mobile.Position.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.Position} returns this
 */
proto.event.mobile.Position.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.mobile.Seat.prototype.toObject = function(opt_includeInstance) {
  return proto.event.mobile.Seat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.mobile.Seat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.Seat.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    position: (f = msg.getPosition()) && proto.event.mobile.Position.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 4, 0),
    orderX: jspb.Message.getFieldWithDefault(msg, 5, 0),
    orderY: jspb.Message.getFieldWithDefault(msg, 6, 0),
    log: (f = msg.getLog()) && proto.event.mobile.SeatStatusLog.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.mobile.Seat}
 */
proto.event.mobile.Seat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.mobile.Seat;
  return proto.event.mobile.Seat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.mobile.Seat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.mobile.Seat}
 */
proto.event.mobile.Seat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.event.mobile.Position;
      reader.readMessage(value,proto.event.mobile.Position.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 4:
      var value = /** @type {!proto.event.mobile.SeatStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOrderX(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOrderY(value);
      break;
    case 7:
      var value = new proto.event.mobile.SeatStatusLog;
      reader.readMessage(value,proto.event.mobile.SeatStatusLog.deserializeBinaryFromReader);
      msg.setLog(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.mobile.Seat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.mobile.Seat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.mobile.Seat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.Seat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.event.mobile.Position.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getOrderX();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getOrderY();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getLog();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.event.mobile.SeatStatusLog.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.mobile.Seat.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.Seat} returns this
 */
proto.event.mobile.Seat.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.event.mobile.Seat.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.Seat} returns this
 */
proto.event.mobile.Seat.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Position position = 3;
 * @return {?proto.event.mobile.Position}
 */
proto.event.mobile.Seat.prototype.getPosition = function() {
  return /** @type{?proto.event.mobile.Position} */ (
    jspb.Message.getWrapperField(this, proto.event.mobile.Position, 3));
};


/**
 * @param {?proto.event.mobile.Position|undefined} value
 * @return {!proto.event.mobile.Seat} returns this
*/
proto.event.mobile.Seat.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.mobile.Seat} returns this
 */
proto.event.mobile.Seat.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.mobile.Seat.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SeatStatus status = 4;
 * @return {!proto.event.mobile.SeatStatus}
 */
proto.event.mobile.Seat.prototype.getStatus = function() {
  return /** @type {!proto.event.mobile.SeatStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.event.mobile.SeatStatus} value
 * @return {!proto.event.mobile.Seat} returns this
 */
proto.event.mobile.Seat.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int64 order_x = 5;
 * @return {number}
 */
proto.event.mobile.Seat.prototype.getOrderX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.Seat} returns this
 */
proto.event.mobile.Seat.prototype.setOrderX = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 order_y = 6;
 * @return {number}
 */
proto.event.mobile.Seat.prototype.getOrderY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.Seat} returns this
 */
proto.event.mobile.Seat.prototype.setOrderY = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional SeatStatusLog log = 7;
 * @return {?proto.event.mobile.SeatStatusLog}
 */
proto.event.mobile.Seat.prototype.getLog = function() {
  return /** @type{?proto.event.mobile.SeatStatusLog} */ (
    jspb.Message.getWrapperField(this, proto.event.mobile.SeatStatusLog, 7));
};


/**
 * @param {?proto.event.mobile.SeatStatusLog|undefined} value
 * @return {!proto.event.mobile.Seat} returns this
*/
proto.event.mobile.Seat.prototype.setLog = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.mobile.Seat} returns this
 */
proto.event.mobile.Seat.prototype.clearLog = function() {
  return this.setLog(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.mobile.Seat.prototype.hasLog = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.mobile.SeatStatusLog.prototype.toObject = function(opt_includeInstance) {
  return proto.event.mobile.SeatStatusLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.mobile.SeatStatusLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.SeatStatusLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    updatedAt: jspb.Message.getFieldWithDefault(msg, 1, 0),
    updatedBy: jspb.Message.getFieldWithDefault(msg, 2, ""),
    oldStatus: jspb.Message.getFieldWithDefault(msg, 3, 0),
    status: jspb.Message.getFieldWithDefault(msg, 4, 0),
    note: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.mobile.SeatStatusLog}
 */
proto.event.mobile.SeatStatusLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.mobile.SeatStatusLog;
  return proto.event.mobile.SeatStatusLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.mobile.SeatStatusLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.mobile.SeatStatusLog}
 */
proto.event.mobile.SeatStatusLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatedAt(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedBy(value);
      break;
    case 3:
      var value = /** @type {!proto.event.mobile.SeatStatus} */ (reader.readEnum());
      msg.setOldStatus(value);
      break;
    case 4:
      var value = /** @type {!proto.event.mobile.SeatStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.mobile.SeatStatusLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.mobile.SeatStatusLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.mobile.SeatStatusLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.SeatStatusLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUpdatedBy();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOldStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int64 updated_at = 1;
 * @return {number}
 */
proto.event.mobile.SeatStatusLog.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.mobile.SeatStatusLog} returns this
 */
proto.event.mobile.SeatStatusLog.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string updated_by = 2;
 * @return {string}
 */
proto.event.mobile.SeatStatusLog.prototype.getUpdatedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.SeatStatusLog} returns this
 */
proto.event.mobile.SeatStatusLog.prototype.setUpdatedBy = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional SeatStatus old_status = 3;
 * @return {!proto.event.mobile.SeatStatus}
 */
proto.event.mobile.SeatStatusLog.prototype.getOldStatus = function() {
  return /** @type {!proto.event.mobile.SeatStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.event.mobile.SeatStatus} value
 * @return {!proto.event.mobile.SeatStatusLog} returns this
 */
proto.event.mobile.SeatStatusLog.prototype.setOldStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional SeatStatus status = 4;
 * @return {!proto.event.mobile.SeatStatus}
 */
proto.event.mobile.SeatStatusLog.prototype.getStatus = function() {
  return /** @type {!proto.event.mobile.SeatStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.event.mobile.SeatStatus} value
 * @return {!proto.event.mobile.SeatStatusLog} returns this
 */
proto.event.mobile.SeatStatusLog.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string note = 5;
 * @return {string}
 */
proto.event.mobile.SeatStatusLog.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.SeatStatusLog} returns this
 */
proto.event.mobile.SeatStatusLog.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.mobile.ListSeatMapReq.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.mobile.ListSeatMapReq.prototype.toObject = function(opt_includeInstance) {
  return proto.event.mobile.ListSeatMapReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.mobile.ListSeatMapReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.ListSeatMapReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    searchText: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pagination: (f = msg.getPagination()) && base_base_pb.PaginationReq.toObject(includeInstance, f),
    orderByList: jspb.Message.toObjectList(msg.getOrderByList(),
    base_base_pb.OrderByItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.mobile.ListSeatMapReq}
 */
proto.event.mobile.ListSeatMapReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.mobile.ListSeatMapReq;
  return proto.event.mobile.ListSeatMapReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.mobile.ListSeatMapReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.mobile.ListSeatMapReq}
 */
proto.event.mobile.ListSeatMapReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearchText(value);
      break;
    case 2:
      var value = new base_base_pb.PaginationReq;
      reader.readMessage(value,base_base_pb.PaginationReq.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    case 3:
      var value = new base_base_pb.OrderByItem;
      reader.readMessage(value,base_base_pb.OrderByItem.deserializeBinaryFromReader);
      msg.addOrderBy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.mobile.ListSeatMapReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.mobile.ListSeatMapReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.mobile.ListSeatMapReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.ListSeatMapReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSearchText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      base_base_pb.PaginationReq.serializeBinaryToWriter
    );
  }
  f = message.getOrderByList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      base_base_pb.OrderByItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional string search_text = 1;
 * @return {string}
 */
proto.event.mobile.ListSeatMapReq.prototype.getSearchText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.ListSeatMapReq} returns this
 */
proto.event.mobile.ListSeatMapReq.prototype.setSearchText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional base.PaginationReq pagination = 2;
 * @return {?proto.base.PaginationReq}
 */
proto.event.mobile.ListSeatMapReq.prototype.getPagination = function() {
  return /** @type{?proto.base.PaginationReq} */ (
    jspb.Message.getWrapperField(this, base_base_pb.PaginationReq, 2));
};


/**
 * @param {?proto.base.PaginationReq|undefined} value
 * @return {!proto.event.mobile.ListSeatMapReq} returns this
*/
proto.event.mobile.ListSeatMapReq.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.mobile.ListSeatMapReq} returns this
 */
proto.event.mobile.ListSeatMapReq.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.mobile.ListSeatMapReq.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated base.OrderByItem order_by = 3;
 * @return {!Array<!proto.base.OrderByItem>}
 */
proto.event.mobile.ListSeatMapReq.prototype.getOrderByList = function() {
  return /** @type{!Array<!proto.base.OrderByItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, base_base_pb.OrderByItem, 3));
};


/**
 * @param {!Array<!proto.base.OrderByItem>} value
 * @return {!proto.event.mobile.ListSeatMapReq} returns this
*/
proto.event.mobile.ListSeatMapReq.prototype.setOrderByList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.base.OrderByItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.base.OrderByItem}
 */
proto.event.mobile.ListSeatMapReq.prototype.addOrderBy = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.base.OrderByItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.mobile.ListSeatMapReq} returns this
 */
proto.event.mobile.ListSeatMapReq.prototype.clearOrderByList = function() {
  return this.setOrderByList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.mobile.RetrieveSeatMapReq.prototype.toObject = function(opt_includeInstance) {
  return proto.event.mobile.RetrieveSeatMapReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.mobile.RetrieveSeatMapReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.RetrieveSeatMapReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.mobile.RetrieveSeatMapReq}
 */
proto.event.mobile.RetrieveSeatMapReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.mobile.RetrieveSeatMapReq;
  return proto.event.mobile.RetrieveSeatMapReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.mobile.RetrieveSeatMapReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.mobile.RetrieveSeatMapReq}
 */
proto.event.mobile.RetrieveSeatMapReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.mobile.RetrieveSeatMapReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.mobile.RetrieveSeatMapReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.mobile.RetrieveSeatMapReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.RetrieveSeatMapReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.mobile.RetrieveSeatMapReq.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.RetrieveSeatMapReq} returns this
 */
proto.event.mobile.RetrieveSeatMapReq.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.mobile.ListSeatBlockReq.prototype.toObject = function(opt_includeInstance) {
  return proto.event.mobile.ListSeatBlockReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.mobile.ListSeatBlockReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.ListSeatBlockReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatMapId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.mobile.ListSeatBlockReq}
 */
proto.event.mobile.ListSeatBlockReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.mobile.ListSeatBlockReq;
  return proto.event.mobile.ListSeatBlockReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.mobile.ListSeatBlockReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.mobile.ListSeatBlockReq}
 */
proto.event.mobile.ListSeatBlockReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatMapId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.mobile.ListSeatBlockReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.mobile.ListSeatBlockReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.mobile.ListSeatBlockReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.ListSeatBlockReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatMapId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string seat_map_id = 1;
 * @return {string}
 */
proto.event.mobile.ListSeatBlockReq.prototype.getSeatMapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.ListSeatBlockReq} returns this
 */
proto.event.mobile.ListSeatBlockReq.prototype.setSeatMapId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.mobile.RetrieveSeatBlockReq.prototype.toObject = function(opt_includeInstance) {
  return proto.event.mobile.RetrieveSeatBlockReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.mobile.RetrieveSeatBlockReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.RetrieveSeatBlockReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatMapId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seatBlockId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.mobile.RetrieveSeatBlockReq}
 */
proto.event.mobile.RetrieveSeatBlockReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.mobile.RetrieveSeatBlockReq;
  return proto.event.mobile.RetrieveSeatBlockReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.mobile.RetrieveSeatBlockReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.mobile.RetrieveSeatBlockReq}
 */
proto.event.mobile.RetrieveSeatBlockReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatMapId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatBlockId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.mobile.RetrieveSeatBlockReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.mobile.RetrieveSeatBlockReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.mobile.RetrieveSeatBlockReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.RetrieveSeatBlockReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatMapId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeatBlockId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string seat_map_id = 1;
 * @return {string}
 */
proto.event.mobile.RetrieveSeatBlockReq.prototype.getSeatMapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.RetrieveSeatBlockReq} returns this
 */
proto.event.mobile.RetrieveSeatBlockReq.prototype.setSeatMapId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string seat_block_id = 2;
 * @return {string}
 */
proto.event.mobile.RetrieveSeatBlockReq.prototype.getSeatBlockId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.RetrieveSeatBlockReq} returns this
 */
proto.event.mobile.RetrieveSeatBlockReq.prototype.setSeatBlockId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.mobile.UpsertDecorationReq.prototype.toObject = function(opt_includeInstance) {
  return proto.event.mobile.UpsertDecorationReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.mobile.UpsertDecorationReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.UpsertDecorationReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatMapId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    info: (f = msg.getInfo()) && proto.event.mobile.Sharp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.mobile.UpsertDecorationReq}
 */
proto.event.mobile.UpsertDecorationReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.mobile.UpsertDecorationReq;
  return proto.event.mobile.UpsertDecorationReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.mobile.UpsertDecorationReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.mobile.UpsertDecorationReq}
 */
proto.event.mobile.UpsertDecorationReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatMapId(value);
      break;
    case 2:
      var value = new proto.event.mobile.Sharp;
      reader.readMessage(value,proto.event.mobile.Sharp.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.mobile.UpsertDecorationReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.mobile.UpsertDecorationReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.mobile.UpsertDecorationReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.UpsertDecorationReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatMapId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.event.mobile.Sharp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string seat_map_id = 1;
 * @return {string}
 */
proto.event.mobile.UpsertDecorationReq.prototype.getSeatMapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.UpsertDecorationReq} returns this
 */
proto.event.mobile.UpsertDecorationReq.prototype.setSeatMapId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Sharp info = 2;
 * @return {?proto.event.mobile.Sharp}
 */
proto.event.mobile.UpsertDecorationReq.prototype.getInfo = function() {
  return /** @type{?proto.event.mobile.Sharp} */ (
    jspb.Message.getWrapperField(this, proto.event.mobile.Sharp, 2));
};


/**
 * @param {?proto.event.mobile.Sharp|undefined} value
 * @return {!proto.event.mobile.UpsertDecorationReq} returns this
*/
proto.event.mobile.UpsertDecorationReq.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.mobile.UpsertDecorationReq} returns this
 */
proto.event.mobile.UpsertDecorationReq.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.mobile.UpsertDecorationReq.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.mobile.UpdateSeatStatusReq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.mobile.UpdateSeatStatusReq.prototype.toObject = function(opt_includeInstance) {
  return proto.event.mobile.UpdateSeatStatusReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.mobile.UpdateSeatStatusReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.UpdateSeatStatusReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatMapId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seatDetailList: jspb.Message.toObjectList(msg.getSeatDetailList(),
    proto.event.mobile.UpdateSeatStatusDetailReq.toObject, includeInstance),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    note: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.mobile.UpdateSeatStatusReq}
 */
proto.event.mobile.UpdateSeatStatusReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.mobile.UpdateSeatStatusReq;
  return proto.event.mobile.UpdateSeatStatusReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.mobile.UpdateSeatStatusReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.mobile.UpdateSeatStatusReq}
 */
proto.event.mobile.UpdateSeatStatusReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatMapId(value);
      break;
    case 2:
      var value = new proto.event.mobile.UpdateSeatStatusDetailReq;
      reader.readMessage(value,proto.event.mobile.UpdateSeatStatusDetailReq.deserializeBinaryFromReader);
      msg.addSeatDetail(value);
      break;
    case 3:
      var value = /** @type {!proto.event.mobile.SeatStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.mobile.UpdateSeatStatusReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.mobile.UpdateSeatStatusReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.mobile.UpdateSeatStatusReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.UpdateSeatStatusReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatMapId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeatDetailList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.event.mobile.UpdateSeatStatusDetailReq.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string seat_map_id = 1;
 * @return {string}
 */
proto.event.mobile.UpdateSeatStatusReq.prototype.getSeatMapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.UpdateSeatStatusReq} returns this
 */
proto.event.mobile.UpdateSeatStatusReq.prototype.setSeatMapId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated UpdateSeatStatusDetailReq seat_detail = 2;
 * @return {!Array<!proto.event.mobile.UpdateSeatStatusDetailReq>}
 */
proto.event.mobile.UpdateSeatStatusReq.prototype.getSeatDetailList = function() {
  return /** @type{!Array<!proto.event.mobile.UpdateSeatStatusDetailReq>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.mobile.UpdateSeatStatusDetailReq, 2));
};


/**
 * @param {!Array<!proto.event.mobile.UpdateSeatStatusDetailReq>} value
 * @return {!proto.event.mobile.UpdateSeatStatusReq} returns this
*/
proto.event.mobile.UpdateSeatStatusReq.prototype.setSeatDetailList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.event.mobile.UpdateSeatStatusDetailReq=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.mobile.UpdateSeatStatusDetailReq}
 */
proto.event.mobile.UpdateSeatStatusReq.prototype.addSeatDetail = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.event.mobile.UpdateSeatStatusDetailReq, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.mobile.UpdateSeatStatusReq} returns this
 */
proto.event.mobile.UpdateSeatStatusReq.prototype.clearSeatDetailList = function() {
  return this.setSeatDetailList([]);
};


/**
 * optional SeatStatus status = 3;
 * @return {!proto.event.mobile.SeatStatus}
 */
proto.event.mobile.UpdateSeatStatusReq.prototype.getStatus = function() {
  return /** @type {!proto.event.mobile.SeatStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.event.mobile.SeatStatus} value
 * @return {!proto.event.mobile.UpdateSeatStatusReq} returns this
 */
proto.event.mobile.UpdateSeatStatusReq.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string note = 5;
 * @return {string}
 */
proto.event.mobile.UpdateSeatStatusReq.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.UpdateSeatStatusReq} returns this
 */
proto.event.mobile.UpdateSeatStatusReq.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.mobile.UpdateSeatStatusDetailReq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.mobile.UpdateSeatStatusDetailReq.prototype.toObject = function(opt_includeInstance) {
  return proto.event.mobile.UpdateSeatStatusDetailReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.mobile.UpdateSeatStatusDetailReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.UpdateSeatStatusDetailReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatBlockId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seatIdsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.mobile.UpdateSeatStatusDetailReq}
 */
proto.event.mobile.UpdateSeatStatusDetailReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.mobile.UpdateSeatStatusDetailReq;
  return proto.event.mobile.UpdateSeatStatusDetailReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.mobile.UpdateSeatStatusDetailReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.mobile.UpdateSeatStatusDetailReq}
 */
proto.event.mobile.UpdateSeatStatusDetailReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatBlockId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addSeatIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.mobile.UpdateSeatStatusDetailReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.mobile.UpdateSeatStatusDetailReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.mobile.UpdateSeatStatusDetailReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.UpdateSeatStatusDetailReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatBlockId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeatIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string seat_block_id = 1;
 * @return {string}
 */
proto.event.mobile.UpdateSeatStatusDetailReq.prototype.getSeatBlockId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.UpdateSeatStatusDetailReq} returns this
 */
proto.event.mobile.UpdateSeatStatusDetailReq.prototype.setSeatBlockId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string seat_ids = 2;
 * @return {!Array<string>}
 */
proto.event.mobile.UpdateSeatStatusDetailReq.prototype.getSeatIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.mobile.UpdateSeatStatusDetailReq} returns this
 */
proto.event.mobile.UpdateSeatStatusDetailReq.prototype.setSeatIdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.mobile.UpdateSeatStatusDetailReq} returns this
 */
proto.event.mobile.UpdateSeatStatusDetailReq.prototype.addSeatIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.mobile.UpdateSeatStatusDetailReq} returns this
 */
proto.event.mobile.UpdateSeatStatusDetailReq.prototype.clearSeatIdsList = function() {
  return this.setSeatIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.mobile.ListDecorationReq.prototype.toObject = function(opt_includeInstance) {
  return proto.event.mobile.ListDecorationReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.mobile.ListDecorationReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.ListDecorationReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatMapId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.mobile.ListDecorationReq}
 */
proto.event.mobile.ListDecorationReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.mobile.ListDecorationReq;
  return proto.event.mobile.ListDecorationReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.mobile.ListDecorationReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.mobile.ListDecorationReq}
 */
proto.event.mobile.ListDecorationReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatMapId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.mobile.ListDecorationReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.mobile.ListDecorationReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.mobile.ListDecorationReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.ListDecorationReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatMapId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string seat_map_id = 1;
 * @return {string}
 */
proto.event.mobile.ListDecorationReq.prototype.getSeatMapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.mobile.ListDecorationReq} returns this
 */
proto.event.mobile.ListDecorationReq.prototype.setSeatMapId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.mobile.RetrieveSeatMapRes.prototype.toObject = function(opt_includeInstance) {
  return proto.event.mobile.RetrieveSeatMapRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.mobile.RetrieveSeatMapRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.RetrieveSeatMapRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.event.mobile.SeatMap.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.mobile.RetrieveSeatMapRes}
 */
proto.event.mobile.RetrieveSeatMapRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.mobile.RetrieveSeatMapRes;
  return proto.event.mobile.RetrieveSeatMapRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.mobile.RetrieveSeatMapRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.mobile.RetrieveSeatMapRes}
 */
proto.event.mobile.RetrieveSeatMapRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.event.mobile.SeatMap;
      reader.readMessage(value,proto.event.mobile.SeatMap.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.mobile.RetrieveSeatMapRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.mobile.RetrieveSeatMapRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.mobile.RetrieveSeatMapRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.RetrieveSeatMapRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.event.mobile.SeatMap.serializeBinaryToWriter
    );
  }
};


/**
 * optional SeatMap info = 1;
 * @return {?proto.event.mobile.SeatMap}
 */
proto.event.mobile.RetrieveSeatMapRes.prototype.getInfo = function() {
  return /** @type{?proto.event.mobile.SeatMap} */ (
    jspb.Message.getWrapperField(this, proto.event.mobile.SeatMap, 1));
};


/**
 * @param {?proto.event.mobile.SeatMap|undefined} value
 * @return {!proto.event.mobile.RetrieveSeatMapRes} returns this
*/
proto.event.mobile.RetrieveSeatMapRes.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.mobile.RetrieveSeatMapRes} returns this
 */
proto.event.mobile.RetrieveSeatMapRes.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.mobile.RetrieveSeatMapRes.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.mobile.ListSeatMapRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.mobile.ListSeatMapRes.prototype.toObject = function(opt_includeInstance) {
  return proto.event.mobile.ListSeatMapRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.mobile.ListSeatMapRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.ListSeatMapRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.event.mobile.SeatMap.toObject, includeInstance),
    pagination: (f = msg.getPagination()) && base_base_pb.PaginationRes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.mobile.ListSeatMapRes}
 */
proto.event.mobile.ListSeatMapRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.mobile.ListSeatMapRes;
  return proto.event.mobile.ListSeatMapRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.mobile.ListSeatMapRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.mobile.ListSeatMapRes}
 */
proto.event.mobile.ListSeatMapRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.event.mobile.SeatMap;
      reader.readMessage(value,proto.event.mobile.SeatMap.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    case 2:
      var value = new base_base_pb.PaginationRes;
      reader.readMessage(value,base_base_pb.PaginationRes.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.mobile.ListSeatMapRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.mobile.ListSeatMapRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.mobile.ListSeatMapRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.ListSeatMapRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.event.mobile.SeatMap.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      base_base_pb.PaginationRes.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SeatMap items = 1;
 * @return {!Array<!proto.event.mobile.SeatMap>}
 */
proto.event.mobile.ListSeatMapRes.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.event.mobile.SeatMap>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.mobile.SeatMap, 1));
};


/**
 * @param {!Array<!proto.event.mobile.SeatMap>} value
 * @return {!proto.event.mobile.ListSeatMapRes} returns this
*/
proto.event.mobile.ListSeatMapRes.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.event.mobile.SeatMap=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.mobile.SeatMap}
 */
proto.event.mobile.ListSeatMapRes.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.event.mobile.SeatMap, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.mobile.ListSeatMapRes} returns this
 */
proto.event.mobile.ListSeatMapRes.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};


/**
 * optional base.PaginationRes pagination = 2;
 * @return {?proto.base.PaginationRes}
 */
proto.event.mobile.ListSeatMapRes.prototype.getPagination = function() {
  return /** @type{?proto.base.PaginationRes} */ (
    jspb.Message.getWrapperField(this, base_base_pb.PaginationRes, 2));
};


/**
 * @param {?proto.base.PaginationRes|undefined} value
 * @return {!proto.event.mobile.ListSeatMapRes} returns this
*/
proto.event.mobile.ListSeatMapRes.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.mobile.ListSeatMapRes} returns this
 */
proto.event.mobile.ListSeatMapRes.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.mobile.ListSeatMapRes.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.mobile.ListSeatBlockRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.mobile.ListSeatBlockRes.prototype.toObject = function(opt_includeInstance) {
  return proto.event.mobile.ListSeatBlockRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.mobile.ListSeatBlockRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.ListSeatBlockRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.event.mobile.SeatBlock.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.mobile.ListSeatBlockRes}
 */
proto.event.mobile.ListSeatBlockRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.mobile.ListSeatBlockRes;
  return proto.event.mobile.ListSeatBlockRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.mobile.ListSeatBlockRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.mobile.ListSeatBlockRes}
 */
proto.event.mobile.ListSeatBlockRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.event.mobile.SeatBlock;
      reader.readMessage(value,proto.event.mobile.SeatBlock.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.mobile.ListSeatBlockRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.mobile.ListSeatBlockRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.mobile.ListSeatBlockRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.ListSeatBlockRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.event.mobile.SeatBlock.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SeatBlock items = 1;
 * @return {!Array<!proto.event.mobile.SeatBlock>}
 */
proto.event.mobile.ListSeatBlockRes.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.event.mobile.SeatBlock>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.mobile.SeatBlock, 1));
};


/**
 * @param {!Array<!proto.event.mobile.SeatBlock>} value
 * @return {!proto.event.mobile.ListSeatBlockRes} returns this
*/
proto.event.mobile.ListSeatBlockRes.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.event.mobile.SeatBlock=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.mobile.SeatBlock}
 */
proto.event.mobile.ListSeatBlockRes.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.event.mobile.SeatBlock, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.mobile.ListSeatBlockRes} returns this
 */
proto.event.mobile.ListSeatBlockRes.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.mobile.ListDecorationRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.mobile.ListDecorationRes.prototype.toObject = function(opt_includeInstance) {
  return proto.event.mobile.ListDecorationRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.mobile.ListDecorationRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.ListDecorationRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.event.mobile.Sharp.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.mobile.ListDecorationRes}
 */
proto.event.mobile.ListDecorationRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.mobile.ListDecorationRes;
  return proto.event.mobile.ListDecorationRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.mobile.ListDecorationRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.mobile.ListDecorationRes}
 */
proto.event.mobile.ListDecorationRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.event.mobile.Sharp;
      reader.readMessage(value,proto.event.mobile.Sharp.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.mobile.ListDecorationRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.mobile.ListDecorationRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.mobile.ListDecorationRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.ListDecorationRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.event.mobile.Sharp.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Sharp items = 1;
 * @return {!Array<!proto.event.mobile.Sharp>}
 */
proto.event.mobile.ListDecorationRes.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.event.mobile.Sharp>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.mobile.Sharp, 1));
};


/**
 * @param {!Array<!proto.event.mobile.Sharp>} value
 * @return {!proto.event.mobile.ListDecorationRes} returns this
*/
proto.event.mobile.ListDecorationRes.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.event.mobile.Sharp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.mobile.Sharp}
 */
proto.event.mobile.ListDecorationRes.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.event.mobile.Sharp, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.mobile.ListDecorationRes} returns this
 */
proto.event.mobile.ListDecorationRes.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.mobile.UpdateSeatStatusRes.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.mobile.UpdateSeatStatusRes.prototype.toObject = function(opt_includeInstance) {
  return proto.event.mobile.UpdateSeatStatusRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.mobile.UpdateSeatStatusRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.UpdateSeatStatusRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    isSuccessed: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    errorSeatIdsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.mobile.UpdateSeatStatusRes}
 */
proto.event.mobile.UpdateSeatStatusRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.mobile.UpdateSeatStatusRes;
  return proto.event.mobile.UpdateSeatStatusRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.mobile.UpdateSeatStatusRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.mobile.UpdateSeatStatusRes}
 */
proto.event.mobile.UpdateSeatStatusRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSuccessed(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addErrorSeatIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.mobile.UpdateSeatStatusRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.mobile.UpdateSeatStatusRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.mobile.UpdateSeatStatusRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.UpdateSeatStatusRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsSuccessed();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrorSeatIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional bool is_successed = 1;
 * @return {boolean}
 */
proto.event.mobile.UpdateSeatStatusRes.prototype.getIsSuccessed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.mobile.UpdateSeatStatusRes} returns this
 */
proto.event.mobile.UpdateSeatStatusRes.prototype.setIsSuccessed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated string error_seat_ids = 2;
 * @return {!Array<string>}
 */
proto.event.mobile.UpdateSeatStatusRes.prototype.getErrorSeatIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.mobile.UpdateSeatStatusRes} returns this
 */
proto.event.mobile.UpdateSeatStatusRes.prototype.setErrorSeatIdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.mobile.UpdateSeatStatusRes} returns this
 */
proto.event.mobile.UpdateSeatStatusRes.prototype.addErrorSeatIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.mobile.UpdateSeatStatusRes} returns this
 */
proto.event.mobile.UpdateSeatStatusRes.prototype.clearErrorSeatIdsList = function() {
  return this.setErrorSeatIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.mobile.RetrieveSeatBlockRes.prototype.toObject = function(opt_includeInstance) {
  return proto.event.mobile.RetrieveSeatBlockRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.mobile.RetrieveSeatBlockRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.RetrieveSeatBlockRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.event.mobile.SeatBlock.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.mobile.RetrieveSeatBlockRes}
 */
proto.event.mobile.RetrieveSeatBlockRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.mobile.RetrieveSeatBlockRes;
  return proto.event.mobile.RetrieveSeatBlockRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.mobile.RetrieveSeatBlockRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.mobile.RetrieveSeatBlockRes}
 */
proto.event.mobile.RetrieveSeatBlockRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.event.mobile.SeatBlock;
      reader.readMessage(value,proto.event.mobile.SeatBlock.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.mobile.RetrieveSeatBlockRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.mobile.RetrieveSeatBlockRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.mobile.RetrieveSeatBlockRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.mobile.RetrieveSeatBlockRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.event.mobile.SeatBlock.serializeBinaryToWriter
    );
  }
};


/**
 * optional SeatBlock info = 1;
 * @return {?proto.event.mobile.SeatBlock}
 */
proto.event.mobile.RetrieveSeatBlockRes.prototype.getInfo = function() {
  return /** @type{?proto.event.mobile.SeatBlock} */ (
    jspb.Message.getWrapperField(this, proto.event.mobile.SeatBlock, 1));
};


/**
 * @param {?proto.event.mobile.SeatBlock|undefined} value
 * @return {!proto.event.mobile.RetrieveSeatBlockRes} returns this
*/
proto.event.mobile.RetrieveSeatBlockRes.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.mobile.RetrieveSeatBlockRes} returns this
 */
proto.event.mobile.RetrieveSeatBlockRes.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.mobile.RetrieveSeatBlockRes.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.event.mobile.SeatStatus = {
  SEAT_STATUS_UNUSE: 0,
  SEAT_STATUS_AVAILABLE: 1,
  SEAT_STATUS_BOOKING: 2,
  SEAT_STATUS_LOCKED: 3,
  SEAT_STATUS_SOLD: 4,
  SEAT_STATUS_DISABLE: 99
};

goog.object.extend(exports, proto.event.mobile);
