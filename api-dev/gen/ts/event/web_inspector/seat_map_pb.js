// source: event/web_inspector/seat_map.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.event.web_inspector.Currency', null, global);
goog.exportSymbol('proto.event.web_inspector.LabelType', null, global);
goog.exportSymbol('proto.event.web_inspector.Position', null, global);
goog.exportSymbol('proto.event.web_inspector.RetrieveSeatMapReq', null, global);
goog.exportSymbol('proto.event.web_inspector.RetrieveSeatMapRes', null, global);
goog.exportSymbol('proto.event.web_inspector.Seat', null, global);
goog.exportSymbol('proto.event.web_inspector.SeatBlock', null, global);
goog.exportSymbol('proto.event.web_inspector.SeatLabel', null, global);
goog.exportSymbol('proto.event.web_inspector.SeatMap', null, global);
goog.exportSymbol('proto.event.web_inspector.SeatMapInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.web_inspector.SeatMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.web_inspector.SeatMap.repeatedFields_, null);
};
goog.inherits(proto.event.web_inspector.SeatMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.web_inspector.SeatMap.displayName = 'proto.event.web_inspector.SeatMap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.web_inspector.SeatMapInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.web_inspector.SeatMapInfo.repeatedFields_, null);
};
goog.inherits(proto.event.web_inspector.SeatMapInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.web_inspector.SeatMapInfo.displayName = 'proto.event.web_inspector.SeatMapInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.web_inspector.SeatBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.web_inspector.SeatBlock.repeatedFields_, null);
};
goog.inherits(proto.event.web_inspector.SeatBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.web_inspector.SeatBlock.displayName = 'proto.event.web_inspector.SeatBlock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.web_inspector.SeatLabel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.web_inspector.SeatLabel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.web_inspector.SeatLabel.displayName = 'proto.event.web_inspector.SeatLabel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.web_inspector.Currency = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.web_inspector.Currency, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.web_inspector.Currency.displayName = 'proto.event.web_inspector.Currency';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.web_inspector.Position = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.web_inspector.Position, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.web_inspector.Position.displayName = 'proto.event.web_inspector.Position';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.web_inspector.Seat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.web_inspector.Seat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.web_inspector.Seat.displayName = 'proto.event.web_inspector.Seat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.web_inspector.RetrieveSeatMapReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.web_inspector.RetrieveSeatMapReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.web_inspector.RetrieveSeatMapReq.displayName = 'proto.event.web_inspector.RetrieveSeatMapReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.web_inspector.RetrieveSeatMapRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.web_inspector.RetrieveSeatMapRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.web_inspector.RetrieveSeatMapRes.displayName = 'proto.event.web_inspector.RetrieveSeatMapRes';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.web_inspector.SeatMap.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.web_inspector.SeatMap.prototype.toObject = function(opt_includeInstance) {
  return proto.event.web_inspector.SeatMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.web_inspector.SeatMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.web_inspector.SeatMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    mapPicture: jspb.Message.getFieldWithDefault(msg, 4, ""),
    blocksList: jspb.Message.toObjectList(msg.getBlocksList(),
    proto.event.web_inspector.SeatBlock.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.web_inspector.SeatMap}
 */
proto.event.web_inspector.SeatMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.web_inspector.SeatMap;
  return proto.event.web_inspector.SeatMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.web_inspector.SeatMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.web_inspector.SeatMap}
 */
proto.event.web_inspector.SeatMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMapPicture(value);
      break;
    case 5:
      var value = new proto.event.web_inspector.SeatBlock;
      reader.readMessage(value,proto.event.web_inspector.SeatBlock.deserializeBinaryFromReader);
      msg.addBlocks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.web_inspector.SeatMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.web_inspector.SeatMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.web_inspector.SeatMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.web_inspector.SeatMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMapPicture();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.event.web_inspector.SeatBlock.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.web_inspector.SeatMap.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.web_inspector.SeatMap} returns this
 */
proto.event.web_inspector.SeatMap.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.event.web_inspector.SeatMap.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.web_inspector.SeatMap} returns this
 */
proto.event.web_inspector.SeatMap.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.event.web_inspector.SeatMap.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.web_inspector.SeatMap} returns this
 */
proto.event.web_inspector.SeatMap.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string map_picture = 4;
 * @return {string}
 */
proto.event.web_inspector.SeatMap.prototype.getMapPicture = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.web_inspector.SeatMap} returns this
 */
proto.event.web_inspector.SeatMap.prototype.setMapPicture = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated SeatBlock blocks = 5;
 * @return {!Array<!proto.event.web_inspector.SeatBlock>}
 */
proto.event.web_inspector.SeatMap.prototype.getBlocksList = function() {
  return /** @type{!Array<!proto.event.web_inspector.SeatBlock>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.web_inspector.SeatBlock, 5));
};


/**
 * @param {!Array<!proto.event.web_inspector.SeatBlock>} value
 * @return {!proto.event.web_inspector.SeatMap} returns this
*/
proto.event.web_inspector.SeatMap.prototype.setBlocksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.event.web_inspector.SeatBlock=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.web_inspector.SeatBlock}
 */
proto.event.web_inspector.SeatMap.prototype.addBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.event.web_inspector.SeatBlock, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.web_inspector.SeatMap} returns this
 */
proto.event.web_inspector.SeatMap.prototype.clearBlocksList = function() {
  return this.setBlocksList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.web_inspector.SeatMapInfo.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.web_inspector.SeatMapInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.event.web_inspector.SeatMapInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.web_inspector.SeatMapInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.web_inspector.SeatMapInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    mapPicture: jspb.Message.getFieldWithDefault(msg, 4, ""),
    blocksList: jspb.Message.toObjectList(msg.getBlocksList(),
    proto.event.web_inspector.SeatBlock.toObject, includeInstance),
    createdAt: jspb.Message.getFieldWithDefault(msg, 6, 0),
    createdBy: jspb.Message.getFieldWithDefault(msg, 7, ""),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 8, 0),
    updatedBy: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.web_inspector.SeatMapInfo}
 */
proto.event.web_inspector.SeatMapInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.web_inspector.SeatMapInfo;
  return proto.event.web_inspector.SeatMapInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.web_inspector.SeatMapInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.web_inspector.SeatMapInfo}
 */
proto.event.web_inspector.SeatMapInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMapPicture(value);
      break;
    case 5:
      var value = new proto.event.web_inspector.SeatBlock;
      reader.readMessage(value,proto.event.web_inspector.SeatBlock.deserializeBinaryFromReader);
      msg.addBlocks(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedBy(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatedAt(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedBy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.web_inspector.SeatMapInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.web_inspector.SeatMapInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.web_inspector.SeatMapInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.web_inspector.SeatMapInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMapPicture();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.event.web_inspector.SeatBlock.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getCreatedBy();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getUpdatedBy();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.web_inspector.SeatMapInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.web_inspector.SeatMapInfo} returns this
 */
proto.event.web_inspector.SeatMapInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.event.web_inspector.SeatMapInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.web_inspector.SeatMapInfo} returns this
 */
proto.event.web_inspector.SeatMapInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.event.web_inspector.SeatMapInfo.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.web_inspector.SeatMapInfo} returns this
 */
proto.event.web_inspector.SeatMapInfo.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string map_picture = 4;
 * @return {string}
 */
proto.event.web_inspector.SeatMapInfo.prototype.getMapPicture = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.web_inspector.SeatMapInfo} returns this
 */
proto.event.web_inspector.SeatMapInfo.prototype.setMapPicture = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated SeatBlock blocks = 5;
 * @return {!Array<!proto.event.web_inspector.SeatBlock>}
 */
proto.event.web_inspector.SeatMapInfo.prototype.getBlocksList = function() {
  return /** @type{!Array<!proto.event.web_inspector.SeatBlock>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.web_inspector.SeatBlock, 5));
};


/**
 * @param {!Array<!proto.event.web_inspector.SeatBlock>} value
 * @return {!proto.event.web_inspector.SeatMapInfo} returns this
*/
proto.event.web_inspector.SeatMapInfo.prototype.setBlocksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.event.web_inspector.SeatBlock=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.web_inspector.SeatBlock}
 */
proto.event.web_inspector.SeatMapInfo.prototype.addBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.event.web_inspector.SeatBlock, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.web_inspector.SeatMapInfo} returns this
 */
proto.event.web_inspector.SeatMapInfo.prototype.clearBlocksList = function() {
  return this.setBlocksList([]);
};


/**
 * optional int64 created_at = 6;
 * @return {number}
 */
proto.event.web_inspector.SeatMapInfo.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.web_inspector.SeatMapInfo} returns this
 */
proto.event.web_inspector.SeatMapInfo.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string created_by = 7;
 * @return {string}
 */
proto.event.web_inspector.SeatMapInfo.prototype.getCreatedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.web_inspector.SeatMapInfo} returns this
 */
proto.event.web_inspector.SeatMapInfo.prototype.setCreatedBy = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int64 updated_at = 8;
 * @return {number}
 */
proto.event.web_inspector.SeatMapInfo.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.web_inspector.SeatMapInfo} returns this
 */
proto.event.web_inspector.SeatMapInfo.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string updated_by = 9;
 * @return {string}
 */
proto.event.web_inspector.SeatMapInfo.prototype.getUpdatedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.web_inspector.SeatMapInfo} returns this
 */
proto.event.web_inspector.SeatMapInfo.prototype.setUpdatedBy = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.web_inspector.SeatBlock.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.web_inspector.SeatBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.event.web_inspector.SeatBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.web_inspector.SeatBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.web_inspector.SeatBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    color: jspb.Message.getFieldWithDefault(msg, 3, ""),
    row: (f = msg.getRow()) && proto.event.web_inspector.SeatLabel.toObject(includeInstance, f),
    col: (f = msg.getCol()) && proto.event.web_inspector.SeatLabel.toObject(includeInstance, f),
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    currency: (f = msg.getCurrency()) && proto.event.web_inspector.Currency.toObject(includeInstance, f),
    position: (f = msg.getPosition()) && proto.event.web_inspector.Position.toObject(includeInstance, f),
    description: jspb.Message.getFieldWithDefault(msg, 9, ""),
    seatsList: jspb.Message.toObjectList(msg.getSeatsList(),
    proto.event.web_inspector.Seat.toObject, includeInstance),
    seatMapId: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.web_inspector.SeatBlock}
 */
proto.event.web_inspector.SeatBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.web_inspector.SeatBlock;
  return proto.event.web_inspector.SeatBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.web_inspector.SeatBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.web_inspector.SeatBlock}
 */
proto.event.web_inspector.SeatBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 4:
      var value = new proto.event.web_inspector.SeatLabel;
      reader.readMessage(value,proto.event.web_inspector.SeatLabel.deserializeBinaryFromReader);
      msg.setRow(value);
      break;
    case 5:
      var value = new proto.event.web_inspector.SeatLabel;
      reader.readMessage(value,proto.event.web_inspector.SeatLabel.deserializeBinaryFromReader);
      msg.setCol(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 7:
      var value = new proto.event.web_inspector.Currency;
      reader.readMessage(value,proto.event.web_inspector.Currency.deserializeBinaryFromReader);
      msg.setCurrency(value);
      break;
    case 8:
      var value = new proto.event.web_inspector.Position;
      reader.readMessage(value,proto.event.web_inspector.Position.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 10:
      var value = new proto.event.web_inspector.Seat;
      reader.readMessage(value,proto.event.web_inspector.Seat.deserializeBinaryFromReader);
      msg.addSeats(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatMapId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.web_inspector.SeatBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.web_inspector.SeatBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.web_inspector.SeatBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.web_inspector.SeatBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRow();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.event.web_inspector.SeatLabel.serializeBinaryToWriter
    );
  }
  f = message.getCol();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.event.web_inspector.SeatLabel.serializeBinaryToWriter
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getCurrency();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.event.web_inspector.Currency.serializeBinaryToWriter
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.event.web_inspector.Position.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getSeatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.event.web_inspector.Seat.serializeBinaryToWriter
    );
  }
  f = message.getSeatMapId();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.web_inspector.SeatBlock.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.web_inspector.SeatBlock} returns this
 */
proto.event.web_inspector.SeatBlock.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.event.web_inspector.SeatBlock.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.web_inspector.SeatBlock} returns this
 */
proto.event.web_inspector.SeatBlock.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string color = 3;
 * @return {string}
 */
proto.event.web_inspector.SeatBlock.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.web_inspector.SeatBlock} returns this
 */
proto.event.web_inspector.SeatBlock.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional SeatLabel row = 4;
 * @return {?proto.event.web_inspector.SeatLabel}
 */
proto.event.web_inspector.SeatBlock.prototype.getRow = function() {
  return /** @type{?proto.event.web_inspector.SeatLabel} */ (
    jspb.Message.getWrapperField(this, proto.event.web_inspector.SeatLabel, 4));
};


/**
 * @param {?proto.event.web_inspector.SeatLabel|undefined} value
 * @return {!proto.event.web_inspector.SeatBlock} returns this
*/
proto.event.web_inspector.SeatBlock.prototype.setRow = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.web_inspector.SeatBlock} returns this
 */
proto.event.web_inspector.SeatBlock.prototype.clearRow = function() {
  return this.setRow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.web_inspector.SeatBlock.prototype.hasRow = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SeatLabel col = 5;
 * @return {?proto.event.web_inspector.SeatLabel}
 */
proto.event.web_inspector.SeatBlock.prototype.getCol = function() {
  return /** @type{?proto.event.web_inspector.SeatLabel} */ (
    jspb.Message.getWrapperField(this, proto.event.web_inspector.SeatLabel, 5));
};


/**
 * @param {?proto.event.web_inspector.SeatLabel|undefined} value
 * @return {!proto.event.web_inspector.SeatBlock} returns this
*/
proto.event.web_inspector.SeatBlock.prototype.setCol = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.web_inspector.SeatBlock} returns this
 */
proto.event.web_inspector.SeatBlock.prototype.clearCol = function() {
  return this.setCol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.web_inspector.SeatBlock.prototype.hasCol = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double price = 6;
 * @return {number}
 */
proto.event.web_inspector.SeatBlock.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.event.web_inspector.SeatBlock} returns this
 */
proto.event.web_inspector.SeatBlock.prototype.setPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional Currency currency = 7;
 * @return {?proto.event.web_inspector.Currency}
 */
proto.event.web_inspector.SeatBlock.prototype.getCurrency = function() {
  return /** @type{?proto.event.web_inspector.Currency} */ (
    jspb.Message.getWrapperField(this, proto.event.web_inspector.Currency, 7));
};


/**
 * @param {?proto.event.web_inspector.Currency|undefined} value
 * @return {!proto.event.web_inspector.SeatBlock} returns this
*/
proto.event.web_inspector.SeatBlock.prototype.setCurrency = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.web_inspector.SeatBlock} returns this
 */
proto.event.web_inspector.SeatBlock.prototype.clearCurrency = function() {
  return this.setCurrency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.web_inspector.SeatBlock.prototype.hasCurrency = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Position position = 8;
 * @return {?proto.event.web_inspector.Position}
 */
proto.event.web_inspector.SeatBlock.prototype.getPosition = function() {
  return /** @type{?proto.event.web_inspector.Position} */ (
    jspb.Message.getWrapperField(this, proto.event.web_inspector.Position, 8));
};


/**
 * @param {?proto.event.web_inspector.Position|undefined} value
 * @return {!proto.event.web_inspector.SeatBlock} returns this
*/
proto.event.web_inspector.SeatBlock.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.web_inspector.SeatBlock} returns this
 */
proto.event.web_inspector.SeatBlock.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.web_inspector.SeatBlock.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string description = 9;
 * @return {string}
 */
proto.event.web_inspector.SeatBlock.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.web_inspector.SeatBlock} returns this
 */
proto.event.web_inspector.SeatBlock.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * repeated Seat seats = 10;
 * @return {!Array<!proto.event.web_inspector.Seat>}
 */
proto.event.web_inspector.SeatBlock.prototype.getSeatsList = function() {
  return /** @type{!Array<!proto.event.web_inspector.Seat>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.web_inspector.Seat, 10));
};


/**
 * @param {!Array<!proto.event.web_inspector.Seat>} value
 * @return {!proto.event.web_inspector.SeatBlock} returns this
*/
proto.event.web_inspector.SeatBlock.prototype.setSeatsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.event.web_inspector.Seat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.web_inspector.Seat}
 */
proto.event.web_inspector.SeatBlock.prototype.addSeats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.event.web_inspector.Seat, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.web_inspector.SeatBlock} returns this
 */
proto.event.web_inspector.SeatBlock.prototype.clearSeatsList = function() {
  return this.setSeatsList([]);
};


/**
 * optional string seat_map_id = 11;
 * @return {string}
 */
proto.event.web_inspector.SeatBlock.prototype.getSeatMapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.web_inspector.SeatBlock} returns this
 */
proto.event.web_inspector.SeatBlock.prototype.setSeatMapId = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.web_inspector.SeatLabel.prototype.toObject = function(opt_includeInstance) {
  return proto.event.web_inspector.SeatLabel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.web_inspector.SeatLabel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.web_inspector.SeatLabel.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalSeat: jspb.Message.getFieldWithDefault(msg, 1, 0),
    labelType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    startWith: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.web_inspector.SeatLabel}
 */
proto.event.web_inspector.SeatLabel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.web_inspector.SeatLabel;
  return proto.event.web_inspector.SeatLabel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.web_inspector.SeatLabel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.web_inspector.SeatLabel}
 */
proto.event.web_inspector.SeatLabel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalSeat(value);
      break;
    case 2:
      var value = /** @type {!proto.event.web_inspector.LabelType} */ (reader.readEnum());
      msg.setLabelType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartWith(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.web_inspector.SeatLabel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.web_inspector.SeatLabel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.web_inspector.SeatLabel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.web_inspector.SeatLabel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalSeat();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getLabelType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getStartWith();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int64 total_seat = 1;
 * @return {number}
 */
proto.event.web_inspector.SeatLabel.prototype.getTotalSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.web_inspector.SeatLabel} returns this
 */
proto.event.web_inspector.SeatLabel.prototype.setTotalSeat = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional LabelType label_type = 2;
 * @return {!proto.event.web_inspector.LabelType}
 */
proto.event.web_inspector.SeatLabel.prototype.getLabelType = function() {
  return /** @type {!proto.event.web_inspector.LabelType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.event.web_inspector.LabelType} value
 * @return {!proto.event.web_inspector.SeatLabel} returns this
 */
proto.event.web_inspector.SeatLabel.prototype.setLabelType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string start_with = 3;
 * @return {string}
 */
proto.event.web_inspector.SeatLabel.prototype.getStartWith = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.web_inspector.SeatLabel} returns this
 */
proto.event.web_inspector.SeatLabel.prototype.setStartWith = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.web_inspector.Currency.prototype.toObject = function(opt_includeInstance) {
  return proto.event.web_inspector.Currency.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.web_inspector.Currency} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.web_inspector.Currency.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    code: jspb.Message.getFieldWithDefault(msg, 3, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.web_inspector.Currency}
 */
proto.event.web_inspector.Currency.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.web_inspector.Currency;
  return proto.event.web_inspector.Currency.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.web_inspector.Currency} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.web_inspector.Currency}
 */
proto.event.web_inspector.Currency.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.web_inspector.Currency.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.web_inspector.Currency.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.web_inspector.Currency} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.web_inspector.Currency.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.web_inspector.Currency.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.web_inspector.Currency} returns this
 */
proto.event.web_inspector.Currency.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.event.web_inspector.Currency.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.web_inspector.Currency} returns this
 */
proto.event.web_inspector.Currency.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string code = 3;
 * @return {string}
 */
proto.event.web_inspector.Currency.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.web_inspector.Currency} returns this
 */
proto.event.web_inspector.Currency.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string icon = 4;
 * @return {string}
 */
proto.event.web_inspector.Currency.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.web_inspector.Currency} returns this
 */
proto.event.web_inspector.Currency.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.web_inspector.Position.prototype.toObject = function(opt_includeInstance) {
  return proto.event.web_inspector.Position.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.web_inspector.Position} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.web_inspector.Position.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.web_inspector.Position}
 */
proto.event.web_inspector.Position.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.web_inspector.Position;
  return proto.event.web_inspector.Position.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.web_inspector.Position} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.web_inspector.Position}
 */
proto.event.web_inspector.Position.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.web_inspector.Position.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.web_inspector.Position.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.web_inspector.Position} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.web_inspector.Position.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 x = 1;
 * @return {number}
 */
proto.event.web_inspector.Position.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.web_inspector.Position} returns this
 */
proto.event.web_inspector.Position.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 y = 2;
 * @return {number}
 */
proto.event.web_inspector.Position.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.web_inspector.Position} returns this
 */
proto.event.web_inspector.Position.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.web_inspector.Seat.prototype.toObject = function(opt_includeInstance) {
  return proto.event.web_inspector.Seat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.web_inspector.Seat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.web_inspector.Seat.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    position: (f = msg.getPosition()) && proto.event.web_inspector.Position.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.web_inspector.Seat}
 */
proto.event.web_inspector.Seat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.web_inspector.Seat;
  return proto.event.web_inspector.Seat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.web_inspector.Seat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.web_inspector.Seat}
 */
proto.event.web_inspector.Seat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.event.web_inspector.Position;
      reader.readMessage(value,proto.event.web_inspector.Position.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.web_inspector.Seat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.web_inspector.Seat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.web_inspector.Seat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.web_inspector.Seat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.event.web_inspector.Position.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.event.web_inspector.Seat.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.web_inspector.Seat} returns this
 */
proto.event.web_inspector.Seat.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Position position = 2;
 * @return {?proto.event.web_inspector.Position}
 */
proto.event.web_inspector.Seat.prototype.getPosition = function() {
  return /** @type{?proto.event.web_inspector.Position} */ (
    jspb.Message.getWrapperField(this, proto.event.web_inspector.Position, 2));
};


/**
 * @param {?proto.event.web_inspector.Position|undefined} value
 * @return {!proto.event.web_inspector.Seat} returns this
*/
proto.event.web_inspector.Seat.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.web_inspector.Seat} returns this
 */
proto.event.web_inspector.Seat.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.web_inspector.Seat.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.web_inspector.RetrieveSeatMapReq.prototype.toObject = function(opt_includeInstance) {
  return proto.event.web_inspector.RetrieveSeatMapReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.web_inspector.RetrieveSeatMapReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.web_inspector.RetrieveSeatMapReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partnershipId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.web_inspector.RetrieveSeatMapReq}
 */
proto.event.web_inspector.RetrieveSeatMapReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.web_inspector.RetrieveSeatMapReq;
  return proto.event.web_inspector.RetrieveSeatMapReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.web_inspector.RetrieveSeatMapReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.web_inspector.RetrieveSeatMapReq}
 */
proto.event.web_inspector.RetrieveSeatMapReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnershipId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.web_inspector.RetrieveSeatMapReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.web_inspector.RetrieveSeatMapReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.web_inspector.RetrieveSeatMapReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.web_inspector.RetrieveSeatMapReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartnershipId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.web_inspector.RetrieveSeatMapReq.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.web_inspector.RetrieveSeatMapReq} returns this
 */
proto.event.web_inspector.RetrieveSeatMapReq.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string partnership_id = 2;
 * @return {string}
 */
proto.event.web_inspector.RetrieveSeatMapReq.prototype.getPartnershipId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.web_inspector.RetrieveSeatMapReq} returns this
 */
proto.event.web_inspector.RetrieveSeatMapReq.prototype.setPartnershipId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.web_inspector.RetrieveSeatMapRes.prototype.toObject = function(opt_includeInstance) {
  return proto.event.web_inspector.RetrieveSeatMapRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.web_inspector.RetrieveSeatMapRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.web_inspector.RetrieveSeatMapRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.event.web_inspector.SeatMapInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.web_inspector.RetrieveSeatMapRes}
 */
proto.event.web_inspector.RetrieveSeatMapRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.web_inspector.RetrieveSeatMapRes;
  return proto.event.web_inspector.RetrieveSeatMapRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.web_inspector.RetrieveSeatMapRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.web_inspector.RetrieveSeatMapRes}
 */
proto.event.web_inspector.RetrieveSeatMapRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.event.web_inspector.SeatMapInfo;
      reader.readMessage(value,proto.event.web_inspector.SeatMapInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.web_inspector.RetrieveSeatMapRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.web_inspector.RetrieveSeatMapRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.web_inspector.RetrieveSeatMapRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.web_inspector.RetrieveSeatMapRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.event.web_inspector.SeatMapInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional SeatMapInfo info = 1;
 * @return {?proto.event.web_inspector.SeatMapInfo}
 */
proto.event.web_inspector.RetrieveSeatMapRes.prototype.getInfo = function() {
  return /** @type{?proto.event.web_inspector.SeatMapInfo} */ (
    jspb.Message.getWrapperField(this, proto.event.web_inspector.SeatMapInfo, 1));
};


/**
 * @param {?proto.event.web_inspector.SeatMapInfo|undefined} value
 * @return {!proto.event.web_inspector.RetrieveSeatMapRes} returns this
*/
proto.event.web_inspector.RetrieveSeatMapRes.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.web_inspector.RetrieveSeatMapRes} returns this
 */
proto.event.web_inspector.RetrieveSeatMapRes.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.web_inspector.RetrieveSeatMapRes.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.event.web_inspector.LabelType = {
  LABEL_TYPE_INVALID: 0,
  LABEL_TYPE_CHARACTER: 1,
  LABEL_TYPE_NUMBER: 2
};

goog.object.extend(exports, proto.event.web_inspector);
