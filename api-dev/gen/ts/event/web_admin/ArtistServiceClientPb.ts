/**
 * @fileoverview gRPC-Web generated client stub for event.web_admin
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.20.3
// source: event/web_admin/artist.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as event_web_admin_artist_pb from '../../event/web_admin/artist_pb';
import * as event_web_admin_base_pb from '../../event/web_admin/base_pb';


export class ArtistServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetArtistDetail = new grpcWeb.MethodDescriptor(
    '/event.web_admin.ArtistService/GetArtistDetail',
    grpcWeb.MethodType.UNARY,
    event_web_admin_artist_pb.GetArtistDetailReq,
    event_web_admin_artist_pb.GetArtistDetailRes,
    (request: event_web_admin_artist_pb.GetArtistDetailReq) => {
      return request.serializeBinary();
    },
    event_web_admin_artist_pb.GetArtistDetailRes.deserializeBinary
  );

  getArtistDetail(
    request: event_web_admin_artist_pb.GetArtistDetailReq,
    metadata: grpcWeb.Metadata | null): Promise<event_web_admin_artist_pb.GetArtistDetailRes>;

  getArtistDetail(
    request: event_web_admin_artist_pb.GetArtistDetailReq,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: event_web_admin_artist_pb.GetArtistDetailRes) => void): grpcWeb.ClientReadableStream<event_web_admin_artist_pb.GetArtistDetailRes>;

  getArtistDetail(
    request: event_web_admin_artist_pb.GetArtistDetailReq,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: event_web_admin_artist_pb.GetArtistDetailRes) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/event.web_admin.ArtistService/GetArtistDetail',
        request,
        metadata || {},
        this.methodDescriptorGetArtistDetail,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/event.web_admin.ArtistService/GetArtistDetail',
    request,
    metadata || {},
    this.methodDescriptorGetArtistDetail);
  }

  methodDescriptorListArtist = new grpcWeb.MethodDescriptor(
    '/event.web_admin.ArtistService/ListArtist',
    grpcWeb.MethodType.UNARY,
    event_web_admin_artist_pb.ListArtistReq,
    event_web_admin_artist_pb.ListArtistRes,
    (request: event_web_admin_artist_pb.ListArtistReq) => {
      return request.serializeBinary();
    },
    event_web_admin_artist_pb.ListArtistRes.deserializeBinary
  );

  listArtist(
    request: event_web_admin_artist_pb.ListArtistReq,
    metadata: grpcWeb.Metadata | null): Promise<event_web_admin_artist_pb.ListArtistRes>;

  listArtist(
    request: event_web_admin_artist_pb.ListArtistReq,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: event_web_admin_artist_pb.ListArtistRes) => void): grpcWeb.ClientReadableStream<event_web_admin_artist_pb.ListArtistRes>;

  listArtist(
    request: event_web_admin_artist_pb.ListArtistReq,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: event_web_admin_artist_pb.ListArtistRes) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/event.web_admin.ArtistService/ListArtist',
        request,
        metadata || {},
        this.methodDescriptorListArtist,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/event.web_admin.ArtistService/ListArtist',
    request,
    metadata || {},
    this.methodDescriptorListArtist);
  }

  methodDescriptorCreateArtist = new grpcWeb.MethodDescriptor(
    '/event.web_admin.ArtistService/CreateArtist',
    grpcWeb.MethodType.UNARY,
    event_web_admin_artist_pb.CreateArtistReq,
    event_web_admin_artist_pb.CreateArtistRes,
    (request: event_web_admin_artist_pb.CreateArtistReq) => {
      return request.serializeBinary();
    },
    event_web_admin_artist_pb.CreateArtistRes.deserializeBinary
  );

  createArtist(
    request: event_web_admin_artist_pb.CreateArtistReq,
    metadata: grpcWeb.Metadata | null): Promise<event_web_admin_artist_pb.CreateArtistRes>;

  createArtist(
    request: event_web_admin_artist_pb.CreateArtistReq,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: event_web_admin_artist_pb.CreateArtistRes) => void): grpcWeb.ClientReadableStream<event_web_admin_artist_pb.CreateArtistRes>;

  createArtist(
    request: event_web_admin_artist_pb.CreateArtistReq,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: event_web_admin_artist_pb.CreateArtistRes) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/event.web_admin.ArtistService/CreateArtist',
        request,
        metadata || {},
        this.methodDescriptorCreateArtist,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/event.web_admin.ArtistService/CreateArtist',
    request,
    metadata || {},
    this.methodDescriptorCreateArtist);
  }

  methodDescriptorUpdateArtist = new grpcWeb.MethodDescriptor(
    '/event.web_admin.ArtistService/UpdateArtist',
    grpcWeb.MethodType.UNARY,
    event_web_admin_artist_pb.UpdateArtistReq,
    event_web_admin_base_pb.Empty,
    (request: event_web_admin_artist_pb.UpdateArtistReq) => {
      return request.serializeBinary();
    },
    event_web_admin_base_pb.Empty.deserializeBinary
  );

  updateArtist(
    request: event_web_admin_artist_pb.UpdateArtistReq,
    metadata: grpcWeb.Metadata | null): Promise<event_web_admin_base_pb.Empty>;

  updateArtist(
    request: event_web_admin_artist_pb.UpdateArtistReq,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: event_web_admin_base_pb.Empty) => void): grpcWeb.ClientReadableStream<event_web_admin_base_pb.Empty>;

  updateArtist(
    request: event_web_admin_artist_pb.UpdateArtistReq,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: event_web_admin_base_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/event.web_admin.ArtistService/UpdateArtist',
        request,
        metadata || {},
        this.methodDescriptorUpdateArtist,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/event.web_admin.ArtistService/UpdateArtist',
    request,
    metadata || {},
    this.methodDescriptorUpdateArtist);
  }

  methodDescriptorDeleteArtist = new grpcWeb.MethodDescriptor(
    '/event.web_admin.ArtistService/DeleteArtist',
    grpcWeb.MethodType.UNARY,
    event_web_admin_artist_pb.DeleteArtistReq,
    event_web_admin_base_pb.Empty,
    (request: event_web_admin_artist_pb.DeleteArtistReq) => {
      return request.serializeBinary();
    },
    event_web_admin_base_pb.Empty.deserializeBinary
  );

  deleteArtist(
    request: event_web_admin_artist_pb.DeleteArtistReq,
    metadata: grpcWeb.Metadata | null): Promise<event_web_admin_base_pb.Empty>;

  deleteArtist(
    request: event_web_admin_artist_pb.DeleteArtistReq,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: event_web_admin_base_pb.Empty) => void): grpcWeb.ClientReadableStream<event_web_admin_base_pb.Empty>;

  deleteArtist(
    request: event_web_admin_artist_pb.DeleteArtistReq,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: event_web_admin_base_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/event.web_admin.ArtistService/DeleteArtist',
        request,
        metadata || {},
        this.methodDescriptorDeleteArtist,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/event.web_admin.ArtistService/DeleteArtist',
    request,
    metadata || {},
    this.methodDescriptorDeleteArtist);
  }

}

