// source: event/backend/seat_map.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var event_backend_base_pb = require('../../event/backend/base_pb.js');
goog.object.extend(proto, event_backend_base_pb);
var base_base_pb = require('../../base/base_pb.js');
goog.object.extend(proto, base_base_pb);
goog.exportSymbol('proto.event.backend.AcquireLockReq', null, global);
goog.exportSymbol('proto.event.backend.AcquireRes', null, global);
goog.exportSymbol('proto.event.backend.AcquireSellReq', null, global);
goog.exportSymbol('proto.event.backend.AssociateScheduleReq', null, global);
goog.exportSymbol('proto.event.backend.CreateSeatMapRes', null, global);
goog.exportSymbol('proto.event.backend.Currency', null, global);
goog.exportSymbol('proto.event.backend.InternalListSeatBlockBySeatMapIdsReq', null, global);
goog.exportSymbol('proto.event.backend.InternalListSeatBlockBySeatMapIdsRes', null, global);
goog.exportSymbol('proto.event.backend.InternalListSeatBySeatBlockIdsReq', null, global);
goog.exportSymbol('proto.event.backend.InternalListSeatBySeatBlockIdsRes', null, global);
goog.exportSymbol('proto.event.backend.InternalListSeatMapDetailByIdsReq', null, global);
goog.exportSymbol('proto.event.backend.InternalListSeatMapDetailByIdsRes', null, global);
goog.exportSymbol('proto.event.backend.ListSeatMapByIdsReq', null, global);
goog.exportSymbol('proto.event.backend.ListSeatMapByIdsRes', null, global);
goog.exportSymbol('proto.event.backend.ListSeatMapDetailByEventIdReq', null, global);
goog.exportSymbol('proto.event.backend.ListSeatMapDetailByEventIdRes', null, global);
goog.exportSymbol('proto.event.backend.LockSource', null, global);
goog.exportSymbol('proto.event.backend.ReleaseLockReq', null, global);
goog.exportSymbol('proto.event.backend.RetrieveSeatBlockReq', null, global);
goog.exportSymbol('proto.event.backend.RetrieveSeatBlockRes', null, global);
goog.exportSymbol('proto.event.backend.RetrieveSeatMapReq', null, global);
goog.exportSymbol('proto.event.backend.RetrieveSeatMapRes', null, global);
goog.exportSymbol('proto.event.backend.Seat', null, global);
goog.exportSymbol('proto.event.backend.SeatBlock', null, global);
goog.exportSymbol('proto.event.backend.SeatBlockInfo', null, global);
goog.exportSymbol('proto.event.backend.SeatBlockRes', null, global);
goog.exportSymbol('proto.event.backend.SeatLine', null, global);
goog.exportSymbol('proto.event.backend.SeatMap', null, global);
goog.exportSymbol('proto.event.backend.SeatMapDetailByEventIDRes', null, global);
goog.exportSymbol('proto.event.backend.SeatMapInfo', null, global);
goog.exportSymbol('proto.event.backend.SeatStatus', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.SeatMapInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.SeatMapInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.SeatMapInfo.displayName = 'proto.event.backend.SeatMapInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.SeatMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.SeatMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.SeatMap.displayName = 'proto.event.backend.SeatMap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.SeatBlockInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.SeatBlockInfo.repeatedFields_, null);
};
goog.inherits(proto.event.backend.SeatBlockInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.SeatBlockInfo.displayName = 'proto.event.backend.SeatBlockInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.SeatBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.SeatBlock.repeatedFields_, null);
};
goog.inherits(proto.event.backend.SeatBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.SeatBlock.displayName = 'proto.event.backend.SeatBlock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.SeatLine = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.SeatLine, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.SeatLine.displayName = 'proto.event.backend.SeatLine';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.Currency = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.Currency, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.Currency.displayName = 'proto.event.backend.Currency';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.Seat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.Seat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.Seat.displayName = 'proto.event.backend.Seat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.RetrieveSeatMapReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.RetrieveSeatMapReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.RetrieveSeatMapReq.displayName = 'proto.event.backend.RetrieveSeatMapReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.RetrieveSeatBlockReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.RetrieveSeatBlockReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.RetrieveSeatBlockReq.displayName = 'proto.event.backend.RetrieveSeatBlockReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.ListSeatMapByIdsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.ListSeatMapByIdsReq.repeatedFields_, null);
};
goog.inherits(proto.event.backend.ListSeatMapByIdsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.ListSeatMapByIdsReq.displayName = 'proto.event.backend.ListSeatMapByIdsReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.InternalListSeatMapDetailByIdsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.InternalListSeatMapDetailByIdsReq.repeatedFields_, null);
};
goog.inherits(proto.event.backend.InternalListSeatMapDetailByIdsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.InternalListSeatMapDetailByIdsReq.displayName = 'proto.event.backend.InternalListSeatMapDetailByIdsReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.AssociateScheduleReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.AssociateScheduleReq.repeatedFields_, null);
};
goog.inherits(proto.event.backend.AssociateScheduleReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.AssociateScheduleReq.displayName = 'proto.event.backend.AssociateScheduleReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.AcquireLockReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.AcquireLockReq.repeatedFields_, null);
};
goog.inherits(proto.event.backend.AcquireLockReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.AcquireLockReq.displayName = 'proto.event.backend.AcquireLockReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.ReleaseLockReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.ReleaseLockReq.repeatedFields_, null);
};
goog.inherits(proto.event.backend.ReleaseLockReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.ReleaseLockReq.displayName = 'proto.event.backend.ReleaseLockReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.AcquireSellReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.AcquireSellReq.repeatedFields_, null);
};
goog.inherits(proto.event.backend.AcquireSellReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.AcquireSellReq.displayName = 'proto.event.backend.AcquireSellReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.CreateSeatMapRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.CreateSeatMapRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.CreateSeatMapRes.displayName = 'proto.event.backend.CreateSeatMapRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.SeatBlockRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.SeatBlockRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.SeatBlockRes.displayName = 'proto.event.backend.SeatBlockRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.RetrieveSeatMapRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.RetrieveSeatMapRes.repeatedFields_, null);
};
goog.inherits(proto.event.backend.RetrieveSeatMapRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.RetrieveSeatMapRes.displayName = 'proto.event.backend.RetrieveSeatMapRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.RetrieveSeatBlockRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.RetrieveSeatBlockRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.RetrieveSeatBlockRes.displayName = 'proto.event.backend.RetrieveSeatBlockRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.ListSeatMapByIdsRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.ListSeatMapByIdsRes.repeatedFields_, null);
};
goog.inherits(proto.event.backend.ListSeatMapByIdsRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.ListSeatMapByIdsRes.displayName = 'proto.event.backend.ListSeatMapByIdsRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.ListSeatMapDetailByEventIdReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.ListSeatMapDetailByEventIdReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.ListSeatMapDetailByEventIdReq.displayName = 'proto.event.backend.ListSeatMapDetailByEventIdReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.SeatMapDetailByEventIDRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.SeatMapDetailByEventIDRes.repeatedFields_, null);
};
goog.inherits(proto.event.backend.SeatMapDetailByEventIDRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.SeatMapDetailByEventIDRes.displayName = 'proto.event.backend.SeatMapDetailByEventIDRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.ListSeatMapDetailByEventIdRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.ListSeatMapDetailByEventIdRes.repeatedFields_, null);
};
goog.inherits(proto.event.backend.ListSeatMapDetailByEventIdRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.ListSeatMapDetailByEventIdRes.displayName = 'proto.event.backend.ListSeatMapDetailByEventIdRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.InternalListSeatMapDetailByIdsRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.InternalListSeatMapDetailByIdsRes.repeatedFields_, null);
};
goog.inherits(proto.event.backend.InternalListSeatMapDetailByIdsRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.InternalListSeatMapDetailByIdsRes.displayName = 'proto.event.backend.InternalListSeatMapDetailByIdsRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.InternalListSeatBlockBySeatMapIdsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.InternalListSeatBlockBySeatMapIdsReq.repeatedFields_, null);
};
goog.inherits(proto.event.backend.InternalListSeatBlockBySeatMapIdsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.InternalListSeatBlockBySeatMapIdsReq.displayName = 'proto.event.backend.InternalListSeatBlockBySeatMapIdsReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.InternalListSeatBlockBySeatMapIdsRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.InternalListSeatBlockBySeatMapIdsRes.repeatedFields_, null);
};
goog.inherits(proto.event.backend.InternalListSeatBlockBySeatMapIdsRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.InternalListSeatBlockBySeatMapIdsRes.displayName = 'proto.event.backend.InternalListSeatBlockBySeatMapIdsRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.InternalListSeatBySeatBlockIdsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.InternalListSeatBySeatBlockIdsReq.repeatedFields_, null);
};
goog.inherits(proto.event.backend.InternalListSeatBySeatBlockIdsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.InternalListSeatBySeatBlockIdsReq.displayName = 'proto.event.backend.InternalListSeatBySeatBlockIdsReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.InternalListSeatBySeatBlockIdsRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.InternalListSeatBySeatBlockIdsRes.repeatedFields_, null);
};
goog.inherits(proto.event.backend.InternalListSeatBySeatBlockIdsRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.InternalListSeatBySeatBlockIdsRes.displayName = 'proto.event.backend.InternalListSeatBySeatBlockIdsRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.AcquireRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.AcquireRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.AcquireRes.displayName = 'proto.event.backend.AcquireRes';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.SeatMapInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.SeatMapInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.SeatMapInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.SeatMapInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    mapPicture: jspb.Message.getFieldWithDefault(msg, 4, ""),
    maxSeatPerOrder: jspb.Message.getFieldWithDefault(msg, 5, 0),
    currency: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.SeatMapInfo}
 */
proto.event.backend.SeatMapInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.SeatMapInfo;
  return proto.event.backend.SeatMapInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.SeatMapInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.SeatMapInfo}
 */
proto.event.backend.SeatMapInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMapPicture(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxSeatPerOrder(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.SeatMapInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.SeatMapInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.SeatMapInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.SeatMapInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMapPicture();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMaxSeatPerOrder();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.event.backend.SeatMapInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.SeatMapInfo} returns this
 */
proto.event.backend.SeatMapInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.event.backend.SeatMapInfo.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.SeatMapInfo} returns this
 */
proto.event.backend.SeatMapInfo.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string map_picture = 4;
 * @return {string}
 */
proto.event.backend.SeatMapInfo.prototype.getMapPicture = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.SeatMapInfo} returns this
 */
proto.event.backend.SeatMapInfo.prototype.setMapPicture = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 max_seat_per_order = 5;
 * @return {number}
 */
proto.event.backend.SeatMapInfo.prototype.getMaxSeatPerOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.SeatMapInfo} returns this
 */
proto.event.backend.SeatMapInfo.prototype.setMaxSeatPerOrder = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string currency = 6;
 * @return {string}
 */
proto.event.backend.SeatMapInfo.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.SeatMapInfo} returns this
 */
proto.event.backend.SeatMapInfo.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.SeatMap.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.SeatMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.SeatMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.SeatMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    mapPicture: jspb.Message.getFieldWithDefault(msg, 4, ""),
    maxSeatPerOrder: jspb.Message.getFieldWithDefault(msg, 5, 0),
    currency: jspb.Message.getFieldWithDefault(msg, 6, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 7, 0),
    createdBy: jspb.Message.getFieldWithDefault(msg, 8, ""),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 9, 0),
    updatedBy: jspb.Message.getFieldWithDefault(msg, 10, ""),
    countBlock: jspb.Message.getFieldWithDefault(msg, 11, 0),
    countSeat: jspb.Message.getFieldWithDefault(msg, 12, 0),
    minPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    maxPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    eventId: jspb.Message.getFieldWithDefault(msg, 15, ""),
    scheduleId: jspb.Message.getFieldWithDefault(msg, 16, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.SeatMap}
 */
proto.event.backend.SeatMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.SeatMap;
  return proto.event.backend.SeatMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.SeatMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.SeatMap}
 */
proto.event.backend.SeatMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMapPicture(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxSeatPerOrder(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedBy(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatedAt(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedBy(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCountBlock(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCountSeat(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinPrice(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxPrice(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventId(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setScheduleId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.SeatMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.SeatMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.SeatMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.SeatMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMapPicture();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMaxSeatPerOrder();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getCreatedBy();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getUpdatedBy();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCountBlock();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getCountSeat();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getMinPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = message.getMaxPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = message.getEventId();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getScheduleId();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.backend.SeatMap.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.SeatMap} returns this
 */
proto.event.backend.SeatMap.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.event.backend.SeatMap.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.SeatMap} returns this
 */
proto.event.backend.SeatMap.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.event.backend.SeatMap.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.SeatMap} returns this
 */
proto.event.backend.SeatMap.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string map_picture = 4;
 * @return {string}
 */
proto.event.backend.SeatMap.prototype.getMapPicture = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.SeatMap} returns this
 */
proto.event.backend.SeatMap.prototype.setMapPicture = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 max_seat_per_order = 5;
 * @return {number}
 */
proto.event.backend.SeatMap.prototype.getMaxSeatPerOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.SeatMap} returns this
 */
proto.event.backend.SeatMap.prototype.setMaxSeatPerOrder = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string currency = 6;
 * @return {string}
 */
proto.event.backend.SeatMap.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.SeatMap} returns this
 */
proto.event.backend.SeatMap.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int64 created_at = 7;
 * @return {number}
 */
proto.event.backend.SeatMap.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.SeatMap} returns this
 */
proto.event.backend.SeatMap.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string created_by = 8;
 * @return {string}
 */
proto.event.backend.SeatMap.prototype.getCreatedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.SeatMap} returns this
 */
proto.event.backend.SeatMap.prototype.setCreatedBy = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int64 updated_at = 9;
 * @return {number}
 */
proto.event.backend.SeatMap.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.SeatMap} returns this
 */
proto.event.backend.SeatMap.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string updated_by = 10;
 * @return {string}
 */
proto.event.backend.SeatMap.prototype.getUpdatedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.SeatMap} returns this
 */
proto.event.backend.SeatMap.prototype.setUpdatedBy = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int64 count_block = 11;
 * @return {number}
 */
proto.event.backend.SeatMap.prototype.getCountBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.SeatMap} returns this
 */
proto.event.backend.SeatMap.prototype.setCountBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 count_seat = 12;
 * @return {number}
 */
proto.event.backend.SeatMap.prototype.getCountSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.SeatMap} returns this
 */
proto.event.backend.SeatMap.prototype.setCountSeat = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional double min_price = 13;
 * @return {number}
 */
proto.event.backend.SeatMap.prototype.getMinPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.SeatMap} returns this
 */
proto.event.backend.SeatMap.prototype.setMinPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional double max_price = 14;
 * @return {number}
 */
proto.event.backend.SeatMap.prototype.getMaxPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.SeatMap} returns this
 */
proto.event.backend.SeatMap.prototype.setMaxPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional string event_id = 15;
 * @return {string}
 */
proto.event.backend.SeatMap.prototype.getEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.SeatMap} returns this
 */
proto.event.backend.SeatMap.prototype.setEventId = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string schedule_id = 16;
 * @return {string}
 */
proto.event.backend.SeatMap.prototype.getScheduleId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.SeatMap} returns this
 */
proto.event.backend.SeatMap.prototype.setScheduleId = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.SeatBlockInfo.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.SeatBlockInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.SeatBlockInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.SeatBlockInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.SeatBlockInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    color: jspb.Message.getFieldWithDefault(msg, 2, ""),
    row: (f = msg.getRow()) && proto.event.backend.SeatLine.toObject(includeInstance, f),
    col: (f = msg.getCol()) && proto.event.backend.SeatLine.toObject(includeInstance, f),
    width: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    height: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    totalSeat: jspb.Message.getFieldWithDefault(msg, 7, 0),
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    position: (f = msg.getPosition()) && event_backend_base_pb.Position.toObject(includeInstance, f),
    seatMapId: jspb.Message.getFieldWithDefault(msg, 10, ""),
    canSelectSeat: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    seatsList: jspb.Message.toObjectList(msg.getSeatsList(),
    proto.event.backend.Seat.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.SeatBlockInfo}
 */
proto.event.backend.SeatBlockInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.SeatBlockInfo;
  return proto.event.backend.SeatBlockInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.SeatBlockInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.SeatBlockInfo}
 */
proto.event.backend.SeatBlockInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 3:
      var value = new proto.event.backend.SeatLine;
      reader.readMessage(value,proto.event.backend.SeatLine.deserializeBinaryFromReader);
      msg.setRow(value);
      break;
    case 4:
      var value = new proto.event.backend.SeatLine;
      reader.readMessage(value,proto.event.backend.SeatLine.deserializeBinaryFromReader);
      msg.setCol(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWidth(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeight(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalSeat(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 9:
      var value = new event_backend_base_pb.Position;
      reader.readMessage(value,event_backend_base_pb.Position.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatMapId(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanSelectSeat(value);
      break;
    case 12:
      var value = new proto.event.backend.Seat;
      reader.readMessage(value,proto.event.backend.Seat.deserializeBinaryFromReader);
      msg.addSeats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.SeatBlockInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.SeatBlockInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.SeatBlockInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.SeatBlockInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRow();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.event.backend.SeatLine.serializeBinaryToWriter
    );
  }
  f = message.getCol();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.event.backend.SeatLine.serializeBinaryToWriter
    );
  }
  f = message.getWidth();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getTotalSeat();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      event_backend_base_pb.Position.serializeBinaryToWriter
    );
  }
  f = message.getSeatMapId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCanSelectSeat();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getSeatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.event.backend.Seat.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.event.backend.SeatBlockInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.SeatBlockInfo} returns this
 */
proto.event.backend.SeatBlockInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string color = 2;
 * @return {string}
 */
proto.event.backend.SeatBlockInfo.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.SeatBlockInfo} returns this
 */
proto.event.backend.SeatBlockInfo.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional SeatLine row = 3;
 * @return {?proto.event.backend.SeatLine}
 */
proto.event.backend.SeatBlockInfo.prototype.getRow = function() {
  return /** @type{?proto.event.backend.SeatLine} */ (
    jspb.Message.getWrapperField(this, proto.event.backend.SeatLine, 3));
};


/**
 * @param {?proto.event.backend.SeatLine|undefined} value
 * @return {!proto.event.backend.SeatBlockInfo} returns this
*/
proto.event.backend.SeatBlockInfo.prototype.setRow = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.backend.SeatBlockInfo} returns this
 */
proto.event.backend.SeatBlockInfo.prototype.clearRow = function() {
  return this.setRow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.backend.SeatBlockInfo.prototype.hasRow = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SeatLine col = 4;
 * @return {?proto.event.backend.SeatLine}
 */
proto.event.backend.SeatBlockInfo.prototype.getCol = function() {
  return /** @type{?proto.event.backend.SeatLine} */ (
    jspb.Message.getWrapperField(this, proto.event.backend.SeatLine, 4));
};


/**
 * @param {?proto.event.backend.SeatLine|undefined} value
 * @return {!proto.event.backend.SeatBlockInfo} returns this
*/
proto.event.backend.SeatBlockInfo.prototype.setCol = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.backend.SeatBlockInfo} returns this
 */
proto.event.backend.SeatBlockInfo.prototype.clearCol = function() {
  return this.setCol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.backend.SeatBlockInfo.prototype.hasCol = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double width = 5;
 * @return {number}
 */
proto.event.backend.SeatBlockInfo.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.SeatBlockInfo} returns this
 */
proto.event.backend.SeatBlockInfo.prototype.setWidth = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double height = 6;
 * @return {number}
 */
proto.event.backend.SeatBlockInfo.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.SeatBlockInfo} returns this
 */
proto.event.backend.SeatBlockInfo.prototype.setHeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional int64 total_seat = 7;
 * @return {number}
 */
proto.event.backend.SeatBlockInfo.prototype.getTotalSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.SeatBlockInfo} returns this
 */
proto.event.backend.SeatBlockInfo.prototype.setTotalSeat = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional double price = 8;
 * @return {number}
 */
proto.event.backend.SeatBlockInfo.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.SeatBlockInfo} returns this
 */
proto.event.backend.SeatBlockInfo.prototype.setPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional Position position = 9;
 * @return {?proto.event.backend.Position}
 */
proto.event.backend.SeatBlockInfo.prototype.getPosition = function() {
  return /** @type{?proto.event.backend.Position} */ (
    jspb.Message.getWrapperField(this, event_backend_base_pb.Position, 9));
};


/**
 * @param {?proto.event.backend.Position|undefined} value
 * @return {!proto.event.backend.SeatBlockInfo} returns this
*/
proto.event.backend.SeatBlockInfo.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.backend.SeatBlockInfo} returns this
 */
proto.event.backend.SeatBlockInfo.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.backend.SeatBlockInfo.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string seat_map_id = 10;
 * @return {string}
 */
proto.event.backend.SeatBlockInfo.prototype.getSeatMapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.SeatBlockInfo} returns this
 */
proto.event.backend.SeatBlockInfo.prototype.setSeatMapId = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional bool can_select_seat = 11;
 * @return {boolean}
 */
proto.event.backend.SeatBlockInfo.prototype.getCanSelectSeat = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.backend.SeatBlockInfo} returns this
 */
proto.event.backend.SeatBlockInfo.prototype.setCanSelectSeat = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * repeated Seat seats = 12;
 * @return {!Array<!proto.event.backend.Seat>}
 */
proto.event.backend.SeatBlockInfo.prototype.getSeatsList = function() {
  return /** @type{!Array<!proto.event.backend.Seat>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.backend.Seat, 12));
};


/**
 * @param {!Array<!proto.event.backend.Seat>} value
 * @return {!proto.event.backend.SeatBlockInfo} returns this
*/
proto.event.backend.SeatBlockInfo.prototype.setSeatsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.event.backend.Seat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.backend.Seat}
 */
proto.event.backend.SeatBlockInfo.prototype.addSeats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.event.backend.Seat, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.SeatBlockInfo} returns this
 */
proto.event.backend.SeatBlockInfo.prototype.clearSeatsList = function() {
  return this.setSeatsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.SeatBlock.repeatedFields_ = [11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.SeatBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.SeatBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.SeatBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.SeatBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    color: jspb.Message.getFieldWithDefault(msg, 3, ""),
    row: (f = msg.getRow()) && proto.event.backend.SeatLine.toObject(includeInstance, f),
    col: (f = msg.getCol()) && proto.event.backend.SeatLine.toObject(includeInstance, f),
    width: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    height: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    totalSeat: jspb.Message.getFieldWithDefault(msg, 8, 0),
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    position: (f = msg.getPosition()) && event_backend_base_pb.Position.toObject(includeInstance, f),
    seatsList: jspb.Message.toObjectList(msg.getSeatsList(),
    proto.event.backend.Seat.toObject, includeInstance),
    seatMapId: jspb.Message.getFieldWithDefault(msg, 12, ""),
    canSelectSeat: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    createdAt: jspb.Message.getFieldWithDefault(msg, 14, 0),
    createdBy: jspb.Message.getFieldWithDefault(msg, 15, ""),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 16, 0),
    updatedBy: jspb.Message.getFieldWithDefault(msg, 17, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.SeatBlock}
 */
proto.event.backend.SeatBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.SeatBlock;
  return proto.event.backend.SeatBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.SeatBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.SeatBlock}
 */
proto.event.backend.SeatBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 4:
      var value = new proto.event.backend.SeatLine;
      reader.readMessage(value,proto.event.backend.SeatLine.deserializeBinaryFromReader);
      msg.setRow(value);
      break;
    case 5:
      var value = new proto.event.backend.SeatLine;
      reader.readMessage(value,proto.event.backend.SeatLine.deserializeBinaryFromReader);
      msg.setCol(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWidth(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeight(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalSeat(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 10:
      var value = new event_backend_base_pb.Position;
      reader.readMessage(value,event_backend_base_pb.Position.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 11:
      var value = new proto.event.backend.Seat;
      reader.readMessage(value,proto.event.backend.Seat.deserializeBinaryFromReader);
      msg.addSeats(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatMapId(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanSelectSeat(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedBy(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatedAt(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedBy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.SeatBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.SeatBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.SeatBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.SeatBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRow();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.event.backend.SeatLine.serializeBinaryToWriter
    );
  }
  f = message.getCol();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.event.backend.SeatLine.serializeBinaryToWriter
    );
  }
  f = message.getWidth();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getTotalSeat();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      event_backend_base_pb.Position.serializeBinaryToWriter
    );
  }
  f = message.getSeatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.event.backend.Seat.serializeBinaryToWriter
    );
  }
  f = message.getSeatMapId();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getCanSelectSeat();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = message.getCreatedBy();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeInt64(
      16,
      f
    );
  }
  f = message.getUpdatedBy();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.backend.SeatBlock.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.SeatBlock} returns this
 */
proto.event.backend.SeatBlock.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.event.backend.SeatBlock.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.SeatBlock} returns this
 */
proto.event.backend.SeatBlock.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string color = 3;
 * @return {string}
 */
proto.event.backend.SeatBlock.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.SeatBlock} returns this
 */
proto.event.backend.SeatBlock.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional SeatLine row = 4;
 * @return {?proto.event.backend.SeatLine}
 */
proto.event.backend.SeatBlock.prototype.getRow = function() {
  return /** @type{?proto.event.backend.SeatLine} */ (
    jspb.Message.getWrapperField(this, proto.event.backend.SeatLine, 4));
};


/**
 * @param {?proto.event.backend.SeatLine|undefined} value
 * @return {!proto.event.backend.SeatBlock} returns this
*/
proto.event.backend.SeatBlock.prototype.setRow = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.backend.SeatBlock} returns this
 */
proto.event.backend.SeatBlock.prototype.clearRow = function() {
  return this.setRow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.backend.SeatBlock.prototype.hasRow = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SeatLine col = 5;
 * @return {?proto.event.backend.SeatLine}
 */
proto.event.backend.SeatBlock.prototype.getCol = function() {
  return /** @type{?proto.event.backend.SeatLine} */ (
    jspb.Message.getWrapperField(this, proto.event.backend.SeatLine, 5));
};


/**
 * @param {?proto.event.backend.SeatLine|undefined} value
 * @return {!proto.event.backend.SeatBlock} returns this
*/
proto.event.backend.SeatBlock.prototype.setCol = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.backend.SeatBlock} returns this
 */
proto.event.backend.SeatBlock.prototype.clearCol = function() {
  return this.setCol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.backend.SeatBlock.prototype.hasCol = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double width = 6;
 * @return {number}
 */
proto.event.backend.SeatBlock.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.SeatBlock} returns this
 */
proto.event.backend.SeatBlock.prototype.setWidth = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double height = 7;
 * @return {number}
 */
proto.event.backend.SeatBlock.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.SeatBlock} returns this
 */
proto.event.backend.SeatBlock.prototype.setHeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional int64 total_seat = 8;
 * @return {number}
 */
proto.event.backend.SeatBlock.prototype.getTotalSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.SeatBlock} returns this
 */
proto.event.backend.SeatBlock.prototype.setTotalSeat = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional double price = 9;
 * @return {number}
 */
proto.event.backend.SeatBlock.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.SeatBlock} returns this
 */
proto.event.backend.SeatBlock.prototype.setPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional Position position = 10;
 * @return {?proto.event.backend.Position}
 */
proto.event.backend.SeatBlock.prototype.getPosition = function() {
  return /** @type{?proto.event.backend.Position} */ (
    jspb.Message.getWrapperField(this, event_backend_base_pb.Position, 10));
};


/**
 * @param {?proto.event.backend.Position|undefined} value
 * @return {!proto.event.backend.SeatBlock} returns this
*/
proto.event.backend.SeatBlock.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.backend.SeatBlock} returns this
 */
proto.event.backend.SeatBlock.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.backend.SeatBlock.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated Seat seats = 11;
 * @return {!Array<!proto.event.backend.Seat>}
 */
proto.event.backend.SeatBlock.prototype.getSeatsList = function() {
  return /** @type{!Array<!proto.event.backend.Seat>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.backend.Seat, 11));
};


/**
 * @param {!Array<!proto.event.backend.Seat>} value
 * @return {!proto.event.backend.SeatBlock} returns this
*/
proto.event.backend.SeatBlock.prototype.setSeatsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.event.backend.Seat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.backend.Seat}
 */
proto.event.backend.SeatBlock.prototype.addSeats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.event.backend.Seat, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.SeatBlock} returns this
 */
proto.event.backend.SeatBlock.prototype.clearSeatsList = function() {
  return this.setSeatsList([]);
};


/**
 * optional string seat_map_id = 12;
 * @return {string}
 */
proto.event.backend.SeatBlock.prototype.getSeatMapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.SeatBlock} returns this
 */
proto.event.backend.SeatBlock.prototype.setSeatMapId = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional bool can_select_seat = 13;
 * @return {boolean}
 */
proto.event.backend.SeatBlock.prototype.getCanSelectSeat = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.backend.SeatBlock} returns this
 */
proto.event.backend.SeatBlock.prototype.setCanSelectSeat = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional int64 created_at = 14;
 * @return {number}
 */
proto.event.backend.SeatBlock.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.SeatBlock} returns this
 */
proto.event.backend.SeatBlock.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional string created_by = 15;
 * @return {string}
 */
proto.event.backend.SeatBlock.prototype.getCreatedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.SeatBlock} returns this
 */
proto.event.backend.SeatBlock.prototype.setCreatedBy = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional int64 updated_at = 16;
 * @return {number}
 */
proto.event.backend.SeatBlock.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.SeatBlock} returns this
 */
proto.event.backend.SeatBlock.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional string updated_by = 17;
 * @return {string}
 */
proto.event.backend.SeatBlock.prototype.getUpdatedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.SeatBlock} returns this
 */
proto.event.backend.SeatBlock.prototype.setUpdatedBy = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.SeatLine.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.SeatLine.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.SeatLine} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.SeatLine.toObject = function(includeInstance, msg) {
  var f, obj = {
    quantity: jspb.Message.getFieldWithDefault(msg, 1, 0),
    beginCharacter: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.SeatLine}
 */
proto.event.backend.SeatLine.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.SeatLine;
  return proto.event.backend.SeatLine.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.SeatLine} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.SeatLine}
 */
proto.event.backend.SeatLine.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setQuantity(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeginCharacter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.SeatLine.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.SeatLine.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.SeatLine} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.SeatLine.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getBeginCharacter();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 quantity = 1;
 * @return {number}
 */
proto.event.backend.SeatLine.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.SeatLine} returns this
 */
proto.event.backend.SeatLine.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string begin_character = 2;
 * @return {string}
 */
proto.event.backend.SeatLine.prototype.getBeginCharacter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.SeatLine} returns this
 */
proto.event.backend.SeatLine.prototype.setBeginCharacter = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.Currency.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.Currency.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.Currency} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.Currency.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    code: jspb.Message.getFieldWithDefault(msg, 3, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.Currency}
 */
proto.event.backend.Currency.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.Currency;
  return proto.event.backend.Currency.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.Currency} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.Currency}
 */
proto.event.backend.Currency.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.Currency.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.Currency.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.Currency} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.Currency.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.backend.Currency.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.Currency} returns this
 */
proto.event.backend.Currency.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.event.backend.Currency.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.Currency} returns this
 */
proto.event.backend.Currency.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string code = 3;
 * @return {string}
 */
proto.event.backend.Currency.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.Currency} returns this
 */
proto.event.backend.Currency.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string icon = 4;
 * @return {string}
 */
proto.event.backend.Currency.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.Currency} returns this
 */
proto.event.backend.Currency.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.Seat.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.Seat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.Seat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.Seat.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    position: (f = msg.getPosition()) && event_backend_base_pb.Position.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.Seat}
 */
proto.event.backend.Seat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.Seat;
  return proto.event.backend.Seat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.Seat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.Seat}
 */
proto.event.backend.Seat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new event_backend_base_pb.Position;
      reader.readMessage(value,event_backend_base_pb.Position.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 4:
      var value = /** @type {!proto.event.backend.SeatStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.Seat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.Seat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.Seat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.Seat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      event_backend_base_pb.Position.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.backend.Seat.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.Seat} returns this
 */
proto.event.backend.Seat.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.event.backend.Seat.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.Seat} returns this
 */
proto.event.backend.Seat.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Position position = 3;
 * @return {?proto.event.backend.Position}
 */
proto.event.backend.Seat.prototype.getPosition = function() {
  return /** @type{?proto.event.backend.Position} */ (
    jspb.Message.getWrapperField(this, event_backend_base_pb.Position, 3));
};


/**
 * @param {?proto.event.backend.Position|undefined} value
 * @return {!proto.event.backend.Seat} returns this
*/
proto.event.backend.Seat.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.backend.Seat} returns this
 */
proto.event.backend.Seat.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.backend.Seat.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SeatStatus status = 4;
 * @return {!proto.event.backend.SeatStatus}
 */
proto.event.backend.Seat.prototype.getStatus = function() {
  return /** @type {!proto.event.backend.SeatStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.event.backend.SeatStatus} value
 * @return {!proto.event.backend.Seat} returns this
 */
proto.event.backend.Seat.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.RetrieveSeatMapReq.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.RetrieveSeatMapReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.RetrieveSeatMapReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.RetrieveSeatMapReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.RetrieveSeatMapReq}
 */
proto.event.backend.RetrieveSeatMapReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.RetrieveSeatMapReq;
  return proto.event.backend.RetrieveSeatMapReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.RetrieveSeatMapReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.RetrieveSeatMapReq}
 */
proto.event.backend.RetrieveSeatMapReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.RetrieveSeatMapReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.RetrieveSeatMapReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.RetrieveSeatMapReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.RetrieveSeatMapReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.backend.RetrieveSeatMapReq.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.RetrieveSeatMapReq} returns this
 */
proto.event.backend.RetrieveSeatMapReq.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.RetrieveSeatBlockReq.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.RetrieveSeatBlockReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.RetrieveSeatBlockReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.RetrieveSeatBlockReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatMapId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seatBlockId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.RetrieveSeatBlockReq}
 */
proto.event.backend.RetrieveSeatBlockReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.RetrieveSeatBlockReq;
  return proto.event.backend.RetrieveSeatBlockReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.RetrieveSeatBlockReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.RetrieveSeatBlockReq}
 */
proto.event.backend.RetrieveSeatBlockReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatMapId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatBlockId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.RetrieveSeatBlockReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.RetrieveSeatBlockReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.RetrieveSeatBlockReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.RetrieveSeatBlockReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatMapId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeatBlockId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string seat_map_id = 1;
 * @return {string}
 */
proto.event.backend.RetrieveSeatBlockReq.prototype.getSeatMapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.RetrieveSeatBlockReq} returns this
 */
proto.event.backend.RetrieveSeatBlockReq.prototype.setSeatMapId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string seat_block_id = 2;
 * @return {string}
 */
proto.event.backend.RetrieveSeatBlockReq.prototype.getSeatBlockId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.RetrieveSeatBlockReq} returns this
 */
proto.event.backend.RetrieveSeatBlockReq.prototype.setSeatBlockId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.ListSeatMapByIdsReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.ListSeatMapByIdsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.ListSeatMapByIdsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.ListSeatMapByIdsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.ListSeatMapByIdsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.ListSeatMapByIdsReq}
 */
proto.event.backend.ListSeatMapByIdsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.ListSeatMapByIdsReq;
  return proto.event.backend.ListSeatMapByIdsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.ListSeatMapByIdsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.ListSeatMapByIdsReq}
 */
proto.event.backend.ListSeatMapByIdsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.ListSeatMapByIdsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.ListSeatMapByIdsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.ListSeatMapByIdsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.ListSeatMapByIdsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string ids = 1;
 * @return {!Array<string>}
 */
proto.event.backend.ListSeatMapByIdsReq.prototype.getIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.backend.ListSeatMapByIdsReq} returns this
 */
proto.event.backend.ListSeatMapByIdsReq.prototype.setIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.backend.ListSeatMapByIdsReq} returns this
 */
proto.event.backend.ListSeatMapByIdsReq.prototype.addIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.ListSeatMapByIdsReq} returns this
 */
proto.event.backend.ListSeatMapByIdsReq.prototype.clearIdsList = function() {
  return this.setIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.InternalListSeatMapDetailByIdsReq.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.InternalListSeatMapDetailByIdsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.InternalListSeatMapDetailByIdsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.InternalListSeatMapDetailByIdsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.InternalListSeatMapDetailByIdsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    seatBlockIdsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    seatIdsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.InternalListSeatMapDetailByIdsReq}
 */
proto.event.backend.InternalListSeatMapDetailByIdsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.InternalListSeatMapDetailByIdsReq;
  return proto.event.backend.InternalListSeatMapDetailByIdsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.InternalListSeatMapDetailByIdsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.InternalListSeatMapDetailByIdsReq}
 */
proto.event.backend.InternalListSeatMapDetailByIdsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addIds(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addSeatBlockIds(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addSeatIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.InternalListSeatMapDetailByIdsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.InternalListSeatMapDetailByIdsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.InternalListSeatMapDetailByIdsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.InternalListSeatMapDetailByIdsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getSeatBlockIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getSeatIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * repeated string ids = 1;
 * @return {!Array<string>}
 */
proto.event.backend.InternalListSeatMapDetailByIdsReq.prototype.getIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.backend.InternalListSeatMapDetailByIdsReq} returns this
 */
proto.event.backend.InternalListSeatMapDetailByIdsReq.prototype.setIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.backend.InternalListSeatMapDetailByIdsReq} returns this
 */
proto.event.backend.InternalListSeatMapDetailByIdsReq.prototype.addIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.InternalListSeatMapDetailByIdsReq} returns this
 */
proto.event.backend.InternalListSeatMapDetailByIdsReq.prototype.clearIdsList = function() {
  return this.setIdsList([]);
};


/**
 * repeated string seat_block_ids = 2;
 * @return {!Array<string>}
 */
proto.event.backend.InternalListSeatMapDetailByIdsReq.prototype.getSeatBlockIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.backend.InternalListSeatMapDetailByIdsReq} returns this
 */
proto.event.backend.InternalListSeatMapDetailByIdsReq.prototype.setSeatBlockIdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.backend.InternalListSeatMapDetailByIdsReq} returns this
 */
proto.event.backend.InternalListSeatMapDetailByIdsReq.prototype.addSeatBlockIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.InternalListSeatMapDetailByIdsReq} returns this
 */
proto.event.backend.InternalListSeatMapDetailByIdsReq.prototype.clearSeatBlockIdsList = function() {
  return this.setSeatBlockIdsList([]);
};


/**
 * repeated string seat_ids = 3;
 * @return {!Array<string>}
 */
proto.event.backend.InternalListSeatMapDetailByIdsReq.prototype.getSeatIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.backend.InternalListSeatMapDetailByIdsReq} returns this
 */
proto.event.backend.InternalListSeatMapDetailByIdsReq.prototype.setSeatIdsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.backend.InternalListSeatMapDetailByIdsReq} returns this
 */
proto.event.backend.InternalListSeatMapDetailByIdsReq.prototype.addSeatIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.InternalListSeatMapDetailByIdsReq} returns this
 */
proto.event.backend.InternalListSeatMapDetailByIdsReq.prototype.clearSeatIdsList = function() {
  return this.setSeatIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.AssociateScheduleReq.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.AssociateScheduleReq.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.AssociateScheduleReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.AssociateScheduleReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.AssociateScheduleReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    partnershipId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    eventId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    scheduleId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    seatMapIdsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.AssociateScheduleReq}
 */
proto.event.backend.AssociateScheduleReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.AssociateScheduleReq;
  return proto.event.backend.AssociateScheduleReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.AssociateScheduleReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.AssociateScheduleReq}
 */
proto.event.backend.AssociateScheduleReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnershipId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setScheduleId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addSeatMapIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.AssociateScheduleReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.AssociateScheduleReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.AssociateScheduleReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.AssociateScheduleReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartnershipId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEventId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getScheduleId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSeatMapIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional string partnership_id = 1;
 * @return {string}
 */
proto.event.backend.AssociateScheduleReq.prototype.getPartnershipId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.AssociateScheduleReq} returns this
 */
proto.event.backend.AssociateScheduleReq.prototype.setPartnershipId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.event.backend.AssociateScheduleReq.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.AssociateScheduleReq} returns this
 */
proto.event.backend.AssociateScheduleReq.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string event_id = 3;
 * @return {string}
 */
proto.event.backend.AssociateScheduleReq.prototype.getEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.AssociateScheduleReq} returns this
 */
proto.event.backend.AssociateScheduleReq.prototype.setEventId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string schedule_id = 4;
 * @return {string}
 */
proto.event.backend.AssociateScheduleReq.prototype.getScheduleId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.AssociateScheduleReq} returns this
 */
proto.event.backend.AssociateScheduleReq.prototype.setScheduleId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string seat_map_ids = 5;
 * @return {!Array<string>}
 */
proto.event.backend.AssociateScheduleReq.prototype.getSeatMapIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.backend.AssociateScheduleReq} returns this
 */
proto.event.backend.AssociateScheduleReq.prototype.setSeatMapIdsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.backend.AssociateScheduleReq} returns this
 */
proto.event.backend.AssociateScheduleReq.prototype.addSeatMapIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.AssociateScheduleReq} returns this
 */
proto.event.backend.AssociateScheduleReq.prototype.clearSeatMapIdsList = function() {
  return this.setSeatMapIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.AcquireLockReq.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.AcquireLockReq.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.AcquireLockReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.AcquireLockReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.AcquireLockReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    actorSource: jspb.Message.getFieldWithDefault(msg, 1, 0),
    actorId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    actorName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    duration: jspb.Message.getFieldWithDefault(msg, 4, 0),
    seatIdsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    blocksMap: (f = msg.getBlocksMap()) ? f.toObject(includeInstance, undefined) : [],
    note: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.AcquireLockReq}
 */
proto.event.backend.AcquireLockReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.AcquireLockReq;
  return proto.event.backend.AcquireLockReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.AcquireLockReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.AcquireLockReq}
 */
proto.event.backend.AcquireLockReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.event.backend.LockSource} */ (reader.readEnum());
      msg.setActorSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setActorId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setActorName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDuration(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addSeatIds(value);
      break;
    case 6:
      var value = msg.getBlocksMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint32, null, "", 0);
         });
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.AcquireLockReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.AcquireLockReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.AcquireLockReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.AcquireLockReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActorSource();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getActorId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getActorName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getSeatIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getBlocksMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional LockSource actor_source = 1;
 * @return {!proto.event.backend.LockSource}
 */
proto.event.backend.AcquireLockReq.prototype.getActorSource = function() {
  return /** @type {!proto.event.backend.LockSource} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.event.backend.LockSource} value
 * @return {!proto.event.backend.AcquireLockReq} returns this
 */
proto.event.backend.AcquireLockReq.prototype.setActorSource = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string actor_id = 2;
 * @return {string}
 */
proto.event.backend.AcquireLockReq.prototype.getActorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.AcquireLockReq} returns this
 */
proto.event.backend.AcquireLockReq.prototype.setActorId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string actor_name = 3;
 * @return {string}
 */
proto.event.backend.AcquireLockReq.prototype.getActorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.AcquireLockReq} returns this
 */
proto.event.backend.AcquireLockReq.prototype.setActorName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 duration = 4;
 * @return {number}
 */
proto.event.backend.AcquireLockReq.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.AcquireLockReq} returns this
 */
proto.event.backend.AcquireLockReq.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated string seat_ids = 5;
 * @return {!Array<string>}
 */
proto.event.backend.AcquireLockReq.prototype.getSeatIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.backend.AcquireLockReq} returns this
 */
proto.event.backend.AcquireLockReq.prototype.setSeatIdsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.backend.AcquireLockReq} returns this
 */
proto.event.backend.AcquireLockReq.prototype.addSeatIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.AcquireLockReq} returns this
 */
proto.event.backend.AcquireLockReq.prototype.clearSeatIdsList = function() {
  return this.setSeatIdsList([]);
};


/**
 * map<string, uint32> blocks = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.event.backend.AcquireLockReq.prototype.getBlocksMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.event.backend.AcquireLockReq} returns this
 */
proto.event.backend.AcquireLockReq.prototype.clearBlocksMap = function() {
  this.getBlocksMap().clear();
  return this;};


/**
 * optional string note = 7;
 * @return {string}
 */
proto.event.backend.AcquireLockReq.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.AcquireLockReq} returns this
 */
proto.event.backend.AcquireLockReq.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.ReleaseLockReq.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.ReleaseLockReq.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.ReleaseLockReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.ReleaseLockReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.ReleaseLockReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    actorSource: jspb.Message.getFieldWithDefault(msg, 1, 0),
    actorId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    actorName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    seatIdsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    blocksMap: (f = msg.getBlocksMap()) ? f.toObject(includeInstance, undefined) : [],
    note: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.ReleaseLockReq}
 */
proto.event.backend.ReleaseLockReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.ReleaseLockReq;
  return proto.event.backend.ReleaseLockReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.ReleaseLockReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.ReleaseLockReq}
 */
proto.event.backend.ReleaseLockReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.event.backend.LockSource} */ (reader.readEnum());
      msg.setActorSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setActorId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setActorName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addSeatIds(value);
      break;
    case 5:
      var value = msg.getBlocksMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint32, null, "", 0);
         });
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.ReleaseLockReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.ReleaseLockReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.ReleaseLockReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.ReleaseLockReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActorSource();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getActorId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getActorName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSeatIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getBlocksMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional LockSource actor_source = 1;
 * @return {!proto.event.backend.LockSource}
 */
proto.event.backend.ReleaseLockReq.prototype.getActorSource = function() {
  return /** @type {!proto.event.backend.LockSource} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.event.backend.LockSource} value
 * @return {!proto.event.backend.ReleaseLockReq} returns this
 */
proto.event.backend.ReleaseLockReq.prototype.setActorSource = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string actor_id = 2;
 * @return {string}
 */
proto.event.backend.ReleaseLockReq.prototype.getActorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.ReleaseLockReq} returns this
 */
proto.event.backend.ReleaseLockReq.prototype.setActorId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string actor_name = 3;
 * @return {string}
 */
proto.event.backend.ReleaseLockReq.prototype.getActorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.ReleaseLockReq} returns this
 */
proto.event.backend.ReleaseLockReq.prototype.setActorName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string seat_ids = 4;
 * @return {!Array<string>}
 */
proto.event.backend.ReleaseLockReq.prototype.getSeatIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.backend.ReleaseLockReq} returns this
 */
proto.event.backend.ReleaseLockReq.prototype.setSeatIdsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.backend.ReleaseLockReq} returns this
 */
proto.event.backend.ReleaseLockReq.prototype.addSeatIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.ReleaseLockReq} returns this
 */
proto.event.backend.ReleaseLockReq.prototype.clearSeatIdsList = function() {
  return this.setSeatIdsList([]);
};


/**
 * map<string, uint32> blocks = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.event.backend.ReleaseLockReq.prototype.getBlocksMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.event.backend.ReleaseLockReq} returns this
 */
proto.event.backend.ReleaseLockReq.prototype.clearBlocksMap = function() {
  this.getBlocksMap().clear();
  return this;};


/**
 * optional string note = 6;
 * @return {string}
 */
proto.event.backend.ReleaseLockReq.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.ReleaseLockReq} returns this
 */
proto.event.backend.ReleaseLockReq.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.AcquireSellReq.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.AcquireSellReq.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.AcquireSellReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.AcquireSellReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.AcquireSellReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    actorSource: jspb.Message.getFieldWithDefault(msg, 1, 0),
    actorId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    actorName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    seatIdsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    blocksMap: (f = msg.getBlocksMap()) ? f.toObject(includeInstance, undefined) : [],
    note: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.AcquireSellReq}
 */
proto.event.backend.AcquireSellReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.AcquireSellReq;
  return proto.event.backend.AcquireSellReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.AcquireSellReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.AcquireSellReq}
 */
proto.event.backend.AcquireSellReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.event.backend.LockSource} */ (reader.readEnum());
      msg.setActorSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setActorId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setActorName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addSeatIds(value);
      break;
    case 5:
      var value = msg.getBlocksMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint32, null, "", 0);
         });
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.AcquireSellReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.AcquireSellReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.AcquireSellReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.AcquireSellReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActorSource();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getActorId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getActorName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSeatIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getBlocksMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional LockSource actor_source = 1;
 * @return {!proto.event.backend.LockSource}
 */
proto.event.backend.AcquireSellReq.prototype.getActorSource = function() {
  return /** @type {!proto.event.backend.LockSource} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.event.backend.LockSource} value
 * @return {!proto.event.backend.AcquireSellReq} returns this
 */
proto.event.backend.AcquireSellReq.prototype.setActorSource = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string actor_id = 2;
 * @return {string}
 */
proto.event.backend.AcquireSellReq.prototype.getActorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.AcquireSellReq} returns this
 */
proto.event.backend.AcquireSellReq.prototype.setActorId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string actor_name = 3;
 * @return {string}
 */
proto.event.backend.AcquireSellReq.prototype.getActorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.AcquireSellReq} returns this
 */
proto.event.backend.AcquireSellReq.prototype.setActorName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string seat_ids = 4;
 * @return {!Array<string>}
 */
proto.event.backend.AcquireSellReq.prototype.getSeatIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.backend.AcquireSellReq} returns this
 */
proto.event.backend.AcquireSellReq.prototype.setSeatIdsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.backend.AcquireSellReq} returns this
 */
proto.event.backend.AcquireSellReq.prototype.addSeatIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.AcquireSellReq} returns this
 */
proto.event.backend.AcquireSellReq.prototype.clearSeatIdsList = function() {
  return this.setSeatIdsList([]);
};


/**
 * map<string, uint32> blocks = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.event.backend.AcquireSellReq.prototype.getBlocksMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.event.backend.AcquireSellReq} returns this
 */
proto.event.backend.AcquireSellReq.prototype.clearBlocksMap = function() {
  this.getBlocksMap().clear();
  return this;};


/**
 * optional string note = 6;
 * @return {string}
 */
proto.event.backend.AcquireSellReq.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.AcquireSellReq} returns this
 */
proto.event.backend.AcquireSellReq.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.CreateSeatMapRes.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.CreateSeatMapRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.CreateSeatMapRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.CreateSeatMapRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.CreateSeatMapRes}
 */
proto.event.backend.CreateSeatMapRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.CreateSeatMapRes;
  return proto.event.backend.CreateSeatMapRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.CreateSeatMapRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.CreateSeatMapRes}
 */
proto.event.backend.CreateSeatMapRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.CreateSeatMapRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.CreateSeatMapRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.CreateSeatMapRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.CreateSeatMapRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.backend.CreateSeatMapRes.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.CreateSeatMapRes} returns this
 */
proto.event.backend.CreateSeatMapRes.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.SeatBlockRes.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.SeatBlockRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.SeatBlockRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.SeatBlockRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.event.backend.SeatBlock.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.SeatBlockRes}
 */
proto.event.backend.SeatBlockRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.SeatBlockRes;
  return proto.event.backend.SeatBlockRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.SeatBlockRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.SeatBlockRes}
 */
proto.event.backend.SeatBlockRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.event.backend.SeatBlock;
      reader.readMessage(value,proto.event.backend.SeatBlock.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.SeatBlockRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.SeatBlockRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.SeatBlockRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.SeatBlockRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.event.backend.SeatBlock.serializeBinaryToWriter
    );
  }
};


/**
 * optional SeatBlock info = 1;
 * @return {?proto.event.backend.SeatBlock}
 */
proto.event.backend.SeatBlockRes.prototype.getInfo = function() {
  return /** @type{?proto.event.backend.SeatBlock} */ (
    jspb.Message.getWrapperField(this, proto.event.backend.SeatBlock, 1));
};


/**
 * @param {?proto.event.backend.SeatBlock|undefined} value
 * @return {!proto.event.backend.SeatBlockRes} returns this
*/
proto.event.backend.SeatBlockRes.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.backend.SeatBlockRes} returns this
 */
proto.event.backend.SeatBlockRes.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.backend.SeatBlockRes.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.RetrieveSeatMapRes.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.RetrieveSeatMapRes.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.RetrieveSeatMapRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.RetrieveSeatMapRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.RetrieveSeatMapRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.event.backend.SeatMap.toObject(includeInstance, f),
    priceBlocksList: jspb.Message.toObjectList(msg.getPriceBlocksList(),
    proto.event.backend.SeatBlockRes.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.RetrieveSeatMapRes}
 */
proto.event.backend.RetrieveSeatMapRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.RetrieveSeatMapRes;
  return proto.event.backend.RetrieveSeatMapRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.RetrieveSeatMapRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.RetrieveSeatMapRes}
 */
proto.event.backend.RetrieveSeatMapRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.event.backend.SeatMap;
      reader.readMessage(value,proto.event.backend.SeatMap.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    case 3:
      var value = new proto.event.backend.SeatBlockRes;
      reader.readMessage(value,proto.event.backend.SeatBlockRes.deserializeBinaryFromReader);
      msg.addPriceBlocks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.RetrieveSeatMapRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.RetrieveSeatMapRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.RetrieveSeatMapRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.RetrieveSeatMapRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.event.backend.SeatMap.serializeBinaryToWriter
    );
  }
  f = message.getPriceBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.event.backend.SeatBlockRes.serializeBinaryToWriter
    );
  }
};


/**
 * optional SeatMap info = 2;
 * @return {?proto.event.backend.SeatMap}
 */
proto.event.backend.RetrieveSeatMapRes.prototype.getInfo = function() {
  return /** @type{?proto.event.backend.SeatMap} */ (
    jspb.Message.getWrapperField(this, proto.event.backend.SeatMap, 2));
};


/**
 * @param {?proto.event.backend.SeatMap|undefined} value
 * @return {!proto.event.backend.RetrieveSeatMapRes} returns this
*/
proto.event.backend.RetrieveSeatMapRes.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.backend.RetrieveSeatMapRes} returns this
 */
proto.event.backend.RetrieveSeatMapRes.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.backend.RetrieveSeatMapRes.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated SeatBlockRes price_blocks = 3;
 * @return {!Array<!proto.event.backend.SeatBlockRes>}
 */
proto.event.backend.RetrieveSeatMapRes.prototype.getPriceBlocksList = function() {
  return /** @type{!Array<!proto.event.backend.SeatBlockRes>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.backend.SeatBlockRes, 3));
};


/**
 * @param {!Array<!proto.event.backend.SeatBlockRes>} value
 * @return {!proto.event.backend.RetrieveSeatMapRes} returns this
*/
proto.event.backend.RetrieveSeatMapRes.prototype.setPriceBlocksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.event.backend.SeatBlockRes=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.backend.SeatBlockRes}
 */
proto.event.backend.RetrieveSeatMapRes.prototype.addPriceBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.event.backend.SeatBlockRes, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.RetrieveSeatMapRes} returns this
 */
proto.event.backend.RetrieveSeatMapRes.prototype.clearPriceBlocksList = function() {
  return this.setPriceBlocksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.RetrieveSeatBlockRes.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.RetrieveSeatBlockRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.RetrieveSeatBlockRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.RetrieveSeatBlockRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.event.backend.SeatBlock.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.RetrieveSeatBlockRes}
 */
proto.event.backend.RetrieveSeatBlockRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.RetrieveSeatBlockRes;
  return proto.event.backend.RetrieveSeatBlockRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.RetrieveSeatBlockRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.RetrieveSeatBlockRes}
 */
proto.event.backend.RetrieveSeatBlockRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.event.backend.SeatBlock;
      reader.readMessage(value,proto.event.backend.SeatBlock.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.RetrieveSeatBlockRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.RetrieveSeatBlockRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.RetrieveSeatBlockRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.RetrieveSeatBlockRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.event.backend.SeatBlock.serializeBinaryToWriter
    );
  }
};


/**
 * optional SeatBlock info = 1;
 * @return {?proto.event.backend.SeatBlock}
 */
proto.event.backend.RetrieveSeatBlockRes.prototype.getInfo = function() {
  return /** @type{?proto.event.backend.SeatBlock} */ (
    jspb.Message.getWrapperField(this, proto.event.backend.SeatBlock, 1));
};


/**
 * @param {?proto.event.backend.SeatBlock|undefined} value
 * @return {!proto.event.backend.RetrieveSeatBlockRes} returns this
*/
proto.event.backend.RetrieveSeatBlockRes.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.backend.RetrieveSeatBlockRes} returns this
 */
proto.event.backend.RetrieveSeatBlockRes.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.backend.RetrieveSeatBlockRes.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.ListSeatMapByIdsRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.ListSeatMapByIdsRes.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.ListSeatMapByIdsRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.ListSeatMapByIdsRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.ListSeatMapByIdsRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.event.backend.SeatMap.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.ListSeatMapByIdsRes}
 */
proto.event.backend.ListSeatMapByIdsRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.ListSeatMapByIdsRes;
  return proto.event.backend.ListSeatMapByIdsRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.ListSeatMapByIdsRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.ListSeatMapByIdsRes}
 */
proto.event.backend.ListSeatMapByIdsRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.event.backend.SeatMap;
      reader.readMessage(value,proto.event.backend.SeatMap.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.ListSeatMapByIdsRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.ListSeatMapByIdsRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.ListSeatMapByIdsRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.ListSeatMapByIdsRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.event.backend.SeatMap.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SeatMap items = 1;
 * @return {!Array<!proto.event.backend.SeatMap>}
 */
proto.event.backend.ListSeatMapByIdsRes.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.event.backend.SeatMap>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.backend.SeatMap, 1));
};


/**
 * @param {!Array<!proto.event.backend.SeatMap>} value
 * @return {!proto.event.backend.ListSeatMapByIdsRes} returns this
*/
proto.event.backend.ListSeatMapByIdsRes.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.event.backend.SeatMap=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.backend.SeatMap}
 */
proto.event.backend.ListSeatMapByIdsRes.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.event.backend.SeatMap, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.ListSeatMapByIdsRes} returns this
 */
proto.event.backend.ListSeatMapByIdsRes.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.ListSeatMapDetailByEventIdReq.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.ListSeatMapDetailByEventIdReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.ListSeatMapDetailByEventIdReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.ListSeatMapDetailByEventIdReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.ListSeatMapDetailByEventIdReq}
 */
proto.event.backend.ListSeatMapDetailByEventIdReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.ListSeatMapDetailByEventIdReq;
  return proto.event.backend.ListSeatMapDetailByEventIdReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.ListSeatMapDetailByEventIdReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.ListSeatMapDetailByEventIdReq}
 */
proto.event.backend.ListSeatMapDetailByEventIdReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.ListSeatMapDetailByEventIdReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.ListSeatMapDetailByEventIdReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.ListSeatMapDetailByEventIdReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.ListSeatMapDetailByEventIdReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.backend.ListSeatMapDetailByEventIdReq.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.ListSeatMapDetailByEventIdReq} returns this
 */
proto.event.backend.ListSeatMapDetailByEventIdReq.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.SeatMapDetailByEventIDRes.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.SeatMapDetailByEventIDRes.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.SeatMapDetailByEventIDRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.SeatMapDetailByEventIDRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.SeatMapDetailByEventIDRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.event.backend.SeatMap.toObject(includeInstance, f),
    blocksList: jspb.Message.toObjectList(msg.getBlocksList(),
    proto.event.backend.SeatBlock.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.SeatMapDetailByEventIDRes}
 */
proto.event.backend.SeatMapDetailByEventIDRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.SeatMapDetailByEventIDRes;
  return proto.event.backend.SeatMapDetailByEventIDRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.SeatMapDetailByEventIDRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.SeatMapDetailByEventIDRes}
 */
proto.event.backend.SeatMapDetailByEventIDRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.event.backend.SeatMap;
      reader.readMessage(value,proto.event.backend.SeatMap.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    case 2:
      var value = new proto.event.backend.SeatBlock;
      reader.readMessage(value,proto.event.backend.SeatBlock.deserializeBinaryFromReader);
      msg.addBlocks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.SeatMapDetailByEventIDRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.SeatMapDetailByEventIDRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.SeatMapDetailByEventIDRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.SeatMapDetailByEventIDRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.event.backend.SeatMap.serializeBinaryToWriter
    );
  }
  f = message.getBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.event.backend.SeatBlock.serializeBinaryToWriter
    );
  }
};


/**
 * optional SeatMap info = 1;
 * @return {?proto.event.backend.SeatMap}
 */
proto.event.backend.SeatMapDetailByEventIDRes.prototype.getInfo = function() {
  return /** @type{?proto.event.backend.SeatMap} */ (
    jspb.Message.getWrapperField(this, proto.event.backend.SeatMap, 1));
};


/**
 * @param {?proto.event.backend.SeatMap|undefined} value
 * @return {!proto.event.backend.SeatMapDetailByEventIDRes} returns this
*/
proto.event.backend.SeatMapDetailByEventIDRes.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.backend.SeatMapDetailByEventIDRes} returns this
 */
proto.event.backend.SeatMapDetailByEventIDRes.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.backend.SeatMapDetailByEventIDRes.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated SeatBlock blocks = 2;
 * @return {!Array<!proto.event.backend.SeatBlock>}
 */
proto.event.backend.SeatMapDetailByEventIDRes.prototype.getBlocksList = function() {
  return /** @type{!Array<!proto.event.backend.SeatBlock>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.backend.SeatBlock, 2));
};


/**
 * @param {!Array<!proto.event.backend.SeatBlock>} value
 * @return {!proto.event.backend.SeatMapDetailByEventIDRes} returns this
*/
proto.event.backend.SeatMapDetailByEventIDRes.prototype.setBlocksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.event.backend.SeatBlock=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.backend.SeatBlock}
 */
proto.event.backend.SeatMapDetailByEventIDRes.prototype.addBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.event.backend.SeatBlock, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.SeatMapDetailByEventIDRes} returns this
 */
proto.event.backend.SeatMapDetailByEventIDRes.prototype.clearBlocksList = function() {
  return this.setBlocksList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.ListSeatMapDetailByEventIdRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.ListSeatMapDetailByEventIdRes.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.ListSeatMapDetailByEventIdRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.ListSeatMapDetailByEventIdRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.ListSeatMapDetailByEventIdRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.event.backend.SeatMapDetailByEventIDRes.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.ListSeatMapDetailByEventIdRes}
 */
proto.event.backend.ListSeatMapDetailByEventIdRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.ListSeatMapDetailByEventIdRes;
  return proto.event.backend.ListSeatMapDetailByEventIdRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.ListSeatMapDetailByEventIdRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.ListSeatMapDetailByEventIdRes}
 */
proto.event.backend.ListSeatMapDetailByEventIdRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.event.backend.SeatMapDetailByEventIDRes;
      reader.readMessage(value,proto.event.backend.SeatMapDetailByEventIDRes.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.ListSeatMapDetailByEventIdRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.ListSeatMapDetailByEventIdRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.ListSeatMapDetailByEventIdRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.ListSeatMapDetailByEventIdRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.event.backend.SeatMapDetailByEventIDRes.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SeatMapDetailByEventIDRes items = 1;
 * @return {!Array<!proto.event.backend.SeatMapDetailByEventIDRes>}
 */
proto.event.backend.ListSeatMapDetailByEventIdRes.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.event.backend.SeatMapDetailByEventIDRes>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.backend.SeatMapDetailByEventIDRes, 1));
};


/**
 * @param {!Array<!proto.event.backend.SeatMapDetailByEventIDRes>} value
 * @return {!proto.event.backend.ListSeatMapDetailByEventIdRes} returns this
*/
proto.event.backend.ListSeatMapDetailByEventIdRes.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.event.backend.SeatMapDetailByEventIDRes=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.backend.SeatMapDetailByEventIDRes}
 */
proto.event.backend.ListSeatMapDetailByEventIdRes.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.event.backend.SeatMapDetailByEventIDRes, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.ListSeatMapDetailByEventIdRes} returns this
 */
proto.event.backend.ListSeatMapDetailByEventIdRes.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.InternalListSeatMapDetailByIdsRes.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.InternalListSeatMapDetailByIdsRes.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.InternalListSeatMapDetailByIdsRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.InternalListSeatMapDetailByIdsRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.InternalListSeatMapDetailByIdsRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatMapsList: jspb.Message.toObjectList(msg.getSeatMapsList(),
    proto.event.backend.SeatMap.toObject, includeInstance),
    seatBlocksList: jspb.Message.toObjectList(msg.getSeatBlocksList(),
    proto.event.backend.SeatBlock.toObject, includeInstance),
    seatsList: jspb.Message.toObjectList(msg.getSeatsList(),
    proto.event.backend.Seat.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.InternalListSeatMapDetailByIdsRes}
 */
proto.event.backend.InternalListSeatMapDetailByIdsRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.InternalListSeatMapDetailByIdsRes;
  return proto.event.backend.InternalListSeatMapDetailByIdsRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.InternalListSeatMapDetailByIdsRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.InternalListSeatMapDetailByIdsRes}
 */
proto.event.backend.InternalListSeatMapDetailByIdsRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.event.backend.SeatMap;
      reader.readMessage(value,proto.event.backend.SeatMap.deserializeBinaryFromReader);
      msg.addSeatMaps(value);
      break;
    case 2:
      var value = new proto.event.backend.SeatBlock;
      reader.readMessage(value,proto.event.backend.SeatBlock.deserializeBinaryFromReader);
      msg.addSeatBlocks(value);
      break;
    case 3:
      var value = new proto.event.backend.Seat;
      reader.readMessage(value,proto.event.backend.Seat.deserializeBinaryFromReader);
      msg.addSeats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.InternalListSeatMapDetailByIdsRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.InternalListSeatMapDetailByIdsRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.InternalListSeatMapDetailByIdsRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.InternalListSeatMapDetailByIdsRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatMapsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.event.backend.SeatMap.serializeBinaryToWriter
    );
  }
  f = message.getSeatBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.event.backend.SeatBlock.serializeBinaryToWriter
    );
  }
  f = message.getSeatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.event.backend.Seat.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SeatMap seat_maps = 1;
 * @return {!Array<!proto.event.backend.SeatMap>}
 */
proto.event.backend.InternalListSeatMapDetailByIdsRes.prototype.getSeatMapsList = function() {
  return /** @type{!Array<!proto.event.backend.SeatMap>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.backend.SeatMap, 1));
};


/**
 * @param {!Array<!proto.event.backend.SeatMap>} value
 * @return {!proto.event.backend.InternalListSeatMapDetailByIdsRes} returns this
*/
proto.event.backend.InternalListSeatMapDetailByIdsRes.prototype.setSeatMapsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.event.backend.SeatMap=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.backend.SeatMap}
 */
proto.event.backend.InternalListSeatMapDetailByIdsRes.prototype.addSeatMaps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.event.backend.SeatMap, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.InternalListSeatMapDetailByIdsRes} returns this
 */
proto.event.backend.InternalListSeatMapDetailByIdsRes.prototype.clearSeatMapsList = function() {
  return this.setSeatMapsList([]);
};


/**
 * repeated SeatBlock seat_blocks = 2;
 * @return {!Array<!proto.event.backend.SeatBlock>}
 */
proto.event.backend.InternalListSeatMapDetailByIdsRes.prototype.getSeatBlocksList = function() {
  return /** @type{!Array<!proto.event.backend.SeatBlock>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.backend.SeatBlock, 2));
};


/**
 * @param {!Array<!proto.event.backend.SeatBlock>} value
 * @return {!proto.event.backend.InternalListSeatMapDetailByIdsRes} returns this
*/
proto.event.backend.InternalListSeatMapDetailByIdsRes.prototype.setSeatBlocksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.event.backend.SeatBlock=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.backend.SeatBlock}
 */
proto.event.backend.InternalListSeatMapDetailByIdsRes.prototype.addSeatBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.event.backend.SeatBlock, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.InternalListSeatMapDetailByIdsRes} returns this
 */
proto.event.backend.InternalListSeatMapDetailByIdsRes.prototype.clearSeatBlocksList = function() {
  return this.setSeatBlocksList([]);
};


/**
 * repeated Seat seats = 3;
 * @return {!Array<!proto.event.backend.Seat>}
 */
proto.event.backend.InternalListSeatMapDetailByIdsRes.prototype.getSeatsList = function() {
  return /** @type{!Array<!proto.event.backend.Seat>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.backend.Seat, 3));
};


/**
 * @param {!Array<!proto.event.backend.Seat>} value
 * @return {!proto.event.backend.InternalListSeatMapDetailByIdsRes} returns this
*/
proto.event.backend.InternalListSeatMapDetailByIdsRes.prototype.setSeatsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.event.backend.Seat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.backend.Seat}
 */
proto.event.backend.InternalListSeatMapDetailByIdsRes.prototype.addSeats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.event.backend.Seat, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.InternalListSeatMapDetailByIdsRes} returns this
 */
proto.event.backend.InternalListSeatMapDetailByIdsRes.prototype.clearSeatsList = function() {
  return this.setSeatsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.InternalListSeatBlockBySeatMapIdsReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.InternalListSeatBlockBySeatMapIdsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.InternalListSeatBlockBySeatMapIdsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.InternalListSeatBlockBySeatMapIdsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.InternalListSeatBlockBySeatMapIdsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.InternalListSeatBlockBySeatMapIdsReq}
 */
proto.event.backend.InternalListSeatBlockBySeatMapIdsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.InternalListSeatBlockBySeatMapIdsReq;
  return proto.event.backend.InternalListSeatBlockBySeatMapIdsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.InternalListSeatBlockBySeatMapIdsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.InternalListSeatBlockBySeatMapIdsReq}
 */
proto.event.backend.InternalListSeatBlockBySeatMapIdsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.InternalListSeatBlockBySeatMapIdsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.InternalListSeatBlockBySeatMapIdsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.InternalListSeatBlockBySeatMapIdsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.InternalListSeatBlockBySeatMapIdsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string ids = 1;
 * @return {!Array<string>}
 */
proto.event.backend.InternalListSeatBlockBySeatMapIdsReq.prototype.getIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.backend.InternalListSeatBlockBySeatMapIdsReq} returns this
 */
proto.event.backend.InternalListSeatBlockBySeatMapIdsReq.prototype.setIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.backend.InternalListSeatBlockBySeatMapIdsReq} returns this
 */
proto.event.backend.InternalListSeatBlockBySeatMapIdsReq.prototype.addIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.InternalListSeatBlockBySeatMapIdsReq} returns this
 */
proto.event.backend.InternalListSeatBlockBySeatMapIdsReq.prototype.clearIdsList = function() {
  return this.setIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.InternalListSeatBlockBySeatMapIdsRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.InternalListSeatBlockBySeatMapIdsRes.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.InternalListSeatBlockBySeatMapIdsRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.InternalListSeatBlockBySeatMapIdsRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.InternalListSeatBlockBySeatMapIdsRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.event.backend.SeatBlock.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.InternalListSeatBlockBySeatMapIdsRes}
 */
proto.event.backend.InternalListSeatBlockBySeatMapIdsRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.InternalListSeatBlockBySeatMapIdsRes;
  return proto.event.backend.InternalListSeatBlockBySeatMapIdsRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.InternalListSeatBlockBySeatMapIdsRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.InternalListSeatBlockBySeatMapIdsRes}
 */
proto.event.backend.InternalListSeatBlockBySeatMapIdsRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.event.backend.SeatBlock;
      reader.readMessage(value,proto.event.backend.SeatBlock.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.InternalListSeatBlockBySeatMapIdsRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.InternalListSeatBlockBySeatMapIdsRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.InternalListSeatBlockBySeatMapIdsRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.InternalListSeatBlockBySeatMapIdsRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.event.backend.SeatBlock.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SeatBlock items = 1;
 * @return {!Array<!proto.event.backend.SeatBlock>}
 */
proto.event.backend.InternalListSeatBlockBySeatMapIdsRes.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.event.backend.SeatBlock>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.backend.SeatBlock, 1));
};


/**
 * @param {!Array<!proto.event.backend.SeatBlock>} value
 * @return {!proto.event.backend.InternalListSeatBlockBySeatMapIdsRes} returns this
*/
proto.event.backend.InternalListSeatBlockBySeatMapIdsRes.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.event.backend.SeatBlock=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.backend.SeatBlock}
 */
proto.event.backend.InternalListSeatBlockBySeatMapIdsRes.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.event.backend.SeatBlock, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.InternalListSeatBlockBySeatMapIdsRes} returns this
 */
proto.event.backend.InternalListSeatBlockBySeatMapIdsRes.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.InternalListSeatBySeatBlockIdsReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.InternalListSeatBySeatBlockIdsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.InternalListSeatBySeatBlockIdsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.InternalListSeatBySeatBlockIdsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.InternalListSeatBySeatBlockIdsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.InternalListSeatBySeatBlockIdsReq}
 */
proto.event.backend.InternalListSeatBySeatBlockIdsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.InternalListSeatBySeatBlockIdsReq;
  return proto.event.backend.InternalListSeatBySeatBlockIdsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.InternalListSeatBySeatBlockIdsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.InternalListSeatBySeatBlockIdsReq}
 */
proto.event.backend.InternalListSeatBySeatBlockIdsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.InternalListSeatBySeatBlockIdsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.InternalListSeatBySeatBlockIdsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.InternalListSeatBySeatBlockIdsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.InternalListSeatBySeatBlockIdsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string ids = 1;
 * @return {!Array<string>}
 */
proto.event.backend.InternalListSeatBySeatBlockIdsReq.prototype.getIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.backend.InternalListSeatBySeatBlockIdsReq} returns this
 */
proto.event.backend.InternalListSeatBySeatBlockIdsReq.prototype.setIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.backend.InternalListSeatBySeatBlockIdsReq} returns this
 */
proto.event.backend.InternalListSeatBySeatBlockIdsReq.prototype.addIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.InternalListSeatBySeatBlockIdsReq} returns this
 */
proto.event.backend.InternalListSeatBySeatBlockIdsReq.prototype.clearIdsList = function() {
  return this.setIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.InternalListSeatBySeatBlockIdsRes.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.InternalListSeatBySeatBlockIdsRes.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.InternalListSeatBySeatBlockIdsRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.InternalListSeatBySeatBlockIdsRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.InternalListSeatBySeatBlockIdsRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.event.backend.Seat.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.InternalListSeatBySeatBlockIdsRes}
 */
proto.event.backend.InternalListSeatBySeatBlockIdsRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.InternalListSeatBySeatBlockIdsRes;
  return proto.event.backend.InternalListSeatBySeatBlockIdsRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.InternalListSeatBySeatBlockIdsRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.InternalListSeatBySeatBlockIdsRes}
 */
proto.event.backend.InternalListSeatBySeatBlockIdsRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 12:
      var value = new proto.event.backend.Seat;
      reader.readMessage(value,proto.event.backend.Seat.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.InternalListSeatBySeatBlockIdsRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.InternalListSeatBySeatBlockIdsRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.InternalListSeatBySeatBlockIdsRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.InternalListSeatBySeatBlockIdsRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.event.backend.Seat.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Seat items = 12;
 * @return {!Array<!proto.event.backend.Seat>}
 */
proto.event.backend.InternalListSeatBySeatBlockIdsRes.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.event.backend.Seat>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.backend.Seat, 12));
};


/**
 * @param {!Array<!proto.event.backend.Seat>} value
 * @return {!proto.event.backend.InternalListSeatBySeatBlockIdsRes} returns this
*/
proto.event.backend.InternalListSeatBySeatBlockIdsRes.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.event.backend.Seat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.backend.Seat}
 */
proto.event.backend.InternalListSeatBySeatBlockIdsRes.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.event.backend.Seat, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.InternalListSeatBySeatBlockIdsRes} returns this
 */
proto.event.backend.InternalListSeatBySeatBlockIdsRes.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.AcquireRes.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.AcquireRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.AcquireRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.AcquireRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    isSuccess: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    errorSeatsMap: (f = msg.getErrorSeatsMap()) ? f.toObject(includeInstance, undefined) : [],
    errorBlocksMap: (f = msg.getErrorBlocksMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.AcquireRes}
 */
proto.event.backend.AcquireRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.AcquireRes;
  return proto.event.backend.AcquireRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.AcquireRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.AcquireRes}
 */
proto.event.backend.AcquireRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSuccess(value);
      break;
    case 2:
      var value = msg.getErrorSeatsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 3:
      var value = msg.getErrorBlocksMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.AcquireRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.AcquireRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.AcquireRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.AcquireRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrorSeatsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getErrorBlocksMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional bool is_success = 1;
 * @return {boolean}
 */
proto.event.backend.AcquireRes.prototype.getIsSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.backend.AcquireRes} returns this
 */
proto.event.backend.AcquireRes.prototype.setIsSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * map<string, string> error_seats = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.event.backend.AcquireRes.prototype.getErrorSeatsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.event.backend.AcquireRes} returns this
 */
proto.event.backend.AcquireRes.prototype.clearErrorSeatsMap = function() {
  this.getErrorSeatsMap().clear();
  return this;};


/**
 * map<string, string> error_blocks = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.event.backend.AcquireRes.prototype.getErrorBlocksMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.event.backend.AcquireRes} returns this
 */
proto.event.backend.AcquireRes.prototype.clearErrorBlocksMap = function() {
  this.getErrorBlocksMap().clear();
  return this;};


/**
 * @enum {number}
 */
proto.event.backend.LockSource = {
  LOCK_SOURCE_INVALID: 0,
  LOCK_SOURCE_PST: 1,
  LOCK_SOURCE_MOBILE: 2
};

/**
 * @enum {number}
 */
proto.event.backend.SeatStatus = {
  SEAT_STATUS_NONE: 0,
  SEAT_STATUS_AVAILABLE: 1,
  SEAT_STATUS_BOOKING: 2,
  SEAT_STATUS_LOCKED: 3,
  SEAT_STATUS_SOLD: 4,
  SEAT_STATUS_DISABLE: 99
};

goog.object.extend(exports, proto.event.backend);
