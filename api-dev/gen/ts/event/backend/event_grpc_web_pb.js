/**
 * @fileoverview gRPC-Web generated client stub for event.backend
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.20.3
// source: event/backend/event.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var base_base_pb = require('../../base/base_pb.js')

var event_enum_event_state_pb = require('../../event/enum/event_state_pb.js')
const proto = {};
proto.event = {};
proto.event.backend = require('./event_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.event.backend.EventServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.event.backend.EventServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.backend.SearchEventsByNameReq,
 *   !proto.event.backend.SearchEventsByNameRes>}
 */
const methodDescriptor_EventService_SearchEventsByName = new grpc.web.MethodDescriptor(
  '/event.backend.EventService/SearchEventsByName',
  grpc.web.MethodType.UNARY,
  proto.event.backend.SearchEventsByNameReq,
  proto.event.backend.SearchEventsByNameRes,
  /**
   * @param {!proto.event.backend.SearchEventsByNameReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.event.backend.SearchEventsByNameRes.deserializeBinary
);


/**
 * @param {!proto.event.backend.SearchEventsByNameReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.event.backend.SearchEventsByNameRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.event.backend.SearchEventsByNameRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.backend.EventServiceClient.prototype.searchEventsByName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.backend.EventService/SearchEventsByName',
      request,
      metadata || {},
      methodDescriptor_EventService_SearchEventsByName,
      callback);
};


/**
 * @param {!proto.event.backend.SearchEventsByNameReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.event.backend.SearchEventsByNameRes>}
 *     Promise that resolves to the response
 */
proto.event.backend.EventServicePromiseClient.prototype.searchEventsByName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.backend.EventService/SearchEventsByName',
      request,
      metadata || {},
      methodDescriptor_EventService_SearchEventsByName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.backend.RetrieveSimpleEventReq,
 *   !proto.event.backend.RetrieveSimpleEventRes>}
 */
const methodDescriptor_EventService_RetrieveSimpleEvent = new grpc.web.MethodDescriptor(
  '/event.backend.EventService/RetrieveSimpleEvent',
  grpc.web.MethodType.UNARY,
  proto.event.backend.RetrieveSimpleEventReq,
  proto.event.backend.RetrieveSimpleEventRes,
  /**
   * @param {!proto.event.backend.RetrieveSimpleEventReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.event.backend.RetrieveSimpleEventRes.deserializeBinary
);


/**
 * @param {!proto.event.backend.RetrieveSimpleEventReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.event.backend.RetrieveSimpleEventRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.event.backend.RetrieveSimpleEventRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.backend.EventServiceClient.prototype.retrieveSimpleEvent =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.backend.EventService/RetrieveSimpleEvent',
      request,
      metadata || {},
      methodDescriptor_EventService_RetrieveSimpleEvent,
      callback);
};


/**
 * @param {!proto.event.backend.RetrieveSimpleEventReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.event.backend.RetrieveSimpleEventRes>}
 *     Promise that resolves to the response
 */
proto.event.backend.EventServicePromiseClient.prototype.retrieveSimpleEvent =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.backend.EventService/RetrieveSimpleEvent',
      request,
      metadata || {},
      methodDescriptor_EventService_RetrieveSimpleEvent);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.backend.RetrieveSimpleEventReq,
 *   !proto.base.Empty>}
 */
const methodDescriptor_EventService_AggregateEvent = new grpc.web.MethodDescriptor(
  '/event.backend.EventService/AggregateEvent',
  grpc.web.MethodType.UNARY,
  proto.event.backend.RetrieveSimpleEventReq,
  base_base_pb.Empty,
  /**
   * @param {!proto.event.backend.RetrieveSimpleEventReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  base_base_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.event.backend.RetrieveSimpleEventReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.base.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.base.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.backend.EventServiceClient.prototype.aggregateEvent =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.backend.EventService/AggregateEvent',
      request,
      metadata || {},
      methodDescriptor_EventService_AggregateEvent,
      callback);
};


/**
 * @param {!proto.event.backend.RetrieveSimpleEventReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.base.Empty>}
 *     Promise that resolves to the response
 */
proto.event.backend.EventServicePromiseClient.prototype.aggregateEvent =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.backend.EventService/AggregateEvent',
      request,
      metadata || {},
      methodDescriptor_EventService_AggregateEvent);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.backend.GetProductEventsInfoReq,
 *   !proto.event.backend.GetProductEventsInfoRes>}
 */
const methodDescriptor_EventService_GetProductEventsInfo = new grpc.web.MethodDescriptor(
  '/event.backend.EventService/GetProductEventsInfo',
  grpc.web.MethodType.UNARY,
  proto.event.backend.GetProductEventsInfoReq,
  proto.event.backend.GetProductEventsInfoRes,
  /**
   * @param {!proto.event.backend.GetProductEventsInfoReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.event.backend.GetProductEventsInfoRes.deserializeBinary
);


/**
 * @param {!proto.event.backend.GetProductEventsInfoReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.event.backend.GetProductEventsInfoRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.event.backend.GetProductEventsInfoRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.backend.EventServiceClient.prototype.getProductEventsInfo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.backend.EventService/GetProductEventsInfo',
      request,
      metadata || {},
      methodDescriptor_EventService_GetProductEventsInfo,
      callback);
};


/**
 * @param {!proto.event.backend.GetProductEventsInfoReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.event.backend.GetProductEventsInfoRes>}
 *     Promise that resolves to the response
 */
proto.event.backend.EventServicePromiseClient.prototype.getProductEventsInfo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.backend.EventService/GetProductEventsInfo',
      request,
      metadata || {},
      methodDescriptor_EventService_GetProductEventsInfo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.backend.ListScheduleByEventIDReq,
 *   !proto.event.backend.ListScheduleByEventIDRes>}
 */
const methodDescriptor_EventService_InternalListScheduleByEventID = new grpc.web.MethodDescriptor(
  '/event.backend.EventService/InternalListScheduleByEventID',
  grpc.web.MethodType.UNARY,
  proto.event.backend.ListScheduleByEventIDReq,
  proto.event.backend.ListScheduleByEventIDRes,
  /**
   * @param {!proto.event.backend.ListScheduleByEventIDReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.event.backend.ListScheduleByEventIDRes.deserializeBinary
);


/**
 * @param {!proto.event.backend.ListScheduleByEventIDReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.event.backend.ListScheduleByEventIDRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.event.backend.ListScheduleByEventIDRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.backend.EventServiceClient.prototype.internalListScheduleByEventID =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.backend.EventService/InternalListScheduleByEventID',
      request,
      metadata || {},
      methodDescriptor_EventService_InternalListScheduleByEventID,
      callback);
};


/**
 * @param {!proto.event.backend.ListScheduleByEventIDReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.event.backend.ListScheduleByEventIDRes>}
 *     Promise that resolves to the response
 */
proto.event.backend.EventServicePromiseClient.prototype.internalListScheduleByEventID =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.backend.EventService/InternalListScheduleByEventID',
      request,
      metadata || {},
      methodDescriptor_EventService_InternalListScheduleByEventID);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.backend.InternalUpdateEventStateReq,
 *   !proto.base.Empty>}
 */
const methodDescriptor_EventService_InternalUpdateEventState = new grpc.web.MethodDescriptor(
  '/event.backend.EventService/InternalUpdateEventState',
  grpc.web.MethodType.UNARY,
  proto.event.backend.InternalUpdateEventStateReq,
  base_base_pb.Empty,
  /**
   * @param {!proto.event.backend.InternalUpdateEventStateReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  base_base_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.event.backend.InternalUpdateEventStateReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.base.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.base.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.backend.EventServiceClient.prototype.internalUpdateEventState =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.backend.EventService/InternalUpdateEventState',
      request,
      metadata || {},
      methodDescriptor_EventService_InternalUpdateEventState,
      callback);
};


/**
 * @param {!proto.event.backend.InternalUpdateEventStateReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.base.Empty>}
 *     Promise that resolves to the response
 */
proto.event.backend.EventServicePromiseClient.prototype.internalUpdateEventState =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.backend.EventService/InternalUpdateEventState',
      request,
      metadata || {},
      methodDescriptor_EventService_InternalUpdateEventState);
};


module.exports = proto.event.backend;

