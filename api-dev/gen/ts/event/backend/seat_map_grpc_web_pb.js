/**
 * @fileoverview gRPC-Web generated client stub for event.backend
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.20.3
// source: event/backend/seat_map.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var event_backend_base_pb = require('../../event/backend/base_pb.js')

var base_base_pb = require('../../base/base_pb.js')
const proto = {};
proto.event = {};
proto.event.backend = require('./seat_map_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.event.backend.SeatMapServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.event.backend.SeatMapServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.backend.RetrieveSeatBlockReq,
 *   !proto.event.backend.RetrieveSeatBlockRes>}
 */
const methodDescriptor_SeatMapService_RetrieveSeatBlock = new grpc.web.MethodDescriptor(
  '/event.backend.SeatMapService/RetrieveSeatBlock',
  grpc.web.MethodType.UNARY,
  proto.event.backend.RetrieveSeatBlockReq,
  proto.event.backend.RetrieveSeatBlockRes,
  /**
   * @param {!proto.event.backend.RetrieveSeatBlockReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.event.backend.RetrieveSeatBlockRes.deserializeBinary
);


/**
 * @param {!proto.event.backend.RetrieveSeatBlockReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.event.backend.RetrieveSeatBlockRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.event.backend.RetrieveSeatBlockRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.backend.SeatMapServiceClient.prototype.retrieveSeatBlock =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.backend.SeatMapService/RetrieveSeatBlock',
      request,
      metadata || {},
      methodDescriptor_SeatMapService_RetrieveSeatBlock,
      callback);
};


/**
 * @param {!proto.event.backend.RetrieveSeatBlockReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.event.backend.RetrieveSeatBlockRes>}
 *     Promise that resolves to the response
 */
proto.event.backend.SeatMapServicePromiseClient.prototype.retrieveSeatBlock =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.backend.SeatMapService/RetrieveSeatBlock',
      request,
      metadata || {},
      methodDescriptor_SeatMapService_RetrieveSeatBlock);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.backend.ListSeatMapByIdsReq,
 *   !proto.event.backend.ListSeatMapByIdsRes>}
 */
const methodDescriptor_SeatMapService_InternalListSeatMapByIds = new grpc.web.MethodDescriptor(
  '/event.backend.SeatMapService/InternalListSeatMapByIds',
  grpc.web.MethodType.UNARY,
  proto.event.backend.ListSeatMapByIdsReq,
  proto.event.backend.ListSeatMapByIdsRes,
  /**
   * @param {!proto.event.backend.ListSeatMapByIdsReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.event.backend.ListSeatMapByIdsRes.deserializeBinary
);


/**
 * @param {!proto.event.backend.ListSeatMapByIdsReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.event.backend.ListSeatMapByIdsRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.event.backend.ListSeatMapByIdsRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.backend.SeatMapServiceClient.prototype.internalListSeatMapByIds =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.backend.SeatMapService/InternalListSeatMapByIds',
      request,
      metadata || {},
      methodDescriptor_SeatMapService_InternalListSeatMapByIds,
      callback);
};


/**
 * @param {!proto.event.backend.ListSeatMapByIdsReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.event.backend.ListSeatMapByIdsRes>}
 *     Promise that resolves to the response
 */
proto.event.backend.SeatMapServicePromiseClient.prototype.internalListSeatMapByIds =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.backend.SeatMapService/InternalListSeatMapByIds',
      request,
      metadata || {},
      methodDescriptor_SeatMapService_InternalListSeatMapByIds);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.backend.RetrieveSeatMapReq,
 *   !proto.event.backend.RetrieveSeatMapRes>}
 */
const methodDescriptor_SeatMapService_RetrieveSeatMap = new grpc.web.MethodDescriptor(
  '/event.backend.SeatMapService/RetrieveSeatMap',
  grpc.web.MethodType.UNARY,
  proto.event.backend.RetrieveSeatMapReq,
  proto.event.backend.RetrieveSeatMapRes,
  /**
   * @param {!proto.event.backend.RetrieveSeatMapReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.event.backend.RetrieveSeatMapRes.deserializeBinary
);


/**
 * @param {!proto.event.backend.RetrieveSeatMapReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.event.backend.RetrieveSeatMapRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.event.backend.RetrieveSeatMapRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.backend.SeatMapServiceClient.prototype.retrieveSeatMap =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.backend.SeatMapService/RetrieveSeatMap',
      request,
      metadata || {},
      methodDescriptor_SeatMapService_RetrieveSeatMap,
      callback);
};


/**
 * @param {!proto.event.backend.RetrieveSeatMapReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.event.backend.RetrieveSeatMapRes>}
 *     Promise that resolves to the response
 */
proto.event.backend.SeatMapServicePromiseClient.prototype.retrieveSeatMap =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.backend.SeatMapService/RetrieveSeatMap',
      request,
      metadata || {},
      methodDescriptor_SeatMapService_RetrieveSeatMap);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.backend.InternalListSeatMapDetailByIdsReq,
 *   !proto.event.backend.InternalListSeatMapDetailByIdsRes>}
 */
const methodDescriptor_SeatMapService_InternalListSeatMapDetailByIds = new grpc.web.MethodDescriptor(
  '/event.backend.SeatMapService/InternalListSeatMapDetailByIds',
  grpc.web.MethodType.UNARY,
  proto.event.backend.InternalListSeatMapDetailByIdsReq,
  proto.event.backend.InternalListSeatMapDetailByIdsRes,
  /**
   * @param {!proto.event.backend.InternalListSeatMapDetailByIdsReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.event.backend.InternalListSeatMapDetailByIdsRes.deserializeBinary
);


/**
 * @param {!proto.event.backend.InternalListSeatMapDetailByIdsReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.event.backend.InternalListSeatMapDetailByIdsRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.event.backend.InternalListSeatMapDetailByIdsRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.backend.SeatMapServiceClient.prototype.internalListSeatMapDetailByIds =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.backend.SeatMapService/InternalListSeatMapDetailByIds',
      request,
      metadata || {},
      methodDescriptor_SeatMapService_InternalListSeatMapDetailByIds,
      callback);
};


/**
 * @param {!proto.event.backend.InternalListSeatMapDetailByIdsReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.event.backend.InternalListSeatMapDetailByIdsRes>}
 *     Promise that resolves to the response
 */
proto.event.backend.SeatMapServicePromiseClient.prototype.internalListSeatMapDetailByIds =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.backend.SeatMapService/InternalListSeatMapDetailByIds',
      request,
      metadata || {},
      methodDescriptor_SeatMapService_InternalListSeatMapDetailByIds);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.backend.AssociateScheduleReq,
 *   !proto.base.Empty>}
 */
const methodDescriptor_SeatMapService_AssociateSchedule = new grpc.web.MethodDescriptor(
  '/event.backend.SeatMapService/AssociateSchedule',
  grpc.web.MethodType.UNARY,
  proto.event.backend.AssociateScheduleReq,
  base_base_pb.Empty,
  /**
   * @param {!proto.event.backend.AssociateScheduleReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  base_base_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.event.backend.AssociateScheduleReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.base.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.base.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.backend.SeatMapServiceClient.prototype.associateSchedule =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.backend.SeatMapService/AssociateSchedule',
      request,
      metadata || {},
      methodDescriptor_SeatMapService_AssociateSchedule,
      callback);
};


/**
 * @param {!proto.event.backend.AssociateScheduleReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.base.Empty>}
 *     Promise that resolves to the response
 */
proto.event.backend.SeatMapServicePromiseClient.prototype.associateSchedule =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.backend.SeatMapService/AssociateSchedule',
      request,
      metadata || {},
      methodDescriptor_SeatMapService_AssociateSchedule);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.backend.ListSeatMapDetailByEventIdReq,
 *   !proto.event.backend.ListSeatMapDetailByEventIdRes>}
 */
const methodDescriptor_SeatMapService_InternalListSeatMapDetailByEventId = new grpc.web.MethodDescriptor(
  '/event.backend.SeatMapService/InternalListSeatMapDetailByEventId',
  grpc.web.MethodType.UNARY,
  proto.event.backend.ListSeatMapDetailByEventIdReq,
  proto.event.backend.ListSeatMapDetailByEventIdRes,
  /**
   * @param {!proto.event.backend.ListSeatMapDetailByEventIdReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.event.backend.ListSeatMapDetailByEventIdRes.deserializeBinary
);


/**
 * @param {!proto.event.backend.ListSeatMapDetailByEventIdReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.event.backend.ListSeatMapDetailByEventIdRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.event.backend.ListSeatMapDetailByEventIdRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.backend.SeatMapServiceClient.prototype.internalListSeatMapDetailByEventId =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.backend.SeatMapService/InternalListSeatMapDetailByEventId',
      request,
      metadata || {},
      methodDescriptor_SeatMapService_InternalListSeatMapDetailByEventId,
      callback);
};


/**
 * @param {!proto.event.backend.ListSeatMapDetailByEventIdReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.event.backend.ListSeatMapDetailByEventIdRes>}
 *     Promise that resolves to the response
 */
proto.event.backend.SeatMapServicePromiseClient.prototype.internalListSeatMapDetailByEventId =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.backend.SeatMapService/InternalListSeatMapDetailByEventId',
      request,
      metadata || {},
      methodDescriptor_SeatMapService_InternalListSeatMapDetailByEventId);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.backend.InternalListSeatBlockBySeatMapIdsReq,
 *   !proto.event.backend.InternalListSeatBlockBySeatMapIdsRes>}
 */
const methodDescriptor_SeatMapService_InternalListSeatBlockBySeatMapIds = new grpc.web.MethodDescriptor(
  '/event.backend.SeatMapService/InternalListSeatBlockBySeatMapIds',
  grpc.web.MethodType.UNARY,
  proto.event.backend.InternalListSeatBlockBySeatMapIdsReq,
  proto.event.backend.InternalListSeatBlockBySeatMapIdsRes,
  /**
   * @param {!proto.event.backend.InternalListSeatBlockBySeatMapIdsReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.event.backend.InternalListSeatBlockBySeatMapIdsRes.deserializeBinary
);


/**
 * @param {!proto.event.backend.InternalListSeatBlockBySeatMapIdsReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.event.backend.InternalListSeatBlockBySeatMapIdsRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.event.backend.InternalListSeatBlockBySeatMapIdsRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.backend.SeatMapServiceClient.prototype.internalListSeatBlockBySeatMapIds =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.backend.SeatMapService/InternalListSeatBlockBySeatMapIds',
      request,
      metadata || {},
      methodDescriptor_SeatMapService_InternalListSeatBlockBySeatMapIds,
      callback);
};


/**
 * @param {!proto.event.backend.InternalListSeatBlockBySeatMapIdsReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.event.backend.InternalListSeatBlockBySeatMapIdsRes>}
 *     Promise that resolves to the response
 */
proto.event.backend.SeatMapServicePromiseClient.prototype.internalListSeatBlockBySeatMapIds =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.backend.SeatMapService/InternalListSeatBlockBySeatMapIds',
      request,
      metadata || {},
      methodDescriptor_SeatMapService_InternalListSeatBlockBySeatMapIds);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.backend.InternalListSeatBySeatBlockIdsReq,
 *   !proto.event.backend.InternalListSeatBySeatBlockIdsRes>}
 */
const methodDescriptor_SeatMapService_InternalListSeatBySeatBlockIds = new grpc.web.MethodDescriptor(
  '/event.backend.SeatMapService/InternalListSeatBySeatBlockIds',
  grpc.web.MethodType.UNARY,
  proto.event.backend.InternalListSeatBySeatBlockIdsReq,
  proto.event.backend.InternalListSeatBySeatBlockIdsRes,
  /**
   * @param {!proto.event.backend.InternalListSeatBySeatBlockIdsReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.event.backend.InternalListSeatBySeatBlockIdsRes.deserializeBinary
);


/**
 * @param {!proto.event.backend.InternalListSeatBySeatBlockIdsReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.event.backend.InternalListSeatBySeatBlockIdsRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.event.backend.InternalListSeatBySeatBlockIdsRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.backend.SeatMapServiceClient.prototype.internalListSeatBySeatBlockIds =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.backend.SeatMapService/InternalListSeatBySeatBlockIds',
      request,
      metadata || {},
      methodDescriptor_SeatMapService_InternalListSeatBySeatBlockIds,
      callback);
};


/**
 * @param {!proto.event.backend.InternalListSeatBySeatBlockIdsReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.event.backend.InternalListSeatBySeatBlockIdsRes>}
 *     Promise that resolves to the response
 */
proto.event.backend.SeatMapServicePromiseClient.prototype.internalListSeatBySeatBlockIds =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.backend.SeatMapService/InternalListSeatBySeatBlockIds',
      request,
      metadata || {},
      methodDescriptor_SeatMapService_InternalListSeatBySeatBlockIds);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.backend.AcquireLockReq,
 *   !proto.event.backend.AcquireRes>}
 */
const methodDescriptor_SeatMapService_AcquireLock = new grpc.web.MethodDescriptor(
  '/event.backend.SeatMapService/AcquireLock',
  grpc.web.MethodType.UNARY,
  proto.event.backend.AcquireLockReq,
  proto.event.backend.AcquireRes,
  /**
   * @param {!proto.event.backend.AcquireLockReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.event.backend.AcquireRes.deserializeBinary
);


/**
 * @param {!proto.event.backend.AcquireLockReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.event.backend.AcquireRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.event.backend.AcquireRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.backend.SeatMapServiceClient.prototype.acquireLock =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.backend.SeatMapService/AcquireLock',
      request,
      metadata || {},
      methodDescriptor_SeatMapService_AcquireLock,
      callback);
};


/**
 * @param {!proto.event.backend.AcquireLockReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.event.backend.AcquireRes>}
 *     Promise that resolves to the response
 */
proto.event.backend.SeatMapServicePromiseClient.prototype.acquireLock =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.backend.SeatMapService/AcquireLock',
      request,
      metadata || {},
      methodDescriptor_SeatMapService_AcquireLock);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.backend.AcquireSellReq,
 *   !proto.event.backend.AcquireRes>}
 */
const methodDescriptor_SeatMapService_AcquireSell = new grpc.web.MethodDescriptor(
  '/event.backend.SeatMapService/AcquireSell',
  grpc.web.MethodType.UNARY,
  proto.event.backend.AcquireSellReq,
  proto.event.backend.AcquireRes,
  /**
   * @param {!proto.event.backend.AcquireSellReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.event.backend.AcquireRes.deserializeBinary
);


/**
 * @param {!proto.event.backend.AcquireSellReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.event.backend.AcquireRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.event.backend.AcquireRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.backend.SeatMapServiceClient.prototype.acquireSell =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.backend.SeatMapService/AcquireSell',
      request,
      metadata || {},
      methodDescriptor_SeatMapService_AcquireSell,
      callback);
};


/**
 * @param {!proto.event.backend.AcquireSellReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.event.backend.AcquireRes>}
 *     Promise that resolves to the response
 */
proto.event.backend.SeatMapServicePromiseClient.prototype.acquireSell =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.backend.SeatMapService/AcquireSell',
      request,
      metadata || {},
      methodDescriptor_SeatMapService_AcquireSell);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.backend.ReleaseLockReq,
 *   !proto.event.backend.AcquireRes>}
 */
const methodDescriptor_SeatMapService_ReleaseLock = new grpc.web.MethodDescriptor(
  '/event.backend.SeatMapService/ReleaseLock',
  grpc.web.MethodType.UNARY,
  proto.event.backend.ReleaseLockReq,
  proto.event.backend.AcquireRes,
  /**
   * @param {!proto.event.backend.ReleaseLockReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.event.backend.AcquireRes.deserializeBinary
);


/**
 * @param {!proto.event.backend.ReleaseLockReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.event.backend.AcquireRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.event.backend.AcquireRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.backend.SeatMapServiceClient.prototype.releaseLock =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.backend.SeatMapService/ReleaseLock',
      request,
      metadata || {},
      methodDescriptor_SeatMapService_ReleaseLock,
      callback);
};


/**
 * @param {!proto.event.backend.ReleaseLockReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.event.backend.AcquireRes>}
 *     Promise that resolves to the response
 */
proto.event.backend.SeatMapServicePromiseClient.prototype.releaseLock =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.backend.SeatMapService/ReleaseLock',
      request,
      metadata || {},
      methodDescriptor_SeatMapService_ReleaseLock);
};


module.exports = proto.event.backend;

