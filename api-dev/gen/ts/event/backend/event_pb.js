// source: event/backend/event.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var base_base_pb = require('../../base/base_pb.js');
goog.object.extend(proto, base_base_pb);
var event_enum_event_state_pb = require('../../event/enum/event_state_pb.js');
goog.object.extend(proto, event_enum_event_state_pb);
goog.exportSymbol('proto.event.backend.EventArtist', null, global);
goog.exportSymbol('proto.event.backend.EventArtistTypeInfo', null, global);
goog.exportSymbol('proto.event.backend.EventBasicInfo', null, global);
goog.exportSymbol('proto.event.backend.EventCurrencyInfo', null, global);
goog.exportSymbol('proto.event.backend.EventForm', null, global);
goog.exportSymbol('proto.event.backend.EventLocation', null, global);
goog.exportSymbol('proto.event.backend.EventSchedule', null, global);
goog.exportSymbol('proto.event.backend.EventSeatMaps', null, global);
goog.exportSymbol('proto.event.backend.EventSimpleInfo', null, global);
goog.exportSymbol('proto.event.backend.EventSponsor', null, global);
goog.exportSymbol('proto.event.backend.EventSponsorLevelInfo', null, global);
goog.exportSymbol('proto.event.backend.GetProductEventsInfoReq', null, global);
goog.exportSymbol('proto.event.backend.GetProductEventsInfoRes', null, global);
goog.exportSymbol('proto.event.backend.InternalUpdateEventStateReq', null, global);
goog.exportSymbol('proto.event.backend.ListScheduleByEventIDReq', null, global);
goog.exportSymbol('proto.event.backend.ListScheduleByEventIDRes', null, global);
goog.exportSymbol('proto.event.backend.ProductEventInfo', null, global);
goog.exportSymbol('proto.event.backend.ProductEventScheduleInfo', null, global);
goog.exportSymbol('proto.event.backend.ProductEventSeatBlockInfo', null, global);
goog.exportSymbol('proto.event.backend.ProductEventSeatInfo', null, global);
goog.exportSymbol('proto.event.backend.RetrieveSimpleEventReq', null, global);
goog.exportSymbol('proto.event.backend.RetrieveSimpleEventRes', null, global);
goog.exportSymbol('proto.event.backend.SearchEventsByNameReq', null, global);
goog.exportSymbol('proto.event.backend.SearchEventsByNameRes', null, global);
goog.exportSymbol('proto.event.backend.SearchProductEventSchedule', null, global);
goog.exportSymbol('proto.event.backend.SearchProductEventSeatMap', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.EventBasicInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.EventBasicInfo.repeatedFields_, null);
};
goog.inherits(proto.event.backend.EventBasicInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.EventBasicInfo.displayName = 'proto.event.backend.EventBasicInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.EventSimpleInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.EventSimpleInfo.repeatedFields_, null);
};
goog.inherits(proto.event.backend.EventSimpleInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.EventSimpleInfo.displayName = 'proto.event.backend.EventSimpleInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.EventCurrencyInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.EventCurrencyInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.EventCurrencyInfo.displayName = 'proto.event.backend.EventCurrencyInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.EventLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.EventLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.EventLocation.displayName = 'proto.event.backend.EventLocation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.EventSeatMaps = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.EventSeatMaps, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.EventSeatMaps.displayName = 'proto.event.backend.EventSeatMaps';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.EventSponsor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.EventSponsor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.EventSponsor.displayName = 'proto.event.backend.EventSponsor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.EventSponsorLevelInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.EventSponsorLevelInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.EventSponsorLevelInfo.displayName = 'proto.event.backend.EventSponsorLevelInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.EventSchedule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.EventSchedule.repeatedFields_, null);
};
goog.inherits(proto.event.backend.EventSchedule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.EventSchedule.displayName = 'proto.event.backend.EventSchedule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.EventArtist = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.EventArtist.repeatedFields_, null);
};
goog.inherits(proto.event.backend.EventArtist, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.EventArtist.displayName = 'proto.event.backend.EventArtist';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.EventArtistTypeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.EventArtistTypeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.EventArtistTypeInfo.displayName = 'proto.event.backend.EventArtistTypeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.ProductEventInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.ProductEventInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.ProductEventInfo.displayName = 'proto.event.backend.ProductEventInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.ProductEventScheduleInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.ProductEventScheduleInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.ProductEventScheduleInfo.displayName = 'proto.event.backend.ProductEventScheduleInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.ProductEventSeatBlockInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.ProductEventSeatBlockInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.ProductEventSeatBlockInfo.displayName = 'proto.event.backend.ProductEventSeatBlockInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.ProductEventSeatInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.ProductEventSeatInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.ProductEventSeatInfo.displayName = 'proto.event.backend.ProductEventSeatInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.SearchProductEventSeatMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.SearchProductEventSeatMap.repeatedFields_, null);
};
goog.inherits(proto.event.backend.SearchProductEventSeatMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.SearchProductEventSeatMap.displayName = 'proto.event.backend.SearchProductEventSeatMap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.SearchProductEventSchedule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.SearchProductEventSchedule.repeatedFields_, null);
};
goog.inherits(proto.event.backend.SearchProductEventSchedule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.SearchProductEventSchedule.displayName = 'proto.event.backend.SearchProductEventSchedule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.RetrieveSimpleEventReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.RetrieveSimpleEventReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.RetrieveSimpleEventReq.displayName = 'proto.event.backend.RetrieveSimpleEventReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.SearchEventsByNameReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.SearchEventsByNameReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.SearchEventsByNameReq.displayName = 'proto.event.backend.SearchEventsByNameReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.GetProductEventsInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.GetProductEventsInfoReq.repeatedFields_, null);
};
goog.inherits(proto.event.backend.GetProductEventsInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.GetProductEventsInfoReq.displayName = 'proto.event.backend.GetProductEventsInfoReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.RetrieveSimpleEventRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.RetrieveSimpleEventRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.RetrieveSimpleEventRes.displayName = 'proto.event.backend.RetrieveSimpleEventRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.SearchEventsByNameRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.SearchEventsByNameRes.repeatedFields_, null);
};
goog.inherits(proto.event.backend.SearchEventsByNameRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.SearchEventsByNameRes.displayName = 'proto.event.backend.SearchEventsByNameRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.GetProductEventsInfoRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.GetProductEventsInfoRes.repeatedFields_, null);
};
goog.inherits(proto.event.backend.GetProductEventsInfoRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.GetProductEventsInfoRes.displayName = 'proto.event.backend.GetProductEventsInfoRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.ListScheduleByEventIDReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.ListScheduleByEventIDReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.ListScheduleByEventIDReq.displayName = 'proto.event.backend.ListScheduleByEventIDReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.ListScheduleByEventIDRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.backend.ListScheduleByEventIDRes.repeatedFields_, null);
};
goog.inherits(proto.event.backend.ListScheduleByEventIDRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.ListScheduleByEventIDRes.displayName = 'proto.event.backend.ListScheduleByEventIDRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.backend.InternalUpdateEventStateReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.backend.InternalUpdateEventStateReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.backend.InternalUpdateEventStateReq.displayName = 'proto.event.backend.InternalUpdateEventStateReq';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.EventBasicInfo.repeatedFields_ = [3,4,5,6,8,21];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.EventBasicInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.EventBasicInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.EventBasicInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.EventBasicInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, ""),
    eventImageUrlsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    artistsList: jspb.Message.toObjectList(msg.getArtistsList(),
    proto.event.backend.EventArtist.toObject, includeInstance),
    hashTagsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    programsImageUrlsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    description: jspb.Message.getFieldWithDefault(msg, 7, ""),
    schedulesList: jspb.Message.toObjectList(msg.getSchedulesList(),
    proto.event.backend.EventSchedule.toObject, includeInstance),
    isHot: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    isPublic: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    duration: jspb.Message.getFieldWithDefault(msg, 12, 0),
    numberOfTickets: jspb.Message.getFieldWithDefault(msg, 16, 0),
    minTicketPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 0.0),
    maxTicketPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, 0.0),
    currency: (f = msg.getCurrency()) && proto.event.backend.EventCurrencyInfo.toObject(includeInstance, f),
    location: (f = msg.getLocation()) && proto.event.backend.EventLocation.toObject(includeInstance, f),
    sponsorsList: jspb.Message.toObjectList(msg.getSponsorsList(),
    proto.event.backend.EventSponsor.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.EventBasicInfo}
 */
proto.event.backend.EventBasicInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.EventBasicInfo;
  return proto.event.backend.EventBasicInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.EventBasicInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.EventBasicInfo}
 */
proto.event.backend.EventBasicInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addEventImageUrls(value);
      break;
    case 4:
      var value = new proto.event.backend.EventArtist;
      reader.readMessage(value,proto.event.backend.EventArtist.deserializeBinaryFromReader);
      msg.addArtists(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addHashTags(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addProgramsImageUrls(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 8:
      var value = new proto.event.backend.EventSchedule;
      reader.readMessage(value,proto.event.backend.EventSchedule.deserializeBinaryFromReader);
      msg.addSchedules(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsHot(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPublic(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDuration(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumberOfTickets(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinTicketPrice(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxTicketPrice(value);
      break;
    case 19:
      var value = new proto.event.backend.EventCurrencyInfo;
      reader.readMessage(value,proto.event.backend.EventCurrencyInfo.deserializeBinaryFromReader);
      msg.setCurrency(value);
      break;
    case 20:
      var value = new proto.event.backend.EventLocation;
      reader.readMessage(value,proto.event.backend.EventLocation.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 21:
      var value = new proto.event.backend.EventSponsor;
      reader.readMessage(value,proto.event.backend.EventSponsor.deserializeBinaryFromReader);
      msg.addSponsors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.EventBasicInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.EventBasicInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.EventBasicInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.EventBasicInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEventImageUrlsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getArtistsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.event.backend.EventArtist.serializeBinaryToWriter
    );
  }
  f = message.getHashTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getProgramsImageUrlsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSchedulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.event.backend.EventSchedule.serializeBinaryToWriter
    );
  }
  f = message.getIsHot();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getIsPublic();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getNumberOfTickets();
  if (f !== 0) {
    writer.writeInt64(
      16,
      f
    );
  }
  f = message.getMinTicketPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = message.getMaxTicketPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = message.getCurrency();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.event.backend.EventCurrencyInfo.serializeBinaryToWriter
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.event.backend.EventLocation.serializeBinaryToWriter
    );
  }
  f = message.getSponsorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      21,
      f,
      proto.event.backend.EventSponsor.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.event.backend.EventBasicInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventBasicInfo} returns this
 */
proto.event.backend.EventBasicInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.event.backend.EventBasicInfo.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventBasicInfo} returns this
 */
proto.event.backend.EventBasicInfo.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string event_image_urls = 3;
 * @return {!Array<string>}
 */
proto.event.backend.EventBasicInfo.prototype.getEventImageUrlsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.backend.EventBasicInfo} returns this
 */
proto.event.backend.EventBasicInfo.prototype.setEventImageUrlsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.backend.EventBasicInfo} returns this
 */
proto.event.backend.EventBasicInfo.prototype.addEventImageUrls = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.EventBasicInfo} returns this
 */
proto.event.backend.EventBasicInfo.prototype.clearEventImageUrlsList = function() {
  return this.setEventImageUrlsList([]);
};


/**
 * repeated EventArtist artists = 4;
 * @return {!Array<!proto.event.backend.EventArtist>}
 */
proto.event.backend.EventBasicInfo.prototype.getArtistsList = function() {
  return /** @type{!Array<!proto.event.backend.EventArtist>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.backend.EventArtist, 4));
};


/**
 * @param {!Array<!proto.event.backend.EventArtist>} value
 * @return {!proto.event.backend.EventBasicInfo} returns this
*/
proto.event.backend.EventBasicInfo.prototype.setArtistsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.event.backend.EventArtist=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.backend.EventArtist}
 */
proto.event.backend.EventBasicInfo.prototype.addArtists = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.event.backend.EventArtist, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.EventBasicInfo} returns this
 */
proto.event.backend.EventBasicInfo.prototype.clearArtistsList = function() {
  return this.setArtistsList([]);
};


/**
 * repeated string hash_tags = 5;
 * @return {!Array<string>}
 */
proto.event.backend.EventBasicInfo.prototype.getHashTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.backend.EventBasicInfo} returns this
 */
proto.event.backend.EventBasicInfo.prototype.setHashTagsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.backend.EventBasicInfo} returns this
 */
proto.event.backend.EventBasicInfo.prototype.addHashTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.EventBasicInfo} returns this
 */
proto.event.backend.EventBasicInfo.prototype.clearHashTagsList = function() {
  return this.setHashTagsList([]);
};


/**
 * repeated string programs_image_urls = 6;
 * @return {!Array<string>}
 */
proto.event.backend.EventBasicInfo.prototype.getProgramsImageUrlsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.backend.EventBasicInfo} returns this
 */
proto.event.backend.EventBasicInfo.prototype.setProgramsImageUrlsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.backend.EventBasicInfo} returns this
 */
proto.event.backend.EventBasicInfo.prototype.addProgramsImageUrls = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.EventBasicInfo} returns this
 */
proto.event.backend.EventBasicInfo.prototype.clearProgramsImageUrlsList = function() {
  return this.setProgramsImageUrlsList([]);
};


/**
 * optional string description = 7;
 * @return {string}
 */
proto.event.backend.EventBasicInfo.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventBasicInfo} returns this
 */
proto.event.backend.EventBasicInfo.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated EventSchedule schedules = 8;
 * @return {!Array<!proto.event.backend.EventSchedule>}
 */
proto.event.backend.EventBasicInfo.prototype.getSchedulesList = function() {
  return /** @type{!Array<!proto.event.backend.EventSchedule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.backend.EventSchedule, 8));
};


/**
 * @param {!Array<!proto.event.backend.EventSchedule>} value
 * @return {!proto.event.backend.EventBasicInfo} returns this
*/
proto.event.backend.EventBasicInfo.prototype.setSchedulesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.event.backend.EventSchedule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.backend.EventSchedule}
 */
proto.event.backend.EventBasicInfo.prototype.addSchedules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.event.backend.EventSchedule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.EventBasicInfo} returns this
 */
proto.event.backend.EventBasicInfo.prototype.clearSchedulesList = function() {
  return this.setSchedulesList([]);
};


/**
 * optional bool is_hot = 9;
 * @return {boolean}
 */
proto.event.backend.EventBasicInfo.prototype.getIsHot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.backend.EventBasicInfo} returns this
 */
proto.event.backend.EventBasicInfo.prototype.setIsHot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool is_public = 11;
 * @return {boolean}
 */
proto.event.backend.EventBasicInfo.prototype.getIsPublic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.backend.EventBasicInfo} returns this
 */
proto.event.backend.EventBasicInfo.prototype.setIsPublic = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional int64 duration = 12;
 * @return {number}
 */
proto.event.backend.EventBasicInfo.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.EventBasicInfo} returns this
 */
proto.event.backend.EventBasicInfo.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int64 number_of_tickets = 16;
 * @return {number}
 */
proto.event.backend.EventBasicInfo.prototype.getNumberOfTickets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.EventBasicInfo} returns this
 */
proto.event.backend.EventBasicInfo.prototype.setNumberOfTickets = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional double min_ticket_price = 17;
 * @return {number}
 */
proto.event.backend.EventBasicInfo.prototype.getMinTicketPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.EventBasicInfo} returns this
 */
proto.event.backend.EventBasicInfo.prototype.setMinTicketPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 17, value);
};


/**
 * optional double max_ticket_price = 18;
 * @return {number}
 */
proto.event.backend.EventBasicInfo.prototype.getMaxTicketPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.EventBasicInfo} returns this
 */
proto.event.backend.EventBasicInfo.prototype.setMaxTicketPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 18, value);
};


/**
 * optional EventCurrencyInfo currency = 19;
 * @return {?proto.event.backend.EventCurrencyInfo}
 */
proto.event.backend.EventBasicInfo.prototype.getCurrency = function() {
  return /** @type{?proto.event.backend.EventCurrencyInfo} */ (
    jspb.Message.getWrapperField(this, proto.event.backend.EventCurrencyInfo, 19));
};


/**
 * @param {?proto.event.backend.EventCurrencyInfo|undefined} value
 * @return {!proto.event.backend.EventBasicInfo} returns this
*/
proto.event.backend.EventBasicInfo.prototype.setCurrency = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.backend.EventBasicInfo} returns this
 */
proto.event.backend.EventBasicInfo.prototype.clearCurrency = function() {
  return this.setCurrency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.backend.EventBasicInfo.prototype.hasCurrency = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional EventLocation location = 20;
 * @return {?proto.event.backend.EventLocation}
 */
proto.event.backend.EventBasicInfo.prototype.getLocation = function() {
  return /** @type{?proto.event.backend.EventLocation} */ (
    jspb.Message.getWrapperField(this, proto.event.backend.EventLocation, 20));
};


/**
 * @param {?proto.event.backend.EventLocation|undefined} value
 * @return {!proto.event.backend.EventBasicInfo} returns this
*/
proto.event.backend.EventBasicInfo.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.backend.EventBasicInfo} returns this
 */
proto.event.backend.EventBasicInfo.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.backend.EventBasicInfo.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * repeated EventSponsor sponsors = 21;
 * @return {!Array<!proto.event.backend.EventSponsor>}
 */
proto.event.backend.EventBasicInfo.prototype.getSponsorsList = function() {
  return /** @type{!Array<!proto.event.backend.EventSponsor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.backend.EventSponsor, 21));
};


/**
 * @param {!Array<!proto.event.backend.EventSponsor>} value
 * @return {!proto.event.backend.EventBasicInfo} returns this
*/
proto.event.backend.EventBasicInfo.prototype.setSponsorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 21, value);
};


/**
 * @param {!proto.event.backend.EventSponsor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.backend.EventSponsor}
 */
proto.event.backend.EventBasicInfo.prototype.addSponsors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 21, opt_value, proto.event.backend.EventSponsor, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.EventBasicInfo} returns this
 */
proto.event.backend.EventBasicInfo.prototype.clearSponsorsList = function() {
  return this.setSponsorsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.EventSimpleInfo.repeatedFields_ = [3,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.EventSimpleInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.EventSimpleInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.EventSimpleInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.EventSimpleInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, ""),
    eventImageUrlsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    artistsList: jspb.Message.toObjectList(msg.getArtistsList(),
    proto.event.backend.EventArtist.toObject, includeInstance),
    hashTagsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    programsImageUrlsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    description: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.EventSimpleInfo}
 */
proto.event.backend.EventSimpleInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.EventSimpleInfo;
  return proto.event.backend.EventSimpleInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.EventSimpleInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.EventSimpleInfo}
 */
proto.event.backend.EventSimpleInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addEventImageUrls(value);
      break;
    case 4:
      var value = new proto.event.backend.EventArtist;
      reader.readMessage(value,proto.event.backend.EventArtist.deserializeBinaryFromReader);
      msg.addArtists(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addHashTags(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addProgramsImageUrls(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.EventSimpleInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.EventSimpleInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.EventSimpleInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.EventSimpleInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEventImageUrlsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getArtistsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.event.backend.EventArtist.serializeBinaryToWriter
    );
  }
  f = message.getHashTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getProgramsImageUrlsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.event.backend.EventSimpleInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventSimpleInfo} returns this
 */
proto.event.backend.EventSimpleInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.event.backend.EventSimpleInfo.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventSimpleInfo} returns this
 */
proto.event.backend.EventSimpleInfo.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string event_image_urls = 3;
 * @return {!Array<string>}
 */
proto.event.backend.EventSimpleInfo.prototype.getEventImageUrlsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.backend.EventSimpleInfo} returns this
 */
proto.event.backend.EventSimpleInfo.prototype.setEventImageUrlsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.backend.EventSimpleInfo} returns this
 */
proto.event.backend.EventSimpleInfo.prototype.addEventImageUrls = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.EventSimpleInfo} returns this
 */
proto.event.backend.EventSimpleInfo.prototype.clearEventImageUrlsList = function() {
  return this.setEventImageUrlsList([]);
};


/**
 * repeated EventArtist artists = 4;
 * @return {!Array<!proto.event.backend.EventArtist>}
 */
proto.event.backend.EventSimpleInfo.prototype.getArtistsList = function() {
  return /** @type{!Array<!proto.event.backend.EventArtist>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.backend.EventArtist, 4));
};


/**
 * @param {!Array<!proto.event.backend.EventArtist>} value
 * @return {!proto.event.backend.EventSimpleInfo} returns this
*/
proto.event.backend.EventSimpleInfo.prototype.setArtistsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.event.backend.EventArtist=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.backend.EventArtist}
 */
proto.event.backend.EventSimpleInfo.prototype.addArtists = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.event.backend.EventArtist, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.EventSimpleInfo} returns this
 */
proto.event.backend.EventSimpleInfo.prototype.clearArtistsList = function() {
  return this.setArtistsList([]);
};


/**
 * repeated string hash_tags = 5;
 * @return {!Array<string>}
 */
proto.event.backend.EventSimpleInfo.prototype.getHashTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.backend.EventSimpleInfo} returns this
 */
proto.event.backend.EventSimpleInfo.prototype.setHashTagsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.backend.EventSimpleInfo} returns this
 */
proto.event.backend.EventSimpleInfo.prototype.addHashTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.EventSimpleInfo} returns this
 */
proto.event.backend.EventSimpleInfo.prototype.clearHashTagsList = function() {
  return this.setHashTagsList([]);
};


/**
 * repeated string programs_image_urls = 6;
 * @return {!Array<string>}
 */
proto.event.backend.EventSimpleInfo.prototype.getProgramsImageUrlsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.backend.EventSimpleInfo} returns this
 */
proto.event.backend.EventSimpleInfo.prototype.setProgramsImageUrlsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.backend.EventSimpleInfo} returns this
 */
proto.event.backend.EventSimpleInfo.prototype.addProgramsImageUrls = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.EventSimpleInfo} returns this
 */
proto.event.backend.EventSimpleInfo.prototype.clearProgramsImageUrlsList = function() {
  return this.setProgramsImageUrlsList([]);
};


/**
 * optional string description = 7;
 * @return {string}
 */
proto.event.backend.EventSimpleInfo.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventSimpleInfo} returns this
 */
proto.event.backend.EventSimpleInfo.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.EventCurrencyInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.EventCurrencyInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.EventCurrencyInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.EventCurrencyInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    code: jspb.Message.getFieldWithDefault(msg, 3, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.EventCurrencyInfo}
 */
proto.event.backend.EventCurrencyInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.EventCurrencyInfo;
  return proto.event.backend.EventCurrencyInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.EventCurrencyInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.EventCurrencyInfo}
 */
proto.event.backend.EventCurrencyInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.EventCurrencyInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.EventCurrencyInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.EventCurrencyInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.EventCurrencyInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.backend.EventCurrencyInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventCurrencyInfo} returns this
 */
proto.event.backend.EventCurrencyInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.event.backend.EventCurrencyInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventCurrencyInfo} returns this
 */
proto.event.backend.EventCurrencyInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string code = 3;
 * @return {string}
 */
proto.event.backend.EventCurrencyInfo.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventCurrencyInfo} returns this
 */
proto.event.backend.EventCurrencyInfo.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string icon = 4;
 * @return {string}
 */
proto.event.backend.EventCurrencyInfo.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventCurrencyInfo} returns this
 */
proto.event.backend.EventCurrencyInfo.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.EventLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.EventLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.EventLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.EventLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ward: jspb.Message.getFieldWithDefault(msg, 3, ""),
    district: jspb.Message.getFieldWithDefault(msg, 4, ""),
    city: jspb.Message.getFieldWithDefault(msg, 5, ""),
    country: jspb.Message.getFieldWithDefault(msg, 6, ""),
    name: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.EventLocation}
 */
proto.event.backend.EventLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.EventLocation;
  return proto.event.backend.EventLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.EventLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.EventLocation}
 */
proto.event.backend.EventLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWard(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDistrict(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.EventLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.EventLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.EventLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.EventLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWard();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDistrict();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.backend.EventLocation.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventLocation} returns this
 */
proto.event.backend.EventLocation.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.event.backend.EventLocation.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventLocation} returns this
 */
proto.event.backend.EventLocation.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ward = 3;
 * @return {string}
 */
proto.event.backend.EventLocation.prototype.getWard = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventLocation} returns this
 */
proto.event.backend.EventLocation.prototype.setWard = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string district = 4;
 * @return {string}
 */
proto.event.backend.EventLocation.prototype.getDistrict = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventLocation} returns this
 */
proto.event.backend.EventLocation.prototype.setDistrict = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string city = 5;
 * @return {string}
 */
proto.event.backend.EventLocation.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventLocation} returns this
 */
proto.event.backend.EventLocation.prototype.setCity = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string country = 6;
 * @return {string}
 */
proto.event.backend.EventLocation.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventLocation} returns this
 */
proto.event.backend.EventLocation.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string name = 7;
 * @return {string}
 */
proto.event.backend.EventLocation.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventLocation} returns this
 */
proto.event.backend.EventLocation.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.EventSeatMaps.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.EventSeatMaps.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.EventSeatMaps} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.EventSeatMaps.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mapPicture: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.EventSeatMaps}
 */
proto.event.backend.EventSeatMaps.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.EventSeatMaps;
  return proto.event.backend.EventSeatMaps.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.EventSeatMaps} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.EventSeatMaps}
 */
proto.event.backend.EventSeatMaps.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMapPicture(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.EventSeatMaps.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.EventSeatMaps.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.EventSeatMaps} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.EventSeatMaps.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMapPicture();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.backend.EventSeatMaps.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventSeatMaps} returns this
 */
proto.event.backend.EventSeatMaps.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.event.backend.EventSeatMaps.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventSeatMaps} returns this
 */
proto.event.backend.EventSeatMaps.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string map_picture = 3;
 * @return {string}
 */
proto.event.backend.EventSeatMaps.prototype.getMapPicture = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventSeatMaps} returns this
 */
proto.event.backend.EventSeatMaps.prototype.setMapPicture = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.EventSponsor.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.EventSponsor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.EventSponsor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.EventSponsor.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    avatar: jspb.Message.getFieldWithDefault(msg, 3, ""),
    level: (f = msg.getLevel()) && proto.event.backend.EventSponsorLevelInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.EventSponsor}
 */
proto.event.backend.EventSponsor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.EventSponsor;
  return proto.event.backend.EventSponsor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.EventSponsor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.EventSponsor}
 */
proto.event.backend.EventSponsor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatar(value);
      break;
    case 4:
      var value = new proto.event.backend.EventSponsorLevelInfo;
      reader.readMessage(value,proto.event.backend.EventSponsorLevelInfo.deserializeBinaryFromReader);
      msg.setLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.EventSponsor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.EventSponsor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.EventSponsor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.EventSponsor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAvatar();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLevel();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.event.backend.EventSponsorLevelInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.backend.EventSponsor.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventSponsor} returns this
 */
proto.event.backend.EventSponsor.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.event.backend.EventSponsor.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventSponsor} returns this
 */
proto.event.backend.EventSponsor.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string avatar = 3;
 * @return {string}
 */
proto.event.backend.EventSponsor.prototype.getAvatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventSponsor} returns this
 */
proto.event.backend.EventSponsor.prototype.setAvatar = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional EventSponsorLevelInfo level = 4;
 * @return {?proto.event.backend.EventSponsorLevelInfo}
 */
proto.event.backend.EventSponsor.prototype.getLevel = function() {
  return /** @type{?proto.event.backend.EventSponsorLevelInfo} */ (
    jspb.Message.getWrapperField(this, proto.event.backend.EventSponsorLevelInfo, 4));
};


/**
 * @param {?proto.event.backend.EventSponsorLevelInfo|undefined} value
 * @return {!proto.event.backend.EventSponsor} returns this
*/
proto.event.backend.EventSponsor.prototype.setLevel = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.backend.EventSponsor} returns this
 */
proto.event.backend.EventSponsor.prototype.clearLevel = function() {
  return this.setLevel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.backend.EventSponsor.prototype.hasLevel = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.EventSponsorLevelInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.EventSponsorLevelInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.EventSponsorLevelInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.EventSponsorLevelInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.EventSponsorLevelInfo}
 */
proto.event.backend.EventSponsorLevelInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.EventSponsorLevelInfo;
  return proto.event.backend.EventSponsorLevelInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.EventSponsorLevelInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.EventSponsorLevelInfo}
 */
proto.event.backend.EventSponsorLevelInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.EventSponsorLevelInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.EventSponsorLevelInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.EventSponsorLevelInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.EventSponsorLevelInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.backend.EventSponsorLevelInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventSponsorLevelInfo} returns this
 */
proto.event.backend.EventSponsorLevelInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.event.backend.EventSponsorLevelInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventSponsorLevelInfo} returns this
 */
proto.event.backend.EventSponsorLevelInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string icon = 3;
 * @return {string}
 */
proto.event.backend.EventSponsorLevelInfo.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventSponsorLevelInfo} returns this
 */
proto.event.backend.EventSponsorLevelInfo.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.EventSchedule.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.EventSchedule.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.EventSchedule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.EventSchedule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.EventSchedule.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    generalSeatMapsList: jspb.Message.toObjectList(msg.getGeneralSeatMapsList(),
    proto.event.backend.EventSeatMaps.toObject, includeInstance),
    startTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    bookingStartTime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    bookingEndTime: jspb.Message.getFieldWithDefault(msg, 6, 0),
    checkinStartTime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    checkinEndTime: jspb.Message.getFieldWithDefault(msg, 8, 0),
    timezone: jspb.Message.getFieldWithDefault(msg, 9, ""),
    isSoldout: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    isPublic: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    eventType: jspb.Message.getFieldWithDefault(msg, 12, 0),
    name: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.EventSchedule}
 */
proto.event.backend.EventSchedule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.EventSchedule;
  return proto.event.backend.EventSchedule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.EventSchedule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.EventSchedule}
 */
proto.event.backend.EventSchedule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.event.backend.EventSeatMaps;
      reader.readMessage(value,proto.event.backend.EventSeatMaps.deserializeBinaryFromReader);
      msg.addGeneralSeatMaps(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBookingStartTime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBookingEndTime(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCheckinStartTime(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCheckinEndTime(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimezone(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSoldout(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPublic(value);
      break;
    case 12:
      var value = /** @type {!proto.event.backend.EventForm} */ (reader.readEnum());
      msg.setEventType(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.EventSchedule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.EventSchedule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.EventSchedule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.EventSchedule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGeneralSeatMapsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.event.backend.EventSeatMaps.serializeBinaryToWriter
    );
  }
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getBookingStartTime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getBookingEndTime();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getCheckinStartTime();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getCheckinEndTime();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getTimezone();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getIsSoldout();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getIsPublic();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getEventType();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.backend.EventSchedule.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventSchedule} returns this
 */
proto.event.backend.EventSchedule.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated EventSeatMaps general_seat_maps = 2;
 * @return {!Array<!proto.event.backend.EventSeatMaps>}
 */
proto.event.backend.EventSchedule.prototype.getGeneralSeatMapsList = function() {
  return /** @type{!Array<!proto.event.backend.EventSeatMaps>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.backend.EventSeatMaps, 2));
};


/**
 * @param {!Array<!proto.event.backend.EventSeatMaps>} value
 * @return {!proto.event.backend.EventSchedule} returns this
*/
proto.event.backend.EventSchedule.prototype.setGeneralSeatMapsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.event.backend.EventSeatMaps=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.backend.EventSeatMaps}
 */
proto.event.backend.EventSchedule.prototype.addGeneralSeatMaps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.event.backend.EventSeatMaps, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.EventSchedule} returns this
 */
proto.event.backend.EventSchedule.prototype.clearGeneralSeatMapsList = function() {
  return this.setGeneralSeatMapsList([]);
};


/**
 * optional int64 start_time = 3;
 * @return {number}
 */
proto.event.backend.EventSchedule.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.EventSchedule} returns this
 */
proto.event.backend.EventSchedule.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 end_time = 4;
 * @return {number}
 */
proto.event.backend.EventSchedule.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.EventSchedule} returns this
 */
proto.event.backend.EventSchedule.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 booking_start_time = 5;
 * @return {number}
 */
proto.event.backend.EventSchedule.prototype.getBookingStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.EventSchedule} returns this
 */
proto.event.backend.EventSchedule.prototype.setBookingStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 booking_end_time = 6;
 * @return {number}
 */
proto.event.backend.EventSchedule.prototype.getBookingEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.EventSchedule} returns this
 */
proto.event.backend.EventSchedule.prototype.setBookingEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 checkin_start_time = 7;
 * @return {number}
 */
proto.event.backend.EventSchedule.prototype.getCheckinStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.EventSchedule} returns this
 */
proto.event.backend.EventSchedule.prototype.setCheckinStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 checkin_end_time = 8;
 * @return {number}
 */
proto.event.backend.EventSchedule.prototype.getCheckinEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.EventSchedule} returns this
 */
proto.event.backend.EventSchedule.prototype.setCheckinEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string timezone = 9;
 * @return {string}
 */
proto.event.backend.EventSchedule.prototype.getTimezone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventSchedule} returns this
 */
proto.event.backend.EventSchedule.prototype.setTimezone = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bool is_soldout = 10;
 * @return {boolean}
 */
proto.event.backend.EventSchedule.prototype.getIsSoldout = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.backend.EventSchedule} returns this
 */
proto.event.backend.EventSchedule.prototype.setIsSoldout = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool is_public = 11;
 * @return {boolean}
 */
proto.event.backend.EventSchedule.prototype.getIsPublic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.backend.EventSchedule} returns this
 */
proto.event.backend.EventSchedule.prototype.setIsPublic = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional EventForm event_type = 12;
 * @return {!proto.event.backend.EventForm}
 */
proto.event.backend.EventSchedule.prototype.getEventType = function() {
  return /** @type {!proto.event.backend.EventForm} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.event.backend.EventForm} value
 * @return {!proto.event.backend.EventSchedule} returns this
 */
proto.event.backend.EventSchedule.prototype.setEventType = function(value) {
  return jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * optional string name = 13;
 * @return {string}
 */
proto.event.backend.EventSchedule.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventSchedule} returns this
 */
proto.event.backend.EventSchedule.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.EventArtist.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.EventArtist.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.EventArtist.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.EventArtist} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.EventArtist.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    avatar: jspb.Message.getFieldWithDefault(msg, 3, ""),
    typeList: jspb.Message.toObjectList(msg.getTypeList(),
    proto.event.backend.EventArtistTypeInfo.toObject, includeInstance),
    intro: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.EventArtist}
 */
proto.event.backend.EventArtist.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.EventArtist;
  return proto.event.backend.EventArtist.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.EventArtist} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.EventArtist}
 */
proto.event.backend.EventArtist.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatar(value);
      break;
    case 4:
      var value = new proto.event.backend.EventArtistTypeInfo;
      reader.readMessage(value,proto.event.backend.EventArtistTypeInfo.deserializeBinaryFromReader);
      msg.addType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setIntro(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.EventArtist.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.EventArtist.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.EventArtist} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.EventArtist.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAvatar();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTypeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.event.backend.EventArtistTypeInfo.serializeBinaryToWriter
    );
  }
  f = message.getIntro();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.backend.EventArtist.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventArtist} returns this
 */
proto.event.backend.EventArtist.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.event.backend.EventArtist.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventArtist} returns this
 */
proto.event.backend.EventArtist.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string avatar = 3;
 * @return {string}
 */
proto.event.backend.EventArtist.prototype.getAvatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventArtist} returns this
 */
proto.event.backend.EventArtist.prototype.setAvatar = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated EventArtistTypeInfo type = 4;
 * @return {!Array<!proto.event.backend.EventArtistTypeInfo>}
 */
proto.event.backend.EventArtist.prototype.getTypeList = function() {
  return /** @type{!Array<!proto.event.backend.EventArtistTypeInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.backend.EventArtistTypeInfo, 4));
};


/**
 * @param {!Array<!proto.event.backend.EventArtistTypeInfo>} value
 * @return {!proto.event.backend.EventArtist} returns this
*/
proto.event.backend.EventArtist.prototype.setTypeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.event.backend.EventArtistTypeInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.backend.EventArtistTypeInfo}
 */
proto.event.backend.EventArtist.prototype.addType = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.event.backend.EventArtistTypeInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.EventArtist} returns this
 */
proto.event.backend.EventArtist.prototype.clearTypeList = function() {
  return this.setTypeList([]);
};


/**
 * optional string intro = 5;
 * @return {string}
 */
proto.event.backend.EventArtist.prototype.getIntro = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventArtist} returns this
 */
proto.event.backend.EventArtist.prototype.setIntro = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.EventArtistTypeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.EventArtistTypeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.EventArtistTypeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.EventArtistTypeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.EventArtistTypeInfo}
 */
proto.event.backend.EventArtistTypeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.EventArtistTypeInfo;
  return proto.event.backend.EventArtistTypeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.EventArtistTypeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.EventArtistTypeInfo}
 */
proto.event.backend.EventArtistTypeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.EventArtistTypeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.EventArtistTypeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.EventArtistTypeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.EventArtistTypeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.backend.EventArtistTypeInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventArtistTypeInfo} returns this
 */
proto.event.backend.EventArtistTypeInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.event.backend.EventArtistTypeInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventArtistTypeInfo} returns this
 */
proto.event.backend.EventArtistTypeInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string icon = 3;
 * @return {string}
 */
proto.event.backend.EventArtistTypeInfo.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.EventArtistTypeInfo} returns this
 */
proto.event.backend.EventArtistTypeInfo.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.ProductEventInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.ProductEventInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.ProductEventInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.ProductEventInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timezone: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.ProductEventInfo}
 */
proto.event.backend.ProductEventInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.ProductEventInfo;
  return proto.event.backend.ProductEventInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.ProductEventInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.ProductEventInfo}
 */
proto.event.backend.ProductEventInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimezone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.ProductEventInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.ProductEventInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.ProductEventInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.ProductEventInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimezone();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string event_id = 1;
 * @return {string}
 */
proto.event.backend.ProductEventInfo.prototype.getEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.ProductEventInfo} returns this
 */
proto.event.backend.ProductEventInfo.prototype.setEventId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.event.backend.ProductEventInfo.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.ProductEventInfo} returns this
 */
proto.event.backend.ProductEventInfo.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.event.backend.ProductEventInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.ProductEventInfo} returns this
 */
proto.event.backend.ProductEventInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string timezone = 4;
 * @return {string}
 */
proto.event.backend.ProductEventInfo.prototype.getTimezone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.ProductEventInfo} returns this
 */
proto.event.backend.ProductEventInfo.prototype.setTimezone = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.ProductEventScheduleInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.ProductEventScheduleInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.ProductEventScheduleInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.ProductEventScheduleInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    startTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    checkInStartTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    scheduleId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.ProductEventScheduleInfo}
 */
proto.event.backend.ProductEventScheduleInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.ProductEventScheduleInfo;
  return proto.event.backend.ProductEventScheduleInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.ProductEventScheduleInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.ProductEventScheduleInfo}
 */
proto.event.backend.ProductEventScheduleInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCheckInStartTime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setScheduleId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.ProductEventScheduleInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.ProductEventScheduleInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.ProductEventScheduleInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.ProductEventScheduleInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCheckInStartTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getScheduleId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int64 start_time = 1;
 * @return {number}
 */
proto.event.backend.ProductEventScheduleInfo.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.ProductEventScheduleInfo} returns this
 */
proto.event.backend.ProductEventScheduleInfo.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 end_time = 2;
 * @return {number}
 */
proto.event.backend.ProductEventScheduleInfo.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.ProductEventScheduleInfo} returns this
 */
proto.event.backend.ProductEventScheduleInfo.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 check_in_start_time = 3;
 * @return {number}
 */
proto.event.backend.ProductEventScheduleInfo.prototype.getCheckInStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.backend.ProductEventScheduleInfo} returns this
 */
proto.event.backend.ProductEventScheduleInfo.prototype.setCheckInStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string schedule_id = 4;
 * @return {string}
 */
proto.event.backend.ProductEventScheduleInfo.prototype.getScheduleId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.ProductEventScheduleInfo} returns this
 */
proto.event.backend.ProductEventScheduleInfo.prototype.setScheduleId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.ProductEventSeatBlockInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.ProductEventSeatBlockInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.ProductEventSeatBlockInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.ProductEventSeatBlockInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatBlockId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seatBlockName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.ProductEventSeatBlockInfo}
 */
proto.event.backend.ProductEventSeatBlockInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.ProductEventSeatBlockInfo;
  return proto.event.backend.ProductEventSeatBlockInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.ProductEventSeatBlockInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.ProductEventSeatBlockInfo}
 */
proto.event.backend.ProductEventSeatBlockInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatBlockId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatBlockName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.ProductEventSeatBlockInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.ProductEventSeatBlockInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.ProductEventSeatBlockInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.ProductEventSeatBlockInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatBlockId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeatBlockName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string seat_block_id = 1;
 * @return {string}
 */
proto.event.backend.ProductEventSeatBlockInfo.prototype.getSeatBlockId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.ProductEventSeatBlockInfo} returns this
 */
proto.event.backend.ProductEventSeatBlockInfo.prototype.setSeatBlockId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string seat_block_name = 2;
 * @return {string}
 */
proto.event.backend.ProductEventSeatBlockInfo.prototype.getSeatBlockName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.ProductEventSeatBlockInfo} returns this
 */
proto.event.backend.ProductEventSeatBlockInfo.prototype.setSeatBlockName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.ProductEventSeatInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.ProductEventSeatInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.ProductEventSeatInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.ProductEventSeatInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seatName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.ProductEventSeatInfo}
 */
proto.event.backend.ProductEventSeatInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.ProductEventSeatInfo;
  return proto.event.backend.ProductEventSeatInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.ProductEventSeatInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.ProductEventSeatInfo}
 */
proto.event.backend.ProductEventSeatInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.ProductEventSeatInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.ProductEventSeatInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.ProductEventSeatInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.ProductEventSeatInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeatName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string seat_id = 1;
 * @return {string}
 */
proto.event.backend.ProductEventSeatInfo.prototype.getSeatId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.ProductEventSeatInfo} returns this
 */
proto.event.backend.ProductEventSeatInfo.prototype.setSeatId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string seat_name = 2;
 * @return {string}
 */
proto.event.backend.ProductEventSeatInfo.prototype.getSeatName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.ProductEventSeatInfo} returns this
 */
proto.event.backend.ProductEventSeatInfo.prototype.setSeatName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.SearchProductEventSeatMap.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.SearchProductEventSeatMap.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.SearchProductEventSeatMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.SearchProductEventSeatMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.SearchProductEventSeatMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatMapId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seatBlockIdsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    seatIdsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.SearchProductEventSeatMap}
 */
proto.event.backend.SearchProductEventSeatMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.SearchProductEventSeatMap;
  return proto.event.backend.SearchProductEventSeatMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.SearchProductEventSeatMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.SearchProductEventSeatMap}
 */
proto.event.backend.SearchProductEventSeatMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatMapId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addSeatBlockIds(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addSeatIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.SearchProductEventSeatMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.SearchProductEventSeatMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.SearchProductEventSeatMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.SearchProductEventSeatMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatMapId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeatBlockIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getSeatIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string seat_map_id = 1;
 * @return {string}
 */
proto.event.backend.SearchProductEventSeatMap.prototype.getSeatMapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.SearchProductEventSeatMap} returns this
 */
proto.event.backend.SearchProductEventSeatMap.prototype.setSeatMapId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string seat_block_ids = 2;
 * @return {!Array<string>}
 */
proto.event.backend.SearchProductEventSeatMap.prototype.getSeatBlockIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.backend.SearchProductEventSeatMap} returns this
 */
proto.event.backend.SearchProductEventSeatMap.prototype.setSeatBlockIdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.backend.SearchProductEventSeatMap} returns this
 */
proto.event.backend.SearchProductEventSeatMap.prototype.addSeatBlockIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.SearchProductEventSeatMap} returns this
 */
proto.event.backend.SearchProductEventSeatMap.prototype.clearSeatBlockIdsList = function() {
  return this.setSeatBlockIdsList([]);
};


/**
 * repeated string seat_ids = 3;
 * @return {!Array<string>}
 */
proto.event.backend.SearchProductEventSeatMap.prototype.getSeatIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.backend.SearchProductEventSeatMap} returns this
 */
proto.event.backend.SearchProductEventSeatMap.prototype.setSeatIdsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.backend.SearchProductEventSeatMap} returns this
 */
proto.event.backend.SearchProductEventSeatMap.prototype.addSeatIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.SearchProductEventSeatMap} returns this
 */
proto.event.backend.SearchProductEventSeatMap.prototype.clearSeatIdsList = function() {
  return this.setSeatIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.SearchProductEventSchedule.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.SearchProductEventSchedule.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.SearchProductEventSchedule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.SearchProductEventSchedule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.SearchProductEventSchedule.toObject = function(includeInstance, msg) {
  var f, obj = {
    scheduleId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seatMapsList: jspb.Message.toObjectList(msg.getSeatMapsList(),
    proto.event.backend.SearchProductEventSeatMap.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.SearchProductEventSchedule}
 */
proto.event.backend.SearchProductEventSchedule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.SearchProductEventSchedule;
  return proto.event.backend.SearchProductEventSchedule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.SearchProductEventSchedule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.SearchProductEventSchedule}
 */
proto.event.backend.SearchProductEventSchedule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setScheduleId(value);
      break;
    case 2:
      var value = new proto.event.backend.SearchProductEventSeatMap;
      reader.readMessage(value,proto.event.backend.SearchProductEventSeatMap.deserializeBinaryFromReader);
      msg.addSeatMaps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.SearchProductEventSchedule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.SearchProductEventSchedule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.SearchProductEventSchedule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.SearchProductEventSchedule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScheduleId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeatMapsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.event.backend.SearchProductEventSeatMap.serializeBinaryToWriter
    );
  }
};


/**
 * optional string schedule_id = 1;
 * @return {string}
 */
proto.event.backend.SearchProductEventSchedule.prototype.getScheduleId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.SearchProductEventSchedule} returns this
 */
proto.event.backend.SearchProductEventSchedule.prototype.setScheduleId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated SearchProductEventSeatMap seat_maps = 2;
 * @return {!Array<!proto.event.backend.SearchProductEventSeatMap>}
 */
proto.event.backend.SearchProductEventSchedule.prototype.getSeatMapsList = function() {
  return /** @type{!Array<!proto.event.backend.SearchProductEventSeatMap>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.backend.SearchProductEventSeatMap, 2));
};


/**
 * @param {!Array<!proto.event.backend.SearchProductEventSeatMap>} value
 * @return {!proto.event.backend.SearchProductEventSchedule} returns this
*/
proto.event.backend.SearchProductEventSchedule.prototype.setSeatMapsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.event.backend.SearchProductEventSeatMap=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.backend.SearchProductEventSeatMap}
 */
proto.event.backend.SearchProductEventSchedule.prototype.addSeatMaps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.event.backend.SearchProductEventSeatMap, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.SearchProductEventSchedule} returns this
 */
proto.event.backend.SearchProductEventSchedule.prototype.clearSeatMapsList = function() {
  return this.setSeatMapsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.RetrieveSimpleEventReq.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.RetrieveSimpleEventReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.RetrieveSimpleEventReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.RetrieveSimpleEventReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.RetrieveSimpleEventReq}
 */
proto.event.backend.RetrieveSimpleEventReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.RetrieveSimpleEventReq;
  return proto.event.backend.RetrieveSimpleEventReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.RetrieveSimpleEventReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.RetrieveSimpleEventReq}
 */
proto.event.backend.RetrieveSimpleEventReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.RetrieveSimpleEventReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.RetrieveSimpleEventReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.RetrieveSimpleEventReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.RetrieveSimpleEventReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.backend.RetrieveSimpleEventReq.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.RetrieveSimpleEventReq} returns this
 */
proto.event.backend.RetrieveSimpleEventReq.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.SearchEventsByNameReq.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.SearchEventsByNameReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.SearchEventsByNameReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.SearchEventsByNameReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    search: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.SearchEventsByNameReq}
 */
proto.event.backend.SearchEventsByNameReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.SearchEventsByNameReq;
  return proto.event.backend.SearchEventsByNameReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.SearchEventsByNameReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.SearchEventsByNameReq}
 */
proto.event.backend.SearchEventsByNameReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.SearchEventsByNameReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.SearchEventsByNameReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.SearchEventsByNameReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.SearchEventsByNameReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSearch();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string search = 1;
 * @return {string}
 */
proto.event.backend.SearchEventsByNameReq.prototype.getSearch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.SearchEventsByNameReq} returns this
 */
proto.event.backend.SearchEventsByNameReq.prototype.setSearch = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.GetProductEventsInfoReq.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.GetProductEventsInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.GetProductEventsInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.GetProductEventsInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.GetProductEventsInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    schedulesList: jspb.Message.toObjectList(msg.getSchedulesList(),
    proto.event.backend.SearchProductEventSchedule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.GetProductEventsInfoReq}
 */
proto.event.backend.GetProductEventsInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.GetProductEventsInfoReq;
  return proto.event.backend.GetProductEventsInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.GetProductEventsInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.GetProductEventsInfoReq}
 */
proto.event.backend.GetProductEventsInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addEventIds(value);
      break;
    case 2:
      var value = new proto.event.backend.SearchProductEventSchedule;
      reader.readMessage(value,proto.event.backend.SearchProductEventSchedule.deserializeBinaryFromReader);
      msg.addSchedules(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.GetProductEventsInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.GetProductEventsInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.GetProductEventsInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.GetProductEventsInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getSchedulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.event.backend.SearchProductEventSchedule.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string event_ids = 1;
 * @return {!Array<string>}
 */
proto.event.backend.GetProductEventsInfoReq.prototype.getEventIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.backend.GetProductEventsInfoReq} returns this
 */
proto.event.backend.GetProductEventsInfoReq.prototype.setEventIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.backend.GetProductEventsInfoReq} returns this
 */
proto.event.backend.GetProductEventsInfoReq.prototype.addEventIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.GetProductEventsInfoReq} returns this
 */
proto.event.backend.GetProductEventsInfoReq.prototype.clearEventIdsList = function() {
  return this.setEventIdsList([]);
};


/**
 * repeated SearchProductEventSchedule schedules = 2;
 * @return {!Array<!proto.event.backend.SearchProductEventSchedule>}
 */
proto.event.backend.GetProductEventsInfoReq.prototype.getSchedulesList = function() {
  return /** @type{!Array<!proto.event.backend.SearchProductEventSchedule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.backend.SearchProductEventSchedule, 2));
};


/**
 * @param {!Array<!proto.event.backend.SearchProductEventSchedule>} value
 * @return {!proto.event.backend.GetProductEventsInfoReq} returns this
*/
proto.event.backend.GetProductEventsInfoReq.prototype.setSchedulesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.event.backend.SearchProductEventSchedule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.backend.SearchProductEventSchedule}
 */
proto.event.backend.GetProductEventsInfoReq.prototype.addSchedules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.event.backend.SearchProductEventSchedule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.GetProductEventsInfoReq} returns this
 */
proto.event.backend.GetProductEventsInfoReq.prototype.clearSchedulesList = function() {
  return this.setSchedulesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.RetrieveSimpleEventRes.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.RetrieveSimpleEventRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.RetrieveSimpleEventRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.RetrieveSimpleEventRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.event.backend.EventSimpleInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.RetrieveSimpleEventRes}
 */
proto.event.backend.RetrieveSimpleEventRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.RetrieveSimpleEventRes;
  return proto.event.backend.RetrieveSimpleEventRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.RetrieveSimpleEventRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.RetrieveSimpleEventRes}
 */
proto.event.backend.RetrieveSimpleEventRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.event.backend.EventSimpleInfo;
      reader.readMessage(value,proto.event.backend.EventSimpleInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.RetrieveSimpleEventRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.RetrieveSimpleEventRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.RetrieveSimpleEventRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.RetrieveSimpleEventRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.event.backend.EventSimpleInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional EventSimpleInfo info = 1;
 * @return {?proto.event.backend.EventSimpleInfo}
 */
proto.event.backend.RetrieveSimpleEventRes.prototype.getInfo = function() {
  return /** @type{?proto.event.backend.EventSimpleInfo} */ (
    jspb.Message.getWrapperField(this, proto.event.backend.EventSimpleInfo, 1));
};


/**
 * @param {?proto.event.backend.EventSimpleInfo|undefined} value
 * @return {!proto.event.backend.RetrieveSimpleEventRes} returns this
*/
proto.event.backend.RetrieveSimpleEventRes.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.backend.RetrieveSimpleEventRes} returns this
 */
proto.event.backend.RetrieveSimpleEventRes.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.backend.RetrieveSimpleEventRes.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.SearchEventsByNameRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.SearchEventsByNameRes.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.SearchEventsByNameRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.SearchEventsByNameRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.SearchEventsByNameRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.SearchEventsByNameRes}
 */
proto.event.backend.SearchEventsByNameRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.SearchEventsByNameRes;
  return proto.event.backend.SearchEventsByNameRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.SearchEventsByNameRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.SearchEventsByNameRes}
 */
proto.event.backend.SearchEventsByNameRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addEventIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.SearchEventsByNameRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.SearchEventsByNameRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.SearchEventsByNameRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.SearchEventsByNameRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string event_ids = 1;
 * @return {!Array<string>}
 */
proto.event.backend.SearchEventsByNameRes.prototype.getEventIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.backend.SearchEventsByNameRes} returns this
 */
proto.event.backend.SearchEventsByNameRes.prototype.setEventIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.backend.SearchEventsByNameRes} returns this
 */
proto.event.backend.SearchEventsByNameRes.prototype.addEventIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.SearchEventsByNameRes} returns this
 */
proto.event.backend.SearchEventsByNameRes.prototype.clearEventIdsList = function() {
  return this.setEventIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.GetProductEventsInfoRes.repeatedFields_ = [1,2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.GetProductEventsInfoRes.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.GetProductEventsInfoRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.GetProductEventsInfoRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.GetProductEventsInfoRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.event.backend.ProductEventInfo.toObject, includeInstance),
    schedulesList: jspb.Message.toObjectList(msg.getSchedulesList(),
    proto.event.backend.ProductEventScheduleInfo.toObject, includeInstance),
    seatBlocksList: jspb.Message.toObjectList(msg.getSeatBlocksList(),
    proto.event.backend.ProductEventSeatBlockInfo.toObject, includeInstance),
    seatsList: jspb.Message.toObjectList(msg.getSeatsList(),
    proto.event.backend.ProductEventSeatInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.GetProductEventsInfoRes}
 */
proto.event.backend.GetProductEventsInfoRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.GetProductEventsInfoRes;
  return proto.event.backend.GetProductEventsInfoRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.GetProductEventsInfoRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.GetProductEventsInfoRes}
 */
proto.event.backend.GetProductEventsInfoRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.event.backend.ProductEventInfo;
      reader.readMessage(value,proto.event.backend.ProductEventInfo.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    case 2:
      var value = new proto.event.backend.ProductEventScheduleInfo;
      reader.readMessage(value,proto.event.backend.ProductEventScheduleInfo.deserializeBinaryFromReader);
      msg.addSchedules(value);
      break;
    case 3:
      var value = new proto.event.backend.ProductEventSeatBlockInfo;
      reader.readMessage(value,proto.event.backend.ProductEventSeatBlockInfo.deserializeBinaryFromReader);
      msg.addSeatBlocks(value);
      break;
    case 4:
      var value = new proto.event.backend.ProductEventSeatInfo;
      reader.readMessage(value,proto.event.backend.ProductEventSeatInfo.deserializeBinaryFromReader);
      msg.addSeats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.GetProductEventsInfoRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.GetProductEventsInfoRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.GetProductEventsInfoRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.GetProductEventsInfoRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.event.backend.ProductEventInfo.serializeBinaryToWriter
    );
  }
  f = message.getSchedulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.event.backend.ProductEventScheduleInfo.serializeBinaryToWriter
    );
  }
  f = message.getSeatBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.event.backend.ProductEventSeatBlockInfo.serializeBinaryToWriter
    );
  }
  f = message.getSeatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.event.backend.ProductEventSeatInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProductEventInfo events = 1;
 * @return {!Array<!proto.event.backend.ProductEventInfo>}
 */
proto.event.backend.GetProductEventsInfoRes.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.event.backend.ProductEventInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.backend.ProductEventInfo, 1));
};


/**
 * @param {!Array<!proto.event.backend.ProductEventInfo>} value
 * @return {!proto.event.backend.GetProductEventsInfoRes} returns this
*/
proto.event.backend.GetProductEventsInfoRes.prototype.setEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.event.backend.ProductEventInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.backend.ProductEventInfo}
 */
proto.event.backend.GetProductEventsInfoRes.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.event.backend.ProductEventInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.GetProductEventsInfoRes} returns this
 */
proto.event.backend.GetProductEventsInfoRes.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};


/**
 * repeated ProductEventScheduleInfo schedules = 2;
 * @return {!Array<!proto.event.backend.ProductEventScheduleInfo>}
 */
proto.event.backend.GetProductEventsInfoRes.prototype.getSchedulesList = function() {
  return /** @type{!Array<!proto.event.backend.ProductEventScheduleInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.backend.ProductEventScheduleInfo, 2));
};


/**
 * @param {!Array<!proto.event.backend.ProductEventScheduleInfo>} value
 * @return {!proto.event.backend.GetProductEventsInfoRes} returns this
*/
proto.event.backend.GetProductEventsInfoRes.prototype.setSchedulesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.event.backend.ProductEventScheduleInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.backend.ProductEventScheduleInfo}
 */
proto.event.backend.GetProductEventsInfoRes.prototype.addSchedules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.event.backend.ProductEventScheduleInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.GetProductEventsInfoRes} returns this
 */
proto.event.backend.GetProductEventsInfoRes.prototype.clearSchedulesList = function() {
  return this.setSchedulesList([]);
};


/**
 * repeated ProductEventSeatBlockInfo seat_blocks = 3;
 * @return {!Array<!proto.event.backend.ProductEventSeatBlockInfo>}
 */
proto.event.backend.GetProductEventsInfoRes.prototype.getSeatBlocksList = function() {
  return /** @type{!Array<!proto.event.backend.ProductEventSeatBlockInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.backend.ProductEventSeatBlockInfo, 3));
};


/**
 * @param {!Array<!proto.event.backend.ProductEventSeatBlockInfo>} value
 * @return {!proto.event.backend.GetProductEventsInfoRes} returns this
*/
proto.event.backend.GetProductEventsInfoRes.prototype.setSeatBlocksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.event.backend.ProductEventSeatBlockInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.backend.ProductEventSeatBlockInfo}
 */
proto.event.backend.GetProductEventsInfoRes.prototype.addSeatBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.event.backend.ProductEventSeatBlockInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.GetProductEventsInfoRes} returns this
 */
proto.event.backend.GetProductEventsInfoRes.prototype.clearSeatBlocksList = function() {
  return this.setSeatBlocksList([]);
};


/**
 * repeated ProductEventSeatInfo seats = 4;
 * @return {!Array<!proto.event.backend.ProductEventSeatInfo>}
 */
proto.event.backend.GetProductEventsInfoRes.prototype.getSeatsList = function() {
  return /** @type{!Array<!proto.event.backend.ProductEventSeatInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.backend.ProductEventSeatInfo, 4));
};


/**
 * @param {!Array<!proto.event.backend.ProductEventSeatInfo>} value
 * @return {!proto.event.backend.GetProductEventsInfoRes} returns this
*/
proto.event.backend.GetProductEventsInfoRes.prototype.setSeatsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.event.backend.ProductEventSeatInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.backend.ProductEventSeatInfo}
 */
proto.event.backend.GetProductEventsInfoRes.prototype.addSeats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.event.backend.ProductEventSeatInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.GetProductEventsInfoRes} returns this
 */
proto.event.backend.GetProductEventsInfoRes.prototype.clearSeatsList = function() {
  return this.setSeatsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.ListScheduleByEventIDReq.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.ListScheduleByEventIDReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.ListScheduleByEventIDReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.ListScheduleByEventIDReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.ListScheduleByEventIDReq}
 */
proto.event.backend.ListScheduleByEventIDReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.ListScheduleByEventIDReq;
  return proto.event.backend.ListScheduleByEventIDReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.ListScheduleByEventIDReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.ListScheduleByEventIDReq}
 */
proto.event.backend.ListScheduleByEventIDReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.ListScheduleByEventIDReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.ListScheduleByEventIDReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.ListScheduleByEventIDReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.ListScheduleByEventIDReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.backend.ListScheduleByEventIDReq.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.ListScheduleByEventIDReq} returns this
 */
proto.event.backend.ListScheduleByEventIDReq.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.backend.ListScheduleByEventIDRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.ListScheduleByEventIDRes.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.ListScheduleByEventIDRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.ListScheduleByEventIDRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.ListScheduleByEventIDRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.event.backend.EventSchedule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.ListScheduleByEventIDRes}
 */
proto.event.backend.ListScheduleByEventIDRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.ListScheduleByEventIDRes;
  return proto.event.backend.ListScheduleByEventIDRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.ListScheduleByEventIDRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.ListScheduleByEventIDRes}
 */
proto.event.backend.ListScheduleByEventIDRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.event.backend.EventSchedule;
      reader.readMessage(value,proto.event.backend.EventSchedule.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.ListScheduleByEventIDRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.ListScheduleByEventIDRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.ListScheduleByEventIDRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.ListScheduleByEventIDRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.event.backend.EventSchedule.serializeBinaryToWriter
    );
  }
};


/**
 * repeated EventSchedule items = 1;
 * @return {!Array<!proto.event.backend.EventSchedule>}
 */
proto.event.backend.ListScheduleByEventIDRes.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.event.backend.EventSchedule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.backend.EventSchedule, 1));
};


/**
 * @param {!Array<!proto.event.backend.EventSchedule>} value
 * @return {!proto.event.backend.ListScheduleByEventIDRes} returns this
*/
proto.event.backend.ListScheduleByEventIDRes.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.event.backend.EventSchedule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.backend.EventSchedule}
 */
proto.event.backend.ListScheduleByEventIDRes.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.event.backend.EventSchedule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.backend.ListScheduleByEventIDRes} returns this
 */
proto.event.backend.ListScheduleByEventIDRes.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.backend.InternalUpdateEventStateReq.prototype.toObject = function(opt_includeInstance) {
  return proto.event.backend.InternalUpdateEventStateReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.backend.InternalUpdateEventStateReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.InternalUpdateEventStateReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0),
    stateDescription: jspb.Message.getFieldWithDefault(msg, 3, ""),
    isPublish: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    userId: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.backend.InternalUpdateEventStateReq}
 */
proto.event.backend.InternalUpdateEventStateReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.backend.InternalUpdateEventStateReq;
  return proto.event.backend.InternalUpdateEventStateReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.backend.InternalUpdateEventStateReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.backend.InternalUpdateEventStateReq}
 */
proto.event.backend.InternalUpdateEventStateReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.event.enum.EventState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStateDescription(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPublish(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.backend.InternalUpdateEventStateReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.backend.InternalUpdateEventStateReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.backend.InternalUpdateEventStateReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.backend.InternalUpdateEventStateReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getStateDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIsPublish();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.event.backend.InternalUpdateEventStateReq.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.InternalUpdateEventStateReq} returns this
 */
proto.event.backend.InternalUpdateEventStateReq.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional event.enum.EventState state = 2;
 * @return {!proto.event.enum.EventState}
 */
proto.event.backend.InternalUpdateEventStateReq.prototype.getState = function() {
  return /** @type {!proto.event.enum.EventState} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.event.enum.EventState} value
 * @return {!proto.event.backend.InternalUpdateEventStateReq} returns this
 */
proto.event.backend.InternalUpdateEventStateReq.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string state_description = 3;
 * @return {string}
 */
proto.event.backend.InternalUpdateEventStateReq.prototype.getStateDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.InternalUpdateEventStateReq} returns this
 */
proto.event.backend.InternalUpdateEventStateReq.prototype.setStateDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool is_publish = 4;
 * @return {boolean}
 */
proto.event.backend.InternalUpdateEventStateReq.prototype.getIsPublish = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.backend.InternalUpdateEventStateReq} returns this
 */
proto.event.backend.InternalUpdateEventStateReq.prototype.setIsPublish = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string user_id = 5;
 * @return {string}
 */
proto.event.backend.InternalUpdateEventStateReq.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.backend.InternalUpdateEventStateReq} returns this
 */
proto.event.backend.InternalUpdateEventStateReq.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.event.backend.EventForm = {
  EVENT_FORM_INVALID: 0,
  EVENT_FORM_OFFLINE: 1,
  EVENT_FORM_ONLINE: 2
};

goog.object.extend(exports, proto.event.backend);
