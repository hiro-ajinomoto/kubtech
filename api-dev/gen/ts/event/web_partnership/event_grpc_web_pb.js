/**
 * @fileoverview gRPC-Web generated client stub for event.web_partnership
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.20.3
// source: event/web_partnership/event.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var base_base_pb = require('../../base/base_pb.js')

var event_enum_event_state_pb = require('../../event/enum/event_state_pb.js')

var event_web_partnership_event_location_pb = require('../../event/web_partnership/event_location_pb.js')

var event_web_partnership_artist_pb = require('../../event/web_partnership/artist_pb.js')

var event_web_partnership_sponsor_pb = require('../../event/web_partnership/sponsor_pb.js')
const proto = {};
proto.event = {};
proto.event.web_partnership = require('./event_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.event.web_partnership.EventServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.event.web_partnership.EventServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.web_partnership.CreateEventReq,
 *   !proto.event.web_partnership.CreateEventRes>}
 */
const methodDescriptor_EventService_CreateEvent = new grpc.web.MethodDescriptor(
  '/event.web_partnership.EventService/CreateEvent',
  grpc.web.MethodType.UNARY,
  proto.event.web_partnership.CreateEventReq,
  proto.event.web_partnership.CreateEventRes,
  /**
   * @param {!proto.event.web_partnership.CreateEventReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.event.web_partnership.CreateEventRes.deserializeBinary
);


/**
 * @param {!proto.event.web_partnership.CreateEventReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.event.web_partnership.CreateEventRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.event.web_partnership.CreateEventRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.web_partnership.EventServiceClient.prototype.createEvent =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.web_partnership.EventService/CreateEvent',
      request,
      metadata || {},
      methodDescriptor_EventService_CreateEvent,
      callback);
};


/**
 * @param {!proto.event.web_partnership.CreateEventReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.event.web_partnership.CreateEventRes>}
 *     Promise that resolves to the response
 */
proto.event.web_partnership.EventServicePromiseClient.prototype.createEvent =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.web_partnership.EventService/CreateEvent',
      request,
      metadata || {},
      methodDescriptor_EventService_CreateEvent);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.web_partnership.UpdateEventReq,
 *   !proto.base.Empty>}
 */
const methodDescriptor_EventService_UpdateEvent = new grpc.web.MethodDescriptor(
  '/event.web_partnership.EventService/UpdateEvent',
  grpc.web.MethodType.UNARY,
  proto.event.web_partnership.UpdateEventReq,
  base_base_pb.Empty,
  /**
   * @param {!proto.event.web_partnership.UpdateEventReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  base_base_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.event.web_partnership.UpdateEventReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.base.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.base.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.web_partnership.EventServiceClient.prototype.updateEvent =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.web_partnership.EventService/UpdateEvent',
      request,
      metadata || {},
      methodDescriptor_EventService_UpdateEvent,
      callback);
};


/**
 * @param {!proto.event.web_partnership.UpdateEventReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.base.Empty>}
 *     Promise that resolves to the response
 */
proto.event.web_partnership.EventServicePromiseClient.prototype.updateEvent =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.web_partnership.EventService/UpdateEvent',
      request,
      metadata || {},
      methodDescriptor_EventService_UpdateEvent);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.web_partnership.DeleteEventReq,
 *   !proto.base.Empty>}
 */
const methodDescriptor_EventService_DeleteEvent = new grpc.web.MethodDescriptor(
  '/event.web_partnership.EventService/DeleteEvent',
  grpc.web.MethodType.UNARY,
  proto.event.web_partnership.DeleteEventReq,
  base_base_pb.Empty,
  /**
   * @param {!proto.event.web_partnership.DeleteEventReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  base_base_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.event.web_partnership.DeleteEventReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.base.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.base.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.web_partnership.EventServiceClient.prototype.deleteEvent =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.web_partnership.EventService/DeleteEvent',
      request,
      metadata || {},
      methodDescriptor_EventService_DeleteEvent,
      callback);
};


/**
 * @param {!proto.event.web_partnership.DeleteEventReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.base.Empty>}
 *     Promise that resolves to the response
 */
proto.event.web_partnership.EventServicePromiseClient.prototype.deleteEvent =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.web_partnership.EventService/DeleteEvent',
      request,
      metadata || {},
      methodDescriptor_EventService_DeleteEvent);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.web_partnership.RetrieveEventReq,
 *   !proto.event.web_partnership.RetrieveEventRes>}
 */
const methodDescriptor_EventService_RetrieveEvent = new grpc.web.MethodDescriptor(
  '/event.web_partnership.EventService/RetrieveEvent',
  grpc.web.MethodType.UNARY,
  proto.event.web_partnership.RetrieveEventReq,
  proto.event.web_partnership.RetrieveEventRes,
  /**
   * @param {!proto.event.web_partnership.RetrieveEventReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.event.web_partnership.RetrieveEventRes.deserializeBinary
);


/**
 * @param {!proto.event.web_partnership.RetrieveEventReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.event.web_partnership.RetrieveEventRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.event.web_partnership.RetrieveEventRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.web_partnership.EventServiceClient.prototype.retrieveEvent =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.web_partnership.EventService/RetrieveEvent',
      request,
      metadata || {},
      methodDescriptor_EventService_RetrieveEvent,
      callback);
};


/**
 * @param {!proto.event.web_partnership.RetrieveEventReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.event.web_partnership.RetrieveEventRes>}
 *     Promise that resolves to the response
 */
proto.event.web_partnership.EventServicePromiseClient.prototype.retrieveEvent =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.web_partnership.EventService/RetrieveEvent',
      request,
      metadata || {},
      methodDescriptor_EventService_RetrieveEvent);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.web_partnership.ListEventsReq,
 *   !proto.event.web_partnership.ListEventsRes>}
 */
const methodDescriptor_EventService_ListEvents = new grpc.web.MethodDescriptor(
  '/event.web_partnership.EventService/ListEvents',
  grpc.web.MethodType.UNARY,
  proto.event.web_partnership.ListEventsReq,
  proto.event.web_partnership.ListEventsRes,
  /**
   * @param {!proto.event.web_partnership.ListEventsReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.event.web_partnership.ListEventsRes.deserializeBinary
);


/**
 * @param {!proto.event.web_partnership.ListEventsReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.event.web_partnership.ListEventsRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.event.web_partnership.ListEventsRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.web_partnership.EventServiceClient.prototype.listEvents =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.web_partnership.EventService/ListEvents',
      request,
      metadata || {},
      methodDescriptor_EventService_ListEvents,
      callback);
};


/**
 * @param {!proto.event.web_partnership.ListEventsReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.event.web_partnership.ListEventsRes>}
 *     Promise that resolves to the response
 */
proto.event.web_partnership.EventServicePromiseClient.prototype.listEvents =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.web_partnership.EventService/ListEvents',
      request,
      metadata || {},
      methodDescriptor_EventService_ListEvents);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.web_partnership.UpdateScheduleReq,
 *   !proto.base.Empty>}
 */
const methodDescriptor_EventService_UpsertEventSchedule = new grpc.web.MethodDescriptor(
  '/event.web_partnership.EventService/UpsertEventSchedule',
  grpc.web.MethodType.UNARY,
  proto.event.web_partnership.UpdateScheduleReq,
  base_base_pb.Empty,
  /**
   * @param {!proto.event.web_partnership.UpdateScheduleReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  base_base_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.event.web_partnership.UpdateScheduleReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.base.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.base.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.web_partnership.EventServiceClient.prototype.upsertEventSchedule =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.web_partnership.EventService/UpsertEventSchedule',
      request,
      metadata || {},
      methodDescriptor_EventService_UpsertEventSchedule,
      callback);
};


/**
 * @param {!proto.event.web_partnership.UpdateScheduleReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.base.Empty>}
 *     Promise that resolves to the response
 */
proto.event.web_partnership.EventServicePromiseClient.prototype.upsertEventSchedule =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.web_partnership.EventService/UpsertEventSchedule',
      request,
      metadata || {},
      methodDescriptor_EventService_UpsertEventSchedule);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.web_partnership.DeleteEventScheduleReq,
 *   !proto.base.Empty>}
 */
const methodDescriptor_EventService_DeleteEventSchedule = new grpc.web.MethodDescriptor(
  '/event.web_partnership.EventService/DeleteEventSchedule',
  grpc.web.MethodType.UNARY,
  proto.event.web_partnership.DeleteEventScheduleReq,
  base_base_pb.Empty,
  /**
   * @param {!proto.event.web_partnership.DeleteEventScheduleReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  base_base_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.event.web_partnership.DeleteEventScheduleReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.base.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.base.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.web_partnership.EventServiceClient.prototype.deleteEventSchedule =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.web_partnership.EventService/DeleteEventSchedule',
      request,
      metadata || {},
      methodDescriptor_EventService_DeleteEventSchedule,
      callback);
};


/**
 * @param {!proto.event.web_partnership.DeleteEventScheduleReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.base.Empty>}
 *     Promise that resolves to the response
 */
proto.event.web_partnership.EventServicePromiseClient.prototype.deleteEventSchedule =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.web_partnership.EventService/DeleteEventSchedule',
      request,
      metadata || {},
      methodDescriptor_EventService_DeleteEventSchedule);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.web_partnership.ListEventScheduleReq,
 *   !proto.event.web_partnership.ListEventScheduleRes>}
 */
const methodDescriptor_EventService_ListEventSchedules = new grpc.web.MethodDescriptor(
  '/event.web_partnership.EventService/ListEventSchedules',
  grpc.web.MethodType.UNARY,
  proto.event.web_partnership.ListEventScheduleReq,
  proto.event.web_partnership.ListEventScheduleRes,
  /**
   * @param {!proto.event.web_partnership.ListEventScheduleReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.event.web_partnership.ListEventScheduleRes.deserializeBinary
);


/**
 * @param {!proto.event.web_partnership.ListEventScheduleReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.event.web_partnership.ListEventScheduleRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.event.web_partnership.ListEventScheduleRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.web_partnership.EventServiceClient.prototype.listEventSchedules =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.web_partnership.EventService/ListEventSchedules',
      request,
      metadata || {},
      methodDescriptor_EventService_ListEventSchedules,
      callback);
};


/**
 * @param {!proto.event.web_partnership.ListEventScheduleReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.event.web_partnership.ListEventScheduleRes>}
 *     Promise that resolves to the response
 */
proto.event.web_partnership.EventServicePromiseClient.prototype.listEventSchedules =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.web_partnership.EventService/ListEventSchedules',
      request,
      metadata || {},
      methodDescriptor_EventService_ListEventSchedules);
};


module.exports = proto.event.web_partnership;

