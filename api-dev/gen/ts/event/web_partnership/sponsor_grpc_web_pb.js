/**
 * @fileoverview gRPC-Web generated client stub for event.web_partnership
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.20.3
// source: event/web_partnership/sponsor.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var base_base_pb = require('../../base/base_pb.js')

var event_web_partnership_base_pb = require('../../event/web_partnership/base_pb.js')
const proto = {};
proto.event = {};
proto.event.web_partnership = require('./sponsor_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.event.web_partnership.SponsorServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.event.web_partnership.SponsorServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.web_partnership.CreateSponsorReq,
 *   !proto.event.web_partnership.CreateSponsorRes>}
 */
const methodDescriptor_SponsorService_CreateSponsor = new grpc.web.MethodDescriptor(
  '/event.web_partnership.SponsorService/CreateSponsor',
  grpc.web.MethodType.UNARY,
  proto.event.web_partnership.CreateSponsorReq,
  proto.event.web_partnership.CreateSponsorRes,
  /**
   * @param {!proto.event.web_partnership.CreateSponsorReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.event.web_partnership.CreateSponsorRes.deserializeBinary
);


/**
 * @param {!proto.event.web_partnership.CreateSponsorReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.event.web_partnership.CreateSponsorRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.event.web_partnership.CreateSponsorRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.web_partnership.SponsorServiceClient.prototype.createSponsor =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.web_partnership.SponsorService/CreateSponsor',
      request,
      metadata || {},
      methodDescriptor_SponsorService_CreateSponsor,
      callback);
};


/**
 * @param {!proto.event.web_partnership.CreateSponsorReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.event.web_partnership.CreateSponsorRes>}
 *     Promise that resolves to the response
 */
proto.event.web_partnership.SponsorServicePromiseClient.prototype.createSponsor =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.web_partnership.SponsorService/CreateSponsor',
      request,
      metadata || {},
      methodDescriptor_SponsorService_CreateSponsor);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.web_partnership.UpdateSponsorReq,
 *   !proto.base.Empty>}
 */
const methodDescriptor_SponsorService_UpdateSponsor = new grpc.web.MethodDescriptor(
  '/event.web_partnership.SponsorService/UpdateSponsor',
  grpc.web.MethodType.UNARY,
  proto.event.web_partnership.UpdateSponsorReq,
  base_base_pb.Empty,
  /**
   * @param {!proto.event.web_partnership.UpdateSponsorReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  base_base_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.event.web_partnership.UpdateSponsorReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.base.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.base.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.web_partnership.SponsorServiceClient.prototype.updateSponsor =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.web_partnership.SponsorService/UpdateSponsor',
      request,
      metadata || {},
      methodDescriptor_SponsorService_UpdateSponsor,
      callback);
};


/**
 * @param {!proto.event.web_partnership.UpdateSponsorReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.base.Empty>}
 *     Promise that resolves to the response
 */
proto.event.web_partnership.SponsorServicePromiseClient.prototype.updateSponsor =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.web_partnership.SponsorService/UpdateSponsor',
      request,
      metadata || {},
      methodDescriptor_SponsorService_UpdateSponsor);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.web_partnership.DeleteSponsorReq,
 *   !proto.base.Empty>}
 */
const methodDescriptor_SponsorService_DeleteSponsor = new grpc.web.MethodDescriptor(
  '/event.web_partnership.SponsorService/DeleteSponsor',
  grpc.web.MethodType.UNARY,
  proto.event.web_partnership.DeleteSponsorReq,
  base_base_pb.Empty,
  /**
   * @param {!proto.event.web_partnership.DeleteSponsorReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  base_base_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.event.web_partnership.DeleteSponsorReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.base.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.base.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.web_partnership.SponsorServiceClient.prototype.deleteSponsor =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.web_partnership.SponsorService/DeleteSponsor',
      request,
      metadata || {},
      methodDescriptor_SponsorService_DeleteSponsor,
      callback);
};


/**
 * @param {!proto.event.web_partnership.DeleteSponsorReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.base.Empty>}
 *     Promise that resolves to the response
 */
proto.event.web_partnership.SponsorServicePromiseClient.prototype.deleteSponsor =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.web_partnership.SponsorService/DeleteSponsor',
      request,
      metadata || {},
      methodDescriptor_SponsorService_DeleteSponsor);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.web_partnership.GetSponsorDetailReq,
 *   !proto.event.web_partnership.GetSponsorDetailRes>}
 */
const methodDescriptor_SponsorService_GetSponsorDetail = new grpc.web.MethodDescriptor(
  '/event.web_partnership.SponsorService/GetSponsorDetail',
  grpc.web.MethodType.UNARY,
  proto.event.web_partnership.GetSponsorDetailReq,
  proto.event.web_partnership.GetSponsorDetailRes,
  /**
   * @param {!proto.event.web_partnership.GetSponsorDetailReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.event.web_partnership.GetSponsorDetailRes.deserializeBinary
);


/**
 * @param {!proto.event.web_partnership.GetSponsorDetailReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.event.web_partnership.GetSponsorDetailRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.event.web_partnership.GetSponsorDetailRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.web_partnership.SponsorServiceClient.prototype.getSponsorDetail =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.web_partnership.SponsorService/GetSponsorDetail',
      request,
      metadata || {},
      methodDescriptor_SponsorService_GetSponsorDetail,
      callback);
};


/**
 * @param {!proto.event.web_partnership.GetSponsorDetailReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.event.web_partnership.GetSponsorDetailRes>}
 *     Promise that resolves to the response
 */
proto.event.web_partnership.SponsorServicePromiseClient.prototype.getSponsorDetail =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.web_partnership.SponsorService/GetSponsorDetail',
      request,
      metadata || {},
      methodDescriptor_SponsorService_GetSponsorDetail);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.event.web_partnership.ListSponsorReq,
 *   !proto.event.web_partnership.ListSponsorRes>}
 */
const methodDescriptor_SponsorService_ListSponsor = new grpc.web.MethodDescriptor(
  '/event.web_partnership.SponsorService/ListSponsor',
  grpc.web.MethodType.UNARY,
  proto.event.web_partnership.ListSponsorReq,
  proto.event.web_partnership.ListSponsorRes,
  /**
   * @param {!proto.event.web_partnership.ListSponsorReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.event.web_partnership.ListSponsorRes.deserializeBinary
);


/**
 * @param {!proto.event.web_partnership.ListSponsorReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.event.web_partnership.ListSponsorRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.event.web_partnership.ListSponsorRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.event.web_partnership.SponsorServiceClient.prototype.listSponsor =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/event.web_partnership.SponsorService/ListSponsor',
      request,
      metadata || {},
      methodDescriptor_SponsorService_ListSponsor,
      callback);
};


/**
 * @param {!proto.event.web_partnership.ListSponsorReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.event.web_partnership.ListSponsorRes>}
 *     Promise that resolves to the response
 */
proto.event.web_partnership.SponsorServicePromiseClient.prototype.listSponsor =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/event.web_partnership.SponsorService/ListSponsor',
      request,
      metadata || {},
      methodDescriptor_SponsorService_ListSponsor);
};


module.exports = proto.event.web_partnership;

