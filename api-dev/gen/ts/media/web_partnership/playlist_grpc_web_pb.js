/**
 * @fileoverview gRPC-Web generated client stub for media.web_partnership
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.20.3
// source: media/web_partnership/playlist.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var media_base_media_pb = require('../../media/base_media_pb.js')

var media_web_partnership_base_pb = require('../../media/web_partnership/base_pb.js')

var media_web_partnership_media_pb = require('../../media/web_partnership/media_pb.js')
const proto = {};
proto.media = {};
proto.media.web_partnership = require('./playlist_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.media.web_partnership.PlaylistServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.media.web_partnership.PlaylistServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.media.web_partnership.CreatePlaylistReq,
 *   !proto.media.web_partnership.CreatePlaylistRes>}
 */
const methodDescriptor_PlaylistService_CreatePlaylist = new grpc.web.MethodDescriptor(
  '/media.web_partnership.PlaylistService/CreatePlaylist',
  grpc.web.MethodType.UNARY,
  proto.media.web_partnership.CreatePlaylistReq,
  proto.media.web_partnership.CreatePlaylistRes,
  /**
   * @param {!proto.media.web_partnership.CreatePlaylistReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.media.web_partnership.CreatePlaylistRes.deserializeBinary
);


/**
 * @param {!proto.media.web_partnership.CreatePlaylistReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.media.web_partnership.CreatePlaylistRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.media.web_partnership.CreatePlaylistRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.media.web_partnership.PlaylistServiceClient.prototype.createPlaylist =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/media.web_partnership.PlaylistService/CreatePlaylist',
      request,
      metadata || {},
      methodDescriptor_PlaylistService_CreatePlaylist,
      callback);
};


/**
 * @param {!proto.media.web_partnership.CreatePlaylistReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.media.web_partnership.CreatePlaylistRes>}
 *     Promise that resolves to the response
 */
proto.media.web_partnership.PlaylistServicePromiseClient.prototype.createPlaylist =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/media.web_partnership.PlaylistService/CreatePlaylist',
      request,
      metadata || {},
      methodDescriptor_PlaylistService_CreatePlaylist);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.media.web_partnership.UpdatePlaylistReq,
 *   !proto.media.Empty>}
 */
const methodDescriptor_PlaylistService_UpdatePlaylist = new grpc.web.MethodDescriptor(
  '/media.web_partnership.PlaylistService/UpdatePlaylist',
  grpc.web.MethodType.UNARY,
  proto.media.web_partnership.UpdatePlaylistReq,
  media_base_media_pb.Empty,
  /**
   * @param {!proto.media.web_partnership.UpdatePlaylistReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  media_base_media_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.media.web_partnership.UpdatePlaylistReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.media.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.media.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.media.web_partnership.PlaylistServiceClient.prototype.updatePlaylist =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/media.web_partnership.PlaylistService/UpdatePlaylist',
      request,
      metadata || {},
      methodDescriptor_PlaylistService_UpdatePlaylist,
      callback);
};


/**
 * @param {!proto.media.web_partnership.UpdatePlaylistReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.media.Empty>}
 *     Promise that resolves to the response
 */
proto.media.web_partnership.PlaylistServicePromiseClient.prototype.updatePlaylist =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/media.web_partnership.PlaylistService/UpdatePlaylist',
      request,
      metadata || {},
      methodDescriptor_PlaylistService_UpdatePlaylist);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.media.web_partnership.DeletePlaylistReq,
 *   !proto.media.Empty>}
 */
const methodDescriptor_PlaylistService_DeletePlaylist = new grpc.web.MethodDescriptor(
  '/media.web_partnership.PlaylistService/DeletePlaylist',
  grpc.web.MethodType.UNARY,
  proto.media.web_partnership.DeletePlaylistReq,
  media_base_media_pb.Empty,
  /**
   * @param {!proto.media.web_partnership.DeletePlaylistReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  media_base_media_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.media.web_partnership.DeletePlaylistReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.media.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.media.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.media.web_partnership.PlaylistServiceClient.prototype.deletePlaylist =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/media.web_partnership.PlaylistService/DeletePlaylist',
      request,
      metadata || {},
      methodDescriptor_PlaylistService_DeletePlaylist,
      callback);
};


/**
 * @param {!proto.media.web_partnership.DeletePlaylistReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.media.Empty>}
 *     Promise that resolves to the response
 */
proto.media.web_partnership.PlaylistServicePromiseClient.prototype.deletePlaylist =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/media.web_partnership.PlaylistService/DeletePlaylist',
      request,
      metadata || {},
      methodDescriptor_PlaylistService_DeletePlaylist);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.media.web_partnership.RetrievePlaylistReq,
 *   !proto.media.web_partnership.RetrievePlaylistRes>}
 */
const methodDescriptor_PlaylistService_RetrievePlaylist = new grpc.web.MethodDescriptor(
  '/media.web_partnership.PlaylistService/RetrievePlaylist',
  grpc.web.MethodType.UNARY,
  proto.media.web_partnership.RetrievePlaylistReq,
  proto.media.web_partnership.RetrievePlaylistRes,
  /**
   * @param {!proto.media.web_partnership.RetrievePlaylistReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.media.web_partnership.RetrievePlaylistRes.deserializeBinary
);


/**
 * @param {!proto.media.web_partnership.RetrievePlaylistReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.media.web_partnership.RetrievePlaylistRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.media.web_partnership.RetrievePlaylistRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.media.web_partnership.PlaylistServiceClient.prototype.retrievePlaylist =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/media.web_partnership.PlaylistService/RetrievePlaylist',
      request,
      metadata || {},
      methodDescriptor_PlaylistService_RetrievePlaylist,
      callback);
};


/**
 * @param {!proto.media.web_partnership.RetrievePlaylistReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.media.web_partnership.RetrievePlaylistRes>}
 *     Promise that resolves to the response
 */
proto.media.web_partnership.PlaylistServicePromiseClient.prototype.retrievePlaylist =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/media.web_partnership.PlaylistService/RetrievePlaylist',
      request,
      metadata || {},
      methodDescriptor_PlaylistService_RetrievePlaylist);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.media.web_partnership.ListPlaylistReq,
 *   !proto.media.web_partnership.ListPlaylistRes>}
 */
const methodDescriptor_PlaylistService_ListPlaylist = new grpc.web.MethodDescriptor(
  '/media.web_partnership.PlaylistService/ListPlaylist',
  grpc.web.MethodType.UNARY,
  proto.media.web_partnership.ListPlaylistReq,
  proto.media.web_partnership.ListPlaylistRes,
  /**
   * @param {!proto.media.web_partnership.ListPlaylistReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.media.web_partnership.ListPlaylistRes.deserializeBinary
);


/**
 * @param {!proto.media.web_partnership.ListPlaylistReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.media.web_partnership.ListPlaylistRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.media.web_partnership.ListPlaylistRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.media.web_partnership.PlaylistServiceClient.prototype.listPlaylist =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/media.web_partnership.PlaylistService/ListPlaylist',
      request,
      metadata || {},
      methodDescriptor_PlaylistService_ListPlaylist,
      callback);
};


/**
 * @param {!proto.media.web_partnership.ListPlaylistReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.media.web_partnership.ListPlaylistRes>}
 *     Promise that resolves to the response
 */
proto.media.web_partnership.PlaylistServicePromiseClient.prototype.listPlaylist =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/media.web_partnership.PlaylistService/ListPlaylist',
      request,
      metadata || {},
      methodDescriptor_PlaylistService_ListPlaylist);
};


module.exports = proto.media.web_partnership;

