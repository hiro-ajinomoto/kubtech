// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: proto/customer/mobile/auth_phone.proto

package mobile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthPhoneServiceClient is the client API for AuthPhoneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthPhoneServiceClient interface {
	SendOtpByPhone(ctx context.Context, in *SendOtpByPhoneReq, opts ...grpc.CallOption) (*SendOtpByPhoneRes, error)
	VerifyPhoneNumber(ctx context.Context, in *VerifyPhoneNumberReq, opts ...grpc.CallOption) (*Empty, error)
	VerifyOtpToResetPasswordByPhone(ctx context.Context, in *VerifyOtpToResetPasswordByPhoneReq, opts ...grpc.CallOption) (*VerifyOtpToResetPasswordByPhoneRes, error)
	ResetPasswordByPhone(ctx context.Context, in *ResetPasswordByPhoneReq, opts ...grpc.CallOption) (*Empty, error)
	SendOtpSecurityByPhone(ctx context.Context, in *SendOtpSecurityByPhoneReq, opts ...grpc.CallOption) (*SendOtpSecurityByPhoneRes, error)
	VerifyOtpSecurityByPhone(ctx context.Context, in *VerifyOtpSecurityByPhoneReq, opts ...grpc.CallOption) (*VerifyOtpSecurityByPhoneRes, error)
	SendOtpToChangePhoneByPhone(ctx context.Context, in *SendOtpToChangePhoneByPhoneReq, opts ...grpc.CallOption) (*SendOtpToChangePhoneByPhoneRes, error)
	VerifyOtpToChangePhoneByPhone(ctx context.Context, in *VerifyOtpToChangePhoneByPhoneReq, opts ...grpc.CallOption) (*Empty, error)
}

type authPhoneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthPhoneServiceClient(cc grpc.ClientConnInterface) AuthPhoneServiceClient {
	return &authPhoneServiceClient{cc}
}

func (c *authPhoneServiceClient) SendOtpByPhone(ctx context.Context, in *SendOtpByPhoneReq, opts ...grpc.CallOption) (*SendOtpByPhoneRes, error) {
	out := new(SendOtpByPhoneRes)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthPhoneService/SendOtpByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authPhoneServiceClient) VerifyPhoneNumber(ctx context.Context, in *VerifyPhoneNumberReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthPhoneService/VerifyPhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authPhoneServiceClient) VerifyOtpToResetPasswordByPhone(ctx context.Context, in *VerifyOtpToResetPasswordByPhoneReq, opts ...grpc.CallOption) (*VerifyOtpToResetPasswordByPhoneRes, error) {
	out := new(VerifyOtpToResetPasswordByPhoneRes)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthPhoneService/VerifyOtpToResetPasswordByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authPhoneServiceClient) ResetPasswordByPhone(ctx context.Context, in *ResetPasswordByPhoneReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthPhoneService/ResetPasswordByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authPhoneServiceClient) SendOtpSecurityByPhone(ctx context.Context, in *SendOtpSecurityByPhoneReq, opts ...grpc.CallOption) (*SendOtpSecurityByPhoneRes, error) {
	out := new(SendOtpSecurityByPhoneRes)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthPhoneService/SendOtpSecurityByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authPhoneServiceClient) VerifyOtpSecurityByPhone(ctx context.Context, in *VerifyOtpSecurityByPhoneReq, opts ...grpc.CallOption) (*VerifyOtpSecurityByPhoneRes, error) {
	out := new(VerifyOtpSecurityByPhoneRes)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthPhoneService/VerifyOtpSecurityByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authPhoneServiceClient) SendOtpToChangePhoneByPhone(ctx context.Context, in *SendOtpToChangePhoneByPhoneReq, opts ...grpc.CallOption) (*SendOtpToChangePhoneByPhoneRes, error) {
	out := new(SendOtpToChangePhoneByPhoneRes)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthPhoneService/SendOtpToChangePhoneByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authPhoneServiceClient) VerifyOtpToChangePhoneByPhone(ctx context.Context, in *VerifyOtpToChangePhoneByPhoneReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthPhoneService/VerifyOtpToChangePhoneByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthPhoneServiceServer is the server API for AuthPhoneService service.
// All implementations must embed UnimplementedAuthPhoneServiceServer
// for forward compatibility
type AuthPhoneServiceServer interface {
	SendOtpByPhone(context.Context, *SendOtpByPhoneReq) (*SendOtpByPhoneRes, error)
	VerifyPhoneNumber(context.Context, *VerifyPhoneNumberReq) (*Empty, error)
	VerifyOtpToResetPasswordByPhone(context.Context, *VerifyOtpToResetPasswordByPhoneReq) (*VerifyOtpToResetPasswordByPhoneRes, error)
	ResetPasswordByPhone(context.Context, *ResetPasswordByPhoneReq) (*Empty, error)
	SendOtpSecurityByPhone(context.Context, *SendOtpSecurityByPhoneReq) (*SendOtpSecurityByPhoneRes, error)
	VerifyOtpSecurityByPhone(context.Context, *VerifyOtpSecurityByPhoneReq) (*VerifyOtpSecurityByPhoneRes, error)
	SendOtpToChangePhoneByPhone(context.Context, *SendOtpToChangePhoneByPhoneReq) (*SendOtpToChangePhoneByPhoneRes, error)
	VerifyOtpToChangePhoneByPhone(context.Context, *VerifyOtpToChangePhoneByPhoneReq) (*Empty, error)
	mustEmbedUnimplementedAuthPhoneServiceServer()
}

// UnimplementedAuthPhoneServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthPhoneServiceServer struct {
}

func (UnimplementedAuthPhoneServiceServer) SendOtpByPhone(context.Context, *SendOtpByPhoneReq) (*SendOtpByPhoneRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOtpByPhone not implemented")
}
func (UnimplementedAuthPhoneServiceServer) VerifyPhoneNumber(context.Context, *VerifyPhoneNumberReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPhoneNumber not implemented")
}
func (UnimplementedAuthPhoneServiceServer) VerifyOtpToResetPasswordByPhone(context.Context, *VerifyOtpToResetPasswordByPhoneReq) (*VerifyOtpToResetPasswordByPhoneRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOtpToResetPasswordByPhone not implemented")
}
func (UnimplementedAuthPhoneServiceServer) ResetPasswordByPhone(context.Context, *ResetPasswordByPhoneReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordByPhone not implemented")
}
func (UnimplementedAuthPhoneServiceServer) SendOtpSecurityByPhone(context.Context, *SendOtpSecurityByPhoneReq) (*SendOtpSecurityByPhoneRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOtpSecurityByPhone not implemented")
}
func (UnimplementedAuthPhoneServiceServer) VerifyOtpSecurityByPhone(context.Context, *VerifyOtpSecurityByPhoneReq) (*VerifyOtpSecurityByPhoneRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOtpSecurityByPhone not implemented")
}
func (UnimplementedAuthPhoneServiceServer) SendOtpToChangePhoneByPhone(context.Context, *SendOtpToChangePhoneByPhoneReq) (*SendOtpToChangePhoneByPhoneRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOtpToChangePhoneByPhone not implemented")
}
func (UnimplementedAuthPhoneServiceServer) VerifyOtpToChangePhoneByPhone(context.Context, *VerifyOtpToChangePhoneByPhoneReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOtpToChangePhoneByPhone not implemented")
}
func (UnimplementedAuthPhoneServiceServer) mustEmbedUnimplementedAuthPhoneServiceServer() {}

// UnsafeAuthPhoneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthPhoneServiceServer will
// result in compilation errors.
type UnsafeAuthPhoneServiceServer interface {
	mustEmbedUnimplementedAuthPhoneServiceServer()
}

func RegisterAuthPhoneServiceServer(s grpc.ServiceRegistrar, srv AuthPhoneServiceServer) {
	s.RegisterService(&AuthPhoneService_ServiceDesc, srv)
}

func _AuthPhoneService_SendOtpByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOtpByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthPhoneServiceServer).SendOtpByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthPhoneService/SendOtpByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthPhoneServiceServer).SendOtpByPhone(ctx, req.(*SendOtpByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthPhoneService_VerifyPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPhoneNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthPhoneServiceServer).VerifyPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthPhoneService/VerifyPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthPhoneServiceServer).VerifyPhoneNumber(ctx, req.(*VerifyPhoneNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthPhoneService_VerifyOtpToResetPasswordByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOtpToResetPasswordByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthPhoneServiceServer).VerifyOtpToResetPasswordByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthPhoneService/VerifyOtpToResetPasswordByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthPhoneServiceServer).VerifyOtpToResetPasswordByPhone(ctx, req.(*VerifyOtpToResetPasswordByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthPhoneService_ResetPasswordByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthPhoneServiceServer).ResetPasswordByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthPhoneService/ResetPasswordByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthPhoneServiceServer).ResetPasswordByPhone(ctx, req.(*ResetPasswordByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthPhoneService_SendOtpSecurityByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOtpSecurityByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthPhoneServiceServer).SendOtpSecurityByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthPhoneService/SendOtpSecurityByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthPhoneServiceServer).SendOtpSecurityByPhone(ctx, req.(*SendOtpSecurityByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthPhoneService_VerifyOtpSecurityByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOtpSecurityByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthPhoneServiceServer).VerifyOtpSecurityByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthPhoneService/VerifyOtpSecurityByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthPhoneServiceServer).VerifyOtpSecurityByPhone(ctx, req.(*VerifyOtpSecurityByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthPhoneService_SendOtpToChangePhoneByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOtpToChangePhoneByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthPhoneServiceServer).SendOtpToChangePhoneByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthPhoneService/SendOtpToChangePhoneByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthPhoneServiceServer).SendOtpToChangePhoneByPhone(ctx, req.(*SendOtpToChangePhoneByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthPhoneService_VerifyOtpToChangePhoneByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOtpToChangePhoneByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthPhoneServiceServer).VerifyOtpToChangePhoneByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthPhoneService/VerifyOtpToChangePhoneByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthPhoneServiceServer).VerifyOtpToChangePhoneByPhone(ctx, req.(*VerifyOtpToChangePhoneByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthPhoneService_ServiceDesc is the grpc.ServiceDesc for AuthPhoneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthPhoneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customer.mobile.AuthPhoneService",
	HandlerType: (*AuthPhoneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendOtpByPhone",
			Handler:    _AuthPhoneService_SendOtpByPhone_Handler,
		},
		{
			MethodName: "VerifyPhoneNumber",
			Handler:    _AuthPhoneService_VerifyPhoneNumber_Handler,
		},
		{
			MethodName: "VerifyOtpToResetPasswordByPhone",
			Handler:    _AuthPhoneService_VerifyOtpToResetPasswordByPhone_Handler,
		},
		{
			MethodName: "ResetPasswordByPhone",
			Handler:    _AuthPhoneService_ResetPasswordByPhone_Handler,
		},
		{
			MethodName: "SendOtpSecurityByPhone",
			Handler:    _AuthPhoneService_SendOtpSecurityByPhone_Handler,
		},
		{
			MethodName: "VerifyOtpSecurityByPhone",
			Handler:    _AuthPhoneService_VerifyOtpSecurityByPhone_Handler,
		},
		{
			MethodName: "SendOtpToChangePhoneByPhone",
			Handler:    _AuthPhoneService_SendOtpToChangePhoneByPhone_Handler,
		},
		{
			MethodName: "VerifyOtpToChangePhoneByPhone",
			Handler:    _AuthPhoneService_VerifyOtpToChangePhoneByPhone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/customer/mobile/auth_phone.proto",
}
