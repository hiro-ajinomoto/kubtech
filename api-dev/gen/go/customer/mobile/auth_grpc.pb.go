// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: proto/customer/mobile/auth.proto

package mobile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	// Authentication
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error)
	SocialLogin(ctx context.Context, in *SocialLoginReq, opts ...grpc.CallOption) (*LoginRes, error)
	RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*RefreshTokenRes, error)
	LinkSocialAccount(ctx context.Context, in *LinkSocialAccountReq, opts ...grpc.CallOption) (*LinkSocialAccountRes, error)
	Logout(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	LogoutAllDevice(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	VerifySocialToken(ctx context.Context, in *VerifySocialTokenReq, opts ...grpc.CallOption) (*Empty, error)
	ScanQRCode(ctx context.Context, in *ScanQRCodeReq, opts ...grpc.CallOption) (*Empty, error)
	LoginByQRCode(ctx context.Context, in *LoginByQRCodeReq, opts ...grpc.CallOption) (*LoginByQRCodeRes, error)
	VerifyPasswordSecurity(ctx context.Context, in *VerifyPasswordSecurityReq, opts ...grpc.CallOption) (*VerifyPasswordSecurityRes, error)
	// update important information with login social
	CheckAccountHavePhoneNumber(ctx context.Context, in *CheckAccountHavePhoneNumberReq, opts ...grpc.CallOption) (*CheckAccountHavePhoneNumberRes, error)
	UpdateImportantInformation(ctx context.Context, in *UpdateImportantInformationReq, opts ...grpc.CallOption) (*Empty, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error) {
	out := new(RegisterRes)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error) {
	out := new(LoginRes)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SocialLogin(ctx context.Context, in *SocialLoginReq, opts ...grpc.CallOption) (*LoginRes, error) {
	out := new(LoginRes)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthService/SocialLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*RefreshTokenRes, error) {
	out := new(RefreshTokenRes)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthService/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) LinkSocialAccount(ctx context.Context, in *LinkSocialAccountReq, opts ...grpc.CallOption) (*LinkSocialAccountRes, error) {
	out := new(LinkSocialAccountRes)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthService/LinkSocialAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Logout(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) LogoutAllDevice(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthService/LogoutAllDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifySocialToken(ctx context.Context, in *VerifySocialTokenReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthService/VerifySocialToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ScanQRCode(ctx context.Context, in *ScanQRCodeReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthService/ScanQRCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) LoginByQRCode(ctx context.Context, in *LoginByQRCodeReq, opts ...grpc.CallOption) (*LoginByQRCodeRes, error) {
	out := new(LoginByQRCodeRes)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthService/LoginByQRCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyPasswordSecurity(ctx context.Context, in *VerifyPasswordSecurityReq, opts ...grpc.CallOption) (*VerifyPasswordSecurityRes, error) {
	out := new(VerifyPasswordSecurityRes)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthService/VerifyPasswordSecurity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CheckAccountHavePhoneNumber(ctx context.Context, in *CheckAccountHavePhoneNumberReq, opts ...grpc.CallOption) (*CheckAccountHavePhoneNumberRes, error) {
	out := new(CheckAccountHavePhoneNumberRes)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthService/CheckAccountHavePhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateImportantInformation(ctx context.Context, in *UpdateImportantInformationReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthService/UpdateImportantInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	// Authentication
	Register(context.Context, *RegisterReq) (*RegisterRes, error)
	Login(context.Context, *LoginReq) (*LoginRes, error)
	SocialLogin(context.Context, *SocialLoginReq) (*LoginRes, error)
	RefreshToken(context.Context, *RefreshTokenReq) (*RefreshTokenRes, error)
	LinkSocialAccount(context.Context, *LinkSocialAccountReq) (*LinkSocialAccountRes, error)
	Logout(context.Context, *Empty) (*Empty, error)
	LogoutAllDevice(context.Context, *Empty) (*Empty, error)
	VerifySocialToken(context.Context, *VerifySocialTokenReq) (*Empty, error)
	ScanQRCode(context.Context, *ScanQRCodeReq) (*Empty, error)
	LoginByQRCode(context.Context, *LoginByQRCodeReq) (*LoginByQRCodeRes, error)
	VerifyPasswordSecurity(context.Context, *VerifyPasswordSecurityReq) (*VerifyPasswordSecurityRes, error)
	// update important information with login social
	CheckAccountHavePhoneNumber(context.Context, *CheckAccountHavePhoneNumberReq) (*CheckAccountHavePhoneNumberRes, error)
	UpdateImportantInformation(context.Context, *UpdateImportantInformationReq) (*Empty, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) Register(context.Context, *RegisterReq) (*RegisterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthServiceServer) Login(context.Context, *LoginReq) (*LoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServiceServer) SocialLogin(context.Context, *SocialLoginReq) (*LoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SocialLogin not implemented")
}
func (UnimplementedAuthServiceServer) RefreshToken(context.Context, *RefreshTokenReq) (*RefreshTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAuthServiceServer) LinkSocialAccount(context.Context, *LinkSocialAccountReq) (*LinkSocialAccountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkSocialAccount not implemented")
}
func (UnimplementedAuthServiceServer) Logout(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthServiceServer) LogoutAllDevice(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutAllDevice not implemented")
}
func (UnimplementedAuthServiceServer) VerifySocialToken(context.Context, *VerifySocialTokenReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySocialToken not implemented")
}
func (UnimplementedAuthServiceServer) ScanQRCode(context.Context, *ScanQRCodeReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanQRCode not implemented")
}
func (UnimplementedAuthServiceServer) LoginByQRCode(context.Context, *LoginByQRCodeReq) (*LoginByQRCodeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByQRCode not implemented")
}
func (UnimplementedAuthServiceServer) VerifyPasswordSecurity(context.Context, *VerifyPasswordSecurityReq) (*VerifyPasswordSecurityRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPasswordSecurity not implemented")
}
func (UnimplementedAuthServiceServer) CheckAccountHavePhoneNumber(context.Context, *CheckAccountHavePhoneNumberReq) (*CheckAccountHavePhoneNumberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAccountHavePhoneNumber not implemented")
}
func (UnimplementedAuthServiceServer) UpdateImportantInformation(context.Context, *UpdateImportantInformationReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImportantInformation not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SocialLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SocialLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SocialLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthService/SocialLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SocialLogin(ctx, req.(*SocialLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthService/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RefreshToken(ctx, req.(*RefreshTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_LinkSocialAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkSocialAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).LinkSocialAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthService/LinkSocialAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).LinkSocialAccount(ctx, req.(*LinkSocialAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Logout(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_LogoutAllDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).LogoutAllDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthService/LogoutAllDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).LogoutAllDevice(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifySocialToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySocialTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifySocialToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthService/VerifySocialToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifySocialToken(ctx, req.(*VerifySocialTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ScanQRCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanQRCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ScanQRCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthService/ScanQRCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ScanQRCode(ctx, req.(*ScanQRCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_LoginByQRCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginByQRCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).LoginByQRCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthService/LoginByQRCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).LoginByQRCode(ctx, req.(*LoginByQRCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyPasswordSecurity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPasswordSecurityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyPasswordSecurity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthService/VerifyPasswordSecurity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyPasswordSecurity(ctx, req.(*VerifyPasswordSecurityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CheckAccountHavePhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAccountHavePhoneNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CheckAccountHavePhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthService/CheckAccountHavePhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CheckAccountHavePhoneNumber(ctx, req.(*CheckAccountHavePhoneNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateImportantInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImportantInformationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateImportantInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthService/UpdateImportantInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateImportantInformation(ctx, req.(*UpdateImportantInformationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customer.mobile.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _AuthService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
		{
			MethodName: "SocialLogin",
			Handler:    _AuthService_SocialLogin_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _AuthService_RefreshToken_Handler,
		},
		{
			MethodName: "LinkSocialAccount",
			Handler:    _AuthService_LinkSocialAccount_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AuthService_Logout_Handler,
		},
		{
			MethodName: "LogoutAllDevice",
			Handler:    _AuthService_LogoutAllDevice_Handler,
		},
		{
			MethodName: "VerifySocialToken",
			Handler:    _AuthService_VerifySocialToken_Handler,
		},
		{
			MethodName: "ScanQRCode",
			Handler:    _AuthService_ScanQRCode_Handler,
		},
		{
			MethodName: "LoginByQRCode",
			Handler:    _AuthService_LoginByQRCode_Handler,
		},
		{
			MethodName: "VerifyPasswordSecurity",
			Handler:    _AuthService_VerifyPasswordSecurity_Handler,
		},
		{
			MethodName: "CheckAccountHavePhoneNumber",
			Handler:    _AuthService_CheckAccountHavePhoneNumber_Handler,
		},
		{
			MethodName: "UpdateImportantInformation",
			Handler:    _AuthService_UpdateImportantInformation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/customer/mobile/auth.proto",
}
