// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: proto/customer/mobile/auth_email.proto

package mobile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthEmailServiceClient is the client API for AuthEmailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthEmailServiceClient interface {
	SendOtpByEmail(ctx context.Context, in *SendOtpByEmailReq, opts ...grpc.CallOption) (*SendOtpByEmailRes, error)
	VerifyEmail(ctx context.Context, in *VerifyEmailReq, opts ...grpc.CallOption) (*Empty, error)
	VerifyOtpToResetPasswordByEmail(ctx context.Context, in *VerifyOtpToResetPasswordByEmailReq, opts ...grpc.CallOption) (*VerifyOtpToResetPasswordByEmailRes, error)
	ResetPasswordByEmail(ctx context.Context, in *ResetPasswordByEmailReq, opts ...grpc.CallOption) (*Empty, error)
	SendOtpSecurityByEmail(ctx context.Context, in *SendOtpSecurityByEmailReq, opts ...grpc.CallOption) (*SendOtpSecurityByEmailRes, error)
	VerifyOtpSecurityByEmail(ctx context.Context, in *VerifyOtpSecurityByEmailReq, opts ...grpc.CallOption) (*VerifyOtpSecurityByEmailRes, error)
	SendOtpToChangeEmailByEmail(ctx context.Context, in *SendOtpToChangeEmailByEmailReq, opts ...grpc.CallOption) (*SendOtpToChangeEmailByEmailRes, error)
	VerifyOtpToChangeEmailByEmail(ctx context.Context, in *VerifyOtpToChangeEmailByEmailReq, opts ...grpc.CallOption) (*Empty, error)
}

type authEmailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthEmailServiceClient(cc grpc.ClientConnInterface) AuthEmailServiceClient {
	return &authEmailServiceClient{cc}
}

func (c *authEmailServiceClient) SendOtpByEmail(ctx context.Context, in *SendOtpByEmailReq, opts ...grpc.CallOption) (*SendOtpByEmailRes, error) {
	out := new(SendOtpByEmailRes)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthEmailService/SendOtpByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authEmailServiceClient) VerifyEmail(ctx context.Context, in *VerifyEmailReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthEmailService/VerifyEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authEmailServiceClient) VerifyOtpToResetPasswordByEmail(ctx context.Context, in *VerifyOtpToResetPasswordByEmailReq, opts ...grpc.CallOption) (*VerifyOtpToResetPasswordByEmailRes, error) {
	out := new(VerifyOtpToResetPasswordByEmailRes)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthEmailService/VerifyOtpToResetPasswordByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authEmailServiceClient) ResetPasswordByEmail(ctx context.Context, in *ResetPasswordByEmailReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthEmailService/ResetPasswordByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authEmailServiceClient) SendOtpSecurityByEmail(ctx context.Context, in *SendOtpSecurityByEmailReq, opts ...grpc.CallOption) (*SendOtpSecurityByEmailRes, error) {
	out := new(SendOtpSecurityByEmailRes)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthEmailService/SendOtpSecurityByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authEmailServiceClient) VerifyOtpSecurityByEmail(ctx context.Context, in *VerifyOtpSecurityByEmailReq, opts ...grpc.CallOption) (*VerifyOtpSecurityByEmailRes, error) {
	out := new(VerifyOtpSecurityByEmailRes)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthEmailService/VerifyOtpSecurityByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authEmailServiceClient) SendOtpToChangeEmailByEmail(ctx context.Context, in *SendOtpToChangeEmailByEmailReq, opts ...grpc.CallOption) (*SendOtpToChangeEmailByEmailRes, error) {
	out := new(SendOtpToChangeEmailByEmailRes)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthEmailService/SendOtpToChangeEmailByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authEmailServiceClient) VerifyOtpToChangeEmailByEmail(ctx context.Context, in *VerifyOtpToChangeEmailByEmailReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/customer.mobile.AuthEmailService/VerifyOtpToChangeEmailByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthEmailServiceServer is the server API for AuthEmailService service.
// All implementations must embed UnimplementedAuthEmailServiceServer
// for forward compatibility
type AuthEmailServiceServer interface {
	SendOtpByEmail(context.Context, *SendOtpByEmailReq) (*SendOtpByEmailRes, error)
	VerifyEmail(context.Context, *VerifyEmailReq) (*Empty, error)
	VerifyOtpToResetPasswordByEmail(context.Context, *VerifyOtpToResetPasswordByEmailReq) (*VerifyOtpToResetPasswordByEmailRes, error)
	ResetPasswordByEmail(context.Context, *ResetPasswordByEmailReq) (*Empty, error)
	SendOtpSecurityByEmail(context.Context, *SendOtpSecurityByEmailReq) (*SendOtpSecurityByEmailRes, error)
	VerifyOtpSecurityByEmail(context.Context, *VerifyOtpSecurityByEmailReq) (*VerifyOtpSecurityByEmailRes, error)
	SendOtpToChangeEmailByEmail(context.Context, *SendOtpToChangeEmailByEmailReq) (*SendOtpToChangeEmailByEmailRes, error)
	VerifyOtpToChangeEmailByEmail(context.Context, *VerifyOtpToChangeEmailByEmailReq) (*Empty, error)
	mustEmbedUnimplementedAuthEmailServiceServer()
}

// UnimplementedAuthEmailServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthEmailServiceServer struct {
}

func (UnimplementedAuthEmailServiceServer) SendOtpByEmail(context.Context, *SendOtpByEmailReq) (*SendOtpByEmailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOtpByEmail not implemented")
}
func (UnimplementedAuthEmailServiceServer) VerifyEmail(context.Context, *VerifyEmailReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedAuthEmailServiceServer) VerifyOtpToResetPasswordByEmail(context.Context, *VerifyOtpToResetPasswordByEmailReq) (*VerifyOtpToResetPasswordByEmailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOtpToResetPasswordByEmail not implemented")
}
func (UnimplementedAuthEmailServiceServer) ResetPasswordByEmail(context.Context, *ResetPasswordByEmailReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordByEmail not implemented")
}
func (UnimplementedAuthEmailServiceServer) SendOtpSecurityByEmail(context.Context, *SendOtpSecurityByEmailReq) (*SendOtpSecurityByEmailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOtpSecurityByEmail not implemented")
}
func (UnimplementedAuthEmailServiceServer) VerifyOtpSecurityByEmail(context.Context, *VerifyOtpSecurityByEmailReq) (*VerifyOtpSecurityByEmailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOtpSecurityByEmail not implemented")
}
func (UnimplementedAuthEmailServiceServer) SendOtpToChangeEmailByEmail(context.Context, *SendOtpToChangeEmailByEmailReq) (*SendOtpToChangeEmailByEmailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOtpToChangeEmailByEmail not implemented")
}
func (UnimplementedAuthEmailServiceServer) VerifyOtpToChangeEmailByEmail(context.Context, *VerifyOtpToChangeEmailByEmailReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOtpToChangeEmailByEmail not implemented")
}
func (UnimplementedAuthEmailServiceServer) mustEmbedUnimplementedAuthEmailServiceServer() {}

// UnsafeAuthEmailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthEmailServiceServer will
// result in compilation errors.
type UnsafeAuthEmailServiceServer interface {
	mustEmbedUnimplementedAuthEmailServiceServer()
}

func RegisterAuthEmailServiceServer(s grpc.ServiceRegistrar, srv AuthEmailServiceServer) {
	s.RegisterService(&AuthEmailService_ServiceDesc, srv)
}

func _AuthEmailService_SendOtpByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOtpByEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthEmailServiceServer).SendOtpByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthEmailService/SendOtpByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthEmailServiceServer).SendOtpByEmail(ctx, req.(*SendOtpByEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthEmailService_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthEmailServiceServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthEmailService/VerifyEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthEmailServiceServer).VerifyEmail(ctx, req.(*VerifyEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthEmailService_VerifyOtpToResetPasswordByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOtpToResetPasswordByEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthEmailServiceServer).VerifyOtpToResetPasswordByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthEmailService/VerifyOtpToResetPasswordByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthEmailServiceServer).VerifyOtpToResetPasswordByEmail(ctx, req.(*VerifyOtpToResetPasswordByEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthEmailService_ResetPasswordByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordByEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthEmailServiceServer).ResetPasswordByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthEmailService/ResetPasswordByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthEmailServiceServer).ResetPasswordByEmail(ctx, req.(*ResetPasswordByEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthEmailService_SendOtpSecurityByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOtpSecurityByEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthEmailServiceServer).SendOtpSecurityByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthEmailService/SendOtpSecurityByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthEmailServiceServer).SendOtpSecurityByEmail(ctx, req.(*SendOtpSecurityByEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthEmailService_VerifyOtpSecurityByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOtpSecurityByEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthEmailServiceServer).VerifyOtpSecurityByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthEmailService/VerifyOtpSecurityByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthEmailServiceServer).VerifyOtpSecurityByEmail(ctx, req.(*VerifyOtpSecurityByEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthEmailService_SendOtpToChangeEmailByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOtpToChangeEmailByEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthEmailServiceServer).SendOtpToChangeEmailByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthEmailService/SendOtpToChangeEmailByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthEmailServiceServer).SendOtpToChangeEmailByEmail(ctx, req.(*SendOtpToChangeEmailByEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthEmailService_VerifyOtpToChangeEmailByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOtpToChangeEmailByEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthEmailServiceServer).VerifyOtpToChangeEmailByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.mobile.AuthEmailService/VerifyOtpToChangeEmailByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthEmailServiceServer).VerifyOtpToChangeEmailByEmail(ctx, req.(*VerifyOtpToChangeEmailByEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthEmailService_ServiceDesc is the grpc.ServiceDesc for AuthEmailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthEmailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customer.mobile.AuthEmailService",
	HandlerType: (*AuthEmailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendOtpByEmail",
			Handler:    _AuthEmailService_SendOtpByEmail_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _AuthEmailService_VerifyEmail_Handler,
		},
		{
			MethodName: "VerifyOtpToResetPasswordByEmail",
			Handler:    _AuthEmailService_VerifyOtpToResetPasswordByEmail_Handler,
		},
		{
			MethodName: "ResetPasswordByEmail",
			Handler:    _AuthEmailService_ResetPasswordByEmail_Handler,
		},
		{
			MethodName: "SendOtpSecurityByEmail",
			Handler:    _AuthEmailService_SendOtpSecurityByEmail_Handler,
		},
		{
			MethodName: "VerifyOtpSecurityByEmail",
			Handler:    _AuthEmailService_VerifyOtpSecurityByEmail_Handler,
		},
		{
			MethodName: "SendOtpToChangeEmailByEmail",
			Handler:    _AuthEmailService_SendOtpToChangeEmailByEmail_Handler,
		},
		{
			MethodName: "VerifyOtpToChangeEmailByEmail",
			Handler:    _AuthEmailService_VerifyOtpToChangeEmailByEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/customer/mobile/auth_email.proto",
}
