// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: proto/product/backend/product.proto

package backend

import (
	product "gitlab.bcasia.io/thuynga/apps/api/gen/go/product"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ValueType int32

const (
	ValueType_VALUE_TYPE_INVALID ValueType = 0
	ValueType_VALUE_TYPE_STRING  ValueType = 1
	ValueType_VALUE_TYPE_INTEGER ValueType = 2
	ValueType_VALUE_TYPE_FLOAT   ValueType = 3
	ValueType_VALUE_TYPE_BOOLEAN ValueType = 4
)

// Enum value maps for ValueType.
var (
	ValueType_name = map[int32]string{
		0: "VALUE_TYPE_INVALID",
		1: "VALUE_TYPE_STRING",
		2: "VALUE_TYPE_INTEGER",
		3: "VALUE_TYPE_FLOAT",
		4: "VALUE_TYPE_BOOLEAN",
	}
	ValueType_value = map[string]int32{
		"VALUE_TYPE_INVALID": 0,
		"VALUE_TYPE_STRING":  1,
		"VALUE_TYPE_INTEGER": 2,
		"VALUE_TYPE_FLOAT":   3,
		"VALUE_TYPE_BOOLEAN": 4,
	}
)

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}

func (x ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_product_backend_product_proto_enumTypes[0].Descriptor()
}

func (ValueType) Type() protoreflect.EnumType {
	return &file_proto_product_backend_product_proto_enumTypes[0]
}

func (x ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueType.Descriptor instead.
func (ValueType) EnumDescriptor() ([]byte, []int) {
	return file_proto_product_backend_product_proto_rawDescGZIP(), []int{0}
}

type PurchaseType int32

const (
	PurchaseType_PURCHASE_TYPE_INVALID      PurchaseType = 0
	PurchaseType_PURCHASE_TYPE_RENT_OR_SELL PurchaseType = 1
	PurchaseType_PURCHASE_TYPE_RENT_ONLY    PurchaseType = 2
	PurchaseType_PURCHASE_TYPE_SELL_ONLY    PurchaseType = 3
)

// Enum value maps for PurchaseType.
var (
	PurchaseType_name = map[int32]string{
		0: "PURCHASE_TYPE_INVALID",
		1: "PURCHASE_TYPE_RENT_OR_SELL",
		2: "PURCHASE_TYPE_RENT_ONLY",
		3: "PURCHASE_TYPE_SELL_ONLY",
	}
	PurchaseType_value = map[string]int32{
		"PURCHASE_TYPE_INVALID":      0,
		"PURCHASE_TYPE_RENT_OR_SELL": 1,
		"PURCHASE_TYPE_RENT_ONLY":    2,
		"PURCHASE_TYPE_SELL_ONLY":    3,
	}
)

func (x PurchaseType) Enum() *PurchaseType {
	p := new(PurchaseType)
	*p = x
	return p
}

func (x PurchaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PurchaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_product_backend_product_proto_enumTypes[1].Descriptor()
}

func (PurchaseType) Type() protoreflect.EnumType {
	return &file_proto_product_backend_product_proto_enumTypes[1]
}

func (x PurchaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PurchaseType.Descriptor instead.
func (PurchaseType) EnumDescriptor() ([]byte, []int) {
	return file_proto_product_backend_product_proto_rawDescGZIP(), []int{1}
}

type ProductStatus int32

const (
	ProductStatus_PRODUCT_STATUS_INVALID     ProductStatus = 0
	ProductStatus_PRODUCT_STATUS_PUBLISHED   ProductStatus = 1
	ProductStatus_PRODUCT_STATUS_UNPUBLISHED ProductStatus = 2
	ProductStatus_PRODUCT_STATUS_DRAFT       ProductStatus = 3
	ProductStatus_PRODUCT_STATUS_DELETED     ProductStatus = 4
)

// Enum value maps for ProductStatus.
var (
	ProductStatus_name = map[int32]string{
		0: "PRODUCT_STATUS_INVALID",
		1: "PRODUCT_STATUS_PUBLISHED",
		2: "PRODUCT_STATUS_UNPUBLISHED",
		3: "PRODUCT_STATUS_DRAFT",
		4: "PRODUCT_STATUS_DELETED",
	}
	ProductStatus_value = map[string]int32{
		"PRODUCT_STATUS_INVALID":     0,
		"PRODUCT_STATUS_PUBLISHED":   1,
		"PRODUCT_STATUS_UNPUBLISHED": 2,
		"PRODUCT_STATUS_DRAFT":       3,
		"PRODUCT_STATUS_DELETED":     4,
	}
)

func (x ProductStatus) Enum() *ProductStatus {
	p := new(ProductStatus)
	*p = x
	return p
}

func (x ProductStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_product_backend_product_proto_enumTypes[2].Descriptor()
}

func (ProductStatus) Type() protoreflect.EnumType {
	return &file_proto_product_backend_product_proto_enumTypes[2]
}

func (x ProductStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductStatus.Descriptor instead.
func (ProductStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_product_backend_product_proto_rawDescGZIP(), []int{2}
}

type UnlockAndUpdateQuantityAction int32

const (
	UnlockAndUpdateQuantityAction_UNLOCK_AND_UPDATE_QUANTITY_ACTION_INVALID  UnlockAndUpdateQuantityAction = 0
	UnlockAndUpdateQuantityAction_UNLOCK_AND_UPDATE_QUANTITY_ACTION_INCREASE UnlockAndUpdateQuantityAction = 1
	UnlockAndUpdateQuantityAction_UNLOCK_AND_UPDATE_QUANTITY_ACTION_DECREASE UnlockAndUpdateQuantityAction = 2
)

// Enum value maps for UnlockAndUpdateQuantityAction.
var (
	UnlockAndUpdateQuantityAction_name = map[int32]string{
		0: "UNLOCK_AND_UPDATE_QUANTITY_ACTION_INVALID",
		1: "UNLOCK_AND_UPDATE_QUANTITY_ACTION_INCREASE",
		2: "UNLOCK_AND_UPDATE_QUANTITY_ACTION_DECREASE",
	}
	UnlockAndUpdateQuantityAction_value = map[string]int32{
		"UNLOCK_AND_UPDATE_QUANTITY_ACTION_INVALID":  0,
		"UNLOCK_AND_UPDATE_QUANTITY_ACTION_INCREASE": 1,
		"UNLOCK_AND_UPDATE_QUANTITY_ACTION_DECREASE": 2,
	}
)

func (x UnlockAndUpdateQuantityAction) Enum() *UnlockAndUpdateQuantityAction {
	p := new(UnlockAndUpdateQuantityAction)
	*p = x
	return p
}

func (x UnlockAndUpdateQuantityAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnlockAndUpdateQuantityAction) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_product_backend_product_proto_enumTypes[3].Descriptor()
}

func (UnlockAndUpdateQuantityAction) Type() protoreflect.EnumType {
	return &file_proto_product_backend_product_proto_enumTypes[3]
}

func (x UnlockAndUpdateQuantityAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnlockAndUpdateQuantityAction.Descriptor instead.
func (UnlockAndUpdateQuantityAction) EnumDescriptor() ([]byte, []int) {
	return file_proto_product_backend_product_proto_rawDescGZIP(), []int{3}
}

type ProductInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt          int64                `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          int64                `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedBy          string               `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedBy          string               `protobuf:"bytes,5,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	PartnershipId      string               `protobuf:"bytes,6,opt,name=partnership_id,json=partnershipId,proto3" json:"partnership_id,omitempty"`
	Name               string               `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Medias             []string             `protobuf:"bytes,8,rep,name=medias,proto3" json:"medias,omitempty"`
	Tags               []string             `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	AvailableStartTime int64                `protobuf:"varint,10,opt,name=available_start_time,json=availableStartTime,proto3" json:"available_start_time,omitempty"`
	AvailableEndTime   int64                `protobuf:"varint,11,opt,name=available_end_time,json=availableEndTime,proto3" json:"available_end_time,omitempty"`
	Quantity           int64                `protobuf:"varint,12,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Sku                string               `protobuf:"bytes,13,opt,name=sku,proto3" json:"sku,omitempty"`
	ListedPrice        float64              `protobuf:"fixed64,14,opt,name=listed_price,json=listedPrice,proto3" json:"listed_price,omitempty"`
	DiscountPercent    float64              `protobuf:"fixed64,15,opt,name=discount_percent,json=discountPercent,proto3" json:"discount_percent,omitempty"`
	Price              float64              `protobuf:"fixed64,16,opt,name=price,proto3" json:"price,omitempty"`
	Barcode            string               `protobuf:"bytes,17,opt,name=barcode,proto3" json:"barcode,omitempty"`
	Uom                string               `protobuf:"bytes,18,opt,name=uom,proto3" json:"uom,omitempty"` // unit of measurement
	Currency           *ProductCurrencyInfo `protobuf:"bytes,19,opt,name=currency,proto3" json:"currency,omitempty"`
	Brand              string               `protobuf:"bytes,20,opt,name=brand,proto3" json:"brand,omitempty"`
	Description        string               `protobuf:"bytes,21,opt,name=description,proto3" json:"description,omitempty"`
	Unlimited          Boolean              `protobuf:"varint,22,opt,name=unlimited,proto3,enum=product.backend.Boolean" json:"unlimited,omitempty"`
	Country            string               `protobuf:"bytes,23,opt,name=country,proto3" json:"country,omitempty"`
	Attributes         []*ProductAttribute  `protobuf:"bytes,24,rep,name=attributes,proto3" json:"attributes,omitempty"`
	PurchaseType       PurchaseType         `protobuf:"varint,25,opt,name=purchase_type,json=purchaseType,proto3,enum=product.backend.PurchaseType" json:"purchase_type,omitempty"`
	Status             ProductStatus        `protobuf:"varint,26,opt,name=status,proto3,enum=product.backend.ProductStatus" json:"status,omitempty"`
	Language           string               `protobuf:"bytes,27,opt,name=language,proto3" json:"language,omitempty"`
	InBooking          bool                 `protobuf:"varint,28,opt,name=in_booking,json=inBooking,proto3" json:"in_booking,omitempty"`
	AdditionalData     map[string]string    `protobuf:"bytes,29,rep,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PartnerShopId      string               `protobuf:"bytes,30,opt,name=partner_shop_id,json=partnerShopId,proto3" json:"partner_shop_id,omitempty"`
	SeatInfo           *product.SeatInfo    `protobuf:"bytes,31,opt,name=seat_info,json=seatInfo,proto3,oneof" json:"seat_info,omitempty"`
}

func (x *ProductInfo) Reset() {
	*x = ProductInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_backend_product_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductInfo) ProtoMessage() {}

func (x *ProductInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_backend_product_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductInfo.ProtoReflect.Descriptor instead.
func (*ProductInfo) Descriptor() ([]byte, []int) {
	return file_proto_product_backend_product_proto_rawDescGZIP(), []int{0}
}

func (x *ProductInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProductInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ProductInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ProductInfo) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ProductInfo) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *ProductInfo) GetPartnershipId() string {
	if x != nil {
		return x.PartnershipId
	}
	return ""
}

func (x *ProductInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductInfo) GetMedias() []string {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *ProductInfo) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ProductInfo) GetAvailableStartTime() int64 {
	if x != nil {
		return x.AvailableStartTime
	}
	return 0
}

func (x *ProductInfo) GetAvailableEndTime() int64 {
	if x != nil {
		return x.AvailableEndTime
	}
	return 0
}

func (x *ProductInfo) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *ProductInfo) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *ProductInfo) GetListedPrice() float64 {
	if x != nil {
		return x.ListedPrice
	}
	return 0
}

func (x *ProductInfo) GetDiscountPercent() float64 {
	if x != nil {
		return x.DiscountPercent
	}
	return 0
}

func (x *ProductInfo) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ProductInfo) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *ProductInfo) GetUom() string {
	if x != nil {
		return x.Uom
	}
	return ""
}

func (x *ProductInfo) GetCurrency() *ProductCurrencyInfo {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *ProductInfo) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *ProductInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProductInfo) GetUnlimited() Boolean {
	if x != nil {
		return x.Unlimited
	}
	return Boolean_BOOLEAN_INVALID
}

func (x *ProductInfo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ProductInfo) GetAttributes() []*ProductAttribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ProductInfo) GetPurchaseType() PurchaseType {
	if x != nil {
		return x.PurchaseType
	}
	return PurchaseType_PURCHASE_TYPE_INVALID
}

func (x *ProductInfo) GetStatus() ProductStatus {
	if x != nil {
		return x.Status
	}
	return ProductStatus_PRODUCT_STATUS_INVALID
}

func (x *ProductInfo) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ProductInfo) GetInBooking() bool {
	if x != nil {
		return x.InBooking
	}
	return false
}

func (x *ProductInfo) GetAdditionalData() map[string]string {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

func (x *ProductInfo) GetPartnerShopId() string {
	if x != nil {
		return x.PartnerShopId
	}
	return ""
}

func (x *ProductInfo) GetSeatInfo() *product.SeatInfo {
	if x != nil {
		return x.SeatInfo
	}
	return nil
}

type ProductCurrencyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Code string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Icon string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *ProductCurrencyInfo) Reset() {
	*x = ProductCurrencyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_backend_product_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCurrencyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCurrencyInfo) ProtoMessage() {}

func (x *ProductCurrencyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_backend_product_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCurrencyInfo.ProtoReflect.Descriptor instead.
func (*ProductCurrencyInfo) Descriptor() ([]byte, []int) {
	return file_proto_product_backend_product_proto_rawDescGZIP(), []int{1}
}

func (x *ProductCurrencyInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProductCurrencyInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductCurrencyInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ProductCurrencyInfo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type ProductAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterDataId   string            `protobuf:"bytes,1,opt,name=master_data_id,json=masterDataId,proto3" json:"master_data_id,omitempty"`
	Name           string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value          string            `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	AdditionalData map[string]string `protobuf:"bytes,4,rep,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Type           string            `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	ValueType      ValueType         `protobuf:"varint,6,opt,name=value_type,json=valueType,proto3,enum=product.backend.ValueType" json:"value_type,omitempty"`
}

func (x *ProductAttribute) Reset() {
	*x = ProductAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_backend_product_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAttribute) ProtoMessage() {}

func (x *ProductAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_backend_product_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAttribute.ProtoReflect.Descriptor instead.
func (*ProductAttribute) Descriptor() ([]byte, []int) {
	return file_proto_product_backend_product_proto_rawDescGZIP(), []int{2}
}

func (x *ProductAttribute) GetMasterDataId() string {
	if x != nil {
		return x.MasterDataId
	}
	return ""
}

func (x *ProductAttribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductAttribute) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ProductAttribute) GetAdditionalData() map[string]string {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

func (x *ProductAttribute) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProductAttribute) GetValueType() ValueType {
	if x != nil {
		return x.ValueType
	}
	return ValueType_VALUE_TYPE_INVALID
}

type ProductQuantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId string `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	OrderId   string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Quantity  int64  `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *ProductQuantity) Reset() {
	*x = ProductQuantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_backend_product_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductQuantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductQuantity) ProtoMessage() {}

func (x *ProductQuantity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_backend_product_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductQuantity.ProtoReflect.Descriptor instead.
func (*ProductQuantity) Descriptor() ([]byte, []int) {
	return file_proto_product_backend_product_proto_rawDescGZIP(), []int{3}
}

func (x *ProductQuantity) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *ProductQuantity) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ProductQuantity) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type AvailableQuantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId string `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Available int64  `protobuf:"varint,2,opt,name=available,proto3" json:"available,omitempty"`
}

func (x *AvailableQuantity) Reset() {
	*x = AvailableQuantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_backend_product_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableQuantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableQuantity) ProtoMessage() {}

func (x *AvailableQuantity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_backend_product_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableQuantity.ProtoReflect.Descriptor instead.
func (*AvailableQuantity) Descriptor() ([]byte, []int) {
	return file_proto_product_backend_product_proto_rawDescGZIP(), []int{4}
}

func (x *AvailableQuantity) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *AvailableQuantity) GetAvailable() int64 {
	if x != nil {
		return x.Available
	}
	return 0
}

type ListProductByIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ListProductByIdsReq) Reset() {
	*x = ListProductByIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_backend_product_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProductByIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProductByIdsReq) ProtoMessage() {}

func (x *ListProductByIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_backend_product_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProductByIdsReq.ProtoReflect.Descriptor instead.
func (*ListProductByIdsReq) Descriptor() ([]byte, []int) {
	return file_proto_product_backend_product_proto_rawDescGZIP(), []int{5}
}

func (x *ListProductByIdsReq) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type CheckQuantityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductQuantity []*ProductQuantity `protobuf:"bytes,1,rep,name=product_quantity,json=productQuantity,proto3" json:"product_quantity,omitempty"`
}

func (x *CheckQuantityReq) Reset() {
	*x = CheckQuantityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_backend_product_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckQuantityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckQuantityReq) ProtoMessage() {}

func (x *CheckQuantityReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_backend_product_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckQuantityReq.ProtoReflect.Descriptor instead.
func (*CheckQuantityReq) Descriptor() ([]byte, []int) {
	return file_proto_product_backend_product_proto_rawDescGZIP(), []int{6}
}

func (x *CheckQuantityReq) GetProductQuantity() []*ProductQuantity {
	if x != nil {
		return x.ProductQuantity
	}
	return nil
}

type GetAvailableQuantityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductIds []string `protobuf:"bytes,1,rep,name=product_ids,json=productIds,proto3" json:"product_ids,omitempty"`
}

func (x *GetAvailableQuantityReq) Reset() {
	*x = GetAvailableQuantityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_backend_product_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableQuantityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableQuantityReq) ProtoMessage() {}

func (x *GetAvailableQuantityReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_backend_product_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableQuantityReq.ProtoReflect.Descriptor instead.
func (*GetAvailableQuantityReq) Descriptor() ([]byte, []int) {
	return file_proto_product_backend_product_proto_rawDescGZIP(), []int{7}
}

func (x *GetAvailableQuantityReq) GetProductIds() []string {
	if x != nil {
		return x.ProductIds
	}
	return nil
}

type CheckAndLockQuantityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductQuantity []*ProductQuantity `protobuf:"bytes,1,rep,name=product_quantity,json=productQuantity,proto3" json:"product_quantity,omitempty"`
}

func (x *CheckAndLockQuantityReq) Reset() {
	*x = CheckAndLockQuantityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_backend_product_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAndLockQuantityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAndLockQuantityReq) ProtoMessage() {}

func (x *CheckAndLockQuantityReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_backend_product_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAndLockQuantityReq.ProtoReflect.Descriptor instead.
func (*CheckAndLockQuantityReq) Descriptor() ([]byte, []int) {
	return file_proto_product_backend_product_proto_rawDescGZIP(), []int{8}
}

func (x *CheckAndLockQuantityReq) GetProductQuantity() []*ProductQuantity {
	if x != nil {
		return x.ProductQuantity
	}
	return nil
}

type UnlockQuantityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductQuantity []*ProductQuantity `protobuf:"bytes,1,rep,name=product_quantity,json=productQuantity,proto3" json:"product_quantity,omitempty"`
}

func (x *UnlockQuantityReq) Reset() {
	*x = UnlockQuantityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_backend_product_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockQuantityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockQuantityReq) ProtoMessage() {}

func (x *UnlockQuantityReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_backend_product_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockQuantityReq.ProtoReflect.Descriptor instead.
func (*UnlockQuantityReq) Descriptor() ([]byte, []int) {
	return file_proto_product_backend_product_proto_rawDescGZIP(), []int{9}
}

func (x *UnlockQuantityReq) GetProductQuantity() []*ProductQuantity {
	if x != nil {
		return x.ProductQuantity
	}
	return nil
}

type UnlockAndUpdateQuantityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductQuantity []*ProductQuantity            `protobuf:"bytes,1,rep,name=product_quantity,json=productQuantity,proto3" json:"product_quantity,omitempty"`
	UpdateAction    UnlockAndUpdateQuantityAction `protobuf:"varint,2,opt,name=update_action,json=updateAction,proto3,enum=product.backend.UnlockAndUpdateQuantityAction" json:"update_action,omitempty"`
}

func (x *UnlockAndUpdateQuantityReq) Reset() {
	*x = UnlockAndUpdateQuantityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_backend_product_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockAndUpdateQuantityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockAndUpdateQuantityReq) ProtoMessage() {}

func (x *UnlockAndUpdateQuantityReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_backend_product_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockAndUpdateQuantityReq.ProtoReflect.Descriptor instead.
func (*UnlockAndUpdateQuantityReq) Descriptor() ([]byte, []int) {
	return file_proto_product_backend_product_proto_rawDescGZIP(), []int{10}
}

func (x *UnlockAndUpdateQuantityReq) GetProductQuantity() []*ProductQuantity {
	if x != nil {
		return x.ProductQuantity
	}
	return nil
}

func (x *UnlockAndUpdateQuantityReq) GetUpdateAction() UnlockAndUpdateQuantityAction {
	if x != nil {
		return x.UpdateAction
	}
	return UnlockAndUpdateQuantityAction_UNLOCK_AND_UPDATE_QUANTITY_ACTION_INVALID
}

type ListProductByIdsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*ProductInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (x *ListProductByIdsRes) Reset() {
	*x = ListProductByIdsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_backend_product_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProductByIdsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProductByIdsRes) ProtoMessage() {}

func (x *ListProductByIdsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_backend_product_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProductByIdsRes.ProtoReflect.Descriptor instead.
func (*ListProductByIdsRes) Descriptor() ([]byte, []int) {
	return file_proto_product_backend_product_proto_rawDescGZIP(), []int{11}
}

func (x *ListProductByIdsRes) GetInfos() []*ProductInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetAvailableQuantityRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableQuantities []*AvailableQuantity `protobuf:"bytes,1,rep,name=available_quantities,json=availableQuantities,proto3" json:"available_quantities,omitempty"`
}

func (x *GetAvailableQuantityRes) Reset() {
	*x = GetAvailableQuantityRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_backend_product_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableQuantityRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableQuantityRes) ProtoMessage() {}

func (x *GetAvailableQuantityRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_backend_product_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableQuantityRes.ProtoReflect.Descriptor instead.
func (*GetAvailableQuantityRes) Descriptor() ([]byte, []int) {
	return file_proto_product_backend_product_proto_rawDescGZIP(), []int{12}
}

func (x *GetAvailableQuantityRes) GetAvailableQuantities() []*AvailableQuantity {
	if x != nil {
		return x.AvailableQuantities
	}
	return nil
}

type GenerateProductByEventSeatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId          string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	EventCode        string `protobuf:"bytes,2,opt,name=event_code,json=eventCode,proto3" json:"event_code,omitempty"`
	BookingStartTime int64  `protobuf:"varint,3,opt,name=booking_start_time,json=bookingStartTime,proto3" json:"booking_start_time,omitempty"`
	UserId           string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GenerateProductByEventSeatReq) Reset() {
	*x = GenerateProductByEventSeatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_backend_product_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateProductByEventSeatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateProductByEventSeatReq) ProtoMessage() {}

func (x *GenerateProductByEventSeatReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_backend_product_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateProductByEventSeatReq.ProtoReflect.Descriptor instead.
func (*GenerateProductByEventSeatReq) Descriptor() ([]byte, []int) {
	return file_proto_product_backend_product_proto_rawDescGZIP(), []int{13}
}

func (x *GenerateProductByEventSeatReq) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *GenerateProductByEventSeatReq) GetEventCode() string {
	if x != nil {
		return x.EventCode
	}
	return ""
}

func (x *GenerateProductByEventSeatReq) GetBookingStartTime() int64 {
	if x != nil {
		return x.BookingStartTime
	}
	return 0
}

func (x *GenerateProductByEventSeatReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

var File_proto_product_backend_product_proto protoreflect.FileDescriptor

var file_proto_product_backend_product_proto_rawDesc = []byte{
	0x0a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x1a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xed, 0x09, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x6b, 0x75, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x6f, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x6f, 0x6d, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a,
	0x09, 0x75, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x09, 0x75, 0x6e, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x41, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e,
	0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x6e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x59, 0x0a, 0x0f, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x09,
	0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01,
	0x01, 0x1a, 0x41, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x22, 0x61, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0xd4, 0x02, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x41, 0x0a, 0x13, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x67, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x50, 0x0a, 0x11, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x27, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x22, 0x5f, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x12, 0x4b, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x22, 0x3a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x73, 0x22, 0x66, 0x0a,
	0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x4b, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x60, 0x0a, 0x11, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x4b, 0x0a, 0x10, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xbe, 0x01, 0x0a, 0x1a, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x4b, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x53, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x32, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x22, 0x70, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x12, 0x55,
	0x0a, 0x14, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x2a, 0x80, 0x01, 0x0a, 0x09, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x41,
	0x54, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x04, 0x2a, 0x83, 0x01, 0x0a, 0x0c,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x55, 0x52, 0x43, 0x48,
	0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x52,
	0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x55, 0x52, 0x43, 0x48,
	0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x4e,
	0x4c, 0x59, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10,
	0x03, 0x2a, 0x9f, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a,
	0x1a, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x44, 0x55,
	0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x04, 0x2a, 0xae, 0x01, 0x0a, 0x1d, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x6e,
	0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x29, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41,
	0x53, 0x45, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x41,
	0x53, 0x45, 0x10, 0x02, 0x32, 0x9e, 0x05, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42,
	0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x6a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x28, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x12,
	0x58, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41,
	0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x0e, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5e, 0x0a, 0x17, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x6e, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6c, 0x0a, 0x22, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x42, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x74, 0x12, 0x2e, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e,
	0x62, 0x63, 0x61, 0x73, 0x69, 0x61, 0x2e, 0x69, 0x6f, 0x2f, 0x74, 0x68, 0x75, 0x79, 0x6e, 0x67,
	0x61, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67,
	0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x3b, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_product_backend_product_proto_rawDescOnce sync.Once
	file_proto_product_backend_product_proto_rawDescData = file_proto_product_backend_product_proto_rawDesc
)

func file_proto_product_backend_product_proto_rawDescGZIP() []byte {
	file_proto_product_backend_product_proto_rawDescOnce.Do(func() {
		file_proto_product_backend_product_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_product_backend_product_proto_rawDescData)
	})
	return file_proto_product_backend_product_proto_rawDescData
}

var file_proto_product_backend_product_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_proto_product_backend_product_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_proto_product_backend_product_proto_goTypes = []interface{}{
	(ValueType)(0),                        // 0: product.backend.ValueType
	(PurchaseType)(0),                     // 1: product.backend.PurchaseType
	(ProductStatus)(0),                    // 2: product.backend.ProductStatus
	(UnlockAndUpdateQuantityAction)(0),    // 3: product.backend.UnlockAndUpdateQuantityAction
	(*ProductInfo)(nil),                   // 4: product.backend.ProductInfo
	(*ProductCurrencyInfo)(nil),           // 5: product.backend.ProductCurrencyInfo
	(*ProductAttribute)(nil),              // 6: product.backend.ProductAttribute
	(*ProductQuantity)(nil),               // 7: product.backend.ProductQuantity
	(*AvailableQuantity)(nil),             // 8: product.backend.AvailableQuantity
	(*ListProductByIdsReq)(nil),           // 9: product.backend.ListProductByIdsReq
	(*CheckQuantityReq)(nil),              // 10: product.backend.CheckQuantityReq
	(*GetAvailableQuantityReq)(nil),       // 11: product.backend.GetAvailableQuantityReq
	(*CheckAndLockQuantityReq)(nil),       // 12: product.backend.CheckAndLockQuantityReq
	(*UnlockQuantityReq)(nil),             // 13: product.backend.UnlockQuantityReq
	(*UnlockAndUpdateQuantityReq)(nil),    // 14: product.backend.UnlockAndUpdateQuantityReq
	(*ListProductByIdsRes)(nil),           // 15: product.backend.ListProductByIdsRes
	(*GetAvailableQuantityRes)(nil),       // 16: product.backend.GetAvailableQuantityRes
	(*GenerateProductByEventSeatReq)(nil), // 17: product.backend.GenerateProductByEventSeatReq
	nil,                                   // 18: product.backend.ProductInfo.AdditionalDataEntry
	nil,                                   // 19: product.backend.ProductAttribute.AdditionalDataEntry
	(Boolean)(0),                          // 20: product.backend.Boolean
	(*product.SeatInfo)(nil),              // 21: product.SeatInfo
	(*Empty)(nil),                         // 22: product.backend.Empty
}
var file_proto_product_backend_product_proto_depIdxs = []int32{
	5,  // 0: product.backend.ProductInfo.currency:type_name -> product.backend.ProductCurrencyInfo
	20, // 1: product.backend.ProductInfo.unlimited:type_name -> product.backend.Boolean
	6,  // 2: product.backend.ProductInfo.attributes:type_name -> product.backend.ProductAttribute
	1,  // 3: product.backend.ProductInfo.purchase_type:type_name -> product.backend.PurchaseType
	2,  // 4: product.backend.ProductInfo.status:type_name -> product.backend.ProductStatus
	18, // 5: product.backend.ProductInfo.additional_data:type_name -> product.backend.ProductInfo.AdditionalDataEntry
	21, // 6: product.backend.ProductInfo.seat_info:type_name -> product.SeatInfo
	19, // 7: product.backend.ProductAttribute.additional_data:type_name -> product.backend.ProductAttribute.AdditionalDataEntry
	0,  // 8: product.backend.ProductAttribute.value_type:type_name -> product.backend.ValueType
	7,  // 9: product.backend.CheckQuantityReq.product_quantity:type_name -> product.backend.ProductQuantity
	7,  // 10: product.backend.CheckAndLockQuantityReq.product_quantity:type_name -> product.backend.ProductQuantity
	7,  // 11: product.backend.UnlockQuantityReq.product_quantity:type_name -> product.backend.ProductQuantity
	7,  // 12: product.backend.UnlockAndUpdateQuantityReq.product_quantity:type_name -> product.backend.ProductQuantity
	3,  // 13: product.backend.UnlockAndUpdateQuantityReq.update_action:type_name -> product.backend.UnlockAndUpdateQuantityAction
	4,  // 14: product.backend.ListProductByIdsRes.infos:type_name -> product.backend.ProductInfo
	8,  // 15: product.backend.GetAvailableQuantityRes.available_quantities:type_name -> product.backend.AvailableQuantity
	9,  // 16: product.backend.ProductService.ListProductByIds:input_type -> product.backend.ListProductByIdsReq
	10, // 17: product.backend.ProductService.CheckQuantity:input_type -> product.backend.CheckQuantityReq
	11, // 18: product.backend.ProductService.GetAvailableQuantity:input_type -> product.backend.GetAvailableQuantityReq
	12, // 19: product.backend.ProductService.CheckAndLockQuantity:input_type -> product.backend.CheckAndLockQuantityReq
	13, // 20: product.backend.ProductService.UnlockQuantity:input_type -> product.backend.UnlockQuantityReq
	14, // 21: product.backend.ProductService.UnlockAndUpdateQuantity:input_type -> product.backend.UnlockAndUpdateQuantityReq
	17, // 22: product.backend.ProductService.InternalGenerateProductByEventSeat:input_type -> product.backend.GenerateProductByEventSeatReq
	15, // 23: product.backend.ProductService.ListProductByIds:output_type -> product.backend.ListProductByIdsRes
	22, // 24: product.backend.ProductService.CheckQuantity:output_type -> product.backend.Empty
	16, // 25: product.backend.ProductService.GetAvailableQuantity:output_type -> product.backend.GetAvailableQuantityRes
	22, // 26: product.backend.ProductService.CheckAndLockQuantity:output_type -> product.backend.Empty
	22, // 27: product.backend.ProductService.UnlockQuantity:output_type -> product.backend.Empty
	22, // 28: product.backend.ProductService.UnlockAndUpdateQuantity:output_type -> product.backend.Empty
	22, // 29: product.backend.ProductService.InternalGenerateProductByEventSeat:output_type -> product.backend.Empty
	23, // [23:30] is the sub-list for method output_type
	16, // [16:23] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_proto_product_backend_product_proto_init() }
func file_proto_product_backend_product_proto_init() {
	if File_proto_product_backend_product_proto != nil {
		return
	}
	file_proto_product_backend_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_product_backend_product_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_backend_product_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCurrencyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_backend_product_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_backend_product_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductQuantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_backend_product_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableQuantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_backend_product_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProductByIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_backend_product_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckQuantityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_backend_product_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailableQuantityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_backend_product_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAndLockQuantityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_backend_product_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockQuantityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_backend_product_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockAndUpdateQuantityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_backend_product_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProductByIdsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_backend_product_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailableQuantityRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_backend_product_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateProductByEventSeatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_product_backend_product_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_product_backend_product_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_product_backend_product_proto_goTypes,
		DependencyIndexes: file_proto_product_backend_product_proto_depIdxs,
		EnumInfos:         file_proto_product_backend_product_proto_enumTypes,
		MessageInfos:      file_proto_product_backend_product_proto_msgTypes,
	}.Build()
	File_proto_product_backend_product_proto = out.File
	file_proto_product_backend_product_proto_rawDesc = nil
	file_proto_product_backend_product_proto_goTypes = nil
	file_proto_product_backend_product_proto_depIdxs = nil
}
