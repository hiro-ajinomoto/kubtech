// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: proto/product/mobile/product_delivery.proto

package mobile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductDeliveryServiceClient is the client API for ProductDeliveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductDeliveryServiceClient interface {
	GetMyProductDelivery(ctx context.Context, in *GetMyProductDeliveryReq, opts ...grpc.CallOption) (*GetMyProductDeliveryRes, error)
	GetMyProductDeliveryByOrderId(ctx context.Context, in *GetMyProductDeliveryByOrderIdReq, opts ...grpc.CallOption) (*GetMyProductDeliveryByOrderIdRes, error)
	ListMyProductDeliveries(ctx context.Context, in *ListMyProductDeliveriesReq, opts ...grpc.CallOption) (*ListMyProductDeliveriesRes, error)
}

type productDeliveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductDeliveryServiceClient(cc grpc.ClientConnInterface) ProductDeliveryServiceClient {
	return &productDeliveryServiceClient{cc}
}

func (c *productDeliveryServiceClient) GetMyProductDelivery(ctx context.Context, in *GetMyProductDeliveryReq, opts ...grpc.CallOption) (*GetMyProductDeliveryRes, error) {
	out := new(GetMyProductDeliveryRes)
	err := c.cc.Invoke(ctx, "/product.mobile.ProductDeliveryService/GetMyProductDelivery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productDeliveryServiceClient) GetMyProductDeliveryByOrderId(ctx context.Context, in *GetMyProductDeliveryByOrderIdReq, opts ...grpc.CallOption) (*GetMyProductDeliveryByOrderIdRes, error) {
	out := new(GetMyProductDeliveryByOrderIdRes)
	err := c.cc.Invoke(ctx, "/product.mobile.ProductDeliveryService/GetMyProductDeliveryByOrderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productDeliveryServiceClient) ListMyProductDeliveries(ctx context.Context, in *ListMyProductDeliveriesReq, opts ...grpc.CallOption) (*ListMyProductDeliveriesRes, error) {
	out := new(ListMyProductDeliveriesRes)
	err := c.cc.Invoke(ctx, "/product.mobile.ProductDeliveryService/ListMyProductDeliveries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductDeliveryServiceServer is the server API for ProductDeliveryService service.
// All implementations must embed UnimplementedProductDeliveryServiceServer
// for forward compatibility
type ProductDeliveryServiceServer interface {
	GetMyProductDelivery(context.Context, *GetMyProductDeliveryReq) (*GetMyProductDeliveryRes, error)
	GetMyProductDeliveryByOrderId(context.Context, *GetMyProductDeliveryByOrderIdReq) (*GetMyProductDeliveryByOrderIdRes, error)
	ListMyProductDeliveries(context.Context, *ListMyProductDeliveriesReq) (*ListMyProductDeliveriesRes, error)
	mustEmbedUnimplementedProductDeliveryServiceServer()
}

// UnimplementedProductDeliveryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductDeliveryServiceServer struct {
}

func (UnimplementedProductDeliveryServiceServer) GetMyProductDelivery(context.Context, *GetMyProductDeliveryReq) (*GetMyProductDeliveryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyProductDelivery not implemented")
}
func (UnimplementedProductDeliveryServiceServer) GetMyProductDeliveryByOrderId(context.Context, *GetMyProductDeliveryByOrderIdReq) (*GetMyProductDeliveryByOrderIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyProductDeliveryByOrderId not implemented")
}
func (UnimplementedProductDeliveryServiceServer) ListMyProductDeliveries(context.Context, *ListMyProductDeliveriesReq) (*ListMyProductDeliveriesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyProductDeliveries not implemented")
}
func (UnimplementedProductDeliveryServiceServer) mustEmbedUnimplementedProductDeliveryServiceServer() {
}

// UnsafeProductDeliveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductDeliveryServiceServer will
// result in compilation errors.
type UnsafeProductDeliveryServiceServer interface {
	mustEmbedUnimplementedProductDeliveryServiceServer()
}

func RegisterProductDeliveryServiceServer(s grpc.ServiceRegistrar, srv ProductDeliveryServiceServer) {
	s.RegisterService(&ProductDeliveryService_ServiceDesc, srv)
}

func _ProductDeliveryService_GetMyProductDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyProductDeliveryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductDeliveryServiceServer).GetMyProductDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.mobile.ProductDeliveryService/GetMyProductDelivery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductDeliveryServiceServer).GetMyProductDelivery(ctx, req.(*GetMyProductDeliveryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductDeliveryService_GetMyProductDeliveryByOrderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyProductDeliveryByOrderIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductDeliveryServiceServer).GetMyProductDeliveryByOrderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.mobile.ProductDeliveryService/GetMyProductDeliveryByOrderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductDeliveryServiceServer).GetMyProductDeliveryByOrderId(ctx, req.(*GetMyProductDeliveryByOrderIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductDeliveryService_ListMyProductDeliveries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyProductDeliveriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductDeliveryServiceServer).ListMyProductDeliveries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.mobile.ProductDeliveryService/ListMyProductDeliveries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductDeliveryServiceServer).ListMyProductDeliveries(ctx, req.(*ListMyProductDeliveriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductDeliveryService_ServiceDesc is the grpc.ServiceDesc for ProductDeliveryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductDeliveryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.mobile.ProductDeliveryService",
	HandlerType: (*ProductDeliveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMyProductDelivery",
			Handler:    _ProductDeliveryService_GetMyProductDelivery_Handler,
		},
		{
			MethodName: "GetMyProductDeliveryByOrderId",
			Handler:    _ProductDeliveryService_GetMyProductDeliveryByOrderId_Handler,
		},
		{
			MethodName: "ListMyProductDeliveries",
			Handler:    _ProductDeliveryService_ListMyProductDeliveries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/product/mobile/product_delivery.proto",
}
