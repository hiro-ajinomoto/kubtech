// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: proto/product/web_partnership/product.proto

package web_partnership

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ValueType int32

const (
	ValueType_VALUE_TYPE_INVALID ValueType = 0
	ValueType_VALUE_TYPE_STRING  ValueType = 1
	ValueType_VALUE_TYPE_INTEGER ValueType = 2
	ValueType_VALUE_TYPE_FLOAT   ValueType = 3
	ValueType_VALUE_TYPE_BOOLEAN ValueType = 4
)

// Enum value maps for ValueType.
var (
	ValueType_name = map[int32]string{
		0: "VALUE_TYPE_INVALID",
		1: "VALUE_TYPE_STRING",
		2: "VALUE_TYPE_INTEGER",
		3: "VALUE_TYPE_FLOAT",
		4: "VALUE_TYPE_BOOLEAN",
	}
	ValueType_value = map[string]int32{
		"VALUE_TYPE_INVALID": 0,
		"VALUE_TYPE_STRING":  1,
		"VALUE_TYPE_INTEGER": 2,
		"VALUE_TYPE_FLOAT":   3,
		"VALUE_TYPE_BOOLEAN": 4,
	}
)

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}

func (x ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_product_web_partnership_product_proto_enumTypes[0].Descriptor()
}

func (ValueType) Type() protoreflect.EnumType {
	return &file_proto_product_web_partnership_product_proto_enumTypes[0]
}

func (x ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueType.Descriptor instead.
func (ValueType) EnumDescriptor() ([]byte, []int) {
	return file_proto_product_web_partnership_product_proto_rawDescGZIP(), []int{0}
}

type PurchaseType int32

const (
	PurchaseType_PURCHASE_TYPE_INVALID      PurchaseType = 0
	PurchaseType_PURCHASE_TYPE_RENT_OR_SELL PurchaseType = 1
	PurchaseType_PURCHASE_TYPE_RENT_ONLY    PurchaseType = 2
	PurchaseType_PURCHASE_TYPE_SELL_ONLY    PurchaseType = 3
)

// Enum value maps for PurchaseType.
var (
	PurchaseType_name = map[int32]string{
		0: "PURCHASE_TYPE_INVALID",
		1: "PURCHASE_TYPE_RENT_OR_SELL",
		2: "PURCHASE_TYPE_RENT_ONLY",
		3: "PURCHASE_TYPE_SELL_ONLY",
	}
	PurchaseType_value = map[string]int32{
		"PURCHASE_TYPE_INVALID":      0,
		"PURCHASE_TYPE_RENT_OR_SELL": 1,
		"PURCHASE_TYPE_RENT_ONLY":    2,
		"PURCHASE_TYPE_SELL_ONLY":    3,
	}
)

func (x PurchaseType) Enum() *PurchaseType {
	p := new(PurchaseType)
	*p = x
	return p
}

func (x PurchaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PurchaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_product_web_partnership_product_proto_enumTypes[1].Descriptor()
}

func (PurchaseType) Type() protoreflect.EnumType {
	return &file_proto_product_web_partnership_product_proto_enumTypes[1]
}

func (x PurchaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PurchaseType.Descriptor instead.
func (PurchaseType) EnumDescriptor() ([]byte, []int) {
	return file_proto_product_web_partnership_product_proto_rawDescGZIP(), []int{1}
}

type ProductStatus int32

const (
	ProductStatus_PRODUCT_STATUS_INVALID     ProductStatus = 0
	ProductStatus_PRODUCT_STATUS_PUBLISHED   ProductStatus = 1
	ProductStatus_PRODUCT_STATUS_UNPUBLISHED ProductStatus = 2
	ProductStatus_PRODUCT_STATUS_DRAFT       ProductStatus = 3
	ProductStatus_PRODUCT_STATUS_DELETED     ProductStatus = 4
)

// Enum value maps for ProductStatus.
var (
	ProductStatus_name = map[int32]string{
		0: "PRODUCT_STATUS_INVALID",
		1: "PRODUCT_STATUS_PUBLISHED",
		2: "PRODUCT_STATUS_UNPUBLISHED",
		3: "PRODUCT_STATUS_DRAFT",
		4: "PRODUCT_STATUS_DELETED",
	}
	ProductStatus_value = map[string]int32{
		"PRODUCT_STATUS_INVALID":     0,
		"PRODUCT_STATUS_PUBLISHED":   1,
		"PRODUCT_STATUS_UNPUBLISHED": 2,
		"PRODUCT_STATUS_DRAFT":       3,
		"PRODUCT_STATUS_DELETED":     4,
	}
)

func (x ProductStatus) Enum() *ProductStatus {
	p := new(ProductStatus)
	*p = x
	return p
}

func (x ProductStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_product_web_partnership_product_proto_enumTypes[2].Descriptor()
}

func (ProductStatus) Type() protoreflect.EnumType {
	return &file_proto_product_web_partnership_product_proto_enumTypes[2]
}

func (x ProductStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductStatus.Descriptor instead.
func (ProductStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_product_web_partnership_product_proto_rawDescGZIP(), []int{2}
}

type ProductInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt          int64                     `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          int64                     `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedBy          string                    `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedBy          string                    `protobuf:"bytes,5,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	PartnershipId      string                    `protobuf:"bytes,6,opt,name=partnership_id,json=partnershipId,proto3" json:"partnership_id,omitempty"`
	Name               string                    `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Medias             []string                  `protobuf:"bytes,8,rep,name=medias,proto3" json:"medias,omitempty"`
	Tags               []string                  `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	AvailableStartTime int64                     `protobuf:"varint,10,opt,name=available_start_time,json=availableStartTime,proto3" json:"available_start_time,omitempty"`
	AvailableEndTime   int64                     `protobuf:"varint,11,opt,name=available_end_time,json=availableEndTime,proto3" json:"available_end_time,omitempty"`
	Quantity           int64                     `protobuf:"varint,12,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Sku                string                    `protobuf:"bytes,13,opt,name=sku,proto3" json:"sku,omitempty"`
	ListedPrice        float64                   `protobuf:"fixed64,14,opt,name=listed_price,json=listedPrice,proto3" json:"listed_price,omitempty"`
	DiscountPercent    float64                   `protobuf:"fixed64,15,opt,name=discount_percent,json=discountPercent,proto3" json:"discount_percent,omitempty"`
	Price              float64                   `protobuf:"fixed64,16,opt,name=price,proto3" json:"price,omitempty"`
	Barcode            string                    `protobuf:"bytes,17,opt,name=barcode,proto3" json:"barcode,omitempty"`
	Uom                string                    `protobuf:"bytes,18,opt,name=uom,proto3" json:"uom,omitempty"` // unit of measurement
	Currency           *ProductCurrencyInfo      `protobuf:"bytes,19,opt,name=currency,proto3" json:"currency,omitempty"`
	Brand              string                    `protobuf:"bytes,20,opt,name=brand,proto3" json:"brand,omitempty"`
	Description        string                    `protobuf:"bytes,21,opt,name=description,proto3" json:"description,omitempty"`
	Unlimited          Boolean                   `protobuf:"varint,22,opt,name=unlimited,proto3,enum=product.web_partnership.Boolean" json:"unlimited,omitempty"`
	Country            string                    `protobuf:"bytes,23,opt,name=country,proto3" json:"country,omitempty"`
	Attributes         []*DetailProductAttribute `protobuf:"bytes,24,rep,name=attributes,proto3" json:"attributes,omitempty"`
	PurchaseType       PurchaseType              `protobuf:"varint,25,opt,name=purchase_type,json=purchaseType,proto3,enum=product.web_partnership.PurchaseType" json:"purchase_type,omitempty"`
	Status             ProductStatus             `protobuf:"varint,26,opt,name=status,proto3,enum=product.web_partnership.ProductStatus" json:"status,omitempty"`
	Language           string                    `protobuf:"bytes,27,opt,name=language,proto3" json:"language,omitempty"`
	InBooking          bool                      `protobuf:"varint,28,opt,name=in_booking,json=inBooking,proto3" json:"in_booking,omitempty"`
	AdditionalData     map[string]string         `protobuf:"bytes,29,rep,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PartnerShopId      string                    `protobuf:"bytes,30,opt,name=partner_shop_id,json=partnerShopId,proto3" json:"partner_shop_id,omitempty"`
}

func (x *ProductInfo) Reset() {
	*x = ProductInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_web_partnership_product_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductInfo) ProtoMessage() {}

func (x *ProductInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_web_partnership_product_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductInfo.ProtoReflect.Descriptor instead.
func (*ProductInfo) Descriptor() ([]byte, []int) {
	return file_proto_product_web_partnership_product_proto_rawDescGZIP(), []int{0}
}

func (x *ProductInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProductInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ProductInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ProductInfo) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ProductInfo) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *ProductInfo) GetPartnershipId() string {
	if x != nil {
		return x.PartnershipId
	}
	return ""
}

func (x *ProductInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductInfo) GetMedias() []string {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *ProductInfo) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ProductInfo) GetAvailableStartTime() int64 {
	if x != nil {
		return x.AvailableStartTime
	}
	return 0
}

func (x *ProductInfo) GetAvailableEndTime() int64 {
	if x != nil {
		return x.AvailableEndTime
	}
	return 0
}

func (x *ProductInfo) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *ProductInfo) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *ProductInfo) GetListedPrice() float64 {
	if x != nil {
		return x.ListedPrice
	}
	return 0
}

func (x *ProductInfo) GetDiscountPercent() float64 {
	if x != nil {
		return x.DiscountPercent
	}
	return 0
}

func (x *ProductInfo) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ProductInfo) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *ProductInfo) GetUom() string {
	if x != nil {
		return x.Uom
	}
	return ""
}

func (x *ProductInfo) GetCurrency() *ProductCurrencyInfo {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *ProductInfo) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *ProductInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProductInfo) GetUnlimited() Boolean {
	if x != nil {
		return x.Unlimited
	}
	return Boolean_BOOLEAN_INVALID
}

func (x *ProductInfo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ProductInfo) GetAttributes() []*DetailProductAttribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ProductInfo) GetPurchaseType() PurchaseType {
	if x != nil {
		return x.PurchaseType
	}
	return PurchaseType_PURCHASE_TYPE_INVALID
}

func (x *ProductInfo) GetStatus() ProductStatus {
	if x != nil {
		return x.Status
	}
	return ProductStatus_PRODUCT_STATUS_INVALID
}

func (x *ProductInfo) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ProductInfo) GetInBooking() bool {
	if x != nil {
		return x.InBooking
	}
	return false
}

func (x *ProductInfo) GetAdditionalData() map[string]string {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

func (x *ProductInfo) GetPartnerShopId() string {
	if x != nil {
		return x.PartnerShopId
	}
	return ""
}

type ProductCurrencyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Code string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Icon string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *ProductCurrencyInfo) Reset() {
	*x = ProductCurrencyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_web_partnership_product_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCurrencyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCurrencyInfo) ProtoMessage() {}

func (x *ProductCurrencyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_web_partnership_product_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCurrencyInfo.ProtoReflect.Descriptor instead.
func (*ProductCurrencyInfo) Descriptor() ([]byte, []int) {
	return file_proto_product_web_partnership_product_proto_rawDescGZIP(), []int{1}
}

func (x *ProductCurrencyInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProductCurrencyInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductCurrencyInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ProductCurrencyInfo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type BasicProductAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterDataId string `protobuf:"bytes,1,opt,name=master_data_id,json=masterDataId,proto3" json:"master_data_id,omitempty"`
	InputValue   string `protobuf:"bytes,2,opt,name=input_value,json=inputValue,proto3" json:"input_value,omitempty"`
}

func (x *BasicProductAttribute) Reset() {
	*x = BasicProductAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_web_partnership_product_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicProductAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicProductAttribute) ProtoMessage() {}

func (x *BasicProductAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_web_partnership_product_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicProductAttribute.ProtoReflect.Descriptor instead.
func (*BasicProductAttribute) Descriptor() ([]byte, []int) {
	return file_proto_product_web_partnership_product_proto_rawDescGZIP(), []int{2}
}

func (x *BasicProductAttribute) GetMasterDataId() string {
	if x != nil {
		return x.MasterDataId
	}
	return ""
}

func (x *BasicProductAttribute) GetInputValue() string {
	if x != nil {
		return x.InputValue
	}
	return ""
}

type DetailProductAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterDataId   string            `protobuf:"bytes,1,opt,name=master_data_id,json=masterDataId,proto3" json:"master_data_id,omitempty"`
	Name           string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value          string            `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	AdditionalData map[string]string `protobuf:"bytes,4,rep,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Type           string            `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DetailProductAttribute) Reset() {
	*x = DetailProductAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_web_partnership_product_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailProductAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailProductAttribute) ProtoMessage() {}

func (x *DetailProductAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_web_partnership_product_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailProductAttribute.ProtoReflect.Descriptor instead.
func (*DetailProductAttribute) Descriptor() ([]byte, []int) {
	return file_proto_product_web_partnership_product_proto_rawDescGZIP(), []int{3}
}

func (x *DetailProductAttribute) GetMasterDataId() string {
	if x != nil {
		return x.MasterDataId
	}
	return ""
}

func (x *DetailProductAttribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DetailProductAttribute) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DetailProductAttribute) GetAdditionalData() map[string]string {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

func (x *DetailProductAttribute) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type CreateProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Medias             []string                 `protobuf:"bytes,2,rep,name=medias,proto3" json:"medias,omitempty"`
	Tags               []string                 `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	AvailableStartTime int64                    `protobuf:"varint,4,opt,name=available_start_time,json=availableStartTime,proto3" json:"available_start_time,omitempty"`
	AvailableEndTime   int64                    `protobuf:"varint,5,opt,name=available_end_time,json=availableEndTime,proto3" json:"available_end_time,omitempty"`
	Quantity           int64                    `protobuf:"varint,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Sku                string                   `protobuf:"bytes,7,opt,name=sku,proto3" json:"sku,omitempty"`
	ListedPrice        float64                  `protobuf:"fixed64,8,opt,name=listed_price,json=listedPrice,proto3" json:"listed_price,omitempty"`
	DiscountPercent    float64                  `protobuf:"fixed64,9,opt,name=discount_percent,json=discountPercent,proto3" json:"discount_percent,omitempty"`
	Uom                string                   `protobuf:"bytes,10,opt,name=uom,proto3" json:"uom,omitempty"` // unit of measurement
	Currency           *ProductCurrencyInfo     `protobuf:"bytes,11,opt,name=currency,proto3" json:"currency,omitempty"`
	Brand              string                   `protobuf:"bytes,12,opt,name=brand,proto3" json:"brand,omitempty"`
	Description        string                   `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
	Unlimited          Boolean                  `protobuf:"varint,14,opt,name=unlimited,proto3,enum=product.web_partnership.Boolean" json:"unlimited,omitempty"`
	Country            string                   `protobuf:"bytes,15,opt,name=country,proto3" json:"country,omitempty"`
	Language           string                   `protobuf:"bytes,16,opt,name=language,proto3" json:"language,omitempty"`
	Attributes         []*BasicProductAttribute `protobuf:"bytes,17,rep,name=attributes,proto3" json:"attributes,omitempty"`
	PurchaseType       PurchaseType             `protobuf:"varint,18,opt,name=purchase_type,json=purchaseType,proto3,enum=product.web_partnership.PurchaseType" json:"purchase_type,omitempty"`
	Status             ProductStatus            `protobuf:"varint,19,opt,name=status,proto3,enum=product.web_partnership.ProductStatus" json:"status,omitempty"`
	AdditionalData     map[string]string        `protobuf:"bytes,20,rep,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PartnerShopId      string                   `protobuf:"bytes,21,opt,name=partner_shop_id,json=partnerShopId,proto3" json:"partner_shop_id,omitempty"`
}

func (x *CreateProductReq) Reset() {
	*x = CreateProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_web_partnership_product_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProductReq) ProtoMessage() {}

func (x *CreateProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_web_partnership_product_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProductReq.ProtoReflect.Descriptor instead.
func (*CreateProductReq) Descriptor() ([]byte, []int) {
	return file_proto_product_web_partnership_product_proto_rawDescGZIP(), []int{4}
}

func (x *CreateProductReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateProductReq) GetMedias() []string {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *CreateProductReq) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateProductReq) GetAvailableStartTime() int64 {
	if x != nil {
		return x.AvailableStartTime
	}
	return 0
}

func (x *CreateProductReq) GetAvailableEndTime() int64 {
	if x != nil {
		return x.AvailableEndTime
	}
	return 0
}

func (x *CreateProductReq) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *CreateProductReq) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *CreateProductReq) GetListedPrice() float64 {
	if x != nil {
		return x.ListedPrice
	}
	return 0
}

func (x *CreateProductReq) GetDiscountPercent() float64 {
	if x != nil {
		return x.DiscountPercent
	}
	return 0
}

func (x *CreateProductReq) GetUom() string {
	if x != nil {
		return x.Uom
	}
	return ""
}

func (x *CreateProductReq) GetCurrency() *ProductCurrencyInfo {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *CreateProductReq) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *CreateProductReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateProductReq) GetUnlimited() Boolean {
	if x != nil {
		return x.Unlimited
	}
	return Boolean_BOOLEAN_INVALID
}

func (x *CreateProductReq) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *CreateProductReq) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *CreateProductReq) GetAttributes() []*BasicProductAttribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *CreateProductReq) GetPurchaseType() PurchaseType {
	if x != nil {
		return x.PurchaseType
	}
	return PurchaseType_PURCHASE_TYPE_INVALID
}

func (x *CreateProductReq) GetStatus() ProductStatus {
	if x != nil {
		return x.Status
	}
	return ProductStatus_PRODUCT_STATUS_INVALID
}

func (x *CreateProductReq) GetAdditionalData() map[string]string {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

func (x *CreateProductReq) GetPartnerShopId() string {
	if x != nil {
		return x.PartnerShopId
	}
	return ""
}

type UpdateProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Medias             []string                 `protobuf:"bytes,3,rep,name=medias,proto3" json:"medias,omitempty"`
	Tags               []string                 `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	AvailableStartTime int64                    `protobuf:"varint,5,opt,name=available_start_time,json=availableStartTime,proto3" json:"available_start_time,omitempty"`
	AvailableEndTime   int64                    `protobuf:"varint,6,opt,name=available_end_time,json=availableEndTime,proto3" json:"available_end_time,omitempty"`
	Quantity           int64                    `protobuf:"varint,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Sku                string                   `protobuf:"bytes,8,opt,name=sku,proto3" json:"sku,omitempty"`
	ListedPrice        float64                  `protobuf:"fixed64,9,opt,name=listed_price,json=listedPrice,proto3" json:"listed_price,omitempty"`
	DiscountPercent    float64                  `protobuf:"fixed64,10,opt,name=discount_percent,json=discountPercent,proto3" json:"discount_percent,omitempty"`
	Uom                string                   `protobuf:"bytes,11,opt,name=uom,proto3" json:"uom,omitempty"` // unit of measurement
	Currency           *ProductCurrencyInfo     `protobuf:"bytes,12,opt,name=currency,proto3" json:"currency,omitempty"`
	Brand              string                   `protobuf:"bytes,13,opt,name=brand,proto3" json:"brand,omitempty"`
	Description        string                   `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	Unlimited          Boolean                  `protobuf:"varint,15,opt,name=unlimited,proto3,enum=product.web_partnership.Boolean" json:"unlimited,omitempty"`
	Country            string                   `protobuf:"bytes,16,opt,name=country,proto3" json:"country,omitempty"`
	Language           string                   `protobuf:"bytes,17,opt,name=language,proto3" json:"language,omitempty"`
	Attributes         []*BasicProductAttribute `protobuf:"bytes,18,rep,name=attributes,proto3" json:"attributes,omitempty"`
	PurchaseType       PurchaseType             `protobuf:"varint,19,opt,name=purchase_type,json=purchaseType,proto3,enum=product.web_partnership.PurchaseType" json:"purchase_type,omitempty"`
	Status             ProductStatus            `protobuf:"varint,20,opt,name=status,proto3,enum=product.web_partnership.ProductStatus" json:"status,omitempty"`
	AdditionalData     map[string]string        `protobuf:"bytes,21,rep,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PartnerShopId      string                   `protobuf:"bytes,22,opt,name=partner_shop_id,json=partnerShopId,proto3" json:"partner_shop_id,omitempty"`
}

func (x *UpdateProductReq) Reset() {
	*x = UpdateProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_web_partnership_product_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductReq) ProtoMessage() {}

func (x *UpdateProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_web_partnership_product_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductReq.ProtoReflect.Descriptor instead.
func (*UpdateProductReq) Descriptor() ([]byte, []int) {
	return file_proto_product_web_partnership_product_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateProductReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateProductReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateProductReq) GetMedias() []string {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *UpdateProductReq) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateProductReq) GetAvailableStartTime() int64 {
	if x != nil {
		return x.AvailableStartTime
	}
	return 0
}

func (x *UpdateProductReq) GetAvailableEndTime() int64 {
	if x != nil {
		return x.AvailableEndTime
	}
	return 0
}

func (x *UpdateProductReq) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *UpdateProductReq) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *UpdateProductReq) GetListedPrice() float64 {
	if x != nil {
		return x.ListedPrice
	}
	return 0
}

func (x *UpdateProductReq) GetDiscountPercent() float64 {
	if x != nil {
		return x.DiscountPercent
	}
	return 0
}

func (x *UpdateProductReq) GetUom() string {
	if x != nil {
		return x.Uom
	}
	return ""
}

func (x *UpdateProductReq) GetCurrency() *ProductCurrencyInfo {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *UpdateProductReq) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *UpdateProductReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateProductReq) GetUnlimited() Boolean {
	if x != nil {
		return x.Unlimited
	}
	return Boolean_BOOLEAN_INVALID
}

func (x *UpdateProductReq) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *UpdateProductReq) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *UpdateProductReq) GetAttributes() []*BasicProductAttribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *UpdateProductReq) GetPurchaseType() PurchaseType {
	if x != nil {
		return x.PurchaseType
	}
	return PurchaseType_PURCHASE_TYPE_INVALID
}

func (x *UpdateProductReq) GetStatus() ProductStatus {
	if x != nil {
		return x.Status
	}
	return ProductStatus_PRODUCT_STATUS_INVALID
}

func (x *UpdateProductReq) GetAdditionalData() map[string]string {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

func (x *UpdateProductReq) GetPartnerShopId() string {
	if x != nil {
		return x.PartnerShopId
	}
	return ""
}

type SoftDeleteProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *SoftDeleteProductReq) Reset() {
	*x = SoftDeleteProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_web_partnership_product_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftDeleteProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftDeleteProductReq) ProtoMessage() {}

func (x *SoftDeleteProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_web_partnership_product_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftDeleteProductReq.ProtoReflect.Descriptor instead.
func (*SoftDeleteProductReq) Descriptor() ([]byte, []int) {
	return file_proto_product_web_partnership_product_proto_rawDescGZIP(), []int{6}
}

func (x *SoftDeleteProductReq) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type HardDeleteProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *HardDeleteProductReq) Reset() {
	*x = HardDeleteProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_web_partnership_product_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardDeleteProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardDeleteProductReq) ProtoMessage() {}

func (x *HardDeleteProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_web_partnership_product_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardDeleteProductReq.ProtoReflect.Descriptor instead.
func (*HardDeleteProductReq) Descriptor() ([]byte, []int) {
	return file_proto_product_web_partnership_product_proto_rawDescGZIP(), []int{7}
}

func (x *HardDeleteProductReq) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type PublicListProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Search        string         `protobuf:"bytes,1,opt,name=search,proto3" json:"search,omitempty"`
	Pagination    *PaginationReq `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	OrderBy       []*OrderByItem `protobuf:"bytes,3,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	PartnershipId string         `protobuf:"bytes,4,opt,name=partnership_id,json=partnershipId,proto3" json:"partnership_id,omitempty"`
}

func (x *PublicListProductReq) Reset() {
	*x = PublicListProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_web_partnership_product_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicListProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicListProductReq) ProtoMessage() {}

func (x *PublicListProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_web_partnership_product_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicListProductReq.ProtoReflect.Descriptor instead.
func (*PublicListProductReq) Descriptor() ([]byte, []int) {
	return file_proto_product_web_partnership_product_proto_rawDescGZIP(), []int{8}
}

func (x *PublicListProductReq) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *PublicListProductReq) GetPagination() *PaginationReq {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *PublicListProductReq) GetOrderBy() []*OrderByItem {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *PublicListProductReq) GetPartnershipId() string {
	if x != nil {
		return x.PartnershipId
	}
	return ""
}

type RetrieveProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RetrieveProductReq) Reset() {
	*x = RetrieveProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_web_partnership_product_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveProductReq) ProtoMessage() {}

func (x *RetrieveProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_web_partnership_product_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveProductReq.ProtoReflect.Descriptor instead.
func (*RetrieveProductReq) Descriptor() ([]byte, []int) {
	return file_proto_product_web_partnership_product_proto_rawDescGZIP(), []int{9}
}

func (x *RetrieveProductReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Attributes map[string]string `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PriceFrom  float64           `protobuf:"fixed64,3,opt,name=price_from,json=priceFrom,proto3" json:"price_from,omitempty"` // skip if price_from < 0
	PriceTo    float64           `protobuf:"fixed64,4,opt,name=price_to,json=priceTo,proto3" json:"price_to,omitempty"`       // skip if price_to < 0
	Status     []ProductStatus   `protobuf:"varint,5,rep,packed,name=status,proto3,enum=product.web_partnership.ProductStatus" json:"status,omitempty"`
	Pagination *PaginationReq    `protobuf:"bytes,6,opt,name=pagination,proto3" json:"pagination,omitempty"`
	OrderBy    []*OrderByItem    `protobuf:"bytes,7,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	SearchText string            `protobuf:"bytes,8,opt,name=search_text,json=searchText,proto3" json:"search_text,omitempty"`
}

func (x *ListProductReq) Reset() {
	*x = ListProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_web_partnership_product_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProductReq) ProtoMessage() {}

func (x *ListProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_web_partnership_product_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProductReq.ProtoReflect.Descriptor instead.
func (*ListProductReq) Descriptor() ([]byte, []int) {
	return file_proto_product_web_partnership_product_proto_rawDescGZIP(), []int{10}
}

func (x *ListProductReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListProductReq) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ListProductReq) GetPriceFrom() float64 {
	if x != nil {
		return x.PriceFrom
	}
	return 0
}

func (x *ListProductReq) GetPriceTo() float64 {
	if x != nil {
		return x.PriceTo
	}
	return 0
}

func (x *ListProductReq) GetStatus() []ProductStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListProductReq) GetPagination() *PaginationReq {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListProductReq) GetOrderBy() []*OrderByItem {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *ListProductReq) GetSearchText() string {
	if x != nil {
		return x.SearchText
	}
	return ""
}

type PublicRetrieveProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PartnershipId string `protobuf:"bytes,2,opt,name=partnership_id,json=partnershipId,proto3" json:"partnership_id,omitempty"`
}

func (x *PublicRetrieveProductReq) Reset() {
	*x = PublicRetrieveProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_web_partnership_product_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicRetrieveProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicRetrieveProductReq) ProtoMessage() {}

func (x *PublicRetrieveProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_web_partnership_product_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicRetrieveProductReq.ProtoReflect.Descriptor instead.
func (*PublicRetrieveProductReq) Descriptor() ([]byte, []int) {
	return file_proto_product_web_partnership_product_proto_rawDescGZIP(), []int{11}
}

func (x *PublicRetrieveProductReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PublicRetrieveProductReq) GetPartnershipId() string {
	if x != nil {
		return x.PartnershipId
	}
	return ""
}

type CreateProductRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateProductRes) Reset() {
	*x = CreateProductRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_web_partnership_product_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProductRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProductRes) ProtoMessage() {}

func (x *CreateProductRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_web_partnership_product_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProductRes.ProtoReflect.Descriptor instead.
func (*CreateProductRes) Descriptor() ([]byte, []int) {
	return file_proto_product_web_partnership_product_proto_rawDescGZIP(), []int{12}
}

func (x *CreateProductRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RetrieveProductRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info          *ProductInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Bought        bool         `protobuf:"varint,2,opt,name=bought,proto3" json:"bought,omitempty"`
	Rent          bool         `protobuf:"varint,3,opt,name=rent,proto3" json:"rent,omitempty"`
	RemainingTime int64        `protobuf:"varint,4,opt,name=remaining_time,json=remainingTime,proto3" json:"remaining_time,omitempty"`
}

func (x *RetrieveProductRes) Reset() {
	*x = RetrieveProductRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_web_partnership_product_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveProductRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveProductRes) ProtoMessage() {}

func (x *RetrieveProductRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_web_partnership_product_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveProductRes.ProtoReflect.Descriptor instead.
func (*RetrieveProductRes) Descriptor() ([]byte, []int) {
	return file_proto_product_web_partnership_product_proto_rawDescGZIP(), []int{13}
}

func (x *RetrieveProductRes) GetInfo() *ProductInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *RetrieveProductRes) GetBought() bool {
	if x != nil {
		return x.Bought
	}
	return false
}

func (x *RetrieveProductRes) GetRent() bool {
	if x != nil {
		return x.Rent
	}
	return false
}

func (x *RetrieveProductRes) GetRemainingTime() int64 {
	if x != nil {
		return x.RemainingTime
	}
	return 0
}

type ListProductRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info       []*ProductInfo `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty"`
	Pagination *PaginationRes `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListProductRes) Reset() {
	*x = ListProductRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_web_partnership_product_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProductRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProductRes) ProtoMessage() {}

func (x *ListProductRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_web_partnership_product_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProductRes.ProtoReflect.Descriptor instead.
func (*ListProductRes) Descriptor() ([]byte, []int) {
	return file_proto_product_web_partnership_product_proto_rawDescGZIP(), []int{14}
}

func (x *ListProductRes) GetInfo() []*ProductInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *ListProductRes) GetPagination() *PaginationRes {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type PublicRetrieveProductRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info          *ProductInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Bought        bool         `protobuf:"varint,2,opt,name=bought,proto3" json:"bought,omitempty"`
	Rent          bool         `protobuf:"varint,3,opt,name=rent,proto3" json:"rent,omitempty"`
	RemainingTime int64        `protobuf:"varint,4,opt,name=remaining_time,json=remainingTime,proto3" json:"remaining_time,omitempty"`
}

func (x *PublicRetrieveProductRes) Reset() {
	*x = PublicRetrieveProductRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_web_partnership_product_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicRetrieveProductRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicRetrieveProductRes) ProtoMessage() {}

func (x *PublicRetrieveProductRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_web_partnership_product_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicRetrieveProductRes.ProtoReflect.Descriptor instead.
func (*PublicRetrieveProductRes) Descriptor() ([]byte, []int) {
	return file_proto_product_web_partnership_product_proto_rawDescGZIP(), []int{15}
}

func (x *PublicRetrieveProductRes) GetInfo() *ProductInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *PublicRetrieveProductRes) GetBought() bool {
	if x != nil {
		return x.Bought
	}
	return false
}

func (x *PublicRetrieveProductRes) GetRent() bool {
	if x != nil {
		return x.Rent
	}
	return false
}

func (x *PublicRetrieveProductRes) GetRemainingTime() int64 {
	if x != nil {
		return x.RemainingTime
	}
	return 0
}

type PublicListProductRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info       []*ProductInfo `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty"`
	Pagination *PaginationRes `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *PublicListProductRes) Reset() {
	*x = PublicListProductRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_product_web_partnership_product_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicListProductRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicListProductRes) ProtoMessage() {}

func (x *PublicListProductRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_product_web_partnership_product_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicListProductRes.ProtoReflect.Descriptor instead.
func (*PublicListProductRes) Descriptor() ([]byte, []int) {
	return file_proto_product_web_partnership_product_proto_rawDescGZIP(), []int{16}
}

func (x *PublicListProductRes) GetInfo() []*ProductInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *PublicListProductRes) GetPagination() *PaginationRes {
	if x != nil {
		return x.Pagination
	}
	return nil
}

var File_proto_product_web_partnership_product_proto protoreflect.FileDescriptor

var file_proto_product_web_partnership_product_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f,
	0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x1a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xe0, 0x09, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b,
	0x75, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x6f, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x6f,
	0x6d, 0x12, 0x48, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77, 0x65,
	0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x09, 0x75, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x09, 0x75, 0x6e, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4f, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4a,
	0x0a, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x5f, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x42, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x61, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x64,
	0x1a, 0x41, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x61, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x5e, 0x0a, 0x15, 0x42, 0x61, 0x73, 0x69, 0x63, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xad, 0x02, 0x0a, 0x16, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x6c, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x1a, 0x41, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe7, 0x07, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x6f, 0x6d, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x6f, 0x6d, 0x12, 0x48, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x09, 0x75,
	0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x52, 0x09, 0x75, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x66, 0x0a,
	0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x1a, 0x41, 0x0a,
	0x13, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xf7, 0x07, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x6b, 0x75, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x6f, 0x6d, 0x12, 0x48, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x09, 0x75, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x09, 0x75, 0x6e, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77, 0x65, 0x62,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x66, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x26, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x1a, 0x41, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x28, 0x0a, 0x14, 0x53, 0x6f,
	0x66, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x22, 0x28, 0x0a, 0x14, 0x48, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xde,
	0x01, 0x0a, 0x14, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77, 0x65,
	0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x64, 0x22,
	0x24, 0x0a, 0x12, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe0, 0x03, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x12,
	0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77, 0x65,
	0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x51, 0x0a, 0x18, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xa1, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77,
	0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x62, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77,
	0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77,
	0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa7, 0x01, 0x0a, 0x18, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77, 0x65,
	0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x62, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x14, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x80, 0x01,
	0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x04,
	0x2a, 0x83, 0x01, 0x0a, 0x0c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a,
	0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45,
	0x4e, 0x54, 0x5f, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45,
	0x4e, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x55, 0x52,
	0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x5f,
	0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x2a, 0x9f, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x32, 0xdb, 0x06, 0x0a, 0x0e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x29, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x12, 0x5a, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77, 0x65,
	0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x62,
	0x0a, 0x11, 0x53, 0x6f, 0x66, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77, 0x65,
	0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x6f,
	0x66, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77, 0x65, 0x62,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x62, 0x0a, 0x11, 0x48, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6b, 0x0a, 0x0f, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77, 0x65, 0x62,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x12, 0x7d, 0x0a, 0x15, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x42, 0x52, 0x5a, 0x50, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x2e, 0x62, 0x63, 0x61, 0x73, 0x69, 0x61, 0x2e, 0x69, 0x6f, 0x2f, 0x74, 0x68, 0x75, 0x79, 0x6e,
	0x67, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x77, 0x65, 0x62, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x3b, 0x77, 0x65, 0x62, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_product_web_partnership_product_proto_rawDescOnce sync.Once
	file_proto_product_web_partnership_product_proto_rawDescData = file_proto_product_web_partnership_product_proto_rawDesc
)

func file_proto_product_web_partnership_product_proto_rawDescGZIP() []byte {
	file_proto_product_web_partnership_product_proto_rawDescOnce.Do(func() {
		file_proto_product_web_partnership_product_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_product_web_partnership_product_proto_rawDescData)
	})
	return file_proto_product_web_partnership_product_proto_rawDescData
}

var file_proto_product_web_partnership_product_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_product_web_partnership_product_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_proto_product_web_partnership_product_proto_goTypes = []interface{}{
	(ValueType)(0),                   // 0: product.web_partnership.ValueType
	(PurchaseType)(0),                // 1: product.web_partnership.PurchaseType
	(ProductStatus)(0),               // 2: product.web_partnership.ProductStatus
	(*ProductInfo)(nil),              // 3: product.web_partnership.ProductInfo
	(*ProductCurrencyInfo)(nil),      // 4: product.web_partnership.ProductCurrencyInfo
	(*BasicProductAttribute)(nil),    // 5: product.web_partnership.BasicProductAttribute
	(*DetailProductAttribute)(nil),   // 6: product.web_partnership.DetailProductAttribute
	(*CreateProductReq)(nil),         // 7: product.web_partnership.CreateProductReq
	(*UpdateProductReq)(nil),         // 8: product.web_partnership.UpdateProductReq
	(*SoftDeleteProductReq)(nil),     // 9: product.web_partnership.SoftDeleteProductReq
	(*HardDeleteProductReq)(nil),     // 10: product.web_partnership.HardDeleteProductReq
	(*PublicListProductReq)(nil),     // 11: product.web_partnership.PublicListProductReq
	(*RetrieveProductReq)(nil),       // 12: product.web_partnership.RetrieveProductReq
	(*ListProductReq)(nil),           // 13: product.web_partnership.ListProductReq
	(*PublicRetrieveProductReq)(nil), // 14: product.web_partnership.PublicRetrieveProductReq
	(*CreateProductRes)(nil),         // 15: product.web_partnership.CreateProductRes
	(*RetrieveProductRes)(nil),       // 16: product.web_partnership.RetrieveProductRes
	(*ListProductRes)(nil),           // 17: product.web_partnership.ListProductRes
	(*PublicRetrieveProductRes)(nil), // 18: product.web_partnership.PublicRetrieveProductRes
	(*PublicListProductRes)(nil),     // 19: product.web_partnership.PublicListProductRes
	nil,                              // 20: product.web_partnership.ProductInfo.AdditionalDataEntry
	nil,                              // 21: product.web_partnership.DetailProductAttribute.AdditionalDataEntry
	nil,                              // 22: product.web_partnership.CreateProductReq.AdditionalDataEntry
	nil,                              // 23: product.web_partnership.UpdateProductReq.AdditionalDataEntry
	nil,                              // 24: product.web_partnership.ListProductReq.AttributesEntry
	(Boolean)(0),                     // 25: product.web_partnership.Boolean
	(*PaginationReq)(nil),            // 26: product.web_partnership.PaginationReq
	(*OrderByItem)(nil),              // 27: product.web_partnership.OrderByItem
	(*PaginationRes)(nil),            // 28: product.web_partnership.PaginationRes
	(*Empty)(nil),                    // 29: product.web_partnership.Empty
}
var file_proto_product_web_partnership_product_proto_depIdxs = []int32{
	4,  // 0: product.web_partnership.ProductInfo.currency:type_name -> product.web_partnership.ProductCurrencyInfo
	25, // 1: product.web_partnership.ProductInfo.unlimited:type_name -> product.web_partnership.Boolean
	6,  // 2: product.web_partnership.ProductInfo.attributes:type_name -> product.web_partnership.DetailProductAttribute
	1,  // 3: product.web_partnership.ProductInfo.purchase_type:type_name -> product.web_partnership.PurchaseType
	2,  // 4: product.web_partnership.ProductInfo.status:type_name -> product.web_partnership.ProductStatus
	20, // 5: product.web_partnership.ProductInfo.additional_data:type_name -> product.web_partnership.ProductInfo.AdditionalDataEntry
	21, // 6: product.web_partnership.DetailProductAttribute.additional_data:type_name -> product.web_partnership.DetailProductAttribute.AdditionalDataEntry
	4,  // 7: product.web_partnership.CreateProductReq.currency:type_name -> product.web_partnership.ProductCurrencyInfo
	25, // 8: product.web_partnership.CreateProductReq.unlimited:type_name -> product.web_partnership.Boolean
	5,  // 9: product.web_partnership.CreateProductReq.attributes:type_name -> product.web_partnership.BasicProductAttribute
	1,  // 10: product.web_partnership.CreateProductReq.purchase_type:type_name -> product.web_partnership.PurchaseType
	2,  // 11: product.web_partnership.CreateProductReq.status:type_name -> product.web_partnership.ProductStatus
	22, // 12: product.web_partnership.CreateProductReq.additional_data:type_name -> product.web_partnership.CreateProductReq.AdditionalDataEntry
	4,  // 13: product.web_partnership.UpdateProductReq.currency:type_name -> product.web_partnership.ProductCurrencyInfo
	25, // 14: product.web_partnership.UpdateProductReq.unlimited:type_name -> product.web_partnership.Boolean
	5,  // 15: product.web_partnership.UpdateProductReq.attributes:type_name -> product.web_partnership.BasicProductAttribute
	1,  // 16: product.web_partnership.UpdateProductReq.purchase_type:type_name -> product.web_partnership.PurchaseType
	2,  // 17: product.web_partnership.UpdateProductReq.status:type_name -> product.web_partnership.ProductStatus
	23, // 18: product.web_partnership.UpdateProductReq.additional_data:type_name -> product.web_partnership.UpdateProductReq.AdditionalDataEntry
	26, // 19: product.web_partnership.PublicListProductReq.pagination:type_name -> product.web_partnership.PaginationReq
	27, // 20: product.web_partnership.PublicListProductReq.order_by:type_name -> product.web_partnership.OrderByItem
	24, // 21: product.web_partnership.ListProductReq.attributes:type_name -> product.web_partnership.ListProductReq.AttributesEntry
	2,  // 22: product.web_partnership.ListProductReq.status:type_name -> product.web_partnership.ProductStatus
	26, // 23: product.web_partnership.ListProductReq.pagination:type_name -> product.web_partnership.PaginationReq
	27, // 24: product.web_partnership.ListProductReq.order_by:type_name -> product.web_partnership.OrderByItem
	3,  // 25: product.web_partnership.RetrieveProductRes.info:type_name -> product.web_partnership.ProductInfo
	3,  // 26: product.web_partnership.ListProductRes.info:type_name -> product.web_partnership.ProductInfo
	28, // 27: product.web_partnership.ListProductRes.pagination:type_name -> product.web_partnership.PaginationRes
	3,  // 28: product.web_partnership.PublicRetrieveProductRes.info:type_name -> product.web_partnership.ProductInfo
	3,  // 29: product.web_partnership.PublicListProductRes.info:type_name -> product.web_partnership.ProductInfo
	28, // 30: product.web_partnership.PublicListProductRes.pagination:type_name -> product.web_partnership.PaginationRes
	7,  // 31: product.web_partnership.ProductService.CreateProduct:input_type -> product.web_partnership.CreateProductReq
	8,  // 32: product.web_partnership.ProductService.UpdateProduct:input_type -> product.web_partnership.UpdateProductReq
	9,  // 33: product.web_partnership.ProductService.SoftDeleteProduct:input_type -> product.web_partnership.SoftDeleteProductReq
	10, // 34: product.web_partnership.ProductService.HardDeleteProduct:input_type -> product.web_partnership.HardDeleteProductReq
	12, // 35: product.web_partnership.ProductService.RetrieveProduct:input_type -> product.web_partnership.RetrieveProductReq
	13, // 36: product.web_partnership.ProductService.ListProduct:input_type -> product.web_partnership.ListProductReq
	14, // 37: product.web_partnership.ProductService.PublicRetrieveProduct:input_type -> product.web_partnership.PublicRetrieveProductReq
	11, // 38: product.web_partnership.ProductService.PublicListProduct:input_type -> product.web_partnership.PublicListProductReq
	15, // 39: product.web_partnership.ProductService.CreateProduct:output_type -> product.web_partnership.CreateProductRes
	29, // 40: product.web_partnership.ProductService.UpdateProduct:output_type -> product.web_partnership.Empty
	29, // 41: product.web_partnership.ProductService.SoftDeleteProduct:output_type -> product.web_partnership.Empty
	29, // 42: product.web_partnership.ProductService.HardDeleteProduct:output_type -> product.web_partnership.Empty
	16, // 43: product.web_partnership.ProductService.RetrieveProduct:output_type -> product.web_partnership.RetrieveProductRes
	17, // 44: product.web_partnership.ProductService.ListProduct:output_type -> product.web_partnership.ListProductRes
	18, // 45: product.web_partnership.ProductService.PublicRetrieveProduct:output_type -> product.web_partnership.PublicRetrieveProductRes
	19, // 46: product.web_partnership.ProductService.PublicListProduct:output_type -> product.web_partnership.PublicListProductRes
	39, // [39:47] is the sub-list for method output_type
	31, // [31:39] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_proto_product_web_partnership_product_proto_init() }
func file_proto_product_web_partnership_product_proto_init() {
	if File_proto_product_web_partnership_product_proto != nil {
		return
	}
	file_proto_product_web_partnership_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_product_web_partnership_product_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_web_partnership_product_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCurrencyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_web_partnership_product_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicProductAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_web_partnership_product_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailProductAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_web_partnership_product_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_web_partnership_product_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_web_partnership_product_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftDeleteProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_web_partnership_product_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardDeleteProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_web_partnership_product_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicListProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_web_partnership_product_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_web_partnership_product_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_web_partnership_product_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicRetrieveProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_web_partnership_product_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProductRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_web_partnership_product_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveProductRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_web_partnership_product_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProductRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_web_partnership_product_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicRetrieveProductRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_product_web_partnership_product_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicListProductRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_product_web_partnership_product_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_product_web_partnership_product_proto_goTypes,
		DependencyIndexes: file_proto_product_web_partnership_product_proto_depIdxs,
		EnumInfos:         file_proto_product_web_partnership_product_proto_enumTypes,
		MessageInfos:      file_proto_product_web_partnership_product_proto_msgTypes,
	}.Build()
	File_proto_product_web_partnership_product_proto = out.File
	file_proto_product_web_partnership_product_proto_rawDesc = nil
	file_proto_product_web_partnership_product_proto_goTypes = nil
	file_proto_product_web_partnership_product_proto_depIdxs = nil
}
