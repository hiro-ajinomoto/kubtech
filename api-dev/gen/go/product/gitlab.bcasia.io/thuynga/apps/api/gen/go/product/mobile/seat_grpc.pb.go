// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: proto/product/mobile/seat.proto

package mobile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SeatServiceClient is the client API for SeatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeatServiceClient interface {
	GetSeats(ctx context.Context, in *GetSeatsReq, opts ...grpc.CallOption) (*GetSeatsRes, error)
	GetAvailableSeats(ctx context.Context, in *GetAvailableSeatsReq, opts ...grpc.CallOption) (*GetAvailableSeatsRes, error)
}

type seatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeatServiceClient(cc grpc.ClientConnInterface) SeatServiceClient {
	return &seatServiceClient{cc}
}

func (c *seatServiceClient) GetSeats(ctx context.Context, in *GetSeatsReq, opts ...grpc.CallOption) (*GetSeatsRes, error) {
	out := new(GetSeatsRes)
	err := c.cc.Invoke(ctx, "/product.mobile.SeatService/GetSeats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatServiceClient) GetAvailableSeats(ctx context.Context, in *GetAvailableSeatsReq, opts ...grpc.CallOption) (*GetAvailableSeatsRes, error) {
	out := new(GetAvailableSeatsRes)
	err := c.cc.Invoke(ctx, "/product.mobile.SeatService/GetAvailableSeats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeatServiceServer is the server API for SeatService service.
// All implementations must embed UnimplementedSeatServiceServer
// for forward compatibility
type SeatServiceServer interface {
	GetSeats(context.Context, *GetSeatsReq) (*GetSeatsRes, error)
	GetAvailableSeats(context.Context, *GetAvailableSeatsReq) (*GetAvailableSeatsRes, error)
	mustEmbedUnimplementedSeatServiceServer()
}

// UnimplementedSeatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSeatServiceServer struct {
}

func (UnimplementedSeatServiceServer) GetSeats(context.Context, *GetSeatsReq) (*GetSeatsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeats not implemented")
}
func (UnimplementedSeatServiceServer) GetAvailableSeats(context.Context, *GetAvailableSeatsReq) (*GetAvailableSeatsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableSeats not implemented")
}
func (UnimplementedSeatServiceServer) mustEmbedUnimplementedSeatServiceServer() {}

// UnsafeSeatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeatServiceServer will
// result in compilation errors.
type UnsafeSeatServiceServer interface {
	mustEmbedUnimplementedSeatServiceServer()
}

func RegisterSeatServiceServer(s grpc.ServiceRegistrar, srv SeatServiceServer) {
	s.RegisterService(&SeatService_ServiceDesc, srv)
}

func _SeatService_GetSeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServiceServer).GetSeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.mobile.SeatService/GetSeats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServiceServer).GetSeats(ctx, req.(*GetSeatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatService_GetAvailableSeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableSeatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServiceServer).GetAvailableSeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.mobile.SeatService/GetAvailableSeats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServiceServer).GetAvailableSeats(ctx, req.(*GetAvailableSeatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SeatService_ServiceDesc is the grpc.ServiceDesc for SeatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.mobile.SeatService",
	HandlerType: (*SeatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSeats",
			Handler:    _SeatService_GetSeats_Handler,
		},
		{
			MethodName: "GetAvailableSeats",
			Handler:    _SeatService_GetAvailableSeats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/product/mobile/seat.proto",
}
