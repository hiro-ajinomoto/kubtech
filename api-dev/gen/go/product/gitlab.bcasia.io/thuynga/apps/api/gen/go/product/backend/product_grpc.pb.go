// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: proto/product/backend/product.proto

package backend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	ListProductByIds(ctx context.Context, in *ListProductByIdsReq, opts ...grpc.CallOption) (*ListProductByIdsRes, error)
	CheckQuantity(ctx context.Context, in *CheckQuantityReq, opts ...grpc.CallOption) (*Empty, error)
	GetAvailableQuantity(ctx context.Context, in *GetAvailableQuantityReq, opts ...grpc.CallOption) (*GetAvailableQuantityRes, error)
	CheckAndLockQuantity(ctx context.Context, in *CheckAndLockQuantityReq, opts ...grpc.CallOption) (*Empty, error)
	UnlockQuantity(ctx context.Context, in *UnlockQuantityReq, opts ...grpc.CallOption) (*Empty, error)
	UnlockAndUpdateQuantity(ctx context.Context, in *UnlockAndUpdateQuantityReq, opts ...grpc.CallOption) (*Empty, error)
	InternalGenerateProductByEventSeat(ctx context.Context, in *GenerateProductByEventSeatReq, opts ...grpc.CallOption) (*Empty, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) ListProductByIds(ctx context.Context, in *ListProductByIdsReq, opts ...grpc.CallOption) (*ListProductByIdsRes, error) {
	out := new(ListProductByIdsRes)
	err := c.cc.Invoke(ctx, "/product.backend.ProductService/ListProductByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CheckQuantity(ctx context.Context, in *CheckQuantityReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/product.backend.ProductService/CheckQuantity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAvailableQuantity(ctx context.Context, in *GetAvailableQuantityReq, opts ...grpc.CallOption) (*GetAvailableQuantityRes, error) {
	out := new(GetAvailableQuantityRes)
	err := c.cc.Invoke(ctx, "/product.backend.ProductService/GetAvailableQuantity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CheckAndLockQuantity(ctx context.Context, in *CheckAndLockQuantityReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/product.backend.ProductService/CheckAndLockQuantity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UnlockQuantity(ctx context.Context, in *UnlockQuantityReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/product.backend.ProductService/UnlockQuantity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UnlockAndUpdateQuantity(ctx context.Context, in *UnlockAndUpdateQuantityReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/product.backend.ProductService/UnlockAndUpdateQuantity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) InternalGenerateProductByEventSeat(ctx context.Context, in *GenerateProductByEventSeatReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/product.backend.ProductService/InternalGenerateProductByEventSeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility
type ProductServiceServer interface {
	ListProductByIds(context.Context, *ListProductByIdsReq) (*ListProductByIdsRes, error)
	CheckQuantity(context.Context, *CheckQuantityReq) (*Empty, error)
	GetAvailableQuantity(context.Context, *GetAvailableQuantityReq) (*GetAvailableQuantityRes, error)
	CheckAndLockQuantity(context.Context, *CheckAndLockQuantityReq) (*Empty, error)
	UnlockQuantity(context.Context, *UnlockQuantityReq) (*Empty, error)
	UnlockAndUpdateQuantity(context.Context, *UnlockAndUpdateQuantityReq) (*Empty, error)
	InternalGenerateProductByEventSeat(context.Context, *GenerateProductByEventSeatReq) (*Empty, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (UnimplementedProductServiceServer) ListProductByIds(context.Context, *ListProductByIdsReq) (*ListProductByIdsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductByIds not implemented")
}
func (UnimplementedProductServiceServer) CheckQuantity(context.Context, *CheckQuantityReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckQuantity not implemented")
}
func (UnimplementedProductServiceServer) GetAvailableQuantity(context.Context, *GetAvailableQuantityReq) (*GetAvailableQuantityRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableQuantity not implemented")
}
func (UnimplementedProductServiceServer) CheckAndLockQuantity(context.Context, *CheckAndLockQuantityReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAndLockQuantity not implemented")
}
func (UnimplementedProductServiceServer) UnlockQuantity(context.Context, *UnlockQuantityReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockQuantity not implemented")
}
func (UnimplementedProductServiceServer) UnlockAndUpdateQuantity(context.Context, *UnlockAndUpdateQuantityReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockAndUpdateQuantity not implemented")
}
func (UnimplementedProductServiceServer) InternalGenerateProductByEventSeat(context.Context, *GenerateProductByEventSeatReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalGenerateProductByEventSeat not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_ListProductByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListProductByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.backend.ProductService/ListProductByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListProductByIds(ctx, req.(*ListProductByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CheckQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckQuantityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CheckQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.backend.ProductService/CheckQuantity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CheckQuantity(ctx, req.(*CheckQuantityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAvailableQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableQuantityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAvailableQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.backend.ProductService/GetAvailableQuantity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAvailableQuantity(ctx, req.(*GetAvailableQuantityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CheckAndLockQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAndLockQuantityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CheckAndLockQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.backend.ProductService/CheckAndLockQuantity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CheckAndLockQuantity(ctx, req.(*CheckAndLockQuantityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UnlockQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockQuantityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UnlockQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.backend.ProductService/UnlockQuantity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UnlockQuantity(ctx, req.(*UnlockQuantityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UnlockAndUpdateQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockAndUpdateQuantityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UnlockAndUpdateQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.backend.ProductService/UnlockAndUpdateQuantity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UnlockAndUpdateQuantity(ctx, req.(*UnlockAndUpdateQuantityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_InternalGenerateProductByEventSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateProductByEventSeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).InternalGenerateProductByEventSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.backend.ProductService/InternalGenerateProductByEventSeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).InternalGenerateProductByEventSeat(ctx, req.(*GenerateProductByEventSeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.backend.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProductByIds",
			Handler:    _ProductService_ListProductByIds_Handler,
		},
		{
			MethodName: "CheckQuantity",
			Handler:    _ProductService_CheckQuantity_Handler,
		},
		{
			MethodName: "GetAvailableQuantity",
			Handler:    _ProductService_GetAvailableQuantity_Handler,
		},
		{
			MethodName: "CheckAndLockQuantity",
			Handler:    _ProductService_CheckAndLockQuantity_Handler,
		},
		{
			MethodName: "UnlockQuantity",
			Handler:    _ProductService_UnlockQuantity_Handler,
		},
		{
			MethodName: "UnlockAndUpdateQuantity",
			Handler:    _ProductService_UnlockAndUpdateQuantity_Handler,
		},
		{
			MethodName: "InternalGenerateProductByEventSeat",
			Handler:    _ProductService_InternalGenerateProductByEventSeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/product/backend/product.proto",
}
