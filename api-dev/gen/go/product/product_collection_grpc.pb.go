// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: product/product_collection.proto

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductCollectionServiceClient is the client API for ProductCollectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductCollectionServiceClient interface {
	GetMyProductCollection(ctx context.Context, in *GetMyProductCollectionReq, opts ...grpc.CallOption) (*GetMyProductCollectionRes, error)
	GetMyProductCollectionByOrderId(ctx context.Context, in *GetMyProductCollectionByOrderIdReq, opts ...grpc.CallOption) (*GetMyProductCollectionByOrderIdRes, error)
	ListMyProductCollections(ctx context.Context, in *ListMyProductCollectionReq, opts ...grpc.CallOption) (*ListMyProductCollectionsRes, error)
	InternalCheckProductCollection(ctx context.Context, in *InternalCheckProductCollectionReq, opts ...grpc.CallOption) (*InternalCheckProductCollectionRes, error)
	InternalCheckProductIsBought(ctx context.Context, in *InternalCheckProductIsBoughtReq, opts ...grpc.CallOption) (*InternalCheckProductIsBoughtRes, error)
}

type productCollectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductCollectionServiceClient(cc grpc.ClientConnInterface) ProductCollectionServiceClient {
	return &productCollectionServiceClient{cc}
}

func (c *productCollectionServiceClient) GetMyProductCollection(ctx context.Context, in *GetMyProductCollectionReq, opts ...grpc.CallOption) (*GetMyProductCollectionRes, error) {
	out := new(GetMyProductCollectionRes)
	err := c.cc.Invoke(ctx, "/product.ProductCollectionService/GetMyProductCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCollectionServiceClient) GetMyProductCollectionByOrderId(ctx context.Context, in *GetMyProductCollectionByOrderIdReq, opts ...grpc.CallOption) (*GetMyProductCollectionByOrderIdRes, error) {
	out := new(GetMyProductCollectionByOrderIdRes)
	err := c.cc.Invoke(ctx, "/product.ProductCollectionService/GetMyProductCollectionByOrderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCollectionServiceClient) ListMyProductCollections(ctx context.Context, in *ListMyProductCollectionReq, opts ...grpc.CallOption) (*ListMyProductCollectionsRes, error) {
	out := new(ListMyProductCollectionsRes)
	err := c.cc.Invoke(ctx, "/product.ProductCollectionService/ListMyProductCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCollectionServiceClient) InternalCheckProductCollection(ctx context.Context, in *InternalCheckProductCollectionReq, opts ...grpc.CallOption) (*InternalCheckProductCollectionRes, error) {
	out := new(InternalCheckProductCollectionRes)
	err := c.cc.Invoke(ctx, "/product.ProductCollectionService/InternalCheckProductCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCollectionServiceClient) InternalCheckProductIsBought(ctx context.Context, in *InternalCheckProductIsBoughtReq, opts ...grpc.CallOption) (*InternalCheckProductIsBoughtRes, error) {
	out := new(InternalCheckProductIsBoughtRes)
	err := c.cc.Invoke(ctx, "/product.ProductCollectionService/InternalCheckProductIsBought", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductCollectionServiceServer is the server API for ProductCollectionService service.
// All implementations must embed UnimplementedProductCollectionServiceServer
// for forward compatibility
type ProductCollectionServiceServer interface {
	GetMyProductCollection(context.Context, *GetMyProductCollectionReq) (*GetMyProductCollectionRes, error)
	GetMyProductCollectionByOrderId(context.Context, *GetMyProductCollectionByOrderIdReq) (*GetMyProductCollectionByOrderIdRes, error)
	ListMyProductCollections(context.Context, *ListMyProductCollectionReq) (*ListMyProductCollectionsRes, error)
	InternalCheckProductCollection(context.Context, *InternalCheckProductCollectionReq) (*InternalCheckProductCollectionRes, error)
	InternalCheckProductIsBought(context.Context, *InternalCheckProductIsBoughtReq) (*InternalCheckProductIsBoughtRes, error)
	mustEmbedUnimplementedProductCollectionServiceServer()
}

// UnimplementedProductCollectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductCollectionServiceServer struct {
}

func (UnimplementedProductCollectionServiceServer) GetMyProductCollection(context.Context, *GetMyProductCollectionReq) (*GetMyProductCollectionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyProductCollection not implemented")
}
func (UnimplementedProductCollectionServiceServer) GetMyProductCollectionByOrderId(context.Context, *GetMyProductCollectionByOrderIdReq) (*GetMyProductCollectionByOrderIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyProductCollectionByOrderId not implemented")
}
func (UnimplementedProductCollectionServiceServer) ListMyProductCollections(context.Context, *ListMyProductCollectionReq) (*ListMyProductCollectionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyProductCollections not implemented")
}
func (UnimplementedProductCollectionServiceServer) InternalCheckProductCollection(context.Context, *InternalCheckProductCollectionReq) (*InternalCheckProductCollectionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalCheckProductCollection not implemented")
}
func (UnimplementedProductCollectionServiceServer) InternalCheckProductIsBought(context.Context, *InternalCheckProductIsBoughtReq) (*InternalCheckProductIsBoughtRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalCheckProductIsBought not implemented")
}
func (UnimplementedProductCollectionServiceServer) mustEmbedUnimplementedProductCollectionServiceServer() {
}

// UnsafeProductCollectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductCollectionServiceServer will
// result in compilation errors.
type UnsafeProductCollectionServiceServer interface {
	mustEmbedUnimplementedProductCollectionServiceServer()
}

func RegisterProductCollectionServiceServer(s grpc.ServiceRegistrar, srv ProductCollectionServiceServer) {
	s.RegisterService(&ProductCollectionService_ServiceDesc, srv)
}

func _ProductCollectionService_GetMyProductCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyProductCollectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCollectionServiceServer).GetMyProductCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductCollectionService/GetMyProductCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCollectionServiceServer).GetMyProductCollection(ctx, req.(*GetMyProductCollectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCollectionService_GetMyProductCollectionByOrderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyProductCollectionByOrderIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCollectionServiceServer).GetMyProductCollectionByOrderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductCollectionService/GetMyProductCollectionByOrderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCollectionServiceServer).GetMyProductCollectionByOrderId(ctx, req.(*GetMyProductCollectionByOrderIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCollectionService_ListMyProductCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyProductCollectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCollectionServiceServer).ListMyProductCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductCollectionService/ListMyProductCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCollectionServiceServer).ListMyProductCollections(ctx, req.(*ListMyProductCollectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCollectionService_InternalCheckProductCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalCheckProductCollectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCollectionServiceServer).InternalCheckProductCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductCollectionService/InternalCheckProductCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCollectionServiceServer).InternalCheckProductCollection(ctx, req.(*InternalCheckProductCollectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCollectionService_InternalCheckProductIsBought_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalCheckProductIsBoughtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCollectionServiceServer).InternalCheckProductIsBought(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductCollectionService/InternalCheckProductIsBought",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCollectionServiceServer).InternalCheckProductIsBought(ctx, req.(*InternalCheckProductIsBoughtReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductCollectionService_ServiceDesc is the grpc.ServiceDesc for ProductCollectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductCollectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.ProductCollectionService",
	HandlerType: (*ProductCollectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMyProductCollection",
			Handler:    _ProductCollectionService_GetMyProductCollection_Handler,
		},
		{
			MethodName: "GetMyProductCollectionByOrderId",
			Handler:    _ProductCollectionService_GetMyProductCollectionByOrderId_Handler,
		},
		{
			MethodName: "ListMyProductCollections",
			Handler:    _ProductCollectionService_ListMyProductCollections_Handler,
		},
		{
			MethodName: "InternalCheckProductCollection",
			Handler:    _ProductCollectionService_InternalCheckProductCollection_Handler,
		},
		{
			MethodName: "InternalCheckProductIsBought",
			Handler:    _ProductCollectionService_InternalCheckProductIsBought_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product/product_collection.proto",
}
