// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: event/web_inspector/seat_map.proto

package web_inspector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SeatMapServiceClient is the client API for SeatMapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeatMapServiceClient interface {
	RetrieveSeatMap(ctx context.Context, in *RetrieveSeatMapReq, opts ...grpc.CallOption) (*RetrieveSeatMapRes, error)
}

type seatMapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeatMapServiceClient(cc grpc.ClientConnInterface) SeatMapServiceClient {
	return &seatMapServiceClient{cc}
}

func (c *seatMapServiceClient) RetrieveSeatMap(ctx context.Context, in *RetrieveSeatMapReq, opts ...grpc.CallOption) (*RetrieveSeatMapRes, error) {
	out := new(RetrieveSeatMapRes)
	err := c.cc.Invoke(ctx, "/event.web_inspector.SeatMapService/RetrieveSeatMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeatMapServiceServer is the server API for SeatMapService service.
// All implementations must embed UnimplementedSeatMapServiceServer
// for forward compatibility
type SeatMapServiceServer interface {
	RetrieveSeatMap(context.Context, *RetrieveSeatMapReq) (*RetrieveSeatMapRes, error)
	mustEmbedUnimplementedSeatMapServiceServer()
}

// UnimplementedSeatMapServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSeatMapServiceServer struct {
}

func (UnimplementedSeatMapServiceServer) RetrieveSeatMap(context.Context, *RetrieveSeatMapReq) (*RetrieveSeatMapRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSeatMap not implemented")
}
func (UnimplementedSeatMapServiceServer) mustEmbedUnimplementedSeatMapServiceServer() {}

// UnsafeSeatMapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeatMapServiceServer will
// result in compilation errors.
type UnsafeSeatMapServiceServer interface {
	mustEmbedUnimplementedSeatMapServiceServer()
}

func RegisterSeatMapServiceServer(s grpc.ServiceRegistrar, srv SeatMapServiceServer) {
	s.RegisterService(&SeatMapService_ServiceDesc, srv)
}

func _SeatMapService_RetrieveSeatMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveSeatMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatMapServiceServer).RetrieveSeatMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_inspector.SeatMapService/RetrieveSeatMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatMapServiceServer).RetrieveSeatMap(ctx, req.(*RetrieveSeatMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SeatMapService_ServiceDesc is the grpc.ServiceDesc for SeatMapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeatMapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.web_inspector.SeatMapService",
	HandlerType: (*SeatMapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveSeatMap",
			Handler:    _SeatMapService_RetrieveSeatMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event/web_inspector/seat_map.proto",
}
