// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: event/web_admin/sponsor_level.proto

package web_admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SponsorLevelServiceClient is the client API for SponsorLevelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SponsorLevelServiceClient interface {
	CreateSponsorLevel(ctx context.Context, in *CreateSponsorLevelReq, opts ...grpc.CallOption) (*CreateSponsorLevelRes, error)
	UpdateSponsorLevel(ctx context.Context, in *UpdateSponsorLevelReq, opts ...grpc.CallOption) (*Empty, error)
	DeleteSponsorLevel(ctx context.Context, in *DeleteSponsorLevelReq, opts ...grpc.CallOption) (*Empty, error)
	GetSponsorLevel(ctx context.Context, in *GetSponsorLevelReq, opts ...grpc.CallOption) (*GetSponsorLevelRes, error)
	ListSponsorLevel(ctx context.Context, in *ListSponsorLevelReq, opts ...grpc.CallOption) (*ListSponsorLevelRes, error)
}

type sponsorLevelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSponsorLevelServiceClient(cc grpc.ClientConnInterface) SponsorLevelServiceClient {
	return &sponsorLevelServiceClient{cc}
}

func (c *sponsorLevelServiceClient) CreateSponsorLevel(ctx context.Context, in *CreateSponsorLevelReq, opts ...grpc.CallOption) (*CreateSponsorLevelRes, error) {
	out := new(CreateSponsorLevelRes)
	err := c.cc.Invoke(ctx, "/event.web_admin.SponsorLevelService/CreateSponsorLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sponsorLevelServiceClient) UpdateSponsorLevel(ctx context.Context, in *UpdateSponsorLevelReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/event.web_admin.SponsorLevelService/UpdateSponsorLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sponsorLevelServiceClient) DeleteSponsorLevel(ctx context.Context, in *DeleteSponsorLevelReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/event.web_admin.SponsorLevelService/DeleteSponsorLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sponsorLevelServiceClient) GetSponsorLevel(ctx context.Context, in *GetSponsorLevelReq, opts ...grpc.CallOption) (*GetSponsorLevelRes, error) {
	out := new(GetSponsorLevelRes)
	err := c.cc.Invoke(ctx, "/event.web_admin.SponsorLevelService/GetSponsorLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sponsorLevelServiceClient) ListSponsorLevel(ctx context.Context, in *ListSponsorLevelReq, opts ...grpc.CallOption) (*ListSponsorLevelRes, error) {
	out := new(ListSponsorLevelRes)
	err := c.cc.Invoke(ctx, "/event.web_admin.SponsorLevelService/ListSponsorLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SponsorLevelServiceServer is the server API for SponsorLevelService service.
// All implementations must embed UnimplementedSponsorLevelServiceServer
// for forward compatibility
type SponsorLevelServiceServer interface {
	CreateSponsorLevel(context.Context, *CreateSponsorLevelReq) (*CreateSponsorLevelRes, error)
	UpdateSponsorLevel(context.Context, *UpdateSponsorLevelReq) (*Empty, error)
	DeleteSponsorLevel(context.Context, *DeleteSponsorLevelReq) (*Empty, error)
	GetSponsorLevel(context.Context, *GetSponsorLevelReq) (*GetSponsorLevelRes, error)
	ListSponsorLevel(context.Context, *ListSponsorLevelReq) (*ListSponsorLevelRes, error)
	mustEmbedUnimplementedSponsorLevelServiceServer()
}

// UnimplementedSponsorLevelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSponsorLevelServiceServer struct {
}

func (UnimplementedSponsorLevelServiceServer) CreateSponsorLevel(context.Context, *CreateSponsorLevelReq) (*CreateSponsorLevelRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSponsorLevel not implemented")
}
func (UnimplementedSponsorLevelServiceServer) UpdateSponsorLevel(context.Context, *UpdateSponsorLevelReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSponsorLevel not implemented")
}
func (UnimplementedSponsorLevelServiceServer) DeleteSponsorLevel(context.Context, *DeleteSponsorLevelReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSponsorLevel not implemented")
}
func (UnimplementedSponsorLevelServiceServer) GetSponsorLevel(context.Context, *GetSponsorLevelReq) (*GetSponsorLevelRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSponsorLevel not implemented")
}
func (UnimplementedSponsorLevelServiceServer) ListSponsorLevel(context.Context, *ListSponsorLevelReq) (*ListSponsorLevelRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSponsorLevel not implemented")
}
func (UnimplementedSponsorLevelServiceServer) mustEmbedUnimplementedSponsorLevelServiceServer() {}

// UnsafeSponsorLevelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SponsorLevelServiceServer will
// result in compilation errors.
type UnsafeSponsorLevelServiceServer interface {
	mustEmbedUnimplementedSponsorLevelServiceServer()
}

func RegisterSponsorLevelServiceServer(s grpc.ServiceRegistrar, srv SponsorLevelServiceServer) {
	s.RegisterService(&SponsorLevelService_ServiceDesc, srv)
}

func _SponsorLevelService_CreateSponsorLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSponsorLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SponsorLevelServiceServer).CreateSponsorLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_admin.SponsorLevelService/CreateSponsorLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SponsorLevelServiceServer).CreateSponsorLevel(ctx, req.(*CreateSponsorLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SponsorLevelService_UpdateSponsorLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSponsorLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SponsorLevelServiceServer).UpdateSponsorLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_admin.SponsorLevelService/UpdateSponsorLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SponsorLevelServiceServer).UpdateSponsorLevel(ctx, req.(*UpdateSponsorLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SponsorLevelService_DeleteSponsorLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSponsorLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SponsorLevelServiceServer).DeleteSponsorLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_admin.SponsorLevelService/DeleteSponsorLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SponsorLevelServiceServer).DeleteSponsorLevel(ctx, req.(*DeleteSponsorLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SponsorLevelService_GetSponsorLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSponsorLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SponsorLevelServiceServer).GetSponsorLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_admin.SponsorLevelService/GetSponsorLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SponsorLevelServiceServer).GetSponsorLevel(ctx, req.(*GetSponsorLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SponsorLevelService_ListSponsorLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSponsorLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SponsorLevelServiceServer).ListSponsorLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_admin.SponsorLevelService/ListSponsorLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SponsorLevelServiceServer).ListSponsorLevel(ctx, req.(*ListSponsorLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SponsorLevelService_ServiceDesc is the grpc.ServiceDesc for SponsorLevelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SponsorLevelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.web_admin.SponsorLevelService",
	HandlerType: (*SponsorLevelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSponsorLevel",
			Handler:    _SponsorLevelService_CreateSponsorLevel_Handler,
		},
		{
			MethodName: "UpdateSponsorLevel",
			Handler:    _SponsorLevelService_UpdateSponsorLevel_Handler,
		},
		{
			MethodName: "DeleteSponsorLevel",
			Handler:    _SponsorLevelService_DeleteSponsorLevel_Handler,
		},
		{
			MethodName: "GetSponsorLevel",
			Handler:    _SponsorLevelService_GetSponsorLevel_Handler,
		},
		{
			MethodName: "ListSponsorLevel",
			Handler:    _SponsorLevelService_ListSponsorLevel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event/web_admin/sponsor_level.proto",
}
