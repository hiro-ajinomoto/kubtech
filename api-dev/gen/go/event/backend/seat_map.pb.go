// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: event/backend/seat_map.proto

package backend

import (
	base "gitlab.bcasia.io/thuynga/apps/api/gen/go/base"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LockSource int32

const (
	LockSource_LOCK_SOURCE_INVALID LockSource = 0
	LockSource_LOCK_SOURCE_PST     LockSource = 1
	LockSource_LOCK_SOURCE_MOBILE  LockSource = 2
)

// Enum value maps for LockSource.
var (
	LockSource_name = map[int32]string{
		0: "LOCK_SOURCE_INVALID",
		1: "LOCK_SOURCE_PST",
		2: "LOCK_SOURCE_MOBILE",
	}
	LockSource_value = map[string]int32{
		"LOCK_SOURCE_INVALID": 0,
		"LOCK_SOURCE_PST":     1,
		"LOCK_SOURCE_MOBILE":  2,
	}
)

func (x LockSource) Enum() *LockSource {
	p := new(LockSource)
	*p = x
	return p
}

func (x LockSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LockSource) Descriptor() protoreflect.EnumDescriptor {
	return file_event_backend_seat_map_proto_enumTypes[0].Descriptor()
}

func (LockSource) Type() protoreflect.EnumType {
	return &file_event_backend_seat_map_proto_enumTypes[0]
}

func (x LockSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LockSource.Descriptor instead.
func (LockSource) EnumDescriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{0}
}

type SeatStatus int32

const (
	SeatStatus_SEAT_STATUS_NONE      SeatStatus = 0
	SeatStatus_SEAT_STATUS_AVAILABLE SeatStatus = 1
	SeatStatus_SEAT_STATUS_BOOKING   SeatStatus = 2
	SeatStatus_SEAT_STATUS_LOCKED    SeatStatus = 3
	SeatStatus_SEAT_STATUS_SOLD      SeatStatus = 4
	SeatStatus_SEAT_STATUS_DISABLE   SeatStatus = 99
)

// Enum value maps for SeatStatus.
var (
	SeatStatus_name = map[int32]string{
		0:  "SEAT_STATUS_NONE",
		1:  "SEAT_STATUS_AVAILABLE",
		2:  "SEAT_STATUS_BOOKING",
		3:  "SEAT_STATUS_LOCKED",
		4:  "SEAT_STATUS_SOLD",
		99: "SEAT_STATUS_DISABLE",
	}
	SeatStatus_value = map[string]int32{
		"SEAT_STATUS_NONE":      0,
		"SEAT_STATUS_AVAILABLE": 1,
		"SEAT_STATUS_BOOKING":   2,
		"SEAT_STATUS_LOCKED":    3,
		"SEAT_STATUS_SOLD":      4,
		"SEAT_STATUS_DISABLE":   99,
	}
)

func (x SeatStatus) Enum() *SeatStatus {
	p := new(SeatStatus)
	*p = x
	return p
}

func (x SeatStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SeatStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_event_backend_seat_map_proto_enumTypes[1].Descriptor()
}

func (SeatStatus) Type() protoreflect.EnumType {
	return &file_event_backend_seat_map_proto_enumTypes[1]
}

func (x SeatStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SeatStatus.Descriptor instead.
func (SeatStatus) EnumDescriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{1}
}

type SeatMapInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description     string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	MapPicture      string `protobuf:"bytes,4,opt,name=map_picture,json=mapPicture,proto3" json:"map_picture,omitempty"`
	MaxSeatPerOrder int64  `protobuf:"varint,5,opt,name=max_seat_per_order,json=maxSeatPerOrder,proto3" json:"max_seat_per_order,omitempty"`
	Currency        string `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *SeatMapInfo) Reset() {
	*x = SeatMapInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeatMapInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeatMapInfo) ProtoMessage() {}

func (x *SeatMapInfo) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeatMapInfo.ProtoReflect.Descriptor instead.
func (*SeatMapInfo) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{0}
}

func (x *SeatMapInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SeatMapInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SeatMapInfo) GetMapPicture() string {
	if x != nil {
		return x.MapPicture
	}
	return ""
}

func (x *SeatMapInfo) GetMaxSeatPerOrder() int64 {
	if x != nil {
		return x.MaxSeatPerOrder
	}
	return 0
}

func (x *SeatMapInfo) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type SeatMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description     string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	MapPicture      string  `protobuf:"bytes,4,opt,name=map_picture,json=mapPicture,proto3" json:"map_picture,omitempty"`
	MaxSeatPerOrder int64   `protobuf:"varint,5,opt,name=max_seat_per_order,json=maxSeatPerOrder,proto3" json:"max_seat_per_order,omitempty"`
	Currency        string  `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	CreatedAt       int64   `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy       string  `protobuf:"bytes,8,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedAt       int64   `protobuf:"varint,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UpdatedBy       string  `protobuf:"bytes,10,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	CountBlock      int64   `protobuf:"varint,11,opt,name=count_block,json=countBlock,proto3" json:"count_block,omitempty"`
	CountSeat       int64   `protobuf:"varint,12,opt,name=count_seat,json=countSeat,proto3" json:"count_seat,omitempty"`
	MinPrice        float64 `protobuf:"fixed64,13,opt,name=min_price,json=minPrice,proto3" json:"min_price,omitempty"`
	MaxPrice        float64 `protobuf:"fixed64,14,opt,name=max_price,json=maxPrice,proto3" json:"max_price,omitempty"`
	EventId         string  `protobuf:"bytes,15,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	ScheduleId      string  `protobuf:"bytes,16,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *SeatMap) Reset() {
	*x = SeatMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeatMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeatMap) ProtoMessage() {}

func (x *SeatMap) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeatMap.ProtoReflect.Descriptor instead.
func (*SeatMap) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{1}
}

func (x *SeatMap) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SeatMap) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SeatMap) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SeatMap) GetMapPicture() string {
	if x != nil {
		return x.MapPicture
	}
	return ""
}

func (x *SeatMap) GetMaxSeatPerOrder() int64 {
	if x != nil {
		return x.MaxSeatPerOrder
	}
	return 0
}

func (x *SeatMap) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *SeatMap) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SeatMap) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *SeatMap) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *SeatMap) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *SeatMap) GetCountBlock() int64 {
	if x != nil {
		return x.CountBlock
	}
	return 0
}

func (x *SeatMap) GetCountSeat() int64 {
	if x != nil {
		return x.CountSeat
	}
	return 0
}

func (x *SeatMap) GetMinPrice() float64 {
	if x != nil {
		return x.MinPrice
	}
	return 0
}

func (x *SeatMap) GetMaxPrice() float64 {
	if x != nil {
		return x.MaxPrice
	}
	return 0
}

func (x *SeatMap) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *SeatMap) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

type SeatBlockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Color         string    `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	Row           *SeatLine `protobuf:"bytes,3,opt,name=row,proto3" json:"row,omitempty"`
	Col           *SeatLine `protobuf:"bytes,4,opt,name=col,proto3" json:"col,omitempty"`
	Width         float64   `protobuf:"fixed64,5,opt,name=width,proto3" json:"width,omitempty"`
	Height        float64   `protobuf:"fixed64,6,opt,name=height,proto3" json:"height,omitempty"`
	TotalSeat     int64     `protobuf:"varint,7,opt,name=total_seat,json=totalSeat,proto3" json:"total_seat,omitempty"`
	Price         float64   `protobuf:"fixed64,8,opt,name=price,proto3" json:"price,omitempty"`
	Position      *Position `protobuf:"bytes,9,opt,name=position,proto3" json:"position,omitempty"`
	SeatMapId     string    `protobuf:"bytes,10,opt,name=seat_map_id,json=seatMapId,proto3" json:"seat_map_id,omitempty"`
	CanSelectSeat bool      `protobuf:"varint,11,opt,name=can_select_seat,json=canSelectSeat,proto3" json:"can_select_seat,omitempty"`
	Seats         []*Seat   `protobuf:"bytes,12,rep,name=seats,proto3" json:"seats,omitempty"`
}

func (x *SeatBlockInfo) Reset() {
	*x = SeatBlockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeatBlockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeatBlockInfo) ProtoMessage() {}

func (x *SeatBlockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeatBlockInfo.ProtoReflect.Descriptor instead.
func (*SeatBlockInfo) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{2}
}

func (x *SeatBlockInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SeatBlockInfo) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *SeatBlockInfo) GetRow() *SeatLine {
	if x != nil {
		return x.Row
	}
	return nil
}

func (x *SeatBlockInfo) GetCol() *SeatLine {
	if x != nil {
		return x.Col
	}
	return nil
}

func (x *SeatBlockInfo) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *SeatBlockInfo) GetHeight() float64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *SeatBlockInfo) GetTotalSeat() int64 {
	if x != nil {
		return x.TotalSeat
	}
	return 0
}

func (x *SeatBlockInfo) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SeatBlockInfo) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *SeatBlockInfo) GetSeatMapId() string {
	if x != nil {
		return x.SeatMapId
	}
	return ""
}

func (x *SeatBlockInfo) GetCanSelectSeat() bool {
	if x != nil {
		return x.CanSelectSeat
	}
	return false
}

func (x *SeatBlockInfo) GetSeats() []*Seat {
	if x != nil {
		return x.Seats
	}
	return nil
}

type SeatBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Color         string    `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	Row           *SeatLine `protobuf:"bytes,4,opt,name=row,proto3" json:"row,omitempty"`
	Col           *SeatLine `protobuf:"bytes,5,opt,name=col,proto3" json:"col,omitempty"`
	Width         float64   `protobuf:"fixed64,6,opt,name=width,proto3" json:"width,omitempty"`
	Height        float64   `protobuf:"fixed64,7,opt,name=height,proto3" json:"height,omitempty"`
	TotalSeat     int64     `protobuf:"varint,8,opt,name=total_seat,json=totalSeat,proto3" json:"total_seat,omitempty"`
	Price         float64   `protobuf:"fixed64,9,opt,name=price,proto3" json:"price,omitempty"`
	Position      *Position `protobuf:"bytes,10,opt,name=position,proto3" json:"position,omitempty"`
	Seats         []*Seat   `protobuf:"bytes,11,rep,name=seats,proto3" json:"seats,omitempty"`
	SeatMapId     string    `protobuf:"bytes,12,opt,name=seat_map_id,json=seatMapId,proto3" json:"seat_map_id,omitempty"`
	CanSelectSeat bool      `protobuf:"varint,13,opt,name=can_select_seat,json=canSelectSeat,proto3" json:"can_select_seat,omitempty"`
	CreatedAt     int64     `protobuf:"varint,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy     string    `protobuf:"bytes,15,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedAt     int64     `protobuf:"varint,16,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UpdatedBy     string    `protobuf:"bytes,17,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
}

func (x *SeatBlock) Reset() {
	*x = SeatBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeatBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeatBlock) ProtoMessage() {}

func (x *SeatBlock) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeatBlock.ProtoReflect.Descriptor instead.
func (*SeatBlock) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{3}
}

func (x *SeatBlock) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SeatBlock) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SeatBlock) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *SeatBlock) GetRow() *SeatLine {
	if x != nil {
		return x.Row
	}
	return nil
}

func (x *SeatBlock) GetCol() *SeatLine {
	if x != nil {
		return x.Col
	}
	return nil
}

func (x *SeatBlock) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *SeatBlock) GetHeight() float64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *SeatBlock) GetTotalSeat() int64 {
	if x != nil {
		return x.TotalSeat
	}
	return 0
}

func (x *SeatBlock) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SeatBlock) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *SeatBlock) GetSeats() []*Seat {
	if x != nil {
		return x.Seats
	}
	return nil
}

func (x *SeatBlock) GetSeatMapId() string {
	if x != nil {
		return x.SeatMapId
	}
	return ""
}

func (x *SeatBlock) GetCanSelectSeat() bool {
	if x != nil {
		return x.CanSelectSeat
	}
	return false
}

func (x *SeatBlock) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SeatBlock) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *SeatBlock) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *SeatBlock) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type SeatLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quantity       int64  `protobuf:"varint,1,opt,name=quantity,proto3" json:"quantity,omitempty"`
	BeginCharacter string `protobuf:"bytes,2,opt,name=begin_character,json=beginCharacter,proto3" json:"begin_character,omitempty"`
}

func (x *SeatLine) Reset() {
	*x = SeatLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeatLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeatLine) ProtoMessage() {}

func (x *SeatLine) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeatLine.ProtoReflect.Descriptor instead.
func (*SeatLine) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{4}
}

func (x *SeatLine) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *SeatLine) GetBeginCharacter() string {
	if x != nil {
		return x.BeginCharacter
	}
	return ""
}

type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Code string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Icon string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{5}
}

func (x *Currency) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Currency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Currency) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Currency) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type Seat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Position *Position  `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	Status   SeatStatus `protobuf:"varint,4,opt,name=status,proto3,enum=event.backend.SeatStatus" json:"status,omitempty"`
}

func (x *Seat) Reset() {
	*x = Seat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Seat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Seat) ProtoMessage() {}

func (x *Seat) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Seat.ProtoReflect.Descriptor instead.
func (*Seat) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{6}
}

func (x *Seat) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Seat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Seat) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Seat) GetStatus() SeatStatus {
	if x != nil {
		return x.Status
	}
	return SeatStatus_SEAT_STATUS_NONE
}

type RetrieveSeatMapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RetrieveSeatMapReq) Reset() {
	*x = RetrieveSeatMapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveSeatMapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveSeatMapReq) ProtoMessage() {}

func (x *RetrieveSeatMapReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveSeatMapReq.ProtoReflect.Descriptor instead.
func (*RetrieveSeatMapReq) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{7}
}

func (x *RetrieveSeatMapReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RetrieveSeatBlockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatMapId   string `protobuf:"bytes,1,opt,name=seat_map_id,json=seatMapId,proto3" json:"seat_map_id,omitempty"`
	SeatBlockId string `protobuf:"bytes,2,opt,name=seat_block_id,json=seatBlockId,proto3" json:"seat_block_id,omitempty"`
}

func (x *RetrieveSeatBlockReq) Reset() {
	*x = RetrieveSeatBlockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveSeatBlockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveSeatBlockReq) ProtoMessage() {}

func (x *RetrieveSeatBlockReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveSeatBlockReq.ProtoReflect.Descriptor instead.
func (*RetrieveSeatBlockReq) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{8}
}

func (x *RetrieveSeatBlockReq) GetSeatMapId() string {
	if x != nil {
		return x.SeatMapId
	}
	return ""
}

func (x *RetrieveSeatBlockReq) GetSeatBlockId() string {
	if x != nil {
		return x.SeatBlockId
	}
	return ""
}

type ListSeatMapByIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ListSeatMapByIdsReq) Reset() {
	*x = ListSeatMapByIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSeatMapByIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSeatMapByIdsReq) ProtoMessage() {}

func (x *ListSeatMapByIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSeatMapByIdsReq.ProtoReflect.Descriptor instead.
func (*ListSeatMapByIdsReq) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{9}
}

func (x *ListSeatMapByIdsReq) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type InternalListSeatMapDetailByIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids          []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	SeatBlockIds []string `protobuf:"bytes,2,rep,name=seat_block_ids,json=seatBlockIds,proto3" json:"seat_block_ids,omitempty"`
	SeatIds      []string `protobuf:"bytes,3,rep,name=seat_ids,json=seatIds,proto3" json:"seat_ids,omitempty"`
}

func (x *InternalListSeatMapDetailByIdsReq) Reset() {
	*x = InternalListSeatMapDetailByIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalListSeatMapDetailByIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalListSeatMapDetailByIdsReq) ProtoMessage() {}

func (x *InternalListSeatMapDetailByIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalListSeatMapDetailByIdsReq.ProtoReflect.Descriptor instead.
func (*InternalListSeatMapDetailByIdsReq) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{10}
}

func (x *InternalListSeatMapDetailByIdsReq) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *InternalListSeatMapDetailByIdsReq) GetSeatBlockIds() []string {
	if x != nil {
		return x.SeatBlockIds
	}
	return nil
}

func (x *InternalListSeatMapDetailByIdsReq) GetSeatIds() []string {
	if x != nil {
		return x.SeatIds
	}
	return nil
}

type AssociateScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnershipId string   `protobuf:"bytes,1,opt,name=partnership_id,json=partnershipId,proto3" json:"partnership_id,omitempty"`
	UserId        string   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventId       string   `protobuf:"bytes,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	ScheduleId    string   `protobuf:"bytes,4,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	SeatMapIds    []string `protobuf:"bytes,5,rep,name=seat_map_ids,json=seatMapIds,proto3" json:"seat_map_ids,omitempty"`
}

func (x *AssociateScheduleReq) Reset() {
	*x = AssociateScheduleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssociateScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociateScheduleReq) ProtoMessage() {}

func (x *AssociateScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociateScheduleReq.ProtoReflect.Descriptor instead.
func (*AssociateScheduleReq) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{11}
}

func (x *AssociateScheduleReq) GetPartnershipId() string {
	if x != nil {
		return x.PartnershipId
	}
	return ""
}

func (x *AssociateScheduleReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AssociateScheduleReq) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *AssociateScheduleReq) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *AssociateScheduleReq) GetSeatMapIds() []string {
	if x != nil {
		return x.SeatMapIds
	}
	return nil
}

type AcquireLockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorSource LockSource        `protobuf:"varint,1,opt,name=actor_source,json=actorSource,proto3,enum=event.backend.LockSource" json:"actor_source,omitempty"`
	ActorId     string            `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	ActorName   string            `protobuf:"bytes,3,opt,name=actor_name,json=actorName,proto3" json:"actor_name,omitempty"`
	Duration    uint32            `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"` // unit: minute
	SeatIds     []string          `protobuf:"bytes,5,rep,name=seat_ids,json=seatIds,proto3" json:"seat_ids,omitempty"`
	Blocks      map[string]uint32 `protobuf:"bytes,6,rep,name=blocks,proto3" json:"blocks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Note        string            `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *AcquireLockReq) Reset() {
	*x = AcquireLockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquireLockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireLockReq) ProtoMessage() {}

func (x *AcquireLockReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireLockReq.ProtoReflect.Descriptor instead.
func (*AcquireLockReq) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{12}
}

func (x *AcquireLockReq) GetActorSource() LockSource {
	if x != nil {
		return x.ActorSource
	}
	return LockSource_LOCK_SOURCE_INVALID
}

func (x *AcquireLockReq) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *AcquireLockReq) GetActorName() string {
	if x != nil {
		return x.ActorName
	}
	return ""
}

func (x *AcquireLockReq) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *AcquireLockReq) GetSeatIds() []string {
	if x != nil {
		return x.SeatIds
	}
	return nil
}

func (x *AcquireLockReq) GetBlocks() map[string]uint32 {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *AcquireLockReq) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type ReleaseLockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorSource LockSource        `protobuf:"varint,1,opt,name=actor_source,json=actorSource,proto3,enum=event.backend.LockSource" json:"actor_source,omitempty"`
	ActorId     string            `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	ActorName   string            `protobuf:"bytes,3,opt,name=actor_name,json=actorName,proto3" json:"actor_name,omitempty"`
	SeatIds     []string          `protobuf:"bytes,4,rep,name=seat_ids,json=seatIds,proto3" json:"seat_ids,omitempty"`
	Blocks      map[string]uint32 `protobuf:"bytes,5,rep,name=blocks,proto3" json:"blocks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // map<blockID, quantity>
	Note        string            `protobuf:"bytes,6,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *ReleaseLockReq) Reset() {
	*x = ReleaseLockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseLockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseLockReq) ProtoMessage() {}

func (x *ReleaseLockReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseLockReq.ProtoReflect.Descriptor instead.
func (*ReleaseLockReq) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{13}
}

func (x *ReleaseLockReq) GetActorSource() LockSource {
	if x != nil {
		return x.ActorSource
	}
	return LockSource_LOCK_SOURCE_INVALID
}

func (x *ReleaseLockReq) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *ReleaseLockReq) GetActorName() string {
	if x != nil {
		return x.ActorName
	}
	return ""
}

func (x *ReleaseLockReq) GetSeatIds() []string {
	if x != nil {
		return x.SeatIds
	}
	return nil
}

func (x *ReleaseLockReq) GetBlocks() map[string]uint32 {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *ReleaseLockReq) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type AcquireSellReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorSource LockSource        `protobuf:"varint,1,opt,name=actor_source,json=actorSource,proto3,enum=event.backend.LockSource" json:"actor_source,omitempty"`
	ActorId     string            `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	ActorName   string            `protobuf:"bytes,3,opt,name=actor_name,json=actorName,proto3" json:"actor_name,omitempty"`
	SeatIds     []string          `protobuf:"bytes,4,rep,name=seat_ids,json=seatIds,proto3" json:"seat_ids,omitempty"`
	Blocks      map[string]uint32 `protobuf:"bytes,5,rep,name=blocks,proto3" json:"blocks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Note        string            `protobuf:"bytes,6,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *AcquireSellReq) Reset() {
	*x = AcquireSellReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquireSellReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireSellReq) ProtoMessage() {}

func (x *AcquireSellReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireSellReq.ProtoReflect.Descriptor instead.
func (*AcquireSellReq) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{14}
}

func (x *AcquireSellReq) GetActorSource() LockSource {
	if x != nil {
		return x.ActorSource
	}
	return LockSource_LOCK_SOURCE_INVALID
}

func (x *AcquireSellReq) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *AcquireSellReq) GetActorName() string {
	if x != nil {
		return x.ActorName
	}
	return ""
}

func (x *AcquireSellReq) GetSeatIds() []string {
	if x != nil {
		return x.SeatIds
	}
	return nil
}

func (x *AcquireSellReq) GetBlocks() map[string]uint32 {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *AcquireSellReq) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type CreateSeatMapRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateSeatMapRes) Reset() {
	*x = CreateSeatMapRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSeatMapRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSeatMapRes) ProtoMessage() {}

func (x *CreateSeatMapRes) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSeatMapRes.ProtoReflect.Descriptor instead.
func (*CreateSeatMapRes) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{15}
}

func (x *CreateSeatMapRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SeatBlockRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *SeatBlock `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *SeatBlockRes) Reset() {
	*x = SeatBlockRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeatBlockRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeatBlockRes) ProtoMessage() {}

func (x *SeatBlockRes) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeatBlockRes.ProtoReflect.Descriptor instead.
func (*SeatBlockRes) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{16}
}

func (x *SeatBlockRes) GetInfo() *SeatBlock {
	if x != nil {
		return x.Info
	}
	return nil
}

type RetrieveSeatMapRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info        *SeatMap        `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	PriceBlocks []*SeatBlockRes `protobuf:"bytes,3,rep,name=price_blocks,json=priceBlocks,proto3" json:"price_blocks,omitempty"`
}

func (x *RetrieveSeatMapRes) Reset() {
	*x = RetrieveSeatMapRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveSeatMapRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveSeatMapRes) ProtoMessage() {}

func (x *RetrieveSeatMapRes) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveSeatMapRes.ProtoReflect.Descriptor instead.
func (*RetrieveSeatMapRes) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{17}
}

func (x *RetrieveSeatMapRes) GetInfo() *SeatMap {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *RetrieveSeatMapRes) GetPriceBlocks() []*SeatBlockRes {
	if x != nil {
		return x.PriceBlocks
	}
	return nil
}

type RetrieveSeatBlockRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *SeatBlock `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *RetrieveSeatBlockRes) Reset() {
	*x = RetrieveSeatBlockRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveSeatBlockRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveSeatBlockRes) ProtoMessage() {}

func (x *RetrieveSeatBlockRes) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveSeatBlockRes.ProtoReflect.Descriptor instead.
func (*RetrieveSeatBlockRes) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{18}
}

func (x *RetrieveSeatBlockRes) GetInfo() *SeatBlock {
	if x != nil {
		return x.Info
	}
	return nil
}

type ListSeatMapByIdsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*SeatMap `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListSeatMapByIdsRes) Reset() {
	*x = ListSeatMapByIdsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSeatMapByIdsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSeatMapByIdsRes) ProtoMessage() {}

func (x *ListSeatMapByIdsRes) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSeatMapByIdsRes.ProtoReflect.Descriptor instead.
func (*ListSeatMapByIdsRes) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{19}
}

func (x *ListSeatMapByIdsRes) GetItems() []*SeatMap {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListSeatMapDetailByEventIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ListSeatMapDetailByEventIdReq) Reset() {
	*x = ListSeatMapDetailByEventIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSeatMapDetailByEventIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSeatMapDetailByEventIdReq) ProtoMessage() {}

func (x *ListSeatMapDetailByEventIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSeatMapDetailByEventIdReq.ProtoReflect.Descriptor instead.
func (*ListSeatMapDetailByEventIdReq) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{20}
}

func (x *ListSeatMapDetailByEventIdReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SeatMapDetailByEventIDRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info   *SeatMap     `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Blocks []*SeatBlock `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *SeatMapDetailByEventIDRes) Reset() {
	*x = SeatMapDetailByEventIDRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeatMapDetailByEventIDRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeatMapDetailByEventIDRes) ProtoMessage() {}

func (x *SeatMapDetailByEventIDRes) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeatMapDetailByEventIDRes.ProtoReflect.Descriptor instead.
func (*SeatMapDetailByEventIDRes) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{21}
}

func (x *SeatMapDetailByEventIDRes) GetInfo() *SeatMap {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *SeatMapDetailByEventIDRes) GetBlocks() []*SeatBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type ListSeatMapDetailByEventIdRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*SeatMapDetailByEventIDRes `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListSeatMapDetailByEventIdRes) Reset() {
	*x = ListSeatMapDetailByEventIdRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSeatMapDetailByEventIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSeatMapDetailByEventIdRes) ProtoMessage() {}

func (x *ListSeatMapDetailByEventIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSeatMapDetailByEventIdRes.ProtoReflect.Descriptor instead.
func (*ListSeatMapDetailByEventIdRes) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{22}
}

func (x *ListSeatMapDetailByEventIdRes) GetItems() []*SeatMapDetailByEventIDRes {
	if x != nil {
		return x.Items
	}
	return nil
}

type InternalListSeatMapDetailByIdsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatMaps   []*SeatMap   `protobuf:"bytes,1,rep,name=seat_maps,json=seatMaps,proto3" json:"seat_maps,omitempty"`
	SeatBlocks []*SeatBlock `protobuf:"bytes,2,rep,name=seat_blocks,json=seatBlocks,proto3" json:"seat_blocks,omitempty"`
	Seats      []*Seat      `protobuf:"bytes,3,rep,name=seats,proto3" json:"seats,omitempty"`
}

func (x *InternalListSeatMapDetailByIdsRes) Reset() {
	*x = InternalListSeatMapDetailByIdsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalListSeatMapDetailByIdsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalListSeatMapDetailByIdsRes) ProtoMessage() {}

func (x *InternalListSeatMapDetailByIdsRes) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalListSeatMapDetailByIdsRes.ProtoReflect.Descriptor instead.
func (*InternalListSeatMapDetailByIdsRes) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{23}
}

func (x *InternalListSeatMapDetailByIdsRes) GetSeatMaps() []*SeatMap {
	if x != nil {
		return x.SeatMaps
	}
	return nil
}

func (x *InternalListSeatMapDetailByIdsRes) GetSeatBlocks() []*SeatBlock {
	if x != nil {
		return x.SeatBlocks
	}
	return nil
}

func (x *InternalListSeatMapDetailByIdsRes) GetSeats() []*Seat {
	if x != nil {
		return x.Seats
	}
	return nil
}

type InternalListSeatBlockBySeatMapIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *InternalListSeatBlockBySeatMapIdsReq) Reset() {
	*x = InternalListSeatBlockBySeatMapIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalListSeatBlockBySeatMapIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalListSeatBlockBySeatMapIdsReq) ProtoMessage() {}

func (x *InternalListSeatBlockBySeatMapIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalListSeatBlockBySeatMapIdsReq.ProtoReflect.Descriptor instead.
func (*InternalListSeatBlockBySeatMapIdsReq) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{24}
}

func (x *InternalListSeatBlockBySeatMapIdsReq) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type InternalListSeatBlockBySeatMapIdsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*SeatBlock `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *InternalListSeatBlockBySeatMapIdsRes) Reset() {
	*x = InternalListSeatBlockBySeatMapIdsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalListSeatBlockBySeatMapIdsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalListSeatBlockBySeatMapIdsRes) ProtoMessage() {}

func (x *InternalListSeatBlockBySeatMapIdsRes) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalListSeatBlockBySeatMapIdsRes.ProtoReflect.Descriptor instead.
func (*InternalListSeatBlockBySeatMapIdsRes) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{25}
}

func (x *InternalListSeatBlockBySeatMapIdsRes) GetItems() []*SeatBlock {
	if x != nil {
		return x.Items
	}
	return nil
}

type InternalListSeatBySeatBlockIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *InternalListSeatBySeatBlockIdsReq) Reset() {
	*x = InternalListSeatBySeatBlockIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalListSeatBySeatBlockIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalListSeatBySeatBlockIdsReq) ProtoMessage() {}

func (x *InternalListSeatBySeatBlockIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalListSeatBySeatBlockIdsReq.ProtoReflect.Descriptor instead.
func (*InternalListSeatBySeatBlockIdsReq) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{26}
}

func (x *InternalListSeatBySeatBlockIdsReq) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type InternalListSeatBySeatBlockIdsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Seat `protobuf:"bytes,12,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *InternalListSeatBySeatBlockIdsRes) Reset() {
	*x = InternalListSeatBySeatBlockIdsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalListSeatBySeatBlockIdsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalListSeatBySeatBlockIdsRes) ProtoMessage() {}

func (x *InternalListSeatBySeatBlockIdsRes) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalListSeatBySeatBlockIdsRes.ProtoReflect.Descriptor instead.
func (*InternalListSeatBySeatBlockIdsRes) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{27}
}

func (x *InternalListSeatBySeatBlockIdsRes) GetItems() []*Seat {
	if x != nil {
		return x.Items
	}
	return nil
}

type AcquireRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccess   bool              `protobuf:"varint,1,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	ErrorSeats  map[string]string `protobuf:"bytes,2,rep,name=error_seats,json=errorSeats,proto3" json:"error_seats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ErrorBlocks map[string]string `protobuf:"bytes,3,rep,name=error_blocks,json=errorBlocks,proto3" json:"error_blocks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AcquireRes) Reset() {
	*x = AcquireRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_backend_seat_map_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquireRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireRes) ProtoMessage() {}

func (x *AcquireRes) ProtoReflect() protoreflect.Message {
	mi := &file_event_backend_seat_map_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireRes.ProtoReflect.Descriptor instead.
func (*AcquireRes) Descriptor() ([]byte, []int) {
	return file_event_backend_seat_map_proto_rawDescGZIP(), []int{28}
}

func (x *AcquireRes) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *AcquireRes) GetErrorSeats() map[string]string {
	if x != nil {
		return x.ErrorSeats
	}
	return nil
}

func (x *AcquireRes) GetErrorBlocks() map[string]string {
	if x != nil {
		return x.ErrorBlocks
	}
	return nil
}

var File_event_backend_seat_map_proto protoreflect.FileDescriptor

var file_event_backend_seat_map_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f,
	0x73, 0x65, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x1a, 0x18, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x61,
	0x74, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x2b, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x61, 0x78,
	0x53, 0x65, 0x61, 0x74, 0x50, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xeb, 0x03, 0x0a, 0x07, 0x53, 0x65, 0x61,
	0x74, 0x4d, 0x61, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x70, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x61, 0x70, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x61, 0x74,
	0x50, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x9a, 0x03, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x29, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x53, 0x65, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x29, 0x0a,
	0x03, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x4c,
	0x69, 0x6e, 0x65, 0x52, 0x03, 0x63, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x65, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73,
	0x65, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x61, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x65, 0x61, 0x74,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x52, 0x05, 0x73, 0x65,
	0x61, 0x74, 0x73, 0x22, 0xa2, 0x04, 0x0a, 0x09, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x03, 0x72,
	0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x4c, 0x69, 0x6e,
	0x65, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x29, 0x0a, 0x03, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x03, 0x63, 0x6f,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x65, 0x61,
	0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x52, 0x05, 0x73,
	0x65, 0x61, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x4d,
	0x61, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63,
	0x61, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x4f, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x74,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x27, 0x0a, 0x0f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x22, 0x56, 0x0a, 0x08, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x22, 0x92, 0x01, 0x0a, 0x04, 0x53, 0x65, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x24, 0x0a, 0x12, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5a, 0x0a, 0x14,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x4d,
	0x61, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x22, 0x76, 0x0a, 0x21, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79,
	0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x74,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x14, 0x41, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x73,
	0x22, 0xd1, 0x02, 0x0a, 0x0e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x61, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xb5, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4c, 0x6f,
	0x63, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb5, 0x02, 0x0a,
	0x0e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x3c, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x0b, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x61, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x22, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x61, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3c, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x12, 0x2a, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x74,
	0x4d, 0x61, 0x70, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x52, 0x0b, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x44, 0x0a, 0x14, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x43, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x79,
	0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x2f, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x74,
	0x4d, 0x61, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x79, 0x0a, 0x19, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x30,
	0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x53,
	0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x22, 0x5f, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x12, 0x3e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x65, 0x73, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0xbe, 0x01, 0x0a, 0x21, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42,
	0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x74, 0x5f,
	0x6d, 0x61, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x4d,
	0x61, 0x70, 0x52, 0x08, 0x73, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x39, 0x0a, 0x0b,
	0x73, 0x65, 0x61, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0a, 0x73, 0x65, 0x61,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x65, 0x61, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x52, 0x05, 0x73, 0x65, 0x61,
	0x74, 0x73, 0x22, 0x38, 0x0a, 0x24, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x53, 0x65, 0x61,
	0x74, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x56, 0x0a, 0x24,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x49, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x35, 0x0a, 0x21, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x74, 0x42, 0x79, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x4e, 0x0a, 0x21, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x74, 0x42,
	0x79, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x53, 0x65, 0x61, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xc5, 0x02, 0x0a, 0x0a,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x41,
	0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x65, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x53, 0x65, 0x61, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x63, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x61,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x2a, 0x52, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x53, 0x54, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d,
	0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x9d, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x45, 0x41, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x56, 0x41, 0x49,
	0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x41, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x41, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x4f, 0x4c, 0x44, 0x10, 0x04, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x63, 0x32, 0xef, 0x08, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x74,
	0x4d, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x11, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x23, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x65, 0x61,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x18, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70,
	0x42, 0x79, 0x49, 0x64, 0x73, 0x12, 0x22, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61,
	0x70, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x61, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x12, 0x57, 0x0a,
	0x0f, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70,
	0x12, 0x21, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70,
	0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x65, 0x61, 0x74,
	0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x1e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x12, 0x45, 0x0a,
	0x11, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x23, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x80, 0x01, 0x0a, 0x22, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x42, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x61, 0x74, 0x4d, 0x61, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x21, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x42, 0x79, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x73, 0x12, 0x33, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x42, 0x79, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x33, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61,
	0x70, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x1e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x74, 0x42, 0x79, 0x53, 0x65,
	0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x30, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x74, 0x42, 0x79, 0x53, 0x65, 0x61,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x74, 0x42, 0x79, 0x53,
	0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x12, 0x47,
	0x0a, 0x0b, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x1d, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x63,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x63, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x41, 0x63, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x1d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x65,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x12, 0x47, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x12,
	0x1d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x19,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x41,
	0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x2e, 0x62, 0x63, 0x61, 0x73, 0x69, 0x61, 0x2e, 0x69, 0x6f, 0x2f, 0x74, 0x68,
	0x75, 0x79, 0x6e, 0x67, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x3b, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_event_backend_seat_map_proto_rawDescOnce sync.Once
	file_event_backend_seat_map_proto_rawDescData = file_event_backend_seat_map_proto_rawDesc
)

func file_event_backend_seat_map_proto_rawDescGZIP() []byte {
	file_event_backend_seat_map_proto_rawDescOnce.Do(func() {
		file_event_backend_seat_map_proto_rawDescData = protoimpl.X.CompressGZIP(file_event_backend_seat_map_proto_rawDescData)
	})
	return file_event_backend_seat_map_proto_rawDescData
}

var file_event_backend_seat_map_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_event_backend_seat_map_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_event_backend_seat_map_proto_goTypes = []interface{}{
	(LockSource)(0),                              // 0: event.backend.LockSource
	(SeatStatus)(0),                              // 1: event.backend.SeatStatus
	(*SeatMapInfo)(nil),                          // 2: event.backend.SeatMapInfo
	(*SeatMap)(nil),                              // 3: event.backend.SeatMap
	(*SeatBlockInfo)(nil),                        // 4: event.backend.SeatBlockInfo
	(*SeatBlock)(nil),                            // 5: event.backend.SeatBlock
	(*SeatLine)(nil),                             // 6: event.backend.SeatLine
	(*Currency)(nil),                             // 7: event.backend.Currency
	(*Seat)(nil),                                 // 8: event.backend.Seat
	(*RetrieveSeatMapReq)(nil),                   // 9: event.backend.RetrieveSeatMapReq
	(*RetrieveSeatBlockReq)(nil),                 // 10: event.backend.RetrieveSeatBlockReq
	(*ListSeatMapByIdsReq)(nil),                  // 11: event.backend.ListSeatMapByIdsReq
	(*InternalListSeatMapDetailByIdsReq)(nil),    // 12: event.backend.InternalListSeatMapDetailByIdsReq
	(*AssociateScheduleReq)(nil),                 // 13: event.backend.AssociateScheduleReq
	(*AcquireLockReq)(nil),                       // 14: event.backend.AcquireLockReq
	(*ReleaseLockReq)(nil),                       // 15: event.backend.ReleaseLockReq
	(*AcquireSellReq)(nil),                       // 16: event.backend.AcquireSellReq
	(*CreateSeatMapRes)(nil),                     // 17: event.backend.CreateSeatMapRes
	(*SeatBlockRes)(nil),                         // 18: event.backend.SeatBlockRes
	(*RetrieveSeatMapRes)(nil),                   // 19: event.backend.RetrieveSeatMapRes
	(*RetrieveSeatBlockRes)(nil),                 // 20: event.backend.RetrieveSeatBlockRes
	(*ListSeatMapByIdsRes)(nil),                  // 21: event.backend.ListSeatMapByIdsRes
	(*ListSeatMapDetailByEventIdReq)(nil),        // 22: event.backend.ListSeatMapDetailByEventIdReq
	(*SeatMapDetailByEventIDRes)(nil),            // 23: event.backend.SeatMapDetailByEventIDRes
	(*ListSeatMapDetailByEventIdRes)(nil),        // 24: event.backend.ListSeatMapDetailByEventIdRes
	(*InternalListSeatMapDetailByIdsRes)(nil),    // 25: event.backend.InternalListSeatMapDetailByIdsRes
	(*InternalListSeatBlockBySeatMapIdsReq)(nil), // 26: event.backend.InternalListSeatBlockBySeatMapIdsReq
	(*InternalListSeatBlockBySeatMapIdsRes)(nil), // 27: event.backend.InternalListSeatBlockBySeatMapIdsRes
	(*InternalListSeatBySeatBlockIdsReq)(nil),    // 28: event.backend.InternalListSeatBySeatBlockIdsReq
	(*InternalListSeatBySeatBlockIdsRes)(nil),    // 29: event.backend.InternalListSeatBySeatBlockIdsRes
	(*AcquireRes)(nil),                           // 30: event.backend.AcquireRes
	nil,                                          // 31: event.backend.AcquireLockReq.BlocksEntry
	nil,                                          // 32: event.backend.ReleaseLockReq.BlocksEntry
	nil,                                          // 33: event.backend.AcquireSellReq.BlocksEntry
	nil,                                          // 34: event.backend.AcquireRes.ErrorSeatsEntry
	nil,                                          // 35: event.backend.AcquireRes.ErrorBlocksEntry
	(*Position)(nil),                             // 36: event.backend.Position
	(*base.Empty)(nil),                           // 37: base.Empty
}
var file_event_backend_seat_map_proto_depIdxs = []int32{
	6,  // 0: event.backend.SeatBlockInfo.row:type_name -> event.backend.SeatLine
	6,  // 1: event.backend.SeatBlockInfo.col:type_name -> event.backend.SeatLine
	36, // 2: event.backend.SeatBlockInfo.position:type_name -> event.backend.Position
	8,  // 3: event.backend.SeatBlockInfo.seats:type_name -> event.backend.Seat
	6,  // 4: event.backend.SeatBlock.row:type_name -> event.backend.SeatLine
	6,  // 5: event.backend.SeatBlock.col:type_name -> event.backend.SeatLine
	36, // 6: event.backend.SeatBlock.position:type_name -> event.backend.Position
	8,  // 7: event.backend.SeatBlock.seats:type_name -> event.backend.Seat
	36, // 8: event.backend.Seat.position:type_name -> event.backend.Position
	1,  // 9: event.backend.Seat.status:type_name -> event.backend.SeatStatus
	0,  // 10: event.backend.AcquireLockReq.actor_source:type_name -> event.backend.LockSource
	31, // 11: event.backend.AcquireLockReq.blocks:type_name -> event.backend.AcquireLockReq.BlocksEntry
	0,  // 12: event.backend.ReleaseLockReq.actor_source:type_name -> event.backend.LockSource
	32, // 13: event.backend.ReleaseLockReq.blocks:type_name -> event.backend.ReleaseLockReq.BlocksEntry
	0,  // 14: event.backend.AcquireSellReq.actor_source:type_name -> event.backend.LockSource
	33, // 15: event.backend.AcquireSellReq.blocks:type_name -> event.backend.AcquireSellReq.BlocksEntry
	5,  // 16: event.backend.SeatBlockRes.info:type_name -> event.backend.SeatBlock
	3,  // 17: event.backend.RetrieveSeatMapRes.info:type_name -> event.backend.SeatMap
	18, // 18: event.backend.RetrieveSeatMapRes.price_blocks:type_name -> event.backend.SeatBlockRes
	5,  // 19: event.backend.RetrieveSeatBlockRes.info:type_name -> event.backend.SeatBlock
	3,  // 20: event.backend.ListSeatMapByIdsRes.items:type_name -> event.backend.SeatMap
	3,  // 21: event.backend.SeatMapDetailByEventIDRes.info:type_name -> event.backend.SeatMap
	5,  // 22: event.backend.SeatMapDetailByEventIDRes.blocks:type_name -> event.backend.SeatBlock
	23, // 23: event.backend.ListSeatMapDetailByEventIdRes.items:type_name -> event.backend.SeatMapDetailByEventIDRes
	3,  // 24: event.backend.InternalListSeatMapDetailByIdsRes.seat_maps:type_name -> event.backend.SeatMap
	5,  // 25: event.backend.InternalListSeatMapDetailByIdsRes.seat_blocks:type_name -> event.backend.SeatBlock
	8,  // 26: event.backend.InternalListSeatMapDetailByIdsRes.seats:type_name -> event.backend.Seat
	5,  // 27: event.backend.InternalListSeatBlockBySeatMapIdsRes.items:type_name -> event.backend.SeatBlock
	8,  // 28: event.backend.InternalListSeatBySeatBlockIdsRes.items:type_name -> event.backend.Seat
	34, // 29: event.backend.AcquireRes.error_seats:type_name -> event.backend.AcquireRes.ErrorSeatsEntry
	35, // 30: event.backend.AcquireRes.error_blocks:type_name -> event.backend.AcquireRes.ErrorBlocksEntry
	10, // 31: event.backend.SeatMapService.RetrieveSeatBlock:input_type -> event.backend.RetrieveSeatBlockReq
	11, // 32: event.backend.SeatMapService.InternalListSeatMapByIds:input_type -> event.backend.ListSeatMapByIdsReq
	9,  // 33: event.backend.SeatMapService.RetrieveSeatMap:input_type -> event.backend.RetrieveSeatMapReq
	12, // 34: event.backend.SeatMapService.InternalListSeatMapDetailByIds:input_type -> event.backend.InternalListSeatMapDetailByIdsReq
	13, // 35: event.backend.SeatMapService.AssociateSchedule:input_type -> event.backend.AssociateScheduleReq
	22, // 36: event.backend.SeatMapService.InternalListSeatMapDetailByEventId:input_type -> event.backend.ListSeatMapDetailByEventIdReq
	26, // 37: event.backend.SeatMapService.InternalListSeatBlockBySeatMapIds:input_type -> event.backend.InternalListSeatBlockBySeatMapIdsReq
	28, // 38: event.backend.SeatMapService.InternalListSeatBySeatBlockIds:input_type -> event.backend.InternalListSeatBySeatBlockIdsReq
	14, // 39: event.backend.SeatMapService.AcquireLock:input_type -> event.backend.AcquireLockReq
	16, // 40: event.backend.SeatMapService.AcquireSell:input_type -> event.backend.AcquireSellReq
	15, // 41: event.backend.SeatMapService.ReleaseLock:input_type -> event.backend.ReleaseLockReq
	20, // 42: event.backend.SeatMapService.RetrieveSeatBlock:output_type -> event.backend.RetrieveSeatBlockRes
	21, // 43: event.backend.SeatMapService.InternalListSeatMapByIds:output_type -> event.backend.ListSeatMapByIdsRes
	19, // 44: event.backend.SeatMapService.RetrieveSeatMap:output_type -> event.backend.RetrieveSeatMapRes
	25, // 45: event.backend.SeatMapService.InternalListSeatMapDetailByIds:output_type -> event.backend.InternalListSeatMapDetailByIdsRes
	37, // 46: event.backend.SeatMapService.AssociateSchedule:output_type -> base.Empty
	24, // 47: event.backend.SeatMapService.InternalListSeatMapDetailByEventId:output_type -> event.backend.ListSeatMapDetailByEventIdRes
	27, // 48: event.backend.SeatMapService.InternalListSeatBlockBySeatMapIds:output_type -> event.backend.InternalListSeatBlockBySeatMapIdsRes
	29, // 49: event.backend.SeatMapService.InternalListSeatBySeatBlockIds:output_type -> event.backend.InternalListSeatBySeatBlockIdsRes
	30, // 50: event.backend.SeatMapService.AcquireLock:output_type -> event.backend.AcquireRes
	30, // 51: event.backend.SeatMapService.AcquireSell:output_type -> event.backend.AcquireRes
	30, // 52: event.backend.SeatMapService.ReleaseLock:output_type -> event.backend.AcquireRes
	42, // [42:53] is the sub-list for method output_type
	31, // [31:42] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_event_backend_seat_map_proto_init() }
func file_event_backend_seat_map_proto_init() {
	if File_event_backend_seat_map_proto != nil {
		return
	}
	file_event_backend_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_event_backend_seat_map_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeatMapInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeatMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeatBlockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeatBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeatLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Seat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveSeatMapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveSeatBlockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSeatMapByIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalListSeatMapDetailByIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssociateScheduleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquireLockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseLockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquireSellReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSeatMapRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeatBlockRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveSeatMapRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveSeatBlockRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSeatMapByIdsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSeatMapDetailByEventIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeatMapDetailByEventIDRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSeatMapDetailByEventIdRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalListSeatMapDetailByIdsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalListSeatBlockBySeatMapIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalListSeatBlockBySeatMapIdsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalListSeatBySeatBlockIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalListSeatBySeatBlockIdsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_backend_seat_map_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquireRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_event_backend_seat_map_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_event_backend_seat_map_proto_goTypes,
		DependencyIndexes: file_event_backend_seat_map_proto_depIdxs,
		EnumInfos:         file_event_backend_seat_map_proto_enumTypes,
		MessageInfos:      file_event_backend_seat_map_proto_msgTypes,
	}.Build()
	File_event_backend_seat_map_proto = out.File
	file_event_backend_seat_map_proto_rawDesc = nil
	file_event_backend_seat_map_proto_goTypes = nil
	file_event_backend_seat_map_proto_depIdxs = nil
}
