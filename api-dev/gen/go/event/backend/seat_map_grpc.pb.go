// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: event/backend/seat_map.proto

package backend

import (
	context "context"
	base "gitlab.bcasia.io/thuynga/apps/api/gen/go/base"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SeatMapServiceClient is the client API for SeatMapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeatMapServiceClient interface {
	RetrieveSeatBlock(ctx context.Context, in *RetrieveSeatBlockReq, opts ...grpc.CallOption) (*RetrieveSeatBlockRes, error)
	InternalListSeatMapByIds(ctx context.Context, in *ListSeatMapByIdsReq, opts ...grpc.CallOption) (*ListSeatMapByIdsRes, error)
	RetrieveSeatMap(ctx context.Context, in *RetrieveSeatMapReq, opts ...grpc.CallOption) (*RetrieveSeatMapRes, error)
	InternalListSeatMapDetailByIds(ctx context.Context, in *InternalListSeatMapDetailByIdsReq, opts ...grpc.CallOption) (*InternalListSeatMapDetailByIdsRes, error)
	AssociateSchedule(ctx context.Context, in *AssociateScheduleReq, opts ...grpc.CallOption) (*base.Empty, error)
	InternalListSeatMapDetailByEventId(ctx context.Context, in *ListSeatMapDetailByEventIdReq, opts ...grpc.CallOption) (*ListSeatMapDetailByEventIdRes, error)
	InternalListSeatBlockBySeatMapIds(ctx context.Context, in *InternalListSeatBlockBySeatMapIdsReq, opts ...grpc.CallOption) (*InternalListSeatBlockBySeatMapIdsRes, error)
	InternalListSeatBySeatBlockIds(ctx context.Context, in *InternalListSeatBySeatBlockIdsReq, opts ...grpc.CallOption) (*InternalListSeatBySeatBlockIdsRes, error)
	AcquireLock(ctx context.Context, in *AcquireLockReq, opts ...grpc.CallOption) (*AcquireRes, error)
	AcquireSell(ctx context.Context, in *AcquireSellReq, opts ...grpc.CallOption) (*AcquireRes, error)
	ReleaseLock(ctx context.Context, in *ReleaseLockReq, opts ...grpc.CallOption) (*AcquireRes, error)
}

type seatMapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeatMapServiceClient(cc grpc.ClientConnInterface) SeatMapServiceClient {
	return &seatMapServiceClient{cc}
}

func (c *seatMapServiceClient) RetrieveSeatBlock(ctx context.Context, in *RetrieveSeatBlockReq, opts ...grpc.CallOption) (*RetrieveSeatBlockRes, error) {
	out := new(RetrieveSeatBlockRes)
	err := c.cc.Invoke(ctx, "/event.backend.SeatMapService/RetrieveSeatBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatMapServiceClient) InternalListSeatMapByIds(ctx context.Context, in *ListSeatMapByIdsReq, opts ...grpc.CallOption) (*ListSeatMapByIdsRes, error) {
	out := new(ListSeatMapByIdsRes)
	err := c.cc.Invoke(ctx, "/event.backend.SeatMapService/InternalListSeatMapByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatMapServiceClient) RetrieveSeatMap(ctx context.Context, in *RetrieveSeatMapReq, opts ...grpc.CallOption) (*RetrieveSeatMapRes, error) {
	out := new(RetrieveSeatMapRes)
	err := c.cc.Invoke(ctx, "/event.backend.SeatMapService/RetrieveSeatMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatMapServiceClient) InternalListSeatMapDetailByIds(ctx context.Context, in *InternalListSeatMapDetailByIdsReq, opts ...grpc.CallOption) (*InternalListSeatMapDetailByIdsRes, error) {
	out := new(InternalListSeatMapDetailByIdsRes)
	err := c.cc.Invoke(ctx, "/event.backend.SeatMapService/InternalListSeatMapDetailByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatMapServiceClient) AssociateSchedule(ctx context.Context, in *AssociateScheduleReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/event.backend.SeatMapService/AssociateSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatMapServiceClient) InternalListSeatMapDetailByEventId(ctx context.Context, in *ListSeatMapDetailByEventIdReq, opts ...grpc.CallOption) (*ListSeatMapDetailByEventIdRes, error) {
	out := new(ListSeatMapDetailByEventIdRes)
	err := c.cc.Invoke(ctx, "/event.backend.SeatMapService/InternalListSeatMapDetailByEventId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatMapServiceClient) InternalListSeatBlockBySeatMapIds(ctx context.Context, in *InternalListSeatBlockBySeatMapIdsReq, opts ...grpc.CallOption) (*InternalListSeatBlockBySeatMapIdsRes, error) {
	out := new(InternalListSeatBlockBySeatMapIdsRes)
	err := c.cc.Invoke(ctx, "/event.backend.SeatMapService/InternalListSeatBlockBySeatMapIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatMapServiceClient) InternalListSeatBySeatBlockIds(ctx context.Context, in *InternalListSeatBySeatBlockIdsReq, opts ...grpc.CallOption) (*InternalListSeatBySeatBlockIdsRes, error) {
	out := new(InternalListSeatBySeatBlockIdsRes)
	err := c.cc.Invoke(ctx, "/event.backend.SeatMapService/InternalListSeatBySeatBlockIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatMapServiceClient) AcquireLock(ctx context.Context, in *AcquireLockReq, opts ...grpc.CallOption) (*AcquireRes, error) {
	out := new(AcquireRes)
	err := c.cc.Invoke(ctx, "/event.backend.SeatMapService/AcquireLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatMapServiceClient) AcquireSell(ctx context.Context, in *AcquireSellReq, opts ...grpc.CallOption) (*AcquireRes, error) {
	out := new(AcquireRes)
	err := c.cc.Invoke(ctx, "/event.backend.SeatMapService/AcquireSell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatMapServiceClient) ReleaseLock(ctx context.Context, in *ReleaseLockReq, opts ...grpc.CallOption) (*AcquireRes, error) {
	out := new(AcquireRes)
	err := c.cc.Invoke(ctx, "/event.backend.SeatMapService/ReleaseLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeatMapServiceServer is the server API for SeatMapService service.
// All implementations must embed UnimplementedSeatMapServiceServer
// for forward compatibility
type SeatMapServiceServer interface {
	RetrieveSeatBlock(context.Context, *RetrieveSeatBlockReq) (*RetrieveSeatBlockRes, error)
	InternalListSeatMapByIds(context.Context, *ListSeatMapByIdsReq) (*ListSeatMapByIdsRes, error)
	RetrieveSeatMap(context.Context, *RetrieveSeatMapReq) (*RetrieveSeatMapRes, error)
	InternalListSeatMapDetailByIds(context.Context, *InternalListSeatMapDetailByIdsReq) (*InternalListSeatMapDetailByIdsRes, error)
	AssociateSchedule(context.Context, *AssociateScheduleReq) (*base.Empty, error)
	InternalListSeatMapDetailByEventId(context.Context, *ListSeatMapDetailByEventIdReq) (*ListSeatMapDetailByEventIdRes, error)
	InternalListSeatBlockBySeatMapIds(context.Context, *InternalListSeatBlockBySeatMapIdsReq) (*InternalListSeatBlockBySeatMapIdsRes, error)
	InternalListSeatBySeatBlockIds(context.Context, *InternalListSeatBySeatBlockIdsReq) (*InternalListSeatBySeatBlockIdsRes, error)
	AcquireLock(context.Context, *AcquireLockReq) (*AcquireRes, error)
	AcquireSell(context.Context, *AcquireSellReq) (*AcquireRes, error)
	ReleaseLock(context.Context, *ReleaseLockReq) (*AcquireRes, error)
	mustEmbedUnimplementedSeatMapServiceServer()
}

// UnimplementedSeatMapServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSeatMapServiceServer struct {
}

func (UnimplementedSeatMapServiceServer) RetrieveSeatBlock(context.Context, *RetrieveSeatBlockReq) (*RetrieveSeatBlockRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSeatBlock not implemented")
}
func (UnimplementedSeatMapServiceServer) InternalListSeatMapByIds(context.Context, *ListSeatMapByIdsReq) (*ListSeatMapByIdsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalListSeatMapByIds not implemented")
}
func (UnimplementedSeatMapServiceServer) RetrieveSeatMap(context.Context, *RetrieveSeatMapReq) (*RetrieveSeatMapRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSeatMap not implemented")
}
func (UnimplementedSeatMapServiceServer) InternalListSeatMapDetailByIds(context.Context, *InternalListSeatMapDetailByIdsReq) (*InternalListSeatMapDetailByIdsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalListSeatMapDetailByIds not implemented")
}
func (UnimplementedSeatMapServiceServer) AssociateSchedule(context.Context, *AssociateScheduleReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssociateSchedule not implemented")
}
func (UnimplementedSeatMapServiceServer) InternalListSeatMapDetailByEventId(context.Context, *ListSeatMapDetailByEventIdReq) (*ListSeatMapDetailByEventIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalListSeatMapDetailByEventId not implemented")
}
func (UnimplementedSeatMapServiceServer) InternalListSeatBlockBySeatMapIds(context.Context, *InternalListSeatBlockBySeatMapIdsReq) (*InternalListSeatBlockBySeatMapIdsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalListSeatBlockBySeatMapIds not implemented")
}
func (UnimplementedSeatMapServiceServer) InternalListSeatBySeatBlockIds(context.Context, *InternalListSeatBySeatBlockIdsReq) (*InternalListSeatBySeatBlockIdsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalListSeatBySeatBlockIds not implemented")
}
func (UnimplementedSeatMapServiceServer) AcquireLock(context.Context, *AcquireLockReq) (*AcquireRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcquireLock not implemented")
}
func (UnimplementedSeatMapServiceServer) AcquireSell(context.Context, *AcquireSellReq) (*AcquireRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcquireSell not implemented")
}
func (UnimplementedSeatMapServiceServer) ReleaseLock(context.Context, *ReleaseLockReq) (*AcquireRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseLock not implemented")
}
func (UnimplementedSeatMapServiceServer) mustEmbedUnimplementedSeatMapServiceServer() {}

// UnsafeSeatMapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeatMapServiceServer will
// result in compilation errors.
type UnsafeSeatMapServiceServer interface {
	mustEmbedUnimplementedSeatMapServiceServer()
}

func RegisterSeatMapServiceServer(s grpc.ServiceRegistrar, srv SeatMapServiceServer) {
	s.RegisterService(&SeatMapService_ServiceDesc, srv)
}

func _SeatMapService_RetrieveSeatBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveSeatBlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatMapServiceServer).RetrieveSeatBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.backend.SeatMapService/RetrieveSeatBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatMapServiceServer).RetrieveSeatBlock(ctx, req.(*RetrieveSeatBlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatMapService_InternalListSeatMapByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSeatMapByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatMapServiceServer).InternalListSeatMapByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.backend.SeatMapService/InternalListSeatMapByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatMapServiceServer).InternalListSeatMapByIds(ctx, req.(*ListSeatMapByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatMapService_RetrieveSeatMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveSeatMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatMapServiceServer).RetrieveSeatMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.backend.SeatMapService/RetrieveSeatMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatMapServiceServer).RetrieveSeatMap(ctx, req.(*RetrieveSeatMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatMapService_InternalListSeatMapDetailByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalListSeatMapDetailByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatMapServiceServer).InternalListSeatMapDetailByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.backend.SeatMapService/InternalListSeatMapDetailByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatMapServiceServer).InternalListSeatMapDetailByIds(ctx, req.(*InternalListSeatMapDetailByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatMapService_AssociateSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociateScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatMapServiceServer).AssociateSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.backend.SeatMapService/AssociateSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatMapServiceServer).AssociateSchedule(ctx, req.(*AssociateScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatMapService_InternalListSeatMapDetailByEventId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSeatMapDetailByEventIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatMapServiceServer).InternalListSeatMapDetailByEventId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.backend.SeatMapService/InternalListSeatMapDetailByEventId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatMapServiceServer).InternalListSeatMapDetailByEventId(ctx, req.(*ListSeatMapDetailByEventIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatMapService_InternalListSeatBlockBySeatMapIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalListSeatBlockBySeatMapIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatMapServiceServer).InternalListSeatBlockBySeatMapIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.backend.SeatMapService/InternalListSeatBlockBySeatMapIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatMapServiceServer).InternalListSeatBlockBySeatMapIds(ctx, req.(*InternalListSeatBlockBySeatMapIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatMapService_InternalListSeatBySeatBlockIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalListSeatBySeatBlockIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatMapServiceServer).InternalListSeatBySeatBlockIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.backend.SeatMapService/InternalListSeatBySeatBlockIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatMapServiceServer).InternalListSeatBySeatBlockIds(ctx, req.(*InternalListSeatBySeatBlockIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatMapService_AcquireLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireLockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatMapServiceServer).AcquireLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.backend.SeatMapService/AcquireLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatMapServiceServer).AcquireLock(ctx, req.(*AcquireLockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatMapService_AcquireSell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireSellReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatMapServiceServer).AcquireSell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.backend.SeatMapService/AcquireSell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatMapServiceServer).AcquireSell(ctx, req.(*AcquireSellReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatMapService_ReleaseLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseLockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatMapServiceServer).ReleaseLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.backend.SeatMapService/ReleaseLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatMapServiceServer).ReleaseLock(ctx, req.(*ReleaseLockReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SeatMapService_ServiceDesc is the grpc.ServiceDesc for SeatMapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeatMapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.backend.SeatMapService",
	HandlerType: (*SeatMapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveSeatBlock",
			Handler:    _SeatMapService_RetrieveSeatBlock_Handler,
		},
		{
			MethodName: "InternalListSeatMapByIds",
			Handler:    _SeatMapService_InternalListSeatMapByIds_Handler,
		},
		{
			MethodName: "RetrieveSeatMap",
			Handler:    _SeatMapService_RetrieveSeatMap_Handler,
		},
		{
			MethodName: "InternalListSeatMapDetailByIds",
			Handler:    _SeatMapService_InternalListSeatMapDetailByIds_Handler,
		},
		{
			MethodName: "AssociateSchedule",
			Handler:    _SeatMapService_AssociateSchedule_Handler,
		},
		{
			MethodName: "InternalListSeatMapDetailByEventId",
			Handler:    _SeatMapService_InternalListSeatMapDetailByEventId_Handler,
		},
		{
			MethodName: "InternalListSeatBlockBySeatMapIds",
			Handler:    _SeatMapService_InternalListSeatBlockBySeatMapIds_Handler,
		},
		{
			MethodName: "InternalListSeatBySeatBlockIds",
			Handler:    _SeatMapService_InternalListSeatBySeatBlockIds_Handler,
		},
		{
			MethodName: "AcquireLock",
			Handler:    _SeatMapService_AcquireLock_Handler,
		},
		{
			MethodName: "AcquireSell",
			Handler:    _SeatMapService_AcquireSell_Handler,
		},
		{
			MethodName: "ReleaseLock",
			Handler:    _SeatMapService_ReleaseLock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event/backend/seat_map.proto",
}
