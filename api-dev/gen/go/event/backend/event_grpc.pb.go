// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: event/backend/event.proto

package backend

import (
	context "context"
	base "gitlab.bcasia.io/thuynga/apps/api/gen/go/base"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventServiceClient interface {
	SearchEventsByName(ctx context.Context, in *SearchEventsByNameReq, opts ...grpc.CallOption) (*SearchEventsByNameRes, error)
	RetrieveSimpleEvent(ctx context.Context, in *RetrieveSimpleEventReq, opts ...grpc.CallOption) (*RetrieveSimpleEventRes, error)
	AggregateEvent(ctx context.Context, in *RetrieveSimpleEventReq, opts ...grpc.CallOption) (*base.Empty, error)
	GetProductEventsInfo(ctx context.Context, in *GetProductEventsInfoReq, opts ...grpc.CallOption) (*GetProductEventsInfoRes, error)
	InternalListScheduleByEventID(ctx context.Context, in *ListScheduleByEventIDReq, opts ...grpc.CallOption) (*ListScheduleByEventIDRes, error)
	InternalUpdateEventState(ctx context.Context, in *InternalUpdateEventStateReq, opts ...grpc.CallOption) (*base.Empty, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) SearchEventsByName(ctx context.Context, in *SearchEventsByNameReq, opts ...grpc.CallOption) (*SearchEventsByNameRes, error) {
	out := new(SearchEventsByNameRes)
	err := c.cc.Invoke(ctx, "/event.backend.EventService/SearchEventsByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) RetrieveSimpleEvent(ctx context.Context, in *RetrieveSimpleEventReq, opts ...grpc.CallOption) (*RetrieveSimpleEventRes, error) {
	out := new(RetrieveSimpleEventRes)
	err := c.cc.Invoke(ctx, "/event.backend.EventService/RetrieveSimpleEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) AggregateEvent(ctx context.Context, in *RetrieveSimpleEventReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/event.backend.EventService/AggregateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetProductEventsInfo(ctx context.Context, in *GetProductEventsInfoReq, opts ...grpc.CallOption) (*GetProductEventsInfoRes, error) {
	out := new(GetProductEventsInfoRes)
	err := c.cc.Invoke(ctx, "/event.backend.EventService/GetProductEventsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) InternalListScheduleByEventID(ctx context.Context, in *ListScheduleByEventIDReq, opts ...grpc.CallOption) (*ListScheduleByEventIDRes, error) {
	out := new(ListScheduleByEventIDRes)
	err := c.cc.Invoke(ctx, "/event.backend.EventService/InternalListScheduleByEventID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) InternalUpdateEventState(ctx context.Context, in *InternalUpdateEventStateReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/event.backend.EventService/InternalUpdateEventState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServiceServer is the server API for EventService service.
// All implementations must embed UnimplementedEventServiceServer
// for forward compatibility
type EventServiceServer interface {
	SearchEventsByName(context.Context, *SearchEventsByNameReq) (*SearchEventsByNameRes, error)
	RetrieveSimpleEvent(context.Context, *RetrieveSimpleEventReq) (*RetrieveSimpleEventRes, error)
	AggregateEvent(context.Context, *RetrieveSimpleEventReq) (*base.Empty, error)
	GetProductEventsInfo(context.Context, *GetProductEventsInfoReq) (*GetProductEventsInfoRes, error)
	InternalListScheduleByEventID(context.Context, *ListScheduleByEventIDReq) (*ListScheduleByEventIDRes, error)
	InternalUpdateEventState(context.Context, *InternalUpdateEventStateReq) (*base.Empty, error)
	mustEmbedUnimplementedEventServiceServer()
}

// UnimplementedEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct {
}

func (UnimplementedEventServiceServer) SearchEventsByName(context.Context, *SearchEventsByNameReq) (*SearchEventsByNameRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchEventsByName not implemented")
}
func (UnimplementedEventServiceServer) RetrieveSimpleEvent(context.Context, *RetrieveSimpleEventReq) (*RetrieveSimpleEventRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSimpleEvent not implemented")
}
func (UnimplementedEventServiceServer) AggregateEvent(context.Context, *RetrieveSimpleEventReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateEvent not implemented")
}
func (UnimplementedEventServiceServer) GetProductEventsInfo(context.Context, *GetProductEventsInfoReq) (*GetProductEventsInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductEventsInfo not implemented")
}
func (UnimplementedEventServiceServer) InternalListScheduleByEventID(context.Context, *ListScheduleByEventIDReq) (*ListScheduleByEventIDRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalListScheduleByEventID not implemented")
}
func (UnimplementedEventServiceServer) InternalUpdateEventState(context.Context, *InternalUpdateEventStateReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalUpdateEventState not implemented")
}
func (UnimplementedEventServiceServer) mustEmbedUnimplementedEventServiceServer() {}

// UnsafeEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServiceServer will
// result in compilation errors.
type UnsafeEventServiceServer interface {
	mustEmbedUnimplementedEventServiceServer()
}

func RegisterEventServiceServer(s grpc.ServiceRegistrar, srv EventServiceServer) {
	s.RegisterService(&EventService_ServiceDesc, srv)
}

func _EventService_SearchEventsByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchEventsByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).SearchEventsByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.backend.EventService/SearchEventsByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).SearchEventsByName(ctx, req.(*SearchEventsByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_RetrieveSimpleEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveSimpleEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).RetrieveSimpleEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.backend.EventService/RetrieveSimpleEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).RetrieveSimpleEvent(ctx, req.(*RetrieveSimpleEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_AggregateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveSimpleEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).AggregateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.backend.EventService/AggregateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).AggregateEvent(ctx, req.(*RetrieveSimpleEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetProductEventsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductEventsInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetProductEventsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.backend.EventService/GetProductEventsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetProductEventsInfo(ctx, req.(*GetProductEventsInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_InternalListScheduleByEventID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScheduleByEventIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).InternalListScheduleByEventID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.backend.EventService/InternalListScheduleByEventID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).InternalListScheduleByEventID(ctx, req.(*ListScheduleByEventIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_InternalUpdateEventState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalUpdateEventStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).InternalUpdateEventState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.backend.EventService/InternalUpdateEventState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).InternalUpdateEventState(ctx, req.(*InternalUpdateEventStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EventService_ServiceDesc is the grpc.ServiceDesc for EventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.backend.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchEventsByName",
			Handler:    _EventService_SearchEventsByName_Handler,
		},
		{
			MethodName: "RetrieveSimpleEvent",
			Handler:    _EventService_RetrieveSimpleEvent_Handler,
		},
		{
			MethodName: "AggregateEvent",
			Handler:    _EventService_AggregateEvent_Handler,
		},
		{
			MethodName: "GetProductEventsInfo",
			Handler:    _EventService_GetProductEventsInfo_Handler,
		},
		{
			MethodName: "InternalListScheduleByEventID",
			Handler:    _EventService_InternalListScheduleByEventID_Handler,
		},
		{
			MethodName: "InternalUpdateEventState",
			Handler:    _EventService_InternalUpdateEventState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event/backend/event.proto",
}
