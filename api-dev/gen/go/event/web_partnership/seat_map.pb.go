// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: event/web_partnership/seat_map.proto

package web_partnership

import (
	base "gitlab.bcasia.io/thuynga/apps/api/gen/go/base"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SeatStatus int32

const (
	SeatStatus_SEAT_STATUS_UNUSE     SeatStatus = 0
	SeatStatus_SEAT_STATUS_AVAILABLE SeatStatus = 1
	SeatStatus_SEAT_STATUS_BOOKING   SeatStatus = 2
	SeatStatus_SEAT_STATUS_LOCKED    SeatStatus = 3
	SeatStatus_SEAT_STATUS_SOLD      SeatStatus = 4
	SeatStatus_SEAT_STATUS_DISABLE   SeatStatus = 99
)

// Enum value maps for SeatStatus.
var (
	SeatStatus_name = map[int32]string{
		0:  "SEAT_STATUS_UNUSE",
		1:  "SEAT_STATUS_AVAILABLE",
		2:  "SEAT_STATUS_BOOKING",
		3:  "SEAT_STATUS_LOCKED",
		4:  "SEAT_STATUS_SOLD",
		99: "SEAT_STATUS_DISABLE",
	}
	SeatStatus_value = map[string]int32{
		"SEAT_STATUS_UNUSE":     0,
		"SEAT_STATUS_AVAILABLE": 1,
		"SEAT_STATUS_BOOKING":   2,
		"SEAT_STATUS_LOCKED":    3,
		"SEAT_STATUS_SOLD":      4,
		"SEAT_STATUS_DISABLE":   99,
	}
)

func (x SeatStatus) Enum() *SeatStatus {
	p := new(SeatStatus)
	*p = x
	return p
}

func (x SeatStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SeatStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_event_web_partnership_seat_map_proto_enumTypes[0].Descriptor()
}

func (SeatStatus) Type() protoreflect.EnumType {
	return &file_event_web_partnership_seat_map_proto_enumTypes[0]
}

func (x SeatStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SeatStatus.Descriptor instead.
func (SeatStatus) EnumDescriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{0}
}

type EventAssocStatus int32

const (
	EventAssocStatus_EVENT_ASSOC_UNUSE   EventAssocStatus = 0
	EventAssocStatus_EVENT_ASSOC_NOT_YET EventAssocStatus = 1
	EventAssocStatus_EVENT_ASSOC_LOCKED  EventAssocStatus = 2
)

// Enum value maps for EventAssocStatus.
var (
	EventAssocStatus_name = map[int32]string{
		0: "EVENT_ASSOC_UNUSE",
		1: "EVENT_ASSOC_NOT_YET",
		2: "EVENT_ASSOC_LOCKED",
	}
	EventAssocStatus_value = map[string]int32{
		"EVENT_ASSOC_UNUSE":   0,
		"EVENT_ASSOC_NOT_YET": 1,
		"EVENT_ASSOC_LOCKED":  2,
	}
)

func (x EventAssocStatus) Enum() *EventAssocStatus {
	p := new(EventAssocStatus)
	*p = x
	return p
}

func (x EventAssocStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventAssocStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_event_web_partnership_seat_map_proto_enumTypes[1].Descriptor()
}

func (EventAssocStatus) Type() protoreflect.EnumType {
	return &file_event_web_partnership_seat_map_proto_enumTypes[1]
}

func (x EventAssocStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventAssocStatus.Descriptor instead.
func (EventAssocStatus) EnumDescriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{1}
}

type SeatMapInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description     string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	MapPicture      string `protobuf:"bytes,4,opt,name=map_picture,json=mapPicture,proto3" json:"map_picture,omitempty"`
	MaxSeatPerOrder int64  `protobuf:"varint,5,opt,name=max_seat_per_order,json=maxSeatPerOrder,proto3" json:"max_seat_per_order,omitempty"`
	Currency        string `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *SeatMapInfo) Reset() {
	*x = SeatMapInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeatMapInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeatMapInfo) ProtoMessage() {}

func (x *SeatMapInfo) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeatMapInfo.ProtoReflect.Descriptor instead.
func (*SeatMapInfo) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{0}
}

func (x *SeatMapInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SeatMapInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SeatMapInfo) GetMapPicture() string {
	if x != nil {
		return x.MapPicture
	}
	return ""
}

func (x *SeatMapInfo) GetMaxSeatPerOrder() int64 {
	if x != nil {
		return x.MaxSeatPerOrder
	}
	return 0
}

func (x *SeatMapInfo) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type SeatMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description     string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	MapPicture      string   `protobuf:"bytes,4,opt,name=map_picture,json=mapPicture,proto3" json:"map_picture,omitempty"`
	MaxSeatPerOrder int64    `protobuf:"varint,5,opt,name=max_seat_per_order,json=maxSeatPerOrder,proto3" json:"max_seat_per_order,omitempty"`
	Currency        string   `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	CreatedAt       int64    `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy       string   `protobuf:"bytes,8,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedAt       int64    `protobuf:"varint,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UpdatedBy       string   `protobuf:"bytes,10,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	CountBlock      int64    `protobuf:"varint,11,opt,name=count_block,json=countBlock,proto3" json:"count_block,omitempty"`
	CountSeat       int64    `protobuf:"varint,12,opt,name=count_seat,json=countSeat,proto3" json:"count_seat,omitempty"`
	MinPrice        float64  `protobuf:"fixed64,13,opt,name=min_price,json=minPrice,proto3" json:"min_price,omitempty"`
	MaxPrice        float64  `protobuf:"fixed64,14,opt,name=max_price,json=maxPrice,proto3" json:"max_price,omitempty"`
	DecorationItems []*Sharp `protobuf:"bytes,15,rep,name=decoration_items,json=decorationItems,proto3" json:"decoration_items,omitempty"`
	EventId         string   `protobuf:"bytes,16,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	ScheduleId      string   `protobuf:"bytes,17,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *SeatMap) Reset() {
	*x = SeatMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeatMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeatMap) ProtoMessage() {}

func (x *SeatMap) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeatMap.ProtoReflect.Descriptor instead.
func (*SeatMap) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{1}
}

func (x *SeatMap) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SeatMap) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SeatMap) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SeatMap) GetMapPicture() string {
	if x != nil {
		return x.MapPicture
	}
	return ""
}

func (x *SeatMap) GetMaxSeatPerOrder() int64 {
	if x != nil {
		return x.MaxSeatPerOrder
	}
	return 0
}

func (x *SeatMap) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *SeatMap) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SeatMap) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *SeatMap) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *SeatMap) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *SeatMap) GetCountBlock() int64 {
	if x != nil {
		return x.CountBlock
	}
	return 0
}

func (x *SeatMap) GetCountSeat() int64 {
	if x != nil {
		return x.CountSeat
	}
	return 0
}

func (x *SeatMap) GetMinPrice() float64 {
	if x != nil {
		return x.MinPrice
	}
	return 0
}

func (x *SeatMap) GetMaxPrice() float64 {
	if x != nil {
		return x.MaxPrice
	}
	return 0
}

func (x *SeatMap) GetDecorationItems() []*Sharp {
	if x != nil {
		return x.DecorationItems
	}
	return nil
}

func (x *SeatMap) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *SeatMap) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

type SeatBlockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Color         string    `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	Row           *SeatLine `protobuf:"bytes,3,opt,name=row,proto3" json:"row,omitempty"`
	Col           *SeatLine `protobuf:"bytes,4,opt,name=col,proto3" json:"col,omitempty"`
	Width         float64   `protobuf:"fixed64,5,opt,name=width,proto3" json:"width,omitempty"`
	Height        float64   `protobuf:"fixed64,6,opt,name=height,proto3" json:"height,omitempty"`
	TotalSeat     int64     `protobuf:"varint,7,opt,name=total_seat,json=totalSeat,proto3" json:"total_seat,omitempty"`
	Price         float64   `protobuf:"fixed64,8,opt,name=price,proto3" json:"price,omitempty"`
	Position      *Position `protobuf:"bytes,9,opt,name=position,proto3" json:"position,omitempty"`
	SeatMapId     string    `protobuf:"bytes,10,opt,name=seat_map_id,json=seatMapId,proto3" json:"seat_map_id,omitempty"`
	CanSelectSeat bool      `protobuf:"varint,11,opt,name=can_select_seat,json=canSelectSeat,proto3" json:"can_select_seat,omitempty"`
	Seats         []*Seat   `protobuf:"bytes,12,rep,name=seats,proto3" json:"seats,omitempty"`
	Rotation      float64   `protobuf:"fixed64,13,opt,name=rotation,proto3" json:"rotation,omitempty"`
}

func (x *SeatBlockInfo) Reset() {
	*x = SeatBlockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeatBlockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeatBlockInfo) ProtoMessage() {}

func (x *SeatBlockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeatBlockInfo.ProtoReflect.Descriptor instead.
func (*SeatBlockInfo) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{2}
}

func (x *SeatBlockInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SeatBlockInfo) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *SeatBlockInfo) GetRow() *SeatLine {
	if x != nil {
		return x.Row
	}
	return nil
}

func (x *SeatBlockInfo) GetCol() *SeatLine {
	if x != nil {
		return x.Col
	}
	return nil
}

func (x *SeatBlockInfo) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *SeatBlockInfo) GetHeight() float64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *SeatBlockInfo) GetTotalSeat() int64 {
	if x != nil {
		return x.TotalSeat
	}
	return 0
}

func (x *SeatBlockInfo) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SeatBlockInfo) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *SeatBlockInfo) GetSeatMapId() string {
	if x != nil {
		return x.SeatMapId
	}
	return ""
}

func (x *SeatBlockInfo) GetCanSelectSeat() bool {
	if x != nil {
		return x.CanSelectSeat
	}
	return false
}

func (x *SeatBlockInfo) GetSeats() []*Seat {
	if x != nil {
		return x.Seats
	}
	return nil
}

func (x *SeatBlockInfo) GetRotation() float64 {
	if x != nil {
		return x.Rotation
	}
	return 0
}

type SeatBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Color         string      `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	Row           *SeatLine   `protobuf:"bytes,4,opt,name=row,proto3" json:"row,omitempty"`
	Col           *SeatLine   `protobuf:"bytes,5,opt,name=col,proto3" json:"col,omitempty"`
	Width         float64     `protobuf:"fixed64,6,opt,name=width,proto3" json:"width,omitempty"`
	Height        float64     `protobuf:"fixed64,7,opt,name=height,proto3" json:"height,omitempty"`
	TotalSeat     int64       `protobuf:"varint,8,opt,name=total_seat,json=totalSeat,proto3" json:"total_seat,omitempty"`
	Price         float64     `protobuf:"fixed64,9,opt,name=price,proto3" json:"price,omitempty"`
	Position      *Position   `protobuf:"bytes,10,opt,name=position,proto3" json:"position,omitempty"`
	Seats         []*Seat     `protobuf:"bytes,11,rep,name=seats,proto3" json:"seats,omitempty"`
	SeatMapId     string      `protobuf:"bytes,12,opt,name=seat_map_id,json=seatMapId,proto3" json:"seat_map_id,omitempty"`
	CanSelectSeat bool        `protobuf:"varint,13,opt,name=can_select_seat,json=canSelectSeat,proto3" json:"can_select_seat,omitempty"`
	CreatedAt     int64       `protobuf:"varint,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy     string      `protobuf:"bytes,15,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedAt     int64       `protobuf:"varint,16,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UpdatedBy     string      `protobuf:"bytes,17,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Rotation      float64     `protobuf:"fixed64,18,opt,name=rotation,proto3" json:"rotation,omitempty"`
	Stats         *BlockStats `protobuf:"bytes,19,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *SeatBlock) Reset() {
	*x = SeatBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeatBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeatBlock) ProtoMessage() {}

func (x *SeatBlock) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeatBlock.ProtoReflect.Descriptor instead.
func (*SeatBlock) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{3}
}

func (x *SeatBlock) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SeatBlock) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SeatBlock) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *SeatBlock) GetRow() *SeatLine {
	if x != nil {
		return x.Row
	}
	return nil
}

func (x *SeatBlock) GetCol() *SeatLine {
	if x != nil {
		return x.Col
	}
	return nil
}

func (x *SeatBlock) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *SeatBlock) GetHeight() float64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *SeatBlock) GetTotalSeat() int64 {
	if x != nil {
		return x.TotalSeat
	}
	return 0
}

func (x *SeatBlock) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SeatBlock) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *SeatBlock) GetSeats() []*Seat {
	if x != nil {
		return x.Seats
	}
	return nil
}

func (x *SeatBlock) GetSeatMapId() string {
	if x != nil {
		return x.SeatMapId
	}
	return ""
}

func (x *SeatBlock) GetCanSelectSeat() bool {
	if x != nil {
		return x.CanSelectSeat
	}
	return false
}

func (x *SeatBlock) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SeatBlock) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *SeatBlock) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *SeatBlock) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *SeatBlock) GetRotation() float64 {
	if x != nil {
		return x.Rotation
	}
	return 0
}

func (x *SeatBlock) GetStats() *BlockStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type Sharp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Color    string      `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	Position *Position   `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	Type     string      `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Points   []*Position `protobuf:"bytes,6,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *Sharp) Reset() {
	*x = Sharp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sharp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sharp) ProtoMessage() {}

func (x *Sharp) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sharp.ProtoReflect.Descriptor instead.
func (*Sharp) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{4}
}

func (x *Sharp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Sharp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sharp) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Sharp) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Sharp) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Sharp) GetPoints() []*Position {
	if x != nil {
		return x.Points
	}
	return nil
}

type BlockStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available int64 `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	Booking   int64 `protobuf:"varint,2,opt,name=booking,proto3" json:"booking,omitempty"`
	Locked    int64 `protobuf:"varint,3,opt,name=locked,proto3" json:"locked,omitempty"`
	Sold      int64 `protobuf:"varint,4,opt,name=sold,proto3" json:"sold,omitempty"`
}

func (x *BlockStats) Reset() {
	*x = BlockStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStats) ProtoMessage() {}

func (x *BlockStats) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStats.ProtoReflect.Descriptor instead.
func (*BlockStats) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{5}
}

func (x *BlockStats) GetAvailable() int64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *BlockStats) GetBooking() int64 {
	if x != nil {
		return x.Booking
	}
	return 0
}

func (x *BlockStats) GetLocked() int64 {
	if x != nil {
		return x.Locked
	}
	return 0
}

func (x *BlockStats) GetSold() int64 {
	if x != nil {
		return x.Sold
	}
	return 0
}

type SeatLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quantity       int64  `protobuf:"varint,1,opt,name=quantity,proto3" json:"quantity,omitempty"`
	BeginCharacter string `protobuf:"bytes,2,opt,name=begin_character,json=beginCharacter,proto3" json:"begin_character,omitempty"`
}

func (x *SeatLine) Reset() {
	*x = SeatLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeatLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeatLine) ProtoMessage() {}

func (x *SeatLine) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeatLine.ProtoReflect.Descriptor instead.
func (*SeatLine) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{6}
}

func (x *SeatLine) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *SeatLine) GetBeginCharacter() string {
	if x != nil {
		return x.BeginCharacter
	}
	return ""
}

type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Code string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Icon string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{7}
}

func (x *Currency) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Currency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Currency) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Currency) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{8}
}

func (x *Position) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Position) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

type Seat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Position *Position      `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	Status   SeatStatus     `protobuf:"varint,4,opt,name=status,proto3,enum=event.web_partnership.SeatStatus" json:"status,omitempty"`
	OrderX   int64          `protobuf:"varint,5,opt,name=order_x,json=orderX,proto3" json:"order_x,omitempty"`
	OrderY   int64          `protobuf:"varint,6,opt,name=order_y,json=orderY,proto3" json:"order_y,omitempty"`
	Log      *SeatStatusLog `protobuf:"bytes,7,opt,name=log,proto3" json:"log,omitempty"`
}

func (x *Seat) Reset() {
	*x = Seat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Seat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Seat) ProtoMessage() {}

func (x *Seat) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Seat.ProtoReflect.Descriptor instead.
func (*Seat) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{9}
}

func (x *Seat) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Seat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Seat) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Seat) GetStatus() SeatStatus {
	if x != nil {
		return x.Status
	}
	return SeatStatus_SEAT_STATUS_UNUSE
}

func (x *Seat) GetOrderX() int64 {
	if x != nil {
		return x.OrderX
	}
	return 0
}

func (x *Seat) GetOrderY() int64 {
	if x != nil {
		return x.OrderY
	}
	return 0
}

func (x *Seat) GetLog() *SeatStatusLog {
	if x != nil {
		return x.Log
	}
	return nil
}

type SeatStatusLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedAt int64      `protobuf:"varint,1,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UpdatedBy string     `protobuf:"bytes,2,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	OldStatus SeatStatus `protobuf:"varint,3,opt,name=old_status,json=oldStatus,proto3,enum=event.web_partnership.SeatStatus" json:"old_status,omitempty"`
	Status    SeatStatus `protobuf:"varint,4,opt,name=status,proto3,enum=event.web_partnership.SeatStatus" json:"status,omitempty"`
	Note      string     `protobuf:"bytes,5,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *SeatStatusLog) Reset() {
	*x = SeatStatusLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeatStatusLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeatStatusLog) ProtoMessage() {}

func (x *SeatStatusLog) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeatStatusLog.ProtoReflect.Descriptor instead.
func (*SeatStatusLog) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{10}
}

func (x *SeatStatusLog) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *SeatStatusLog) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *SeatStatusLog) GetOldStatus() SeatStatus {
	if x != nil {
		return x.OldStatus
	}
	return SeatStatus_SEAT_STATUS_UNUSE
}

func (x *SeatStatusLog) GetStatus() SeatStatus {
	if x != nil {
		return x.Status
	}
	return SeatStatus_SEAT_STATUS_UNUSE
}

func (x *SeatStatusLog) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type CreateSeatMapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *SeatMapInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *CreateSeatMapReq) Reset() {
	*x = CreateSeatMapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSeatMapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSeatMapReq) ProtoMessage() {}

func (x *CreateSeatMapReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSeatMapReq.ProtoReflect.Descriptor instead.
func (*CreateSeatMapReq) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{11}
}

func (x *CreateSeatMapReq) GetInfo() *SeatMapInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateSeatMapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Info *SeatMapInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *UpdateSeatMapReq) Reset() {
	*x = UpdateSeatMapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSeatMapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSeatMapReq) ProtoMessage() {}

func (x *UpdateSeatMapReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSeatMapReq.ProtoReflect.Descriptor instead.
func (*UpdateSeatMapReq) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateSeatMapReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateSeatMapReq) GetInfo() *SeatMapInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteSeatMapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSeatMapReq) Reset() {
	*x = DeleteSeatMapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSeatMapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSeatMapReq) ProtoMessage() {}

func (x *DeleteSeatMapReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSeatMapReq.ProtoReflect.Descriptor instead.
func (*DeleteSeatMapReq) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteSeatMapReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListSeatMapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchText       string              `protobuf:"bytes,1,opt,name=search_text,json=searchText,proto3" json:"search_text,omitempty"`
	EventAssocStatus EventAssocStatus    `protobuf:"varint,2,opt,name=event_assoc_status,json=eventAssocStatus,proto3,enum=event.web_partnership.EventAssocStatus" json:"event_assoc_status,omitempty"`
	Pagination       *base.PaginationReq `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	OrderBy          []*base.OrderByItem `protobuf:"bytes,4,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListSeatMapReq) Reset() {
	*x = ListSeatMapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSeatMapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSeatMapReq) ProtoMessage() {}

func (x *ListSeatMapReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSeatMapReq.ProtoReflect.Descriptor instead.
func (*ListSeatMapReq) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{14}
}

func (x *ListSeatMapReq) GetSearchText() string {
	if x != nil {
		return x.SearchText
	}
	return ""
}

func (x *ListSeatMapReq) GetEventAssocStatus() EventAssocStatus {
	if x != nil {
		return x.EventAssocStatus
	}
	return EventAssocStatus_EVENT_ASSOC_UNUSE
}

func (x *ListSeatMapReq) GetPagination() *base.PaginationReq {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListSeatMapReq) GetOrderBy() []*base.OrderByItem {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

type RetrieveSeatMapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RetrieveSeatMapReq) Reset() {
	*x = RetrieveSeatMapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveSeatMapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveSeatMapReq) ProtoMessage() {}

func (x *RetrieveSeatMapReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveSeatMapReq.ProtoReflect.Descriptor instead.
func (*RetrieveSeatMapReq) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{15}
}

func (x *RetrieveSeatMapReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateSeatBlockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatMapId string         `protobuf:"bytes,1,opt,name=seat_map_id,json=seatMapId,proto3" json:"seat_map_id,omitempty"`
	SeatBlock *SeatBlockInfo `protobuf:"bytes,2,opt,name=seat_block,json=seatBlock,proto3" json:"seat_block,omitempty"`
}

func (x *CreateSeatBlockReq) Reset() {
	*x = CreateSeatBlockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSeatBlockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSeatBlockReq) ProtoMessage() {}

func (x *CreateSeatBlockReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSeatBlockReq.ProtoReflect.Descriptor instead.
func (*CreateSeatBlockReq) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{16}
}

func (x *CreateSeatBlockReq) GetSeatMapId() string {
	if x != nil {
		return x.SeatMapId
	}
	return ""
}

func (x *CreateSeatBlockReq) GetSeatBlock() *SeatBlockInfo {
	if x != nil {
		return x.SeatBlock
	}
	return nil
}

type ListSeatBlockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatMapId  string `protobuf:"bytes,1,opt,name=seat_map_id,json=seatMapId,proto3" json:"seat_map_id,omitempty"`
	SeatDetail bool   `protobuf:"varint,2,opt,name=seat_detail,json=seatDetail,proto3" json:"seat_detail,omitempty"`
}

func (x *ListSeatBlockReq) Reset() {
	*x = ListSeatBlockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSeatBlockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSeatBlockReq) ProtoMessage() {}

func (x *ListSeatBlockReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSeatBlockReq.ProtoReflect.Descriptor instead.
func (*ListSeatBlockReq) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{17}
}

func (x *ListSeatBlockReq) GetSeatMapId() string {
	if x != nil {
		return x.SeatMapId
	}
	return ""
}

func (x *ListSeatBlockReq) GetSeatDetail() bool {
	if x != nil {
		return x.SeatDetail
	}
	return false
}

type UpdateSeatBlockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatMapId   string         `protobuf:"bytes,1,opt,name=seat_map_id,json=seatMapId,proto3" json:"seat_map_id,omitempty"`
	SeatBlockId string         `protobuf:"bytes,2,opt,name=seat_block_id,json=seatBlockId,proto3" json:"seat_block_id,omitempty"`
	Info        *SeatBlockInfo `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *UpdateSeatBlockReq) Reset() {
	*x = UpdateSeatBlockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSeatBlockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSeatBlockReq) ProtoMessage() {}

func (x *UpdateSeatBlockReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSeatBlockReq.ProtoReflect.Descriptor instead.
func (*UpdateSeatBlockReq) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateSeatBlockReq) GetSeatMapId() string {
	if x != nil {
		return x.SeatMapId
	}
	return ""
}

func (x *UpdateSeatBlockReq) GetSeatBlockId() string {
	if x != nil {
		return x.SeatBlockId
	}
	return ""
}

func (x *UpdateSeatBlockReq) GetInfo() *SeatBlockInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteSeatBlockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatMapId   string `protobuf:"bytes,1,opt,name=seat_map_id,json=seatMapId,proto3" json:"seat_map_id,omitempty"`
	SeatBlockId string `protobuf:"bytes,2,opt,name=seat_block_id,json=seatBlockId,proto3" json:"seat_block_id,omitempty"`
}

func (x *DeleteSeatBlockReq) Reset() {
	*x = DeleteSeatBlockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSeatBlockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSeatBlockReq) ProtoMessage() {}

func (x *DeleteSeatBlockReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSeatBlockReq.ProtoReflect.Descriptor instead.
func (*DeleteSeatBlockReq) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteSeatBlockReq) GetSeatMapId() string {
	if x != nil {
		return x.SeatMapId
	}
	return ""
}

func (x *DeleteSeatBlockReq) GetSeatBlockId() string {
	if x != nil {
		return x.SeatBlockId
	}
	return ""
}

type RetrieveSeatBlockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatMapId   string `protobuf:"bytes,1,opt,name=seat_map_id,json=seatMapId,proto3" json:"seat_map_id,omitempty"`
	SeatBlockId string `protobuf:"bytes,2,opt,name=seat_block_id,json=seatBlockId,proto3" json:"seat_block_id,omitempty"`
}

func (x *RetrieveSeatBlockReq) Reset() {
	*x = RetrieveSeatBlockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveSeatBlockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveSeatBlockReq) ProtoMessage() {}

func (x *RetrieveSeatBlockReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveSeatBlockReq.ProtoReflect.Descriptor instead.
func (*RetrieveSeatBlockReq) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{20}
}

func (x *RetrieveSeatBlockReq) GetSeatMapId() string {
	if x != nil {
		return x.SeatMapId
	}
	return ""
}

func (x *RetrieveSeatBlockReq) GetSeatBlockId() string {
	if x != nil {
		return x.SeatBlockId
	}
	return ""
}

type UpsertDecorationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatMapId string `protobuf:"bytes,1,opt,name=seat_map_id,json=seatMapId,proto3" json:"seat_map_id,omitempty"`
	Info      *Sharp `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *UpsertDecorationReq) Reset() {
	*x = UpsertDecorationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertDecorationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertDecorationReq) ProtoMessage() {}

func (x *UpsertDecorationReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertDecorationReq.ProtoReflect.Descriptor instead.
func (*UpsertDecorationReq) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{21}
}

func (x *UpsertDecorationReq) GetSeatMapId() string {
	if x != nil {
		return x.SeatMapId
	}
	return ""
}

func (x *UpsertDecorationReq) GetInfo() *Sharp {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateSeatStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatMapId  string                       `protobuf:"bytes,1,opt,name=seat_map_id,json=seatMapId,proto3" json:"seat_map_id,omitempty"`
	SeatDetail []*UpdateSeatStatusDetailReq `protobuf:"bytes,2,rep,name=seat_detail,json=seatDetail,proto3" json:"seat_detail,omitempty"`
	Status     SeatStatus                   `protobuf:"varint,3,opt,name=status,proto3,enum=event.web_partnership.SeatStatus" json:"status,omitempty"`
	Note       string                       `protobuf:"bytes,5,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *UpdateSeatStatusReq) Reset() {
	*x = UpdateSeatStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSeatStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSeatStatusReq) ProtoMessage() {}

func (x *UpdateSeatStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSeatStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateSeatStatusReq) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateSeatStatusReq) GetSeatMapId() string {
	if x != nil {
		return x.SeatMapId
	}
	return ""
}

func (x *UpdateSeatStatusReq) GetSeatDetail() []*UpdateSeatStatusDetailReq {
	if x != nil {
		return x.SeatDetail
	}
	return nil
}

func (x *UpdateSeatStatusReq) GetStatus() SeatStatus {
	if x != nil {
		return x.Status
	}
	return SeatStatus_SEAT_STATUS_UNUSE
}

func (x *UpdateSeatStatusReq) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type UpdateSeatStatusDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatBlockId string   `protobuf:"bytes,1,opt,name=seat_block_id,json=seatBlockId,proto3" json:"seat_block_id,omitempty"`
	SeatIds     []string `protobuf:"bytes,2,rep,name=seat_ids,json=seatIds,proto3" json:"seat_ids,omitempty"`
}

func (x *UpdateSeatStatusDetailReq) Reset() {
	*x = UpdateSeatStatusDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSeatStatusDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSeatStatusDetailReq) ProtoMessage() {}

func (x *UpdateSeatStatusDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSeatStatusDetailReq.ProtoReflect.Descriptor instead.
func (*UpdateSeatStatusDetailReq) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateSeatStatusDetailReq) GetSeatBlockId() string {
	if x != nil {
		return x.SeatBlockId
	}
	return ""
}

func (x *UpdateSeatStatusDetailReq) GetSeatIds() []string {
	if x != nil {
		return x.SeatIds
	}
	return nil
}

type ListDecorationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatMapId string `protobuf:"bytes,1,opt,name=seat_map_id,json=seatMapId,proto3" json:"seat_map_id,omitempty"`
}

func (x *ListDecorationReq) Reset() {
	*x = ListDecorationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDecorationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDecorationReq) ProtoMessage() {}

func (x *ListDecorationReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDecorationReq.ProtoReflect.Descriptor instead.
func (*ListDecorationReq) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{24}
}

func (x *ListDecorationReq) GetSeatMapId() string {
	if x != nil {
		return x.SeatMapId
	}
	return ""
}

type CreateSeatMapRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateSeatMapRes) Reset() {
	*x = CreateSeatMapRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSeatMapRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSeatMapRes) ProtoMessage() {}

func (x *CreateSeatMapRes) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSeatMapRes.ProtoReflect.Descriptor instead.
func (*CreateSeatMapRes) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{25}
}

func (x *CreateSeatMapRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RetrieveSeatMapRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *SeatMap `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *RetrieveSeatMapRes) Reset() {
	*x = RetrieveSeatMapRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveSeatMapRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveSeatMapRes) ProtoMessage() {}

func (x *RetrieveSeatMapRes) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveSeatMapRes.ProtoReflect.Descriptor instead.
func (*RetrieveSeatMapRes) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{26}
}

func (x *RetrieveSeatMapRes) GetInfo() *SeatMap {
	if x != nil {
		return x.Info
	}
	return nil
}

type ListSeatMapRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items      []*SeatMap          `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Pagination *base.PaginationRes `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListSeatMapRes) Reset() {
	*x = ListSeatMapRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSeatMapRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSeatMapRes) ProtoMessage() {}

func (x *ListSeatMapRes) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSeatMapRes.ProtoReflect.Descriptor instead.
func (*ListSeatMapRes) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{27}
}

func (x *ListSeatMapRes) GetItems() []*SeatMap {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListSeatMapRes) GetPagination() *base.PaginationRes {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ListSeatBlockRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*SeatBlock `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListSeatBlockRes) Reset() {
	*x = ListSeatBlockRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSeatBlockRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSeatBlockRes) ProtoMessage() {}

func (x *ListSeatBlockRes) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSeatBlockRes.ProtoReflect.Descriptor instead.
func (*ListSeatBlockRes) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{28}
}

func (x *ListSeatBlockRes) GetItems() []*SeatBlock {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListDecorationRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Sharp `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListDecorationRes) Reset() {
	*x = ListDecorationRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDecorationRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDecorationRes) ProtoMessage() {}

func (x *ListDecorationRes) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDecorationRes.ProtoReflect.Descriptor instead.
func (*ListDecorationRes) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{29}
}

func (x *ListDecorationRes) GetItems() []*Sharp {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreateSeatBlockRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatMapId   string `protobuf:"bytes,1,opt,name=seat_map_id,json=seatMapId,proto3" json:"seat_map_id,omitempty"`
	SeatBlockId string `protobuf:"bytes,2,opt,name=seat_block_id,json=seatBlockId,proto3" json:"seat_block_id,omitempty"`
}

func (x *CreateSeatBlockRes) Reset() {
	*x = CreateSeatBlockRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSeatBlockRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSeatBlockRes) ProtoMessage() {}

func (x *CreateSeatBlockRes) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSeatBlockRes.ProtoReflect.Descriptor instead.
func (*CreateSeatBlockRes) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{30}
}

func (x *CreateSeatBlockRes) GetSeatMapId() string {
	if x != nil {
		return x.SeatMapId
	}
	return ""
}

func (x *CreateSeatBlockRes) GetSeatBlockId() string {
	if x != nil {
		return x.SeatBlockId
	}
	return ""
}

type UpdateSeatStatusRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccessed  bool     `protobuf:"varint,1,opt,name=is_successed,json=isSuccessed,proto3" json:"is_successed,omitempty"`
	ErrorSeatIds []string `protobuf:"bytes,2,rep,name=error_seat_ids,json=errorSeatIds,proto3" json:"error_seat_ids,omitempty"`
}

func (x *UpdateSeatStatusRes) Reset() {
	*x = UpdateSeatStatusRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSeatStatusRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSeatStatusRes) ProtoMessage() {}

func (x *UpdateSeatStatusRes) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSeatStatusRes.ProtoReflect.Descriptor instead.
func (*UpdateSeatStatusRes) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateSeatStatusRes) GetIsSuccessed() bool {
	if x != nil {
		return x.IsSuccessed
	}
	return false
}

func (x *UpdateSeatStatusRes) GetErrorSeatIds() []string {
	if x != nil {
		return x.ErrorSeatIds
	}
	return nil
}

type RetrieveSeatBlockRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *SeatBlock `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *RetrieveSeatBlockRes) Reset() {
	*x = RetrieveSeatBlockRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_seat_map_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveSeatBlockRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveSeatBlockRes) ProtoMessage() {}

func (x *RetrieveSeatBlockRes) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_seat_map_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveSeatBlockRes.ProtoReflect.Descriptor instead.
func (*RetrieveSeatBlockRes) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_seat_map_proto_rawDescGZIP(), []int{32}
}

func (x *RetrieveSeatBlockRes) GetInfo() *SeatBlock {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_event_web_partnership_seat_map_proto protoreflect.FileDescriptor

var file_event_web_partnership_seat_map_proto_rawDesc = []byte{
	0x0a, 0x24, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65,
	0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x1a, 0x0f, 0x62,
	0x61, 0x73, 0x65, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad,
	0x01, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x50, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x61,
	0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x61, 0x74, 0x50, 0x65, 0x72, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xb4,
	0x04, 0x0a, 0x07, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d,
	0x61, 0x78, 0x53, 0x65, 0x61, 0x74, 0x50, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x65, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x47, 0x0a, 0x10, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x70, 0x52, 0x0f, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xd6, 0x03, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x31, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x52,
	0x03, 0x72, 0x6f, 0x77, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x4c, 0x69,
	0x6e, 0x65, 0x52, 0x03, 0x63, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x65, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x74, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x61, 0x74, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x61, 0x74, 0x12,
	0x31, 0x0a, 0x05, 0x73, 0x65, 0x61, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x52, 0x05, 0x73, 0x65, 0x61,
	0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x97,
	0x05, 0x0a, 0x09, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x65, 0x61, 0x74,
	0x4c, 0x69, 0x6e, 0x65, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6f, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77,
	0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53,
	0x65, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x03, 0x63, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x3b, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x05,
	0x73, 0x65, 0x61, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x52, 0x05, 0x73, 0x65, 0x61, 0x74, 0x73, 0x12,
	0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65,
	0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x53, 0x65, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x37, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0xcb, 0x01, 0x0a, 0x05, 0x53, 0x68, 0x61,
	0x72, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a,
	0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x70, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x6c, 0x64, 0x22, 0x4f, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x74,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x27, 0x0a, 0x0f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x22, 0x56, 0x0a, 0x08, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x22, 0x26, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a,
	0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x22, 0x8c, 0x02, 0x0a, 0x04, 0x53, 0x65,
	0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x65, 0x61, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x58, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x59,
	0x12, 0x36, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4c, 0x6f, 0x67, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x22, 0xde, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x61,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x40, 0x0a, 0x0a, 0x6f, 0x6c, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x09, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x4a, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x5a, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e,
	0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x22, 0x22, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x4d,
	0x61, 0x70, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xeb, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x61, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x55, 0x0a, 0x12, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65,
	0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x33, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62,
	0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x22, 0x24, 0x0a, 0x12, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53,
	0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x79, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12,
	0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12,
	0x43, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x65, 0x61, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x53, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x74,
	0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x74,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73,
	0x65, 0x61, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x92, 0x01, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x58,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x4d,
	0x61, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x14, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x13, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x65,
	0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0b, 0x73,
	0x65, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x70, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xd7, 0x01,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x6d, 0x61,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x74,
	0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x52, 0x0a, 0x73, 0x65,
	0x61, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x2e, 0x53, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x5a, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x61, 0x74,
	0x49, 0x64, 0x73, 0x22, 0x33, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x63, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x74,
	0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x12,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x52,
	0x65, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x7b, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x61, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e,
	0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x33,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77,
	0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53,
	0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x47, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x70, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x58, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x1e,
	0x0a, 0x0b, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x64, 0x22, 0x5e, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x61, 0x74, 0x49,
	0x64, 0x73, 0x22, 0x4c, 0x0a, 0x14, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x65,
	0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x2e, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x2a, 0x9e, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x55, 0x53, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45,
	0x41, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x4f, 0x4c, 0x44, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x41, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x63, 0x2a, 0x5a, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41,
	0x53, 0x53, 0x4f, 0x43, 0x5f, 0x55, 0x4e, 0x55, 0x53, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x59, 0x45, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41,
	0x53, 0x53, 0x4f, 0x43, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x32, 0xb6, 0x09,
	0x0a, 0x0e, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x61, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61,
	0x70, 0x12, 0x27, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70,
	0x52, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61,
	0x74, 0x4d, 0x61, 0x70, 0x12, 0x27, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x27, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61,
	0x70, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x5b, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70,
	0x12, 0x25, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61,
	0x74, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x12, 0x67,
	0x0a, 0x0f, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61,
	0x70, 0x12, 0x29, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x65, 0x61,
	0x74, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x29, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65,
	0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x12, 0x61, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x27, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x12, 0x6d, 0x0a, 0x11, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53,
	0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65,
	0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x12, 0x49, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x29, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65,
	0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x1a, 0x0b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x49, 0x0a,
	0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x29, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x10, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x65, 0x63, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x63, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x63,
	0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x1a, 0x27, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x42, 0x50, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x2e, 0x62, 0x63, 0x61, 0x73, 0x69, 0x61, 0x2e, 0x69, 0x6f, 0x2f, 0x74, 0x68, 0x75, 0x79, 0x6e,
	0x67, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x67, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x3b, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_event_web_partnership_seat_map_proto_rawDescOnce sync.Once
	file_event_web_partnership_seat_map_proto_rawDescData = file_event_web_partnership_seat_map_proto_rawDesc
)

func file_event_web_partnership_seat_map_proto_rawDescGZIP() []byte {
	file_event_web_partnership_seat_map_proto_rawDescOnce.Do(func() {
		file_event_web_partnership_seat_map_proto_rawDescData = protoimpl.X.CompressGZIP(file_event_web_partnership_seat_map_proto_rawDescData)
	})
	return file_event_web_partnership_seat_map_proto_rawDescData
}

var file_event_web_partnership_seat_map_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_event_web_partnership_seat_map_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_event_web_partnership_seat_map_proto_goTypes = []interface{}{
	(SeatStatus)(0),                   // 0: event.web_partnership.SeatStatus
	(EventAssocStatus)(0),             // 1: event.web_partnership.EventAssocStatus
	(*SeatMapInfo)(nil),               // 2: event.web_partnership.SeatMapInfo
	(*SeatMap)(nil),                   // 3: event.web_partnership.SeatMap
	(*SeatBlockInfo)(nil),             // 4: event.web_partnership.SeatBlockInfo
	(*SeatBlock)(nil),                 // 5: event.web_partnership.SeatBlock
	(*Sharp)(nil),                     // 6: event.web_partnership.Sharp
	(*BlockStats)(nil),                // 7: event.web_partnership.BlockStats
	(*SeatLine)(nil),                  // 8: event.web_partnership.SeatLine
	(*Currency)(nil),                  // 9: event.web_partnership.Currency
	(*Position)(nil),                  // 10: event.web_partnership.Position
	(*Seat)(nil),                      // 11: event.web_partnership.Seat
	(*SeatStatusLog)(nil),             // 12: event.web_partnership.SeatStatusLog
	(*CreateSeatMapReq)(nil),          // 13: event.web_partnership.CreateSeatMapReq
	(*UpdateSeatMapReq)(nil),          // 14: event.web_partnership.UpdateSeatMapReq
	(*DeleteSeatMapReq)(nil),          // 15: event.web_partnership.DeleteSeatMapReq
	(*ListSeatMapReq)(nil),            // 16: event.web_partnership.ListSeatMapReq
	(*RetrieveSeatMapReq)(nil),        // 17: event.web_partnership.RetrieveSeatMapReq
	(*CreateSeatBlockReq)(nil),        // 18: event.web_partnership.CreateSeatBlockReq
	(*ListSeatBlockReq)(nil),          // 19: event.web_partnership.ListSeatBlockReq
	(*UpdateSeatBlockReq)(nil),        // 20: event.web_partnership.UpdateSeatBlockReq
	(*DeleteSeatBlockReq)(nil),        // 21: event.web_partnership.DeleteSeatBlockReq
	(*RetrieveSeatBlockReq)(nil),      // 22: event.web_partnership.RetrieveSeatBlockReq
	(*UpsertDecorationReq)(nil),       // 23: event.web_partnership.UpsertDecorationReq
	(*UpdateSeatStatusReq)(nil),       // 24: event.web_partnership.UpdateSeatStatusReq
	(*UpdateSeatStatusDetailReq)(nil), // 25: event.web_partnership.UpdateSeatStatusDetailReq
	(*ListDecorationReq)(nil),         // 26: event.web_partnership.ListDecorationReq
	(*CreateSeatMapRes)(nil),          // 27: event.web_partnership.CreateSeatMapRes
	(*RetrieveSeatMapRes)(nil),        // 28: event.web_partnership.RetrieveSeatMapRes
	(*ListSeatMapRes)(nil),            // 29: event.web_partnership.ListSeatMapRes
	(*ListSeatBlockRes)(nil),          // 30: event.web_partnership.ListSeatBlockRes
	(*ListDecorationRes)(nil),         // 31: event.web_partnership.ListDecorationRes
	(*CreateSeatBlockRes)(nil),        // 32: event.web_partnership.CreateSeatBlockRes
	(*UpdateSeatStatusRes)(nil),       // 33: event.web_partnership.UpdateSeatStatusRes
	(*RetrieveSeatBlockRes)(nil),      // 34: event.web_partnership.RetrieveSeatBlockRes
	(*base.PaginationReq)(nil),        // 35: base.PaginationReq
	(*base.OrderByItem)(nil),          // 36: base.OrderByItem
	(*base.PaginationRes)(nil),        // 37: base.PaginationRes
	(*base.Empty)(nil),                // 38: base.Empty
}
var file_event_web_partnership_seat_map_proto_depIdxs = []int32{
	6,  // 0: event.web_partnership.SeatMap.decoration_items:type_name -> event.web_partnership.Sharp
	8,  // 1: event.web_partnership.SeatBlockInfo.row:type_name -> event.web_partnership.SeatLine
	8,  // 2: event.web_partnership.SeatBlockInfo.col:type_name -> event.web_partnership.SeatLine
	10, // 3: event.web_partnership.SeatBlockInfo.position:type_name -> event.web_partnership.Position
	11, // 4: event.web_partnership.SeatBlockInfo.seats:type_name -> event.web_partnership.Seat
	8,  // 5: event.web_partnership.SeatBlock.row:type_name -> event.web_partnership.SeatLine
	8,  // 6: event.web_partnership.SeatBlock.col:type_name -> event.web_partnership.SeatLine
	10, // 7: event.web_partnership.SeatBlock.position:type_name -> event.web_partnership.Position
	11, // 8: event.web_partnership.SeatBlock.seats:type_name -> event.web_partnership.Seat
	7,  // 9: event.web_partnership.SeatBlock.stats:type_name -> event.web_partnership.BlockStats
	10, // 10: event.web_partnership.Sharp.position:type_name -> event.web_partnership.Position
	10, // 11: event.web_partnership.Sharp.points:type_name -> event.web_partnership.Position
	10, // 12: event.web_partnership.Seat.position:type_name -> event.web_partnership.Position
	0,  // 13: event.web_partnership.Seat.status:type_name -> event.web_partnership.SeatStatus
	12, // 14: event.web_partnership.Seat.log:type_name -> event.web_partnership.SeatStatusLog
	0,  // 15: event.web_partnership.SeatStatusLog.old_status:type_name -> event.web_partnership.SeatStatus
	0,  // 16: event.web_partnership.SeatStatusLog.status:type_name -> event.web_partnership.SeatStatus
	2,  // 17: event.web_partnership.CreateSeatMapReq.info:type_name -> event.web_partnership.SeatMapInfo
	2,  // 18: event.web_partnership.UpdateSeatMapReq.info:type_name -> event.web_partnership.SeatMapInfo
	1,  // 19: event.web_partnership.ListSeatMapReq.event_assoc_status:type_name -> event.web_partnership.EventAssocStatus
	35, // 20: event.web_partnership.ListSeatMapReq.pagination:type_name -> base.PaginationReq
	36, // 21: event.web_partnership.ListSeatMapReq.order_by:type_name -> base.OrderByItem
	4,  // 22: event.web_partnership.CreateSeatBlockReq.seat_block:type_name -> event.web_partnership.SeatBlockInfo
	4,  // 23: event.web_partnership.UpdateSeatBlockReq.info:type_name -> event.web_partnership.SeatBlockInfo
	6,  // 24: event.web_partnership.UpsertDecorationReq.info:type_name -> event.web_partnership.Sharp
	25, // 25: event.web_partnership.UpdateSeatStatusReq.seat_detail:type_name -> event.web_partnership.UpdateSeatStatusDetailReq
	0,  // 26: event.web_partnership.UpdateSeatStatusReq.status:type_name -> event.web_partnership.SeatStatus
	3,  // 27: event.web_partnership.RetrieveSeatMapRes.info:type_name -> event.web_partnership.SeatMap
	3,  // 28: event.web_partnership.ListSeatMapRes.items:type_name -> event.web_partnership.SeatMap
	37, // 29: event.web_partnership.ListSeatMapRes.pagination:type_name -> base.PaginationRes
	5,  // 30: event.web_partnership.ListSeatBlockRes.items:type_name -> event.web_partnership.SeatBlock
	6,  // 31: event.web_partnership.ListDecorationRes.items:type_name -> event.web_partnership.Sharp
	5,  // 32: event.web_partnership.RetrieveSeatBlockRes.info:type_name -> event.web_partnership.SeatBlock
	13, // 33: event.web_partnership.SeatMapService.CreateSeatMap:input_type -> event.web_partnership.CreateSeatMapReq
	14, // 34: event.web_partnership.SeatMapService.UpdateSeatMap:input_type -> event.web_partnership.UpdateSeatMapReq
	15, // 35: event.web_partnership.SeatMapService.DeleteSeatMap:input_type -> event.web_partnership.DeleteSeatMapReq
	16, // 36: event.web_partnership.SeatMapService.ListSeatMap:input_type -> event.web_partnership.ListSeatMapReq
	17, // 37: event.web_partnership.SeatMapService.RetrieveSeatMap:input_type -> event.web_partnership.RetrieveSeatMapReq
	18, // 38: event.web_partnership.SeatMapService.CreateSeatBlock:input_type -> event.web_partnership.CreateSeatBlockReq
	19, // 39: event.web_partnership.SeatMapService.ListSeatBlock:input_type -> event.web_partnership.ListSeatBlockReq
	22, // 40: event.web_partnership.SeatMapService.RetrieveSeatBlock:input_type -> event.web_partnership.RetrieveSeatBlockReq
	20, // 41: event.web_partnership.SeatMapService.UpdateSeatBlock:input_type -> event.web_partnership.UpdateSeatBlockReq
	21, // 42: event.web_partnership.SeatMapService.DeleteSeatBlock:input_type -> event.web_partnership.DeleteSeatBlockReq
	23, // 43: event.web_partnership.SeatMapService.UpsertDecoration:input_type -> event.web_partnership.UpsertDecorationReq
	26, // 44: event.web_partnership.SeatMapService.ListDecoration:input_type -> event.web_partnership.ListDecorationReq
	24, // 45: event.web_partnership.SeatMapService.UpdateSeatStatus:input_type -> event.web_partnership.UpdateSeatStatusReq
	27, // 46: event.web_partnership.SeatMapService.CreateSeatMap:output_type -> event.web_partnership.CreateSeatMapRes
	38, // 47: event.web_partnership.SeatMapService.UpdateSeatMap:output_type -> base.Empty
	38, // 48: event.web_partnership.SeatMapService.DeleteSeatMap:output_type -> base.Empty
	29, // 49: event.web_partnership.SeatMapService.ListSeatMap:output_type -> event.web_partnership.ListSeatMapRes
	28, // 50: event.web_partnership.SeatMapService.RetrieveSeatMap:output_type -> event.web_partnership.RetrieveSeatMapRes
	32, // 51: event.web_partnership.SeatMapService.CreateSeatBlock:output_type -> event.web_partnership.CreateSeatBlockRes
	30, // 52: event.web_partnership.SeatMapService.ListSeatBlock:output_type -> event.web_partnership.ListSeatBlockRes
	34, // 53: event.web_partnership.SeatMapService.RetrieveSeatBlock:output_type -> event.web_partnership.RetrieveSeatBlockRes
	38, // 54: event.web_partnership.SeatMapService.UpdateSeatBlock:output_type -> base.Empty
	38, // 55: event.web_partnership.SeatMapService.DeleteSeatBlock:output_type -> base.Empty
	38, // 56: event.web_partnership.SeatMapService.UpsertDecoration:output_type -> base.Empty
	30, // 57: event.web_partnership.SeatMapService.ListDecoration:output_type -> event.web_partnership.ListSeatBlockRes
	33, // 58: event.web_partnership.SeatMapService.UpdateSeatStatus:output_type -> event.web_partnership.UpdateSeatStatusRes
	46, // [46:59] is the sub-list for method output_type
	33, // [33:46] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_event_web_partnership_seat_map_proto_init() }
func file_event_web_partnership_seat_map_proto_init() {
	if File_event_web_partnership_seat_map_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_event_web_partnership_seat_map_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeatMapInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeatMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeatBlockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeatBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sharp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeatLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Seat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeatStatusLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSeatMapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSeatMapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSeatMapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSeatMapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveSeatMapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSeatBlockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSeatBlockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSeatBlockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSeatBlockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveSeatBlockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertDecorationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSeatStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSeatStatusDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDecorationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSeatMapRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveSeatMapRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSeatMapRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSeatBlockRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDecorationRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSeatBlockRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSeatStatusRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_seat_map_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveSeatBlockRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_event_web_partnership_seat_map_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_event_web_partnership_seat_map_proto_goTypes,
		DependencyIndexes: file_event_web_partnership_seat_map_proto_depIdxs,
		EnumInfos:         file_event_web_partnership_seat_map_proto_enumTypes,
		MessageInfos:      file_event_web_partnership_seat_map_proto_msgTypes,
	}.Build()
	File_event_web_partnership_seat_map_proto = out.File
	file_event_web_partnership_seat_map_proto_rawDesc = nil
	file_event_web_partnership_seat_map_proto_goTypes = nil
	file_event_web_partnership_seat_map_proto_depIdxs = nil
}
