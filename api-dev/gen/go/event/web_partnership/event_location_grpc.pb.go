// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: event/web_partnership/event_location.proto

package web_partnership

import (
	context "context"
	base "gitlab.bcasia.io/thuynga/apps/api/gen/go/base"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventLocationServiceClient is the client API for EventLocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventLocationServiceClient interface {
	CreateEventLocation(ctx context.Context, in *CreateEventLocationReq, opts ...grpc.CallOption) (*CreateEventLocationRes, error)
	UpdateEventLocation(ctx context.Context, in *UpdateEventLocationReq, opts ...grpc.CallOption) (*base.Empty, error)
	DeleteEventLocation(ctx context.Context, in *DeleteEventLocationReq, opts ...grpc.CallOption) (*base.Empty, error)
	RetrieveEventLocation(ctx context.Context, in *RetrieveEventLocationReq, opts ...grpc.CallOption) (*RetrieveEventLocationRes, error)
	ListEventLocation(ctx context.Context, in *ListEventLocationReq, opts ...grpc.CallOption) (*EventLocationListRes, error)
}

type eventLocationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventLocationServiceClient(cc grpc.ClientConnInterface) EventLocationServiceClient {
	return &eventLocationServiceClient{cc}
}

func (c *eventLocationServiceClient) CreateEventLocation(ctx context.Context, in *CreateEventLocationReq, opts ...grpc.CallOption) (*CreateEventLocationRes, error) {
	out := new(CreateEventLocationRes)
	err := c.cc.Invoke(ctx, "/event.web_partnership.EventLocationService/CreateEventLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventLocationServiceClient) UpdateEventLocation(ctx context.Context, in *UpdateEventLocationReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/event.web_partnership.EventLocationService/UpdateEventLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventLocationServiceClient) DeleteEventLocation(ctx context.Context, in *DeleteEventLocationReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/event.web_partnership.EventLocationService/DeleteEventLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventLocationServiceClient) RetrieveEventLocation(ctx context.Context, in *RetrieveEventLocationReq, opts ...grpc.CallOption) (*RetrieveEventLocationRes, error) {
	out := new(RetrieveEventLocationRes)
	err := c.cc.Invoke(ctx, "/event.web_partnership.EventLocationService/RetrieveEventLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventLocationServiceClient) ListEventLocation(ctx context.Context, in *ListEventLocationReq, opts ...grpc.CallOption) (*EventLocationListRes, error) {
	out := new(EventLocationListRes)
	err := c.cc.Invoke(ctx, "/event.web_partnership.EventLocationService/ListEventLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventLocationServiceServer is the server API for EventLocationService service.
// All implementations must embed UnimplementedEventLocationServiceServer
// for forward compatibility
type EventLocationServiceServer interface {
	CreateEventLocation(context.Context, *CreateEventLocationReq) (*CreateEventLocationRes, error)
	UpdateEventLocation(context.Context, *UpdateEventLocationReq) (*base.Empty, error)
	DeleteEventLocation(context.Context, *DeleteEventLocationReq) (*base.Empty, error)
	RetrieveEventLocation(context.Context, *RetrieveEventLocationReq) (*RetrieveEventLocationRes, error)
	ListEventLocation(context.Context, *ListEventLocationReq) (*EventLocationListRes, error)
	mustEmbedUnimplementedEventLocationServiceServer()
}

// UnimplementedEventLocationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventLocationServiceServer struct {
}

func (UnimplementedEventLocationServiceServer) CreateEventLocation(context.Context, *CreateEventLocationReq) (*CreateEventLocationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEventLocation not implemented")
}
func (UnimplementedEventLocationServiceServer) UpdateEventLocation(context.Context, *UpdateEventLocationReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEventLocation not implemented")
}
func (UnimplementedEventLocationServiceServer) DeleteEventLocation(context.Context, *DeleteEventLocationReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEventLocation not implemented")
}
func (UnimplementedEventLocationServiceServer) RetrieveEventLocation(context.Context, *RetrieveEventLocationReq) (*RetrieveEventLocationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveEventLocation not implemented")
}
func (UnimplementedEventLocationServiceServer) ListEventLocation(context.Context, *ListEventLocationReq) (*EventLocationListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventLocation not implemented")
}
func (UnimplementedEventLocationServiceServer) mustEmbedUnimplementedEventLocationServiceServer() {}

// UnsafeEventLocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventLocationServiceServer will
// result in compilation errors.
type UnsafeEventLocationServiceServer interface {
	mustEmbedUnimplementedEventLocationServiceServer()
}

func RegisterEventLocationServiceServer(s grpc.ServiceRegistrar, srv EventLocationServiceServer) {
	s.RegisterService(&EventLocationService_ServiceDesc, srv)
}

func _EventLocationService_CreateEventLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventLocationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventLocationServiceServer).CreateEventLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.EventLocationService/CreateEventLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventLocationServiceServer).CreateEventLocation(ctx, req.(*CreateEventLocationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventLocationService_UpdateEventLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventLocationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventLocationServiceServer).UpdateEventLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.EventLocationService/UpdateEventLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventLocationServiceServer).UpdateEventLocation(ctx, req.(*UpdateEventLocationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventLocationService_DeleteEventLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventLocationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventLocationServiceServer).DeleteEventLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.EventLocationService/DeleteEventLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventLocationServiceServer).DeleteEventLocation(ctx, req.(*DeleteEventLocationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventLocationService_RetrieveEventLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveEventLocationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventLocationServiceServer).RetrieveEventLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.EventLocationService/RetrieveEventLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventLocationServiceServer).RetrieveEventLocation(ctx, req.(*RetrieveEventLocationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventLocationService_ListEventLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventLocationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventLocationServiceServer).ListEventLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.EventLocationService/ListEventLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventLocationServiceServer).ListEventLocation(ctx, req.(*ListEventLocationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EventLocationService_ServiceDesc is the grpc.ServiceDesc for EventLocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventLocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.web_partnership.EventLocationService",
	HandlerType: (*EventLocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEventLocation",
			Handler:    _EventLocationService_CreateEventLocation_Handler,
		},
		{
			MethodName: "UpdateEventLocation",
			Handler:    _EventLocationService_UpdateEventLocation_Handler,
		},
		{
			MethodName: "DeleteEventLocation",
			Handler:    _EventLocationService_DeleteEventLocation_Handler,
		},
		{
			MethodName: "RetrieveEventLocation",
			Handler:    _EventLocationService_RetrieveEventLocation_Handler,
		},
		{
			MethodName: "ListEventLocation",
			Handler:    _EventLocationService_ListEventLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event/web_partnership/event_location.proto",
}
