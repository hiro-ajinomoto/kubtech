// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: event/web_partnership/sponsor.proto

package web_partnership

import (
	context "context"
	base "gitlab.bcasia.io/thuynga/apps/api/gen/go/base"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SponsorServiceClient is the client API for SponsorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SponsorServiceClient interface {
	CreateSponsor(ctx context.Context, in *CreateSponsorReq, opts ...grpc.CallOption) (*CreateSponsorRes, error)
	UpdateSponsor(ctx context.Context, in *UpdateSponsorReq, opts ...grpc.CallOption) (*base.Empty, error)
	DeleteSponsor(ctx context.Context, in *DeleteSponsorReq, opts ...grpc.CallOption) (*base.Empty, error)
	GetSponsorDetail(ctx context.Context, in *GetSponsorDetailReq, opts ...grpc.CallOption) (*GetSponsorDetailRes, error)
	ListSponsor(ctx context.Context, in *ListSponsorReq, opts ...grpc.CallOption) (*ListSponsorRes, error)
}

type sponsorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSponsorServiceClient(cc grpc.ClientConnInterface) SponsorServiceClient {
	return &sponsorServiceClient{cc}
}

func (c *sponsorServiceClient) CreateSponsor(ctx context.Context, in *CreateSponsorReq, opts ...grpc.CallOption) (*CreateSponsorRes, error) {
	out := new(CreateSponsorRes)
	err := c.cc.Invoke(ctx, "/event.web_partnership.SponsorService/CreateSponsor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sponsorServiceClient) UpdateSponsor(ctx context.Context, in *UpdateSponsorReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/event.web_partnership.SponsorService/UpdateSponsor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sponsorServiceClient) DeleteSponsor(ctx context.Context, in *DeleteSponsorReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/event.web_partnership.SponsorService/DeleteSponsor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sponsorServiceClient) GetSponsorDetail(ctx context.Context, in *GetSponsorDetailReq, opts ...grpc.CallOption) (*GetSponsorDetailRes, error) {
	out := new(GetSponsorDetailRes)
	err := c.cc.Invoke(ctx, "/event.web_partnership.SponsorService/GetSponsorDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sponsorServiceClient) ListSponsor(ctx context.Context, in *ListSponsorReq, opts ...grpc.CallOption) (*ListSponsorRes, error) {
	out := new(ListSponsorRes)
	err := c.cc.Invoke(ctx, "/event.web_partnership.SponsorService/ListSponsor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SponsorServiceServer is the server API for SponsorService service.
// All implementations must embed UnimplementedSponsorServiceServer
// for forward compatibility
type SponsorServiceServer interface {
	CreateSponsor(context.Context, *CreateSponsorReq) (*CreateSponsorRes, error)
	UpdateSponsor(context.Context, *UpdateSponsorReq) (*base.Empty, error)
	DeleteSponsor(context.Context, *DeleteSponsorReq) (*base.Empty, error)
	GetSponsorDetail(context.Context, *GetSponsorDetailReq) (*GetSponsorDetailRes, error)
	ListSponsor(context.Context, *ListSponsorReq) (*ListSponsorRes, error)
	mustEmbedUnimplementedSponsorServiceServer()
}

// UnimplementedSponsorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSponsorServiceServer struct {
}

func (UnimplementedSponsorServiceServer) CreateSponsor(context.Context, *CreateSponsorReq) (*CreateSponsorRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSponsor not implemented")
}
func (UnimplementedSponsorServiceServer) UpdateSponsor(context.Context, *UpdateSponsorReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSponsor not implemented")
}
func (UnimplementedSponsorServiceServer) DeleteSponsor(context.Context, *DeleteSponsorReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSponsor not implemented")
}
func (UnimplementedSponsorServiceServer) GetSponsorDetail(context.Context, *GetSponsorDetailReq) (*GetSponsorDetailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSponsorDetail not implemented")
}
func (UnimplementedSponsorServiceServer) ListSponsor(context.Context, *ListSponsorReq) (*ListSponsorRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSponsor not implemented")
}
func (UnimplementedSponsorServiceServer) mustEmbedUnimplementedSponsorServiceServer() {}

// UnsafeSponsorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SponsorServiceServer will
// result in compilation errors.
type UnsafeSponsorServiceServer interface {
	mustEmbedUnimplementedSponsorServiceServer()
}

func RegisterSponsorServiceServer(s grpc.ServiceRegistrar, srv SponsorServiceServer) {
	s.RegisterService(&SponsorService_ServiceDesc, srv)
}

func _SponsorService_CreateSponsor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSponsorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SponsorServiceServer).CreateSponsor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.SponsorService/CreateSponsor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SponsorServiceServer).CreateSponsor(ctx, req.(*CreateSponsorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SponsorService_UpdateSponsor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSponsorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SponsorServiceServer).UpdateSponsor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.SponsorService/UpdateSponsor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SponsorServiceServer).UpdateSponsor(ctx, req.(*UpdateSponsorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SponsorService_DeleteSponsor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSponsorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SponsorServiceServer).DeleteSponsor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.SponsorService/DeleteSponsor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SponsorServiceServer).DeleteSponsor(ctx, req.(*DeleteSponsorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SponsorService_GetSponsorDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSponsorDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SponsorServiceServer).GetSponsorDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.SponsorService/GetSponsorDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SponsorServiceServer).GetSponsorDetail(ctx, req.(*GetSponsorDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SponsorService_ListSponsor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSponsorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SponsorServiceServer).ListSponsor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.SponsorService/ListSponsor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SponsorServiceServer).ListSponsor(ctx, req.(*ListSponsorReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SponsorService_ServiceDesc is the grpc.ServiceDesc for SponsorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SponsorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.web_partnership.SponsorService",
	HandlerType: (*SponsorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSponsor",
			Handler:    _SponsorService_CreateSponsor_Handler,
		},
		{
			MethodName: "UpdateSponsor",
			Handler:    _SponsorService_UpdateSponsor_Handler,
		},
		{
			MethodName: "DeleteSponsor",
			Handler:    _SponsorService_DeleteSponsor_Handler,
		},
		{
			MethodName: "GetSponsorDetail",
			Handler:    _SponsorService_GetSponsorDetail_Handler,
		},
		{
			MethodName: "ListSponsor",
			Handler:    _SponsorService_ListSponsor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event/web_partnership/sponsor.proto",
}
