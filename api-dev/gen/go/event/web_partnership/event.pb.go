// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: event/web_partnership/event.proto

package web_partnership

import (
	base "gitlab.bcasia.io/thuynga/apps/api/gen/go/base"
	enum "gitlab.bcasia.io/thuynga/apps/api/gen/go/event/enum"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventType int32

const (
	EventType_EVENT_TYPE_INVALID EventType = 0
	EventType_EVENT_TYPE_OFFLINE EventType = 1
	EventType_EVENT_TYPE_ONLINE  EventType = 2
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "EVENT_TYPE_INVALID",
		1: "EVENT_TYPE_OFFLINE",
		2: "EVENT_TYPE_ONLINE",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_INVALID": 0,
		"EVENT_TYPE_OFFLINE": 1,
		"EVENT_TYPE_ONLINE":  2,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_event_web_partnership_event_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_event_web_partnership_event_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{0}
}

type SearchEventStatus int32

const (
	SearchEventStatus_EVENT_FILTER_STATUS_NONE             SearchEventStatus = 0
	SearchEventStatus_EVENT_FILTER_STATUS_SALE_COMING_SOON SearchEventStatus = 1
	SearchEventStatus_EVENT_FILTER_STATUS_ON_SALE          SearchEventStatus = 2
	SearchEventStatus_EVENT_FILTER_STATUS_STOP_SALE        SearchEventStatus = 3
	SearchEventStatus_EVENT_FILTER_STATUS_SOLD_OUT         SearchEventStatus = 4
	SearchEventStatus_EVENT_FILTER_STATUS_UPCOMING         SearchEventStatus = 5
	SearchEventStatus_EVENT_FILTER_STATUS_GOING_ON         SearchEventStatus = 6
	SearchEventStatus_EVENT_FILTER_STATUS_ENDED            SearchEventStatus = 7
	SearchEventStatus_EVENT_FILTER_STATUS_HOT              SearchEventStatus = 8
	SearchEventStatus_EVENT_FILTER_STATUS_PUBLISHED        SearchEventStatus = 9
	SearchEventStatus_EVENT_FILTER_STATUS_UNPUBLISHED      SearchEventStatus = 10
)

// Enum value maps for SearchEventStatus.
var (
	SearchEventStatus_name = map[int32]string{
		0:  "EVENT_FILTER_STATUS_NONE",
		1:  "EVENT_FILTER_STATUS_SALE_COMING_SOON",
		2:  "EVENT_FILTER_STATUS_ON_SALE",
		3:  "EVENT_FILTER_STATUS_STOP_SALE",
		4:  "EVENT_FILTER_STATUS_SOLD_OUT",
		5:  "EVENT_FILTER_STATUS_UPCOMING",
		6:  "EVENT_FILTER_STATUS_GOING_ON",
		7:  "EVENT_FILTER_STATUS_ENDED",
		8:  "EVENT_FILTER_STATUS_HOT",
		9:  "EVENT_FILTER_STATUS_PUBLISHED",
		10: "EVENT_FILTER_STATUS_UNPUBLISHED",
	}
	SearchEventStatus_value = map[string]int32{
		"EVENT_FILTER_STATUS_NONE":             0,
		"EVENT_FILTER_STATUS_SALE_COMING_SOON": 1,
		"EVENT_FILTER_STATUS_ON_SALE":          2,
		"EVENT_FILTER_STATUS_STOP_SALE":        3,
		"EVENT_FILTER_STATUS_SOLD_OUT":         4,
		"EVENT_FILTER_STATUS_UPCOMING":         5,
		"EVENT_FILTER_STATUS_GOING_ON":         6,
		"EVENT_FILTER_STATUS_ENDED":            7,
		"EVENT_FILTER_STATUS_HOT":              8,
		"EVENT_FILTER_STATUS_PUBLISHED":        9,
		"EVENT_FILTER_STATUS_UNPUBLISHED":      10,
	}
)

func (x SearchEventStatus) Enum() *SearchEventStatus {
	p := new(SearchEventStatus)
	*p = x
	return p
}

func (x SearchEventStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchEventStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_event_web_partnership_event_proto_enumTypes[1].Descriptor()
}

func (SearchEventStatus) Type() protoreflect.EnumType {
	return &file_event_web_partnership_event_proto_enumTypes[1]
}

func (x SearchEventStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchEventStatus.Descriptor instead.
func (SearchEventStatus) EnumDescriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{1}
}

type EventStatus int32

const (
	EventStatus_EVENT_DISPLAY_STATUS_NONE             EventStatus = 0
	EventStatus_EVENT_DISPLAY_STATUS_SALE_COMING_SOON EventStatus = 1
	EventStatus_EVENT_DISPLAY_STATUS_ON_SALE          EventStatus = 2
	EventStatus_EVENT_DISPLAY_STATUS_STOP_SALE        EventStatus = 3
	EventStatus_EVENT_DISPLAY_STATUS_SOLD_OUT         EventStatus = 4
	EventStatus_EVENT_DISPLAY_STATUS_UPCOMING         EventStatus = 5
	EventStatus_EVENT_DISPLAY_STATUS_GOING_ON         EventStatus = 6
	EventStatus_EVENT_DISPLAY_STATUS_ENDED            EventStatus = 7
)

// Enum value maps for EventStatus.
var (
	EventStatus_name = map[int32]string{
		0: "EVENT_DISPLAY_STATUS_NONE",
		1: "EVENT_DISPLAY_STATUS_SALE_COMING_SOON",
		2: "EVENT_DISPLAY_STATUS_ON_SALE",
		3: "EVENT_DISPLAY_STATUS_STOP_SALE",
		4: "EVENT_DISPLAY_STATUS_SOLD_OUT",
		5: "EVENT_DISPLAY_STATUS_UPCOMING",
		6: "EVENT_DISPLAY_STATUS_GOING_ON",
		7: "EVENT_DISPLAY_STATUS_ENDED",
	}
	EventStatus_value = map[string]int32{
		"EVENT_DISPLAY_STATUS_NONE":             0,
		"EVENT_DISPLAY_STATUS_SALE_COMING_SOON": 1,
		"EVENT_DISPLAY_STATUS_ON_SALE":          2,
		"EVENT_DISPLAY_STATUS_STOP_SALE":        3,
		"EVENT_DISPLAY_STATUS_SOLD_OUT":         4,
		"EVENT_DISPLAY_STATUS_UPCOMING":         5,
		"EVENT_DISPLAY_STATUS_GOING_ON":         6,
		"EVENT_DISPLAY_STATUS_ENDED":            7,
	}
)

func (x EventStatus) Enum() *EventStatus {
	p := new(EventStatus)
	*p = x
	return p
}

func (x EventStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_event_web_partnership_event_proto_enumTypes[2].Descriptor()
}

func (EventStatus) Type() protoreflect.EnumType {
	return &file_event_web_partnership_event_proto_enumTypes[2]
}

func (x EventStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventStatus.Descriptor instead.
func (EventStatus) EnumDescriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{2}
}

type EventBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code             string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Duration         int64  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	PriceDescription string `protobuf:"bytes,4,opt,name=price_description,json=priceDescription,proto3" json:"price_description,omitempty"`
	Description      string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *EventBasicInfo) Reset() {
	*x = EventBasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBasicInfo) ProtoMessage() {}

func (x *EventBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBasicInfo.ProtoReflect.Descriptor instead.
func (*EventBasicInfo) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{0}
}

func (x *EventBasicInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventBasicInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *EventBasicInfo) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *EventBasicInfo) GetPriceDescription() string {
	if x != nil {
		return x.PriceDescription
	}
	return ""
}

func (x *EventBasicInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type EventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code              string          `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Duration          int64           `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	PriceDescription  string          `protobuf:"bytes,4,opt,name=price_description,json=priceDescription,proto3" json:"price_description,omitempty"`
	Description       string          `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Location          string          `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"` // location_id
	BookingStartTime  int64           `protobuf:"varint,7,opt,name=booking_start_time,json=bookingStartTime,proto3" json:"booking_start_time,omitempty"`
	BookingEndTime    int64           `protobuf:"varint,8,opt,name=booking_end_time,json=bookingEndTime,proto3" json:"booking_end_time,omitempty"` // unuse yet
	Hashtags          []string        `protobuf:"bytes,9,rep,name=hashtags,proto3" json:"hashtags,omitempty"`
	EventImageUrls    []string        `protobuf:"bytes,10,rep,name=event_image_urls,json=eventImageUrls,proto3" json:"event_image_urls,omitempty"`
	ProgramsImageUrls []string        `protobuf:"bytes,11,rep,name=programs_image_urls,json=programsImageUrls,proto3" json:"programs_image_urls,omitempty"`
	IsHot             bool            `protobuf:"varint,12,opt,name=is_hot,json=isHot,proto3" json:"is_hot,omitempty"`
	IsPublic          bool            `protobuf:"varint,13,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	Artists           []string        `protobuf:"bytes,14,rep,name=artists,proto3" json:"artists,omitempty"`
	Sponsors          []*EventSponsor `protobuf:"bytes,15,rep,name=sponsors,proto3" json:"sponsors,omitempty"`
	State             enum.EventState `protobuf:"varint,16,opt,name=state,proto3,enum=event.enum.EventState" json:"state,omitempty"`
	StateDescription  string          `protobuf:"bytes,17,opt,name=state_description,json=stateDescription,proto3" json:"state_description,omitempty"`
}

func (x *EventInfo) Reset() {
	*x = EventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventInfo) ProtoMessage() {}

func (x *EventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventInfo.ProtoReflect.Descriptor instead.
func (*EventInfo) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{1}
}

func (x *EventInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *EventInfo) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *EventInfo) GetPriceDescription() string {
	if x != nil {
		return x.PriceDescription
	}
	return ""
}

func (x *EventInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EventInfo) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *EventInfo) GetBookingStartTime() int64 {
	if x != nil {
		return x.BookingStartTime
	}
	return 0
}

func (x *EventInfo) GetBookingEndTime() int64 {
	if x != nil {
		return x.BookingEndTime
	}
	return 0
}

func (x *EventInfo) GetHashtags() []string {
	if x != nil {
		return x.Hashtags
	}
	return nil
}

func (x *EventInfo) GetEventImageUrls() []string {
	if x != nil {
		return x.EventImageUrls
	}
	return nil
}

func (x *EventInfo) GetProgramsImageUrls() []string {
	if x != nil {
		return x.ProgramsImageUrls
	}
	return nil
}

func (x *EventInfo) GetIsHot() bool {
	if x != nil {
		return x.IsHot
	}
	return false
}

func (x *EventInfo) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *EventInfo) GetArtists() []string {
	if x != nil {
		return x.Artists
	}
	return nil
}

func (x *EventInfo) GetSponsors() []*EventSponsor {
	if x != nil {
		return x.Sponsors
	}
	return nil
}

func (x *EventInfo) GetState() enum.EventState {
	if x != nil {
		return x.State
	}
	return enum.EventState(0)
}

func (x *EventInfo) GetStateDescription() string {
	if x != nil {
		return x.StateDescription
	}
	return ""
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Code              string                  `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Duration          int64                   `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	PriceDescription  string                  `protobuf:"bytes,5,opt,name=price_description,json=priceDescription,proto3" json:"price_description,omitempty"`
	Description       string                  `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	BookingStartTime  int64                   `protobuf:"varint,7,opt,name=booking_start_time,json=bookingStartTime,proto3" json:"booking_start_time,omitempty"`
	BookingEndTime    int64                   `protobuf:"varint,8,opt,name=booking_end_time,json=bookingEndTime,proto3" json:"booking_end_time,omitempty"`
	Timezone          string                  `protobuf:"bytes,9,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Hashtags          []string                `protobuf:"bytes,10,rep,name=hashtags,proto3" json:"hashtags,omitempty"`
	EventImageUrls    []string                `protobuf:"bytes,11,rep,name=event_image_urls,json=eventImageUrls,proto3" json:"event_image_urls,omitempty"`
	ProgramsImageUrls []string                `protobuf:"bytes,12,rep,name=programs_image_urls,json=programsImageUrls,proto3" json:"programs_image_urls,omitempty"`
	IsHot             bool                    `protobuf:"varint,13,opt,name=is_hot,json=isHot,proto3" json:"is_hot,omitempty"`
	IsPublic          bool                    `protobuf:"varint,14,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	Artists           []*ArtistInfo           `protobuf:"bytes,15,rep,name=artists,proto3" json:"artists,omitempty"`
	Sponsors          []*EventSponsorFullInfo `protobuf:"bytes,16,rep,name=sponsors,proto3" json:"sponsors,omitempty"`
	CreatedAt         int64                   `protobuf:"varint,17,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         int64                   `protobuf:"varint,18,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedBy         string                  `protobuf:"bytes,19,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedBy         string                  `protobuf:"bytes,20,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Location          *EventLocationInfo      `protobuf:"bytes,21,opt,name=location,proto3" json:"location,omitempty"`
	Stats             *EventStats             `protobuf:"bytes,22,opt,name=stats,proto3" json:"stats,omitempty"`
	State             enum.EventState         `protobuf:"varint,23,opt,name=state,proto3,enum=event.enum.EventState" json:"state,omitempty"`
	StateDescription  string                  `protobuf:"bytes,24,opt,name=state_description,json=stateDescription,proto3" json:"state_description,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{2}
}

func (x *Event) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Event) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Event) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Event) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Event) GetPriceDescription() string {
	if x != nil {
		return x.PriceDescription
	}
	return ""
}

func (x *Event) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Event) GetBookingStartTime() int64 {
	if x != nil {
		return x.BookingStartTime
	}
	return 0
}

func (x *Event) GetBookingEndTime() int64 {
	if x != nil {
		return x.BookingEndTime
	}
	return 0
}

func (x *Event) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *Event) GetHashtags() []string {
	if x != nil {
		return x.Hashtags
	}
	return nil
}

func (x *Event) GetEventImageUrls() []string {
	if x != nil {
		return x.EventImageUrls
	}
	return nil
}

func (x *Event) GetProgramsImageUrls() []string {
	if x != nil {
		return x.ProgramsImageUrls
	}
	return nil
}

func (x *Event) GetIsHot() bool {
	if x != nil {
		return x.IsHot
	}
	return false
}

func (x *Event) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *Event) GetArtists() []*ArtistInfo {
	if x != nil {
		return x.Artists
	}
	return nil
}

func (x *Event) GetSponsors() []*EventSponsorFullInfo {
	if x != nil {
		return x.Sponsors
	}
	return nil
}

func (x *Event) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Event) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Event) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Event) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *Event) GetLocation() *EventLocationInfo {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Event) GetStats() *EventStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Event) GetState() enum.EventState {
	if x != nil {
		return x.State
	}
	return enum.EventState(0)
}

func (x *Event) GetStateDescription() string {
	if x != nil {
		return x.StateDescription
	}
	return ""
}

type EventListInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Code             string      `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Duration         int64       `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	PriceDescription string      `protobuf:"bytes,5,opt,name=price_description,json=priceDescription,proto3" json:"price_description,omitempty"`
	Description      string      `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Location         string      `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"` // location_id
	BookingStartTime int64       `protobuf:"varint,8,opt,name=booking_start_time,json=bookingStartTime,proto3" json:"booking_start_time,omitempty"`
	BookingEndTime   int64       `protobuf:"varint,9,opt,name=booking_end_time,json=bookingEndTime,proto3" json:"booking_end_time,omitempty"` // unuse yet
	Hashtags         []string    `protobuf:"bytes,10,rep,name=hashtags,proto3" json:"hashtags,omitempty"`
	EventImageUrls   []string    `protobuf:"bytes,11,rep,name=event_image_urls,json=eventImageUrls,proto3" json:"event_image_urls,omitempty"`
	IsHot            bool        `protobuf:"varint,12,opt,name=is_hot,json=isHot,proto3" json:"is_hot,omitempty"`
	IsPublic         bool        `protobuf:"varint,13,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	Stats            *EventStats `protobuf:"bytes,14,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *EventListInfo) Reset() {
	*x = EventListInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventListInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventListInfo) ProtoMessage() {}

func (x *EventListInfo) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventListInfo.ProtoReflect.Descriptor instead.
func (*EventListInfo) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{3}
}

func (x *EventListInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventListInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventListInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *EventListInfo) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *EventListInfo) GetPriceDescription() string {
	if x != nil {
		return x.PriceDescription
	}
	return ""
}

func (x *EventListInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EventListInfo) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *EventListInfo) GetBookingStartTime() int64 {
	if x != nil {
		return x.BookingStartTime
	}
	return 0
}

func (x *EventListInfo) GetBookingEndTime() int64 {
	if x != nil {
		return x.BookingEndTime
	}
	return 0
}

func (x *EventListInfo) GetHashtags() []string {
	if x != nil {
		return x.Hashtags
	}
	return nil
}

func (x *EventListInfo) GetEventImageUrls() []string {
	if x != nil {
		return x.EventImageUrls
	}
	return nil
}

func (x *EventListInfo) GetIsHot() bool {
	if x != nil {
		return x.IsHot
	}
	return false
}

func (x *EventListInfo) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *EventListInfo) GetStats() *EventStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type EventStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime          int64       `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime            int64       `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Status             EventStatus `protobuf:"varint,3,opt,name=status,proto3,enum=event.web_partnership.EventStatus" json:"status,omitempty"`
	IsBookingAvailable bool        `protobuf:"varint,4,opt,name=is_booking_available,json=isBookingAvailable,proto3" json:"is_booking_available,omitempty"`
	IsSoldOut          bool        `protobuf:"varint,5,opt,name=is_sold_out,json=isSoldOut,proto3" json:"is_sold_out,omitempty"`
	NumberOfSeat       int32       `protobuf:"varint,6,opt,name=number_of_seat,json=numberOfSeat,proto3" json:"number_of_seat,omitempty"`
}

func (x *EventStats) Reset() {
	*x = EventStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStats) ProtoMessage() {}

func (x *EventStats) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStats.ProtoReflect.Descriptor instead.
func (*EventStats) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{4}
}

func (x *EventStats) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *EventStats) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *EventStats) GetStatus() EventStatus {
	if x != nil {
		return x.Status
	}
	return EventStatus_EVENT_DISPLAY_STATUS_NONE
}

func (x *EventStats) GetIsBookingAvailable() bool {
	if x != nil {
		return x.IsBookingAvailable
	}
	return false
}

func (x *EventStats) GetIsSoldOut() bool {
	if x != nil {
		return x.IsSoldOut
	}
	return false
}

func (x *EventStats) GetNumberOfSeat() int32 {
	if x != nil {
		return x.NumberOfSeat
	}
	return 0
}

type EventSponsor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank      string `protobuf:"bytes,1,opt,name=rank,proto3" json:"rank,omitempty"`
	SponsorId string `protobuf:"bytes,2,opt,name=sponsor_id,json=sponsorId,proto3" json:"sponsor_id,omitempty"`
}

func (x *EventSponsor) Reset() {
	*x = EventSponsor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSponsor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSponsor) ProtoMessage() {}

func (x *EventSponsor) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSponsor.ProtoReflect.Descriptor instead.
func (*EventSponsor) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{5}
}

func (x *EventSponsor) GetRank() string {
	if x != nil {
		return x.Rank
	}
	return ""
}

func (x *EventSponsor) GetSponsorId() string {
	if x != nil {
		return x.SponsorId
	}
	return ""
}

type EventSponsorFullInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank    string       `protobuf:"bytes,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Sponsor *SponsorInfo `protobuf:"bytes,2,opt,name=sponsor,proto3" json:"sponsor,omitempty"`
}

func (x *EventSponsorFullInfo) Reset() {
	*x = EventSponsorFullInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSponsorFullInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSponsorFullInfo) ProtoMessage() {}

func (x *EventSponsorFullInfo) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSponsorFullInfo.ProtoReflect.Descriptor instead.
func (*EventSponsorFullInfo) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{6}
}

func (x *EventSponsorFullInfo) GetRank() string {
	if x != nil {
		return x.Rank
	}
	return ""
}

func (x *EventSponsorFullInfo) GetSponsor() *SponsorInfo {
	if x != nil {
		return x.Sponsor
	}
	return nil
}

type EventSeatMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MapPicture  string `protobuf:"bytes,3,opt,name=map_picture,json=mapPicture,proto3" json:"map_picture,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *EventSeatMap) Reset() {
	*x = EventSeatMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_event_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSeatMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSeatMap) ProtoMessage() {}

func (x *EventSeatMap) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_event_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSeatMap.ProtoReflect.Descriptor instead.
func (*EventSeatMap) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{7}
}

func (x *EventSeatMap) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventSeatMap) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventSeatMap) GetMapPicture() string {
	if x != nil {
		return x.MapPicture
	}
	return ""
}

func (x *EventSeatMap) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type EventScheduleBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId          string    `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Name             string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StartTime        int64     `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime          int64     `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"` // placeholder
	CheckInStartTime int64     `protobuf:"varint,5,opt,name=check_in_start_time,json=checkInStartTime,proto3" json:"check_in_start_time,omitempty"`
	CheckInEndTime   int64     `protobuf:"varint,6,opt,name=check_in_end_time,json=checkInEndTime,proto3" json:"check_in_end_time,omitempty"`
	IsPublic         bool      `protobuf:"varint,7,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	EventType        EventType `protobuf:"varint,8,opt,name=event_type,json=eventType,proto3,enum=event.web_partnership.EventType" json:"event_type,omitempty"`
	SeatMapsIds      []string  `protobuf:"bytes,9,rep,name=seat_maps_ids,json=seatMapsIds,proto3" json:"seat_maps_ids,omitempty"`
}

func (x *EventScheduleBasicInfo) Reset() {
	*x = EventScheduleBasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_event_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventScheduleBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventScheduleBasicInfo) ProtoMessage() {}

func (x *EventScheduleBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_event_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventScheduleBasicInfo.ProtoReflect.Descriptor instead.
func (*EventScheduleBasicInfo) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{8}
}

func (x *EventScheduleBasicInfo) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *EventScheduleBasicInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventScheduleBasicInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *EventScheduleBasicInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *EventScheduleBasicInfo) GetCheckInStartTime() int64 {
	if x != nil {
		return x.CheckInStartTime
	}
	return 0
}

func (x *EventScheduleBasicInfo) GetCheckInEndTime() int64 {
	if x != nil {
		return x.CheckInEndTime
	}
	return 0
}

func (x *EventScheduleBasicInfo) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *EventScheduleBasicInfo) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_EVENT_TYPE_INVALID
}

func (x *EventScheduleBasicInfo) GetSeatMapsIds() []string {
	if x != nil {
		return x.SeatMapsIds
	}
	return nil
}

type EventScheduleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EventId          string          `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Name             string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	StartTime        int64           `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime          int64           `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	CheckInStartTime int64           `protobuf:"varint,6,opt,name=check_in_start_time,json=checkInStartTime,proto3" json:"check_in_start_time,omitempty"`
	CheckInEndTime   int64           `protobuf:"varint,7,opt,name=check_in_end_time,json=checkInEndTime,proto3" json:"check_in_end_time,omitempty"`
	IsPublic         bool            `protobuf:"varint,8,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	EventType        EventType       `protobuf:"varint,9,opt,name=event_type,json=eventType,proto3,enum=event.web_partnership.EventType" json:"event_type,omitempty"`
	SeatMaps         []*EventSeatMap `protobuf:"bytes,10,rep,name=seat_maps,json=seatMaps,proto3" json:"seat_maps,omitempty"`
	IsSoldOut        bool            `protobuf:"varint,11,opt,name=is_sold_out,json=isSoldOut,proto3" json:"is_sold_out,omitempty"`
}

func (x *EventScheduleInfo) Reset() {
	*x = EventScheduleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_event_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventScheduleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventScheduleInfo) ProtoMessage() {}

func (x *EventScheduleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_event_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventScheduleInfo.ProtoReflect.Descriptor instead.
func (*EventScheduleInfo) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{9}
}

func (x *EventScheduleInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventScheduleInfo) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *EventScheduleInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventScheduleInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *EventScheduleInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *EventScheduleInfo) GetCheckInStartTime() int64 {
	if x != nil {
		return x.CheckInStartTime
	}
	return 0
}

func (x *EventScheduleInfo) GetCheckInEndTime() int64 {
	if x != nil {
		return x.CheckInEndTime
	}
	return 0
}

func (x *EventScheduleInfo) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *EventScheduleInfo) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_EVENT_TYPE_INVALID
}

func (x *EventScheduleInfo) GetSeatMaps() []*EventSeatMap {
	if x != nil {
		return x.SeatMaps
	}
	return nil
}

func (x *EventScheduleInfo) GetIsSoldOut() bool {
	if x != nil {
		return x.IsSoldOut
	}
	return false
}

type CreateEventReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *EventBasicInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *CreateEventReq) Reset() {
	*x = CreateEventReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_event_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventReq) ProtoMessage() {}

func (x *CreateEventReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_event_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventReq.ProtoReflect.Descriptor instead.
func (*CreateEventReq) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{10}
}

func (x *CreateEventReq) GetInfo() *EventBasicInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateEventReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Info *EventInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *UpdateEventReq) Reset() {
	*x = UpdateEventReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_event_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEventReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventReq) ProtoMessage() {}

func (x *UpdateEventReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_event_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventReq.ProtoReflect.Descriptor instead.
func (*UpdateEventReq) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateEventReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateEventReq) GetInfo() *EventInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type RetrieveEventReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RetrieveEventReq) Reset() {
	*x = RetrieveEventReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_event_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveEventReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveEventReq) ProtoMessage() {}

func (x *RetrieveEventReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_event_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveEventReq.ProtoReflect.Descriptor instead.
func (*RetrieveEventReq) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{12}
}

func (x *RetrieveEventReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteEventReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteEventReq) Reset() {
	*x = DeleteEventReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_event_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEventReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEventReq) ProtoMessage() {}

func (x *DeleteEventReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_event_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEventReq.ProtoReflect.Descriptor instead.
func (*DeleteEventReq) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteEventReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *EventScheduleBasicInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *CreateScheduleReq) Reset() {
	*x = CreateScheduleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_event_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScheduleReq) ProtoMessage() {}

func (x *CreateScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_event_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScheduleReq.ProtoReflect.Descriptor instead.
func (*CreateScheduleReq) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{14}
}

func (x *CreateScheduleReq) GetInfo() *EventScheduleBasicInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Info *EventScheduleBasicInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *UpdateScheduleReq) Reset() {
	*x = UpdateScheduleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_event_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheduleReq) ProtoMessage() {}

func (x *UpdateScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_event_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheduleReq.ProtoReflect.Descriptor instead.
func (*UpdateScheduleReq) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateScheduleReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateScheduleReq) GetInfo() *EventScheduleBasicInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteEventScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteEventScheduleReq) Reset() {
	*x = DeleteEventScheduleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_event_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEventScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEventScheduleReq) ProtoMessage() {}

func (x *DeleteEventScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_event_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEventScheduleReq.ProtoReflect.Descriptor instead.
func (*DeleteEventScheduleReq) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteEventScheduleReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListEventsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchText string              `protobuf:"bytes,1,opt,name=search_text,json=searchText,proto3" json:"search_text,omitempty"`
	Status     SearchEventStatus   `protobuf:"varint,2,opt,name=status,proto3,enum=event.web_partnership.SearchEventStatus" json:"status,omitempty"`
	IsPublic   string              `protobuf:"bytes,3,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	Pagination *base.PaginationReq `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
	OrderBy    []*base.OrderByItem `protobuf:"bytes,5,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	Statuses   []SearchEventStatus `protobuf:"varint,6,rep,packed,name=statuses,proto3,enum=event.web_partnership.SearchEventStatus" json:"statuses,omitempty"`
	OrStatuses []SearchEventStatus `protobuf:"varint,7,rep,packed,name=or_statuses,json=orStatuses,proto3,enum=event.web_partnership.SearchEventStatus" json:"or_statuses,omitempty"`
}

func (x *ListEventsReq) Reset() {
	*x = ListEventsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_event_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEventsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventsReq) ProtoMessage() {}

func (x *ListEventsReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_event_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventsReq.ProtoReflect.Descriptor instead.
func (*ListEventsReq) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{17}
}

func (x *ListEventsReq) GetSearchText() string {
	if x != nil {
		return x.SearchText
	}
	return ""
}

func (x *ListEventsReq) GetStatus() SearchEventStatus {
	if x != nil {
		return x.Status
	}
	return SearchEventStatus_EVENT_FILTER_STATUS_NONE
}

func (x *ListEventsReq) GetIsPublic() string {
	if x != nil {
		return x.IsPublic
	}
	return ""
}

func (x *ListEventsReq) GetPagination() *base.PaginationReq {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListEventsReq) GetOrderBy() []*base.OrderByItem {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *ListEventsReq) GetStatuses() []SearchEventStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *ListEventsReq) GetOrStatuses() []SearchEventStatus {
	if x != nil {
		return x.OrStatuses
	}
	return nil
}

type ListEventScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
}

func (x *ListEventScheduleReq) Reset() {
	*x = ListEventScheduleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_event_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEventScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventScheduleReq) ProtoMessage() {}

func (x *ListEventScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_event_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventScheduleReq.ProtoReflect.Descriptor instead.
func (*ListEventScheduleReq) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{18}
}

func (x *ListEventScheduleReq) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type CreateEventRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateEventRes) Reset() {
	*x = CreateEventRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_event_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventRes) ProtoMessage() {}

func (x *CreateEventRes) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_event_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventRes.ProtoReflect.Descriptor instead.
func (*CreateEventRes) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{19}
}

func (x *CreateEventRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RetrieveEventRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Event `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *RetrieveEventRes) Reset() {
	*x = RetrieveEventRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_event_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveEventRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveEventRes) ProtoMessage() {}

func (x *RetrieveEventRes) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_event_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveEventRes.ProtoReflect.Descriptor instead.
func (*RetrieveEventRes) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{20}
}

func (x *RetrieveEventRes) GetInfo() *Event {
	if x != nil {
		return x.Info
	}
	return nil
}

type ListEventsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items      []*EventListInfo    `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Pagination *base.PaginationRes `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListEventsRes) Reset() {
	*x = ListEventsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_event_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEventsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventsRes) ProtoMessage() {}

func (x *ListEventsRes) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_event_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventsRes.ProtoReflect.Descriptor instead.
func (*ListEventsRes) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{21}
}

func (x *ListEventsRes) GetItems() []*EventListInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListEventsRes) GetPagination() *base.PaginationRes {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type CreateEventScheduleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateEventScheduleRes) Reset() {
	*x = CreateEventScheduleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_event_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventScheduleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventScheduleRes) ProtoMessage() {}

func (x *CreateEventScheduleRes) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_event_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventScheduleRes.ProtoReflect.Descriptor instead.
func (*CreateEventScheduleRes) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{22}
}

func (x *CreateEventScheduleRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListEventScheduleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*EventScheduleInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListEventScheduleRes) Reset() {
	*x = ListEventScheduleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_web_partnership_event_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEventScheduleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventScheduleRes) ProtoMessage() {}

func (x *ListEventScheduleRes) ProtoReflect() protoreflect.Message {
	mi := &file_event_web_partnership_event_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventScheduleRes.ProtoReflect.Descriptor instead.
func (*ListEventScheduleRes) Descriptor() ([]byte, []int) {
	return file_event_web_partnership_event_proto_rawDescGZIP(), []int{23}
}

func (x *ListEventScheduleRes) GetItems() []*EventScheduleInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_event_web_partnership_event_proto protoreflect.FileDescriptor

var file_event_web_partnership_event_proto_rawDesc = []byte{
	0x0a, 0x21, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x15, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x1a, 0x0f, 0x62, 0x61, 0x73, 0x65,
	0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2f, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x77, 0x65, 0x62,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2f, 0x61, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2f, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x2f, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3,
	0x01, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf2, 0x04, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73,
	0x68, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73,
	0x68, 0x74, 0x61, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x68, 0x6f, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x73, 0x48, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x12, 0x3f, 0x0a,
	0x08, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x6f,
	0x6e, 0x73, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x07, 0x0a, 0x05, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61,
	0x73, 0x68, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61,
	0x73, 0x68, 0x74, 0x61, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x73,
	0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x68, 0x6f, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x69, 0x73, 0x48, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x12, 0x3b, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65,
	0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x47, 0x0a, 0x08, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xd9, 0x03, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73,
	0x68, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73,
	0x68, 0x74, 0x61, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x68, 0x6f, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x73, 0x48, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0xfa, 0x01, 0x0a,
	0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65,
	0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x69, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x6f,
	0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x6f, 0x6c, 0x64,
	0x4f, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66,
	0x5f, 0x73, 0x65, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x65, 0x61, 0x74, 0x22, 0x41, 0x0a, 0x0c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x14,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x46, 0x75, 0x6c, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x3c, 0x0a, 0x07, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x2e, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x22, 0x75, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x70, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x61, 0x70, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdd, 0x02,
	0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x3f, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x61,
	0x74, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x49, 0x64, 0x73, 0x22, 0xa6, 0x03,
	0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x12, 0x3f, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x70,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x08, 0x73, 0x65,
	0x61, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x6f, 0x6c,
	0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53,
	0x6f, 0x6c, 0x64, 0x4f, 0x75, 0x74, 0x22, 0x4b, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77,
	0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0x56, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x22, 0x0a, 0x10, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x20, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x56, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x66, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x22, 0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x83, 0x03, 0x0a, 0x0d,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x40,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x33, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x12, 0x44, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x22, 0x31, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x20, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x44, 0x0a, 0x10, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x80, 0x01, 0x0a,
	0x0d, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x3a,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x28, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x56, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x12, 0x3e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x2a, 0x52, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x4c,
	0x49, 0x4e, 0x45, 0x10, 0x02, 0x2a, 0x89, 0x03, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x41, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x4f, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4e, 0x5f, 0x53, 0x41,
	0x4c, 0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x5f, 0x53, 0x41, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x4f, 0x4c, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x50, 0x43, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x1d, 0x0a,
	0x19, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x48, 0x4f, 0x54, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10,
	0x0a, 0x2a, 0xa6, 0x02, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c,
	0x41, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x29, 0x0a, 0x25, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x41, 0x4c, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x4f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4e, 0x5f, 0x53, 0x41, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x22, 0x0a,
	0x1e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x41, 0x4c, 0x45, 0x10,
	0x03, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c,
	0x41, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x4f, 0x4c, 0x44, 0x5f, 0x4f,
	0x55, 0x54, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x43,
	0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x47, 0x4f, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x07, 0x32, 0xbf, 0x05, 0x0a, 0x0c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x25, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0b,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x0b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x61,
	0x0a, 0x0d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x27, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x12, 0x58, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x24, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65,
	0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x28, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x2d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x0b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6e, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x2b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x2b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x42, 0x50, 0x5a, 0x4e,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x62, 0x63, 0x61, 0x73, 0x69, 0x61, 0x2e, 0x69, 0x6f,
	0x2f, 0x74, 0x68, 0x75, 0x79, 0x6e, 0x67, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x77,
	0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x3b, 0x77,
	0x65, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_event_web_partnership_event_proto_rawDescOnce sync.Once
	file_event_web_partnership_event_proto_rawDescData = file_event_web_partnership_event_proto_rawDesc
)

func file_event_web_partnership_event_proto_rawDescGZIP() []byte {
	file_event_web_partnership_event_proto_rawDescOnce.Do(func() {
		file_event_web_partnership_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_event_web_partnership_event_proto_rawDescData)
	})
	return file_event_web_partnership_event_proto_rawDescData
}

var file_event_web_partnership_event_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_event_web_partnership_event_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_event_web_partnership_event_proto_goTypes = []interface{}{
	(EventType)(0),                 // 0: event.web_partnership.EventType
	(SearchEventStatus)(0),         // 1: event.web_partnership.SearchEventStatus
	(EventStatus)(0),               // 2: event.web_partnership.EventStatus
	(*EventBasicInfo)(nil),         // 3: event.web_partnership.EventBasicInfo
	(*EventInfo)(nil),              // 4: event.web_partnership.EventInfo
	(*Event)(nil),                  // 5: event.web_partnership.Event
	(*EventListInfo)(nil),          // 6: event.web_partnership.EventListInfo
	(*EventStats)(nil),             // 7: event.web_partnership.EventStats
	(*EventSponsor)(nil),           // 8: event.web_partnership.EventSponsor
	(*EventSponsorFullInfo)(nil),   // 9: event.web_partnership.EventSponsorFullInfo
	(*EventSeatMap)(nil),           // 10: event.web_partnership.EventSeatMap
	(*EventScheduleBasicInfo)(nil), // 11: event.web_partnership.EventScheduleBasicInfo
	(*EventScheduleInfo)(nil),      // 12: event.web_partnership.EventScheduleInfo
	(*CreateEventReq)(nil),         // 13: event.web_partnership.CreateEventReq
	(*UpdateEventReq)(nil),         // 14: event.web_partnership.UpdateEventReq
	(*RetrieveEventReq)(nil),       // 15: event.web_partnership.RetrieveEventReq
	(*DeleteEventReq)(nil),         // 16: event.web_partnership.DeleteEventReq
	(*CreateScheduleReq)(nil),      // 17: event.web_partnership.CreateScheduleReq
	(*UpdateScheduleReq)(nil),      // 18: event.web_partnership.UpdateScheduleReq
	(*DeleteEventScheduleReq)(nil), // 19: event.web_partnership.DeleteEventScheduleReq
	(*ListEventsReq)(nil),          // 20: event.web_partnership.ListEventsReq
	(*ListEventScheduleReq)(nil),   // 21: event.web_partnership.ListEventScheduleReq
	(*CreateEventRes)(nil),         // 22: event.web_partnership.CreateEventRes
	(*RetrieveEventRes)(nil),       // 23: event.web_partnership.RetrieveEventRes
	(*ListEventsRes)(nil),          // 24: event.web_partnership.ListEventsRes
	(*CreateEventScheduleRes)(nil), // 25: event.web_partnership.CreateEventScheduleRes
	(*ListEventScheduleRes)(nil),   // 26: event.web_partnership.ListEventScheduleRes
	(enum.EventState)(0),           // 27: event.enum.EventState
	(*ArtistInfo)(nil),             // 28: event.web_partnership.ArtistInfo
	(*EventLocationInfo)(nil),      // 29: event.web_partnership.EventLocationInfo
	(*SponsorInfo)(nil),            // 30: event.web_partnership.SponsorInfo
	(*base.PaginationReq)(nil),     // 31: base.PaginationReq
	(*base.OrderByItem)(nil),       // 32: base.OrderByItem
	(*base.PaginationRes)(nil),     // 33: base.PaginationRes
	(*base.Empty)(nil),             // 34: base.Empty
}
var file_event_web_partnership_event_proto_depIdxs = []int32{
	8,  // 0: event.web_partnership.EventInfo.sponsors:type_name -> event.web_partnership.EventSponsor
	27, // 1: event.web_partnership.EventInfo.state:type_name -> event.enum.EventState
	28, // 2: event.web_partnership.Event.artists:type_name -> event.web_partnership.ArtistInfo
	9,  // 3: event.web_partnership.Event.sponsors:type_name -> event.web_partnership.EventSponsorFullInfo
	29, // 4: event.web_partnership.Event.location:type_name -> event.web_partnership.EventLocationInfo
	7,  // 5: event.web_partnership.Event.stats:type_name -> event.web_partnership.EventStats
	27, // 6: event.web_partnership.Event.state:type_name -> event.enum.EventState
	7,  // 7: event.web_partnership.EventListInfo.stats:type_name -> event.web_partnership.EventStats
	2,  // 8: event.web_partnership.EventStats.status:type_name -> event.web_partnership.EventStatus
	30, // 9: event.web_partnership.EventSponsorFullInfo.sponsor:type_name -> event.web_partnership.SponsorInfo
	0,  // 10: event.web_partnership.EventScheduleBasicInfo.event_type:type_name -> event.web_partnership.EventType
	0,  // 11: event.web_partnership.EventScheduleInfo.event_type:type_name -> event.web_partnership.EventType
	10, // 12: event.web_partnership.EventScheduleInfo.seat_maps:type_name -> event.web_partnership.EventSeatMap
	3,  // 13: event.web_partnership.CreateEventReq.info:type_name -> event.web_partnership.EventBasicInfo
	4,  // 14: event.web_partnership.UpdateEventReq.info:type_name -> event.web_partnership.EventInfo
	11, // 15: event.web_partnership.CreateScheduleReq.info:type_name -> event.web_partnership.EventScheduleBasicInfo
	11, // 16: event.web_partnership.UpdateScheduleReq.info:type_name -> event.web_partnership.EventScheduleBasicInfo
	1,  // 17: event.web_partnership.ListEventsReq.status:type_name -> event.web_partnership.SearchEventStatus
	31, // 18: event.web_partnership.ListEventsReq.pagination:type_name -> base.PaginationReq
	32, // 19: event.web_partnership.ListEventsReq.order_by:type_name -> base.OrderByItem
	1,  // 20: event.web_partnership.ListEventsReq.statuses:type_name -> event.web_partnership.SearchEventStatus
	1,  // 21: event.web_partnership.ListEventsReq.or_statuses:type_name -> event.web_partnership.SearchEventStatus
	5,  // 22: event.web_partnership.RetrieveEventRes.info:type_name -> event.web_partnership.Event
	6,  // 23: event.web_partnership.ListEventsRes.items:type_name -> event.web_partnership.EventListInfo
	33, // 24: event.web_partnership.ListEventsRes.pagination:type_name -> base.PaginationRes
	12, // 25: event.web_partnership.ListEventScheduleRes.items:type_name -> event.web_partnership.EventScheduleInfo
	13, // 26: event.web_partnership.EventService.CreateEvent:input_type -> event.web_partnership.CreateEventReq
	14, // 27: event.web_partnership.EventService.UpdateEvent:input_type -> event.web_partnership.UpdateEventReq
	16, // 28: event.web_partnership.EventService.DeleteEvent:input_type -> event.web_partnership.DeleteEventReq
	15, // 29: event.web_partnership.EventService.RetrieveEvent:input_type -> event.web_partnership.RetrieveEventReq
	20, // 30: event.web_partnership.EventService.ListEvents:input_type -> event.web_partnership.ListEventsReq
	18, // 31: event.web_partnership.EventService.UpsertEventSchedule:input_type -> event.web_partnership.UpdateScheduleReq
	19, // 32: event.web_partnership.EventService.DeleteEventSchedule:input_type -> event.web_partnership.DeleteEventScheduleReq
	21, // 33: event.web_partnership.EventService.ListEventSchedules:input_type -> event.web_partnership.ListEventScheduleReq
	22, // 34: event.web_partnership.EventService.CreateEvent:output_type -> event.web_partnership.CreateEventRes
	34, // 35: event.web_partnership.EventService.UpdateEvent:output_type -> base.Empty
	34, // 36: event.web_partnership.EventService.DeleteEvent:output_type -> base.Empty
	23, // 37: event.web_partnership.EventService.RetrieveEvent:output_type -> event.web_partnership.RetrieveEventRes
	24, // 38: event.web_partnership.EventService.ListEvents:output_type -> event.web_partnership.ListEventsRes
	34, // 39: event.web_partnership.EventService.UpsertEventSchedule:output_type -> base.Empty
	34, // 40: event.web_partnership.EventService.DeleteEventSchedule:output_type -> base.Empty
	26, // 41: event.web_partnership.EventService.ListEventSchedules:output_type -> event.web_partnership.ListEventScheduleRes
	34, // [34:42] is the sub-list for method output_type
	26, // [26:34] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_event_web_partnership_event_proto_init() }
func file_event_web_partnership_event_proto_init() {
	if File_event_web_partnership_event_proto != nil {
		return
	}
	file_event_web_partnership_event_location_proto_init()
	file_event_web_partnership_artist_proto_init()
	file_event_web_partnership_sponsor_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_event_web_partnership_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventBasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventListInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSponsor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_event_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSponsorFullInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_event_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSeatMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_event_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventScheduleBasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_event_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventScheduleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_event_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_event_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEventReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_event_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveEventReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_event_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEventReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_event_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateScheduleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_event_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateScheduleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_event_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEventScheduleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_event_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEventsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_event_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEventScheduleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_event_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_event_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveEventRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_event_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEventsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_event_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventScheduleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_web_partnership_event_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEventScheduleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_event_web_partnership_event_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_event_web_partnership_event_proto_goTypes,
		DependencyIndexes: file_event_web_partnership_event_proto_depIdxs,
		EnumInfos:         file_event_web_partnership_event_proto_enumTypes,
		MessageInfos:      file_event_web_partnership_event_proto_msgTypes,
	}.Build()
	File_event_web_partnership_event_proto = out.File
	file_event_web_partnership_event_proto_rawDesc = nil
	file_event_web_partnership_event_proto_goTypes = nil
	file_event_web_partnership_event_proto_depIdxs = nil
}
