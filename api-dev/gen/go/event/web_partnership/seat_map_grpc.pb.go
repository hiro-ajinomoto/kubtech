// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: event/web_partnership/seat_map.proto

package web_partnership

import (
	context "context"
	base "gitlab.bcasia.io/thuynga/apps/api/gen/go/base"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SeatMapServiceClient is the client API for SeatMapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeatMapServiceClient interface {
	CreateSeatMap(ctx context.Context, in *CreateSeatMapReq, opts ...grpc.CallOption) (*CreateSeatMapRes, error)
	UpdateSeatMap(ctx context.Context, in *UpdateSeatMapReq, opts ...grpc.CallOption) (*base.Empty, error)
	DeleteSeatMap(ctx context.Context, in *DeleteSeatMapReq, opts ...grpc.CallOption) (*base.Empty, error)
	ListSeatMap(ctx context.Context, in *ListSeatMapReq, opts ...grpc.CallOption) (*ListSeatMapRes, error)
	RetrieveSeatMap(ctx context.Context, in *RetrieveSeatMapReq, opts ...grpc.CallOption) (*RetrieveSeatMapRes, error)
	CreateSeatBlock(ctx context.Context, in *CreateSeatBlockReq, opts ...grpc.CallOption) (*CreateSeatBlockRes, error)
	ListSeatBlock(ctx context.Context, in *ListSeatBlockReq, opts ...grpc.CallOption) (*ListSeatBlockRes, error)
	RetrieveSeatBlock(ctx context.Context, in *RetrieveSeatBlockReq, opts ...grpc.CallOption) (*RetrieveSeatBlockRes, error)
	UpdateSeatBlock(ctx context.Context, in *UpdateSeatBlockReq, opts ...grpc.CallOption) (*base.Empty, error)
	DeleteSeatBlock(ctx context.Context, in *DeleteSeatBlockReq, opts ...grpc.CallOption) (*base.Empty, error)
	UpsertDecoration(ctx context.Context, in *UpsertDecorationReq, opts ...grpc.CallOption) (*base.Empty, error)
	ListDecoration(ctx context.Context, in *ListDecorationReq, opts ...grpc.CallOption) (*ListSeatBlockRes, error)
	UpdateSeatStatus(ctx context.Context, in *UpdateSeatStatusReq, opts ...grpc.CallOption) (*UpdateSeatStatusRes, error)
}

type seatMapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeatMapServiceClient(cc grpc.ClientConnInterface) SeatMapServiceClient {
	return &seatMapServiceClient{cc}
}

func (c *seatMapServiceClient) CreateSeatMap(ctx context.Context, in *CreateSeatMapReq, opts ...grpc.CallOption) (*CreateSeatMapRes, error) {
	out := new(CreateSeatMapRes)
	err := c.cc.Invoke(ctx, "/event.web_partnership.SeatMapService/CreateSeatMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatMapServiceClient) UpdateSeatMap(ctx context.Context, in *UpdateSeatMapReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/event.web_partnership.SeatMapService/UpdateSeatMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatMapServiceClient) DeleteSeatMap(ctx context.Context, in *DeleteSeatMapReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/event.web_partnership.SeatMapService/DeleteSeatMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatMapServiceClient) ListSeatMap(ctx context.Context, in *ListSeatMapReq, opts ...grpc.CallOption) (*ListSeatMapRes, error) {
	out := new(ListSeatMapRes)
	err := c.cc.Invoke(ctx, "/event.web_partnership.SeatMapService/ListSeatMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatMapServiceClient) RetrieveSeatMap(ctx context.Context, in *RetrieveSeatMapReq, opts ...grpc.CallOption) (*RetrieveSeatMapRes, error) {
	out := new(RetrieveSeatMapRes)
	err := c.cc.Invoke(ctx, "/event.web_partnership.SeatMapService/RetrieveSeatMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatMapServiceClient) CreateSeatBlock(ctx context.Context, in *CreateSeatBlockReq, opts ...grpc.CallOption) (*CreateSeatBlockRes, error) {
	out := new(CreateSeatBlockRes)
	err := c.cc.Invoke(ctx, "/event.web_partnership.SeatMapService/CreateSeatBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatMapServiceClient) ListSeatBlock(ctx context.Context, in *ListSeatBlockReq, opts ...grpc.CallOption) (*ListSeatBlockRes, error) {
	out := new(ListSeatBlockRes)
	err := c.cc.Invoke(ctx, "/event.web_partnership.SeatMapService/ListSeatBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatMapServiceClient) RetrieveSeatBlock(ctx context.Context, in *RetrieveSeatBlockReq, opts ...grpc.CallOption) (*RetrieveSeatBlockRes, error) {
	out := new(RetrieveSeatBlockRes)
	err := c.cc.Invoke(ctx, "/event.web_partnership.SeatMapService/RetrieveSeatBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatMapServiceClient) UpdateSeatBlock(ctx context.Context, in *UpdateSeatBlockReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/event.web_partnership.SeatMapService/UpdateSeatBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatMapServiceClient) DeleteSeatBlock(ctx context.Context, in *DeleteSeatBlockReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/event.web_partnership.SeatMapService/DeleteSeatBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatMapServiceClient) UpsertDecoration(ctx context.Context, in *UpsertDecorationReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/event.web_partnership.SeatMapService/UpsertDecoration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatMapServiceClient) ListDecoration(ctx context.Context, in *ListDecorationReq, opts ...grpc.CallOption) (*ListSeatBlockRes, error) {
	out := new(ListSeatBlockRes)
	err := c.cc.Invoke(ctx, "/event.web_partnership.SeatMapService/ListDecoration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatMapServiceClient) UpdateSeatStatus(ctx context.Context, in *UpdateSeatStatusReq, opts ...grpc.CallOption) (*UpdateSeatStatusRes, error) {
	out := new(UpdateSeatStatusRes)
	err := c.cc.Invoke(ctx, "/event.web_partnership.SeatMapService/UpdateSeatStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeatMapServiceServer is the server API for SeatMapService service.
// All implementations must embed UnimplementedSeatMapServiceServer
// for forward compatibility
type SeatMapServiceServer interface {
	CreateSeatMap(context.Context, *CreateSeatMapReq) (*CreateSeatMapRes, error)
	UpdateSeatMap(context.Context, *UpdateSeatMapReq) (*base.Empty, error)
	DeleteSeatMap(context.Context, *DeleteSeatMapReq) (*base.Empty, error)
	ListSeatMap(context.Context, *ListSeatMapReq) (*ListSeatMapRes, error)
	RetrieveSeatMap(context.Context, *RetrieveSeatMapReq) (*RetrieveSeatMapRes, error)
	CreateSeatBlock(context.Context, *CreateSeatBlockReq) (*CreateSeatBlockRes, error)
	ListSeatBlock(context.Context, *ListSeatBlockReq) (*ListSeatBlockRes, error)
	RetrieveSeatBlock(context.Context, *RetrieveSeatBlockReq) (*RetrieveSeatBlockRes, error)
	UpdateSeatBlock(context.Context, *UpdateSeatBlockReq) (*base.Empty, error)
	DeleteSeatBlock(context.Context, *DeleteSeatBlockReq) (*base.Empty, error)
	UpsertDecoration(context.Context, *UpsertDecorationReq) (*base.Empty, error)
	ListDecoration(context.Context, *ListDecorationReq) (*ListSeatBlockRes, error)
	UpdateSeatStatus(context.Context, *UpdateSeatStatusReq) (*UpdateSeatStatusRes, error)
	mustEmbedUnimplementedSeatMapServiceServer()
}

// UnimplementedSeatMapServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSeatMapServiceServer struct {
}

func (UnimplementedSeatMapServiceServer) CreateSeatMap(context.Context, *CreateSeatMapReq) (*CreateSeatMapRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeatMap not implemented")
}
func (UnimplementedSeatMapServiceServer) UpdateSeatMap(context.Context, *UpdateSeatMapReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeatMap not implemented")
}
func (UnimplementedSeatMapServiceServer) DeleteSeatMap(context.Context, *DeleteSeatMapReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeatMap not implemented")
}
func (UnimplementedSeatMapServiceServer) ListSeatMap(context.Context, *ListSeatMapReq) (*ListSeatMapRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSeatMap not implemented")
}
func (UnimplementedSeatMapServiceServer) RetrieveSeatMap(context.Context, *RetrieveSeatMapReq) (*RetrieveSeatMapRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSeatMap not implemented")
}
func (UnimplementedSeatMapServiceServer) CreateSeatBlock(context.Context, *CreateSeatBlockReq) (*CreateSeatBlockRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeatBlock not implemented")
}
func (UnimplementedSeatMapServiceServer) ListSeatBlock(context.Context, *ListSeatBlockReq) (*ListSeatBlockRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSeatBlock not implemented")
}
func (UnimplementedSeatMapServiceServer) RetrieveSeatBlock(context.Context, *RetrieveSeatBlockReq) (*RetrieveSeatBlockRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSeatBlock not implemented")
}
func (UnimplementedSeatMapServiceServer) UpdateSeatBlock(context.Context, *UpdateSeatBlockReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeatBlock not implemented")
}
func (UnimplementedSeatMapServiceServer) DeleteSeatBlock(context.Context, *DeleteSeatBlockReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeatBlock not implemented")
}
func (UnimplementedSeatMapServiceServer) UpsertDecoration(context.Context, *UpsertDecorationReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertDecoration not implemented")
}
func (UnimplementedSeatMapServiceServer) ListDecoration(context.Context, *ListDecorationReq) (*ListSeatBlockRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDecoration not implemented")
}
func (UnimplementedSeatMapServiceServer) UpdateSeatStatus(context.Context, *UpdateSeatStatusReq) (*UpdateSeatStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeatStatus not implemented")
}
func (UnimplementedSeatMapServiceServer) mustEmbedUnimplementedSeatMapServiceServer() {}

// UnsafeSeatMapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeatMapServiceServer will
// result in compilation errors.
type UnsafeSeatMapServiceServer interface {
	mustEmbedUnimplementedSeatMapServiceServer()
}

func RegisterSeatMapServiceServer(s grpc.ServiceRegistrar, srv SeatMapServiceServer) {
	s.RegisterService(&SeatMapService_ServiceDesc, srv)
}

func _SeatMapService_CreateSeatMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeatMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatMapServiceServer).CreateSeatMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.SeatMapService/CreateSeatMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatMapServiceServer).CreateSeatMap(ctx, req.(*CreateSeatMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatMapService_UpdateSeatMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeatMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatMapServiceServer).UpdateSeatMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.SeatMapService/UpdateSeatMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatMapServiceServer).UpdateSeatMap(ctx, req.(*UpdateSeatMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatMapService_DeleteSeatMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeatMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatMapServiceServer).DeleteSeatMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.SeatMapService/DeleteSeatMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatMapServiceServer).DeleteSeatMap(ctx, req.(*DeleteSeatMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatMapService_ListSeatMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSeatMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatMapServiceServer).ListSeatMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.SeatMapService/ListSeatMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatMapServiceServer).ListSeatMap(ctx, req.(*ListSeatMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatMapService_RetrieveSeatMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveSeatMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatMapServiceServer).RetrieveSeatMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.SeatMapService/RetrieveSeatMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatMapServiceServer).RetrieveSeatMap(ctx, req.(*RetrieveSeatMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatMapService_CreateSeatBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeatBlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatMapServiceServer).CreateSeatBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.SeatMapService/CreateSeatBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatMapServiceServer).CreateSeatBlock(ctx, req.(*CreateSeatBlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatMapService_ListSeatBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSeatBlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatMapServiceServer).ListSeatBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.SeatMapService/ListSeatBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatMapServiceServer).ListSeatBlock(ctx, req.(*ListSeatBlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatMapService_RetrieveSeatBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveSeatBlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatMapServiceServer).RetrieveSeatBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.SeatMapService/RetrieveSeatBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatMapServiceServer).RetrieveSeatBlock(ctx, req.(*RetrieveSeatBlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatMapService_UpdateSeatBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeatBlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatMapServiceServer).UpdateSeatBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.SeatMapService/UpdateSeatBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatMapServiceServer).UpdateSeatBlock(ctx, req.(*UpdateSeatBlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatMapService_DeleteSeatBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeatBlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatMapServiceServer).DeleteSeatBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.SeatMapService/DeleteSeatBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatMapServiceServer).DeleteSeatBlock(ctx, req.(*DeleteSeatBlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatMapService_UpsertDecoration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertDecorationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatMapServiceServer).UpsertDecoration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.SeatMapService/UpsertDecoration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatMapServiceServer).UpsertDecoration(ctx, req.(*UpsertDecorationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatMapService_ListDecoration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDecorationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatMapServiceServer).ListDecoration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.SeatMapService/ListDecoration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatMapServiceServer).ListDecoration(ctx, req.(*ListDecorationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatMapService_UpdateSeatStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeatStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatMapServiceServer).UpdateSeatStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.SeatMapService/UpdateSeatStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatMapServiceServer).UpdateSeatStatus(ctx, req.(*UpdateSeatStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SeatMapService_ServiceDesc is the grpc.ServiceDesc for SeatMapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeatMapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.web_partnership.SeatMapService",
	HandlerType: (*SeatMapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSeatMap",
			Handler:    _SeatMapService_CreateSeatMap_Handler,
		},
		{
			MethodName: "UpdateSeatMap",
			Handler:    _SeatMapService_UpdateSeatMap_Handler,
		},
		{
			MethodName: "DeleteSeatMap",
			Handler:    _SeatMapService_DeleteSeatMap_Handler,
		},
		{
			MethodName: "ListSeatMap",
			Handler:    _SeatMapService_ListSeatMap_Handler,
		},
		{
			MethodName: "RetrieveSeatMap",
			Handler:    _SeatMapService_RetrieveSeatMap_Handler,
		},
		{
			MethodName: "CreateSeatBlock",
			Handler:    _SeatMapService_CreateSeatBlock_Handler,
		},
		{
			MethodName: "ListSeatBlock",
			Handler:    _SeatMapService_ListSeatBlock_Handler,
		},
		{
			MethodName: "RetrieveSeatBlock",
			Handler:    _SeatMapService_RetrieveSeatBlock_Handler,
		},
		{
			MethodName: "UpdateSeatBlock",
			Handler:    _SeatMapService_UpdateSeatBlock_Handler,
		},
		{
			MethodName: "DeleteSeatBlock",
			Handler:    _SeatMapService_DeleteSeatBlock_Handler,
		},
		{
			MethodName: "UpsertDecoration",
			Handler:    _SeatMapService_UpsertDecoration_Handler,
		},
		{
			MethodName: "ListDecoration",
			Handler:    _SeatMapService_ListDecoration_Handler,
		},
		{
			MethodName: "UpdateSeatStatus",
			Handler:    _SeatMapService_UpdateSeatStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event/web_partnership/seat_map.proto",
}
