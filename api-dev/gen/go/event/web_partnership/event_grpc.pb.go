// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: event/web_partnership/event.proto

package web_partnership

import (
	context "context"
	base "gitlab.bcasia.io/thuynga/apps/api/gen/go/base"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventServiceClient interface {
	CreateEvent(ctx context.Context, in *CreateEventReq, opts ...grpc.CallOption) (*CreateEventRes, error)
	UpdateEvent(ctx context.Context, in *UpdateEventReq, opts ...grpc.CallOption) (*base.Empty, error)
	DeleteEvent(ctx context.Context, in *DeleteEventReq, opts ...grpc.CallOption) (*base.Empty, error)
	RetrieveEvent(ctx context.Context, in *RetrieveEventReq, opts ...grpc.CallOption) (*RetrieveEventRes, error)
	ListEvents(ctx context.Context, in *ListEventsReq, opts ...grpc.CallOption) (*ListEventsRes, error)
	// rpc CreateEventSchedule(CreateScheduleReq) returns (CreateEventScheduleRes);
	// rpc UpdateEventSchedule(UpdateScheduleReq) returns (base.Empty);
	UpsertEventSchedule(ctx context.Context, in *UpdateScheduleReq, opts ...grpc.CallOption) (*base.Empty, error)
	DeleteEventSchedule(ctx context.Context, in *DeleteEventScheduleReq, opts ...grpc.CallOption) (*base.Empty, error)
	ListEventSchedules(ctx context.Context, in *ListEventScheduleReq, opts ...grpc.CallOption) (*ListEventScheduleRes, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) CreateEvent(ctx context.Context, in *CreateEventReq, opts ...grpc.CallOption) (*CreateEventRes, error) {
	out := new(CreateEventRes)
	err := c.cc.Invoke(ctx, "/event.web_partnership.EventService/CreateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) UpdateEvent(ctx context.Context, in *UpdateEventReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/event.web_partnership.EventService/UpdateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) DeleteEvent(ctx context.Context, in *DeleteEventReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/event.web_partnership.EventService/DeleteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) RetrieveEvent(ctx context.Context, in *RetrieveEventReq, opts ...grpc.CallOption) (*RetrieveEventRes, error) {
	out := new(RetrieveEventRes)
	err := c.cc.Invoke(ctx, "/event.web_partnership.EventService/RetrieveEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) ListEvents(ctx context.Context, in *ListEventsReq, opts ...grpc.CallOption) (*ListEventsRes, error) {
	out := new(ListEventsRes)
	err := c.cc.Invoke(ctx, "/event.web_partnership.EventService/ListEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) UpsertEventSchedule(ctx context.Context, in *UpdateScheduleReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/event.web_partnership.EventService/UpsertEventSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) DeleteEventSchedule(ctx context.Context, in *DeleteEventScheduleReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/event.web_partnership.EventService/DeleteEventSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) ListEventSchedules(ctx context.Context, in *ListEventScheduleReq, opts ...grpc.CallOption) (*ListEventScheduleRes, error) {
	out := new(ListEventScheduleRes)
	err := c.cc.Invoke(ctx, "/event.web_partnership.EventService/ListEventSchedules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServiceServer is the server API for EventService service.
// All implementations must embed UnimplementedEventServiceServer
// for forward compatibility
type EventServiceServer interface {
	CreateEvent(context.Context, *CreateEventReq) (*CreateEventRes, error)
	UpdateEvent(context.Context, *UpdateEventReq) (*base.Empty, error)
	DeleteEvent(context.Context, *DeleteEventReq) (*base.Empty, error)
	RetrieveEvent(context.Context, *RetrieveEventReq) (*RetrieveEventRes, error)
	ListEvents(context.Context, *ListEventsReq) (*ListEventsRes, error)
	// rpc CreateEventSchedule(CreateScheduleReq) returns (CreateEventScheduleRes);
	// rpc UpdateEventSchedule(UpdateScheduleReq) returns (base.Empty);
	UpsertEventSchedule(context.Context, *UpdateScheduleReq) (*base.Empty, error)
	DeleteEventSchedule(context.Context, *DeleteEventScheduleReq) (*base.Empty, error)
	ListEventSchedules(context.Context, *ListEventScheduleReq) (*ListEventScheduleRes, error)
	mustEmbedUnimplementedEventServiceServer()
}

// UnimplementedEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct {
}

func (UnimplementedEventServiceServer) CreateEvent(context.Context, *CreateEventReq) (*CreateEventRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedEventServiceServer) UpdateEvent(context.Context, *UpdateEventReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (UnimplementedEventServiceServer) DeleteEvent(context.Context, *DeleteEventReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (UnimplementedEventServiceServer) RetrieveEvent(context.Context, *RetrieveEventReq) (*RetrieveEventRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveEvent not implemented")
}
func (UnimplementedEventServiceServer) ListEvents(context.Context, *ListEventsReq) (*ListEventsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedEventServiceServer) UpsertEventSchedule(context.Context, *UpdateScheduleReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertEventSchedule not implemented")
}
func (UnimplementedEventServiceServer) DeleteEventSchedule(context.Context, *DeleteEventScheduleReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEventSchedule not implemented")
}
func (UnimplementedEventServiceServer) ListEventSchedules(context.Context, *ListEventScheduleReq) (*ListEventScheduleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventSchedules not implemented")
}
func (UnimplementedEventServiceServer) mustEmbedUnimplementedEventServiceServer() {}

// UnsafeEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServiceServer will
// result in compilation errors.
type UnsafeEventServiceServer interface {
	mustEmbedUnimplementedEventServiceServer()
}

func RegisterEventServiceServer(s grpc.ServiceRegistrar, srv EventServiceServer) {
	s.RegisterService(&EventService_ServiceDesc, srv)
}

func _EventService_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.EventService/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).CreateEvent(ctx, req.(*CreateEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.EventService/UpdateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).UpdateEvent(ctx, req.(*UpdateEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.EventService/DeleteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).DeleteEvent(ctx, req.(*DeleteEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_RetrieveEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).RetrieveEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.EventService/RetrieveEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).RetrieveEvent(ctx, req.(*RetrieveEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.EventService/ListEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).ListEvents(ctx, req.(*ListEventsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_UpsertEventSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).UpsertEventSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.EventService/UpsertEventSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).UpsertEventSchedule(ctx, req.(*UpdateScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_DeleteEventSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).DeleteEventSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.EventService/DeleteEventSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).DeleteEventSchedule(ctx, req.(*DeleteEventScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_ListEventSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).ListEventSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.web_partnership.EventService/ListEventSchedules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).ListEventSchedules(ctx, req.(*ListEventScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EventService_ServiceDesc is the grpc.ServiceDesc for EventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.web_partnership.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvent",
			Handler:    _EventService_CreateEvent_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _EventService_UpdateEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _EventService_DeleteEvent_Handler,
		},
		{
			MethodName: "RetrieveEvent",
			Handler:    _EventService_RetrieveEvent_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _EventService_ListEvents_Handler,
		},
		{
			MethodName: "UpsertEventSchedule",
			Handler:    _EventService_UpsertEventSchedule_Handler,
		},
		{
			MethodName: "DeleteEventSchedule",
			Handler:    _EventService_DeleteEventSchedule_Handler,
		},
		{
			MethodName: "ListEventSchedules",
			Handler:    _EventService_ListEventSchedules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event/web_partnership/event.proto",
}
