// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: ticket/mobile_inspector/inspector.proto

package mobile_inspector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InspectorServiceClient is the client API for InspectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InspectorServiceClient interface {
	CheckIn(ctx context.Context, in *CheckInReq, opts ...grpc.CallOption) (*Empty, error)
	MappingUserInfoToTicketAndCheckIn(ctx context.Context, in *MappingUserInfoToTicketAndCheckInReq, opts ...grpc.CallOption) (*Empty, error)
	ListCheckInLogs(ctx context.Context, in *ListCheckInLogsReq, opts ...grpc.CallOption) (*ListCheckInLogsRes, error)
	MappingUserInfoToTicket(ctx context.Context, in *MappingUserInfoToTicketReq, opts ...grpc.CallOption) (*Empty, error)
	GetTicketByCode(ctx context.Context, in *GetTicketByCodeReq, opts ...grpc.CallOption) (*GetTicketByCodeRes, error)
	GetTicketByPhone(ctx context.Context, in *GetTicketByPhoneReq, opts ...grpc.CallOption) (*GetTicketByPhoneRes, error)
	GetTicketByEmail(ctx context.Context, in *GetTicketByEmailReq, opts ...grpc.CallOption) (*GetTicketByEmailRes, error)
	AssignCheckinEvent(ctx context.Context, in *AssignCheckinEventReq, opts ...grpc.CallOption) (*Empty, error)
	GetCurrentCheckinEvent(ctx context.Context, in *GetCurrentCheckinEventReq, opts ...grpc.CallOption) (*GetCurrentCheckinEventRes, error)
	GetUpcomingCheckinEvent(ctx context.Context, in *GetUpcomingCheckinEventReq, opts ...grpc.CallOption) (*GetUpcomingCheckinEventRes, error)
}

type inspectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInspectorServiceClient(cc grpc.ClientConnInterface) InspectorServiceClient {
	return &inspectorServiceClient{cc}
}

func (c *inspectorServiceClient) CheckIn(ctx context.Context, in *CheckInReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ticket.mobile_inspector.InspectorService/CheckIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inspectorServiceClient) MappingUserInfoToTicketAndCheckIn(ctx context.Context, in *MappingUserInfoToTicketAndCheckInReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ticket.mobile_inspector.InspectorService/MappingUserInfoToTicketAndCheckIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inspectorServiceClient) ListCheckInLogs(ctx context.Context, in *ListCheckInLogsReq, opts ...grpc.CallOption) (*ListCheckInLogsRes, error) {
	out := new(ListCheckInLogsRes)
	err := c.cc.Invoke(ctx, "/ticket.mobile_inspector.InspectorService/ListCheckInLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inspectorServiceClient) MappingUserInfoToTicket(ctx context.Context, in *MappingUserInfoToTicketReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ticket.mobile_inspector.InspectorService/MappingUserInfoToTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inspectorServiceClient) GetTicketByCode(ctx context.Context, in *GetTicketByCodeReq, opts ...grpc.CallOption) (*GetTicketByCodeRes, error) {
	out := new(GetTicketByCodeRes)
	err := c.cc.Invoke(ctx, "/ticket.mobile_inspector.InspectorService/GetTicketByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inspectorServiceClient) GetTicketByPhone(ctx context.Context, in *GetTicketByPhoneReq, opts ...grpc.CallOption) (*GetTicketByPhoneRes, error) {
	out := new(GetTicketByPhoneRes)
	err := c.cc.Invoke(ctx, "/ticket.mobile_inspector.InspectorService/GetTicketByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inspectorServiceClient) GetTicketByEmail(ctx context.Context, in *GetTicketByEmailReq, opts ...grpc.CallOption) (*GetTicketByEmailRes, error) {
	out := new(GetTicketByEmailRes)
	err := c.cc.Invoke(ctx, "/ticket.mobile_inspector.InspectorService/GetTicketByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inspectorServiceClient) AssignCheckinEvent(ctx context.Context, in *AssignCheckinEventReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ticket.mobile_inspector.InspectorService/AssignCheckinEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inspectorServiceClient) GetCurrentCheckinEvent(ctx context.Context, in *GetCurrentCheckinEventReq, opts ...grpc.CallOption) (*GetCurrentCheckinEventRes, error) {
	out := new(GetCurrentCheckinEventRes)
	err := c.cc.Invoke(ctx, "/ticket.mobile_inspector.InspectorService/GetCurrentCheckinEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inspectorServiceClient) GetUpcomingCheckinEvent(ctx context.Context, in *GetUpcomingCheckinEventReq, opts ...grpc.CallOption) (*GetUpcomingCheckinEventRes, error) {
	out := new(GetUpcomingCheckinEventRes)
	err := c.cc.Invoke(ctx, "/ticket.mobile_inspector.InspectorService/GetUpcomingCheckinEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InspectorServiceServer is the server API for InspectorService service.
// All implementations must embed UnimplementedInspectorServiceServer
// for forward compatibility
type InspectorServiceServer interface {
	CheckIn(context.Context, *CheckInReq) (*Empty, error)
	MappingUserInfoToTicketAndCheckIn(context.Context, *MappingUserInfoToTicketAndCheckInReq) (*Empty, error)
	ListCheckInLogs(context.Context, *ListCheckInLogsReq) (*ListCheckInLogsRes, error)
	MappingUserInfoToTicket(context.Context, *MappingUserInfoToTicketReq) (*Empty, error)
	GetTicketByCode(context.Context, *GetTicketByCodeReq) (*GetTicketByCodeRes, error)
	GetTicketByPhone(context.Context, *GetTicketByPhoneReq) (*GetTicketByPhoneRes, error)
	GetTicketByEmail(context.Context, *GetTicketByEmailReq) (*GetTicketByEmailRes, error)
	AssignCheckinEvent(context.Context, *AssignCheckinEventReq) (*Empty, error)
	GetCurrentCheckinEvent(context.Context, *GetCurrentCheckinEventReq) (*GetCurrentCheckinEventRes, error)
	GetUpcomingCheckinEvent(context.Context, *GetUpcomingCheckinEventReq) (*GetUpcomingCheckinEventRes, error)
	mustEmbedUnimplementedInspectorServiceServer()
}

// UnimplementedInspectorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInspectorServiceServer struct {
}

func (UnimplementedInspectorServiceServer) CheckIn(context.Context, *CheckInReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIn not implemented")
}
func (UnimplementedInspectorServiceServer) MappingUserInfoToTicketAndCheckIn(context.Context, *MappingUserInfoToTicketAndCheckInReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MappingUserInfoToTicketAndCheckIn not implemented")
}
func (UnimplementedInspectorServiceServer) ListCheckInLogs(context.Context, *ListCheckInLogsReq) (*ListCheckInLogsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCheckInLogs not implemented")
}
func (UnimplementedInspectorServiceServer) MappingUserInfoToTicket(context.Context, *MappingUserInfoToTicketReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MappingUserInfoToTicket not implemented")
}
func (UnimplementedInspectorServiceServer) GetTicketByCode(context.Context, *GetTicketByCodeReq) (*GetTicketByCodeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketByCode not implemented")
}
func (UnimplementedInspectorServiceServer) GetTicketByPhone(context.Context, *GetTicketByPhoneReq) (*GetTicketByPhoneRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketByPhone not implemented")
}
func (UnimplementedInspectorServiceServer) GetTicketByEmail(context.Context, *GetTicketByEmailReq) (*GetTicketByEmailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketByEmail not implemented")
}
func (UnimplementedInspectorServiceServer) AssignCheckinEvent(context.Context, *AssignCheckinEventReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignCheckinEvent not implemented")
}
func (UnimplementedInspectorServiceServer) GetCurrentCheckinEvent(context.Context, *GetCurrentCheckinEventReq) (*GetCurrentCheckinEventRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentCheckinEvent not implemented")
}
func (UnimplementedInspectorServiceServer) GetUpcomingCheckinEvent(context.Context, *GetUpcomingCheckinEventReq) (*GetUpcomingCheckinEventRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpcomingCheckinEvent not implemented")
}
func (UnimplementedInspectorServiceServer) mustEmbedUnimplementedInspectorServiceServer() {}

// UnsafeInspectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InspectorServiceServer will
// result in compilation errors.
type UnsafeInspectorServiceServer interface {
	mustEmbedUnimplementedInspectorServiceServer()
}

func RegisterInspectorServiceServer(s grpc.ServiceRegistrar, srv InspectorServiceServer) {
	s.RegisterService(&InspectorService_ServiceDesc, srv)
}

func _InspectorService_CheckIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectorServiceServer).CheckIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile_inspector.InspectorService/CheckIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectorServiceServer).CheckIn(ctx, req.(*CheckInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InspectorService_MappingUserInfoToTicketAndCheckIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MappingUserInfoToTicketAndCheckInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectorServiceServer).MappingUserInfoToTicketAndCheckIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile_inspector.InspectorService/MappingUserInfoToTicketAndCheckIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectorServiceServer).MappingUserInfoToTicketAndCheckIn(ctx, req.(*MappingUserInfoToTicketAndCheckInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InspectorService_ListCheckInLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCheckInLogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectorServiceServer).ListCheckInLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile_inspector.InspectorService/ListCheckInLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectorServiceServer).ListCheckInLogs(ctx, req.(*ListCheckInLogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InspectorService_MappingUserInfoToTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MappingUserInfoToTicketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectorServiceServer).MappingUserInfoToTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile_inspector.InspectorService/MappingUserInfoToTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectorServiceServer).MappingUserInfoToTicket(ctx, req.(*MappingUserInfoToTicketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InspectorService_GetTicketByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketByCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectorServiceServer).GetTicketByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile_inspector.InspectorService/GetTicketByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectorServiceServer).GetTicketByCode(ctx, req.(*GetTicketByCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InspectorService_GetTicketByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectorServiceServer).GetTicketByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile_inspector.InspectorService/GetTicketByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectorServiceServer).GetTicketByPhone(ctx, req.(*GetTicketByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InspectorService_GetTicketByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketByEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectorServiceServer).GetTicketByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile_inspector.InspectorService/GetTicketByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectorServiceServer).GetTicketByEmail(ctx, req.(*GetTicketByEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InspectorService_AssignCheckinEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignCheckinEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectorServiceServer).AssignCheckinEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile_inspector.InspectorService/AssignCheckinEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectorServiceServer).AssignCheckinEvent(ctx, req.(*AssignCheckinEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InspectorService_GetCurrentCheckinEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentCheckinEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectorServiceServer).GetCurrentCheckinEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile_inspector.InspectorService/GetCurrentCheckinEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectorServiceServer).GetCurrentCheckinEvent(ctx, req.(*GetCurrentCheckinEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InspectorService_GetUpcomingCheckinEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpcomingCheckinEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectorServiceServer).GetUpcomingCheckinEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile_inspector.InspectorService/GetUpcomingCheckinEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectorServiceServer).GetUpcomingCheckinEvent(ctx, req.(*GetUpcomingCheckinEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

// InspectorService_ServiceDesc is the grpc.ServiceDesc for InspectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InspectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticket.mobile_inspector.InspectorService",
	HandlerType: (*InspectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckIn",
			Handler:    _InspectorService_CheckIn_Handler,
		},
		{
			MethodName: "MappingUserInfoToTicketAndCheckIn",
			Handler:    _InspectorService_MappingUserInfoToTicketAndCheckIn_Handler,
		},
		{
			MethodName: "ListCheckInLogs",
			Handler:    _InspectorService_ListCheckInLogs_Handler,
		},
		{
			MethodName: "MappingUserInfoToTicket",
			Handler:    _InspectorService_MappingUserInfoToTicket_Handler,
		},
		{
			MethodName: "GetTicketByCode",
			Handler:    _InspectorService_GetTicketByCode_Handler,
		},
		{
			MethodName: "GetTicketByPhone",
			Handler:    _InspectorService_GetTicketByPhone_Handler,
		},
		{
			MethodName: "GetTicketByEmail",
			Handler:    _InspectorService_GetTicketByEmail_Handler,
		},
		{
			MethodName: "AssignCheckinEvent",
			Handler:    _InspectorService_AssignCheckinEvent_Handler,
		},
		{
			MethodName: "GetCurrentCheckinEvent",
			Handler:    _InspectorService_GetCurrentCheckinEvent_Handler,
		},
		{
			MethodName: "GetUpcomingCheckinEvent",
			Handler:    _InspectorService_GetUpcomingCheckinEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticket/mobile_inspector/inspector.proto",
}
