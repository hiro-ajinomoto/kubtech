// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: ticket/web_inspector/inspector.proto

package web_inspector

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InspectorTicketStatus int32

const (
	InspectorTicketStatus_INSPECTOR_TICKET_STATUS_INVALID    InspectorTicketStatus = 0
	InspectorTicketStatus_INSPECTOR_TICKET_STATUS_NOT_USED   InspectorTicketStatus = 1
	InspectorTicketStatus_INSPECTOR_TICKET_STATUS_CHECKED_IN InspectorTicketStatus = 2
)

// Enum value maps for InspectorTicketStatus.
var (
	InspectorTicketStatus_name = map[int32]string{
		0: "INSPECTOR_TICKET_STATUS_INVALID",
		1: "INSPECTOR_TICKET_STATUS_NOT_USED",
		2: "INSPECTOR_TICKET_STATUS_CHECKED_IN",
	}
	InspectorTicketStatus_value = map[string]int32{
		"INSPECTOR_TICKET_STATUS_INVALID":    0,
		"INSPECTOR_TICKET_STATUS_NOT_USED":   1,
		"INSPECTOR_TICKET_STATUS_CHECKED_IN": 2,
	}
)

func (x InspectorTicketStatus) Enum() *InspectorTicketStatus {
	p := new(InspectorTicketStatus)
	*p = x
	return p
}

func (x InspectorTicketStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InspectorTicketStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ticket_web_inspector_inspector_proto_enumTypes[0].Descriptor()
}

func (InspectorTicketStatus) Type() protoreflect.EnumType {
	return &file_ticket_web_inspector_inspector_proto_enumTypes[0]
}

func (x InspectorTicketStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InspectorTicketStatus.Descriptor instead.
func (InspectorTicketStatus) EnumDescriptor() ([]byte, []int) {
	return file_ticket_web_inspector_inspector_proto_rawDescGZIP(), []int{0}
}

type InspectorTicketType int32

const (
	InspectorTicketType_INSPECTOR_TICKET_TYPE_BUY      InspectorTicketType = 0
	InspectorTicketType_INSPECTOR_TICKET_TYPE_RELEASE  InspectorTicketType = 1
	InspectorTicketType_INSPECTOR_TICKET_TYPE_TRANSFER InspectorTicketType = 2
)

// Enum value maps for InspectorTicketType.
var (
	InspectorTicketType_name = map[int32]string{
		0: "INSPECTOR_TICKET_TYPE_BUY",
		1: "INSPECTOR_TICKET_TYPE_RELEASE",
		2: "INSPECTOR_TICKET_TYPE_TRANSFER",
	}
	InspectorTicketType_value = map[string]int32{
		"INSPECTOR_TICKET_TYPE_BUY":      0,
		"INSPECTOR_TICKET_TYPE_RELEASE":  1,
		"INSPECTOR_TICKET_TYPE_TRANSFER": 2,
	}
)

func (x InspectorTicketType) Enum() *InspectorTicketType {
	p := new(InspectorTicketType)
	*p = x
	return p
}

func (x InspectorTicketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InspectorTicketType) Descriptor() protoreflect.EnumDescriptor {
	return file_ticket_web_inspector_inspector_proto_enumTypes[1].Descriptor()
}

func (InspectorTicketType) Type() protoreflect.EnumType {
	return &file_ticket_web_inspector_inspector_proto_enumTypes[1]
}

func (x InspectorTicketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InspectorTicketType.Descriptor instead.
func (InspectorTicketType) EnumDescriptor() ([]byte, []int) {
	return file_ticket_web_inspector_inspector_proto_rawDescGZIP(), []int{1}
}

type InspectorTicketInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt                 int64                     `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                 int64                     `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	OrderId                   string                    `protobuf:"bytes,4,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	EventInfo                 *InspectorTicketEventInfo `protobuf:"bytes,5,opt,name=event_info,json=eventInfo,proto3" json:"event_info,omitempty"`
	SeatInfo                  *InspectorTicketSeatInfo  `protobuf:"bytes,6,opt,name=seat_info,json=seatInfo,proto3" json:"seat_info,omitempty"`
	Status                    InspectorTicketStatus     `protobuf:"varint,7,opt,name=status,proto3,enum=ticket.web_inspector.InspectorTicketStatus" json:"status,omitempty"`
	SecretCode                string                    `protobuf:"bytes,8,opt,name=secret_code,json=secretCode,proto3" json:"secret_code,omitempty"`                   // random
	VerificationCode          string                    `protobuf:"bytes,9,opt,name=verification_code,json=verificationCode,proto3" json:"verification_code,omitempty"` // 6 sá»‘
	UserInfo                  *InspectorTicketUserInfo  `protobuf:"bytes,10,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	IsEnabledVerificationCode bool                      `protobuf:"varint,11,opt,name=is_enabled_verification_code,json=isEnabledVerificationCode,proto3" json:"is_enabled_verification_code,omitempty"`
	PartnershipId             string                    `protobuf:"bytes,12,opt,name=partnership_id,json=partnershipId,proto3" json:"partnership_id,omitempty"`
	TicketType                InspectorTicketType       `protobuf:"varint,13,opt,name=ticket_type,json=ticketType,proto3,enum=ticket.web_inspector.InspectorTicketType" json:"ticket_type,omitempty"`
	OwnerId                   string                    `protobuf:"bytes,14,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Note                      string                    `protobuf:"bytes,15,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *InspectorTicketInfo) Reset() {
	*x = InspectorTicketInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_web_inspector_inspector_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectorTicketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectorTicketInfo) ProtoMessage() {}

func (x *InspectorTicketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_web_inspector_inspector_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectorTicketInfo.ProtoReflect.Descriptor instead.
func (*InspectorTicketInfo) Descriptor() ([]byte, []int) {
	return file_ticket_web_inspector_inspector_proto_rawDescGZIP(), []int{0}
}

func (x *InspectorTicketInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InspectorTicketInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *InspectorTicketInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *InspectorTicketInfo) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *InspectorTicketInfo) GetEventInfo() *InspectorTicketEventInfo {
	if x != nil {
		return x.EventInfo
	}
	return nil
}

func (x *InspectorTicketInfo) GetSeatInfo() *InspectorTicketSeatInfo {
	if x != nil {
		return x.SeatInfo
	}
	return nil
}

func (x *InspectorTicketInfo) GetStatus() InspectorTicketStatus {
	if x != nil {
		return x.Status
	}
	return InspectorTicketStatus_INSPECTOR_TICKET_STATUS_INVALID
}

func (x *InspectorTicketInfo) GetSecretCode() string {
	if x != nil {
		return x.SecretCode
	}
	return ""
}

func (x *InspectorTicketInfo) GetVerificationCode() string {
	if x != nil {
		return x.VerificationCode
	}
	return ""
}

func (x *InspectorTicketInfo) GetUserInfo() *InspectorTicketUserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *InspectorTicketInfo) GetIsEnabledVerificationCode() bool {
	if x != nil {
		return x.IsEnabledVerificationCode
	}
	return false
}

func (x *InspectorTicketInfo) GetPartnershipId() string {
	if x != nil {
		return x.PartnershipId
	}
	return ""
}

func (x *InspectorTicketInfo) GetTicketType() InspectorTicketType {
	if x != nil {
		return x.TicketType
	}
	return InspectorTicketType_INSPECTOR_TICKET_TYPE_BUY
}

func (x *InspectorTicketInfo) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *InspectorTicketInfo) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type InspectorTicketPriceSimpleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Icon     string                       `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	Price    float64                      `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	Currency *InspectorTicketCurrencyInfo `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *InspectorTicketPriceSimpleInfo) Reset() {
	*x = InspectorTicketPriceSimpleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_web_inspector_inspector_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectorTicketPriceSimpleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectorTicketPriceSimpleInfo) ProtoMessage() {}

func (x *InspectorTicketPriceSimpleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_web_inspector_inspector_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectorTicketPriceSimpleInfo.ProtoReflect.Descriptor instead.
func (*InspectorTicketPriceSimpleInfo) Descriptor() ([]byte, []int) {
	return file_ticket_web_inspector_inspector_proto_rawDescGZIP(), []int{1}
}

func (x *InspectorTicketPriceSimpleInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InspectorTicketPriceSimpleInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InspectorTicketPriceSimpleInfo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *InspectorTicketPriceSimpleInfo) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *InspectorTicketPriceSimpleInfo) GetCurrency() *InspectorTicketCurrencyInfo {
	if x != nil {
		return x.Currency
	}
	return nil
}

type InspectorTicketCurrencyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Icon string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *InspectorTicketCurrencyInfo) Reset() {
	*x = InspectorTicketCurrencyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_web_inspector_inspector_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectorTicketCurrencyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectorTicketCurrencyInfo) ProtoMessage() {}

func (x *InspectorTicketCurrencyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_web_inspector_inspector_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectorTicketCurrencyInfo.ProtoReflect.Descriptor instead.
func (*InspectorTicketCurrencyInfo) Descriptor() ([]byte, []int) {
	return file_ticket_web_inspector_inspector_proto_rawDescGZIP(), []int{2}
}

func (x *InspectorTicketCurrencyInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InspectorTicketCurrencyInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *InspectorTicketCurrencyInfo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type InspectorTicketEventLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Ward     string `protobuf:"bytes,3,opt,name=ward,proto3" json:"ward,omitempty"`
	District string `protobuf:"bytes,4,opt,name=district,proto3" json:"district,omitempty"`
	City     string `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`
	Country  string `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *InspectorTicketEventLocation) Reset() {
	*x = InspectorTicketEventLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_web_inspector_inspector_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectorTicketEventLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectorTicketEventLocation) ProtoMessage() {}

func (x *InspectorTicketEventLocation) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_web_inspector_inspector_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectorTicketEventLocation.ProtoReflect.Descriptor instead.
func (*InspectorTicketEventLocation) Descriptor() ([]byte, []int) {
	return file_ticket_web_inspector_inspector_proto_rawDescGZIP(), []int{3}
}

func (x *InspectorTicketEventLocation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InspectorTicketEventLocation) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *InspectorTicketEventLocation) GetWard() string {
	if x != nil {
		return x.Ward
	}
	return ""
}

func (x *InspectorTicketEventLocation) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *InspectorTicketEventLocation) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *InspectorTicketEventLocation) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type InspectorTicketEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId          string                        `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Name             string                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StartTime        int64                         `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime          int64                         `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	CheckinStartTime int64                         `protobuf:"varint,5,opt,name=checkin_start_time,json=checkinStartTime,proto3" json:"checkin_start_time,omitempty"`
	CheckinEndTime   int64                         `protobuf:"varint,6,opt,name=checkin_end_time,json=checkinEndTime,proto3" json:"checkin_end_time,omitempty"`
	Location         *InspectorTicketEventLocation `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`
	Timezone         string                        `protobuf:"bytes,8,opt,name=timezone,proto3" json:"timezone,omitempty"`
}

func (x *InspectorTicketEventInfo) Reset() {
	*x = InspectorTicketEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_web_inspector_inspector_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectorTicketEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectorTicketEventInfo) ProtoMessage() {}

func (x *InspectorTicketEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_web_inspector_inspector_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectorTicketEventInfo.ProtoReflect.Descriptor instead.
func (*InspectorTicketEventInfo) Descriptor() ([]byte, []int) {
	return file_ticket_web_inspector_inspector_proto_rawDescGZIP(), []int{4}
}

func (x *InspectorTicketEventInfo) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *InspectorTicketEventInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InspectorTicketEventInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *InspectorTicketEventInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *InspectorTicketEventInfo) GetCheckinStartTime() int64 {
	if x != nil {
		return x.CheckinStartTime
	}
	return 0
}

func (x *InspectorTicketEventInfo) GetCheckinEndTime() int64 {
	if x != nil {
		return x.CheckinEndTime
	}
	return 0
}

func (x *InspectorTicketEventInfo) GetLocation() *InspectorTicketEventLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *InspectorTicketEventInfo) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

type InspectorTicketCheckinEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId            string                        `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Name               string                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StartTime          int64                         `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime            int64                         `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	CheckinStartTime   int64                         `protobuf:"varint,5,opt,name=checkin_start_time,json=checkinStartTime,proto3" json:"checkin_start_time,omitempty"`
	CheckinEndTime     int64                         `protobuf:"varint,6,opt,name=checkin_end_time,json=checkinEndTime,proto3" json:"checkin_end_time,omitempty"`
	Location           *InspectorTicketEventLocation `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`
	Timezone           string                        `protobuf:"bytes,8,opt,name=timezone,proto3" json:"timezone,omitempty"`
	PartnershipId      string                        `protobuf:"bytes,9,opt,name=partnership_id,json=partnershipId,proto3" json:"partnership_id,omitempty"`
	GeneralSeatMapId   string                        `protobuf:"bytes,10,opt,name=general_seat_map_id,json=generalSeatMapId,proto3" json:"general_seat_map_id,omitempty"`
	Medias             []*Media                      `protobuf:"bytes,11,rep,name=medias,proto3" json:"medias,omitempty"`
	SeatMapUrl         string                        `protobuf:"bytes,12,opt,name=seat_map_url,json=seatMapUrl,proto3" json:"seat_map_url,omitempty"`
	InstructionUrl     string                        `protobuf:"bytes,13,opt,name=instruction_url,json=instructionUrl,proto3" json:"instruction_url,omitempty"`
	SafetyFormUrl      string                        `protobuf:"bytes,14,opt,name=safety_form_url,json=safetyFormUrl,proto3" json:"safety_form_url,omitempty"`
	IsLive             bool                          `protobuf:"varint,15,opt,name=is_live,json=isLive,proto3" json:"is_live,omitempty"` // caculate in server
	GeneralSeatMapName string                        `protobuf:"bytes,16,opt,name=general_seat_map_name,json=generalSeatMapName,proto3" json:"general_seat_map_name,omitempty"`
}

func (x *InspectorTicketCheckinEventInfo) Reset() {
	*x = InspectorTicketCheckinEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_web_inspector_inspector_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectorTicketCheckinEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectorTicketCheckinEventInfo) ProtoMessage() {}

func (x *InspectorTicketCheckinEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_web_inspector_inspector_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectorTicketCheckinEventInfo.ProtoReflect.Descriptor instead.
func (*InspectorTicketCheckinEventInfo) Descriptor() ([]byte, []int) {
	return file_ticket_web_inspector_inspector_proto_rawDescGZIP(), []int{5}
}

func (x *InspectorTicketCheckinEventInfo) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *InspectorTicketCheckinEventInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InspectorTicketCheckinEventInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *InspectorTicketCheckinEventInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *InspectorTicketCheckinEventInfo) GetCheckinStartTime() int64 {
	if x != nil {
		return x.CheckinStartTime
	}
	return 0
}

func (x *InspectorTicketCheckinEventInfo) GetCheckinEndTime() int64 {
	if x != nil {
		return x.CheckinEndTime
	}
	return 0
}

func (x *InspectorTicketCheckinEventInfo) GetLocation() *InspectorTicketEventLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *InspectorTicketCheckinEventInfo) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *InspectorTicketCheckinEventInfo) GetPartnershipId() string {
	if x != nil {
		return x.PartnershipId
	}
	return ""
}

func (x *InspectorTicketCheckinEventInfo) GetGeneralSeatMapId() string {
	if x != nil {
		return x.GeneralSeatMapId
	}
	return ""
}

func (x *InspectorTicketCheckinEventInfo) GetMedias() []*Media {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *InspectorTicketCheckinEventInfo) GetSeatMapUrl() string {
	if x != nil {
		return x.SeatMapUrl
	}
	return ""
}

func (x *InspectorTicketCheckinEventInfo) GetInstructionUrl() string {
	if x != nil {
		return x.InstructionUrl
	}
	return ""
}

func (x *InspectorTicketCheckinEventInfo) GetSafetyFormUrl() string {
	if x != nil {
		return x.SafetyFormUrl
	}
	return ""
}

func (x *InspectorTicketCheckinEventInfo) GetIsLive() bool {
	if x != nil {
		return x.IsLive
	}
	return false
}

func (x *InspectorTicketCheckinEventInfo) GetGeneralSeatMapName() string {
	if x != nil {
		return x.GeneralSeatMapName
	}
	return ""
}

type InspectorTicketUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserFullName       string `protobuf:"bytes,1,opt,name=user_full_name,json=userFullName,proto3" json:"user_full_name,omitempty"`
	UserPhone          string `protobuf:"bytes,2,opt,name=user_phone,json=userPhone,proto3" json:"user_phone,omitempty"`
	UserEmail          string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	UserAddress        string `protobuf:"bytes,4,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	UserImage          string `protobuf:"bytes,5,opt,name=user_image,json=userImage,proto3" json:"user_image,omitempty"`
	UserPhoneCode      string `protobuf:"bytes,6,opt,name=user_phone_code,json=userPhoneCode,proto3" json:"user_phone_code,omitempty"`
	IsDeclaredCovid    bool   `protobuf:"varint,7,opt,name=is_declared_covid,json=isDeclaredCovid,proto3" json:"is_declared_covid,omitempty"`
	UserInspectorImage string `protobuf:"bytes,8,opt,name=user_inspector_image,json=userInspectorImage,proto3" json:"user_inspector_image,omitempty"`
}

func (x *InspectorTicketUserInfo) Reset() {
	*x = InspectorTicketUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_web_inspector_inspector_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectorTicketUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectorTicketUserInfo) ProtoMessage() {}

func (x *InspectorTicketUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_web_inspector_inspector_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectorTicketUserInfo.ProtoReflect.Descriptor instead.
func (*InspectorTicketUserInfo) Descriptor() ([]byte, []int) {
	return file_ticket_web_inspector_inspector_proto_rawDescGZIP(), []int{6}
}

func (x *InspectorTicketUserInfo) GetUserFullName() string {
	if x != nil {
		return x.UserFullName
	}
	return ""
}

func (x *InspectorTicketUserInfo) GetUserPhone() string {
	if x != nil {
		return x.UserPhone
	}
	return ""
}

func (x *InspectorTicketUserInfo) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *InspectorTicketUserInfo) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *InspectorTicketUserInfo) GetUserImage() string {
	if x != nil {
		return x.UserImage
	}
	return ""
}

func (x *InspectorTicketUserInfo) GetUserPhoneCode() string {
	if x != nil {
		return x.UserPhoneCode
	}
	return ""
}

func (x *InspectorTicketUserInfo) GetIsDeclaredCovid() bool {
	if x != nil {
		return x.IsDeclaredCovid
	}
	return false
}

func (x *InspectorTicketUserInfo) GetUserInspectorImage() string {
	if x != nil {
		return x.UserInspectorImage
	}
	return ""
}

type InspectorTicketSeatInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string                          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Price              *InspectorTicketPriceSimpleInfo `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	PriceBlockId       string                          `protobuf:"bytes,4,opt,name=price_block_id,json=priceBlockId,proto3" json:"price_block_id,omitempty"`
	PriceBlockName     string                          `protobuf:"bytes,5,opt,name=price_block_name,json=priceBlockName,proto3" json:"price_block_name,omitempty"`
	GeneralSeatMapId   string                          `protobuf:"bytes,6,opt,name=general_seat_map_id,json=generalSeatMapId,proto3" json:"general_seat_map_id,omitempty"`
	GeneralSeatMapName string                          `protobuf:"bytes,7,opt,name=general_seat_map_name,json=generalSeatMapName,proto3" json:"general_seat_map_name,omitempty"`
	SeatTypeName       string                          `protobuf:"bytes,8,opt,name=seat_type_name,json=seatTypeName,proto3" json:"seat_type_name,omitempty"`
}

func (x *InspectorTicketSeatInfo) Reset() {
	*x = InspectorTicketSeatInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_web_inspector_inspector_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectorTicketSeatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectorTicketSeatInfo) ProtoMessage() {}

func (x *InspectorTicketSeatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_web_inspector_inspector_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectorTicketSeatInfo.ProtoReflect.Descriptor instead.
func (*InspectorTicketSeatInfo) Descriptor() ([]byte, []int) {
	return file_ticket_web_inspector_inspector_proto_rawDescGZIP(), []int{7}
}

func (x *InspectorTicketSeatInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InspectorTicketSeatInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InspectorTicketSeatInfo) GetPrice() *InspectorTicketPriceSimpleInfo {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *InspectorTicketSeatInfo) GetPriceBlockId() string {
	if x != nil {
		return x.PriceBlockId
	}
	return ""
}

func (x *InspectorTicketSeatInfo) GetPriceBlockName() string {
	if x != nil {
		return x.PriceBlockName
	}
	return ""
}

func (x *InspectorTicketSeatInfo) GetGeneralSeatMapId() string {
	if x != nil {
		return x.GeneralSeatMapId
	}
	return ""
}

func (x *InspectorTicketSeatInfo) GetGeneralSeatMapName() string {
	if x != nil {
		return x.GeneralSeatMapName
	}
	return ""
}

func (x *InspectorTicketSeatInfo) GetSeatTypeName() string {
	if x != nil {
		return x.SeatTypeName
	}
	return ""
}

type CheckInLogInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketId      string `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	UserId        string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Time          int64  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	PartnershipId string `protobuf:"bytes,4,opt,name=partnership_id,json=partnershipId,proto3" json:"partnership_id,omitempty"`
}

func (x *CheckInLogInfo) Reset() {
	*x = CheckInLogInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_web_inspector_inspector_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInLogInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInLogInfo) ProtoMessage() {}

func (x *CheckInLogInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_web_inspector_inspector_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInLogInfo.ProtoReflect.Descriptor instead.
func (*CheckInLogInfo) Descriptor() ([]byte, []int) {
	return file_ticket_web_inspector_inspector_proto_rawDescGZIP(), []int{8}
}

func (x *CheckInLogInfo) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

func (x *CheckInLogInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CheckInLogInfo) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *CheckInLogInfo) GetPartnershipId() string {
	if x != nil {
		return x.PartnershipId
	}
	return ""
}

type CheckInReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketId         string `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	VerificationCode string `protobuf:"bytes,2,opt,name=verification_code,json=verificationCode,proto3" json:"verification_code,omitempty"` // 6 sá»‘
}

func (x *CheckInReq) Reset() {
	*x = CheckInReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_web_inspector_inspector_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInReq) ProtoMessage() {}

func (x *CheckInReq) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_web_inspector_inspector_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInReq.ProtoReflect.Descriptor instead.
func (*CheckInReq) Descriptor() ([]byte, []int) {
	return file_ticket_web_inspector_inspector_proto_rawDescGZIP(), []int{9}
}

func (x *CheckInReq) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

func (x *CheckInReq) GetVerificationCode() string {
	if x != nil {
		return x.VerificationCode
	}
	return ""
}

type MappingUserInfoToTicketAndCheckInReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketId           string `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	UserFullName       string `protobuf:"bytes,2,opt,name=user_full_name,json=userFullName,proto3" json:"user_full_name,omitempty"`
	UserPhone          string `protobuf:"bytes,3,opt,name=user_phone,json=userPhone,proto3" json:"user_phone,omitempty"`
	UserEmail          string `protobuf:"bytes,4,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	UserAddress        string `protobuf:"bytes,5,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	UserImage          string `protobuf:"bytes,6,opt,name=user_image,json=userImage,proto3" json:"user_image,omitempty"` // required
	UserPhoneCode      string `protobuf:"bytes,7,opt,name=user_phone_code,json=userPhoneCode,proto3" json:"user_phone_code,omitempty"`
	VerificationCode   string `protobuf:"bytes,8,opt,name=verification_code,json=verificationCode,proto3" json:"verification_code,omitempty"` // 6 sá»‘
	UserInspectorImage string `protobuf:"bytes,9,opt,name=user_inspector_image,json=userInspectorImage,proto3" json:"user_inspector_image,omitempty"`
}

func (x *MappingUserInfoToTicketAndCheckInReq) Reset() {
	*x = MappingUserInfoToTicketAndCheckInReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_web_inspector_inspector_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MappingUserInfoToTicketAndCheckInReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MappingUserInfoToTicketAndCheckInReq) ProtoMessage() {}

func (x *MappingUserInfoToTicketAndCheckInReq) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_web_inspector_inspector_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MappingUserInfoToTicketAndCheckInReq.ProtoReflect.Descriptor instead.
func (*MappingUserInfoToTicketAndCheckInReq) Descriptor() ([]byte, []int) {
	return file_ticket_web_inspector_inspector_proto_rawDescGZIP(), []int{10}
}

func (x *MappingUserInfoToTicketAndCheckInReq) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

func (x *MappingUserInfoToTicketAndCheckInReq) GetUserFullName() string {
	if x != nil {
		return x.UserFullName
	}
	return ""
}

func (x *MappingUserInfoToTicketAndCheckInReq) GetUserPhone() string {
	if x != nil {
		return x.UserPhone
	}
	return ""
}

func (x *MappingUserInfoToTicketAndCheckInReq) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *MappingUserInfoToTicketAndCheckInReq) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *MappingUserInfoToTicketAndCheckInReq) GetUserImage() string {
	if x != nil {
		return x.UserImage
	}
	return ""
}

func (x *MappingUserInfoToTicketAndCheckInReq) GetUserPhoneCode() string {
	if x != nil {
		return x.UserPhoneCode
	}
	return ""
}

func (x *MappingUserInfoToTicketAndCheckInReq) GetVerificationCode() string {
	if x != nil {
		return x.VerificationCode
	}
	return ""
}

func (x *MappingUserInfoToTicketAndCheckInReq) GetUserInspectorImage() string {
	if x != nil {
		return x.UserInspectorImage
	}
	return ""
}

type ListCheckInLogsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketId      string `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	PartnershipId string `protobuf:"bytes,2,opt,name=partnership_id,json=partnershipId,proto3" json:"partnership_id,omitempty"`
}

func (x *ListCheckInLogsReq) Reset() {
	*x = ListCheckInLogsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_web_inspector_inspector_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCheckInLogsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCheckInLogsReq) ProtoMessage() {}

func (x *ListCheckInLogsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_web_inspector_inspector_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCheckInLogsReq.ProtoReflect.Descriptor instead.
func (*ListCheckInLogsReq) Descriptor() ([]byte, []int) {
	return file_ticket_web_inspector_inspector_proto_rawDescGZIP(), []int{11}
}

func (x *ListCheckInLogsReq) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

func (x *ListCheckInLogsReq) GetPartnershipId() string {
	if x != nil {
		return x.PartnershipId
	}
	return ""
}

type GetTicketByCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretCode    string `protobuf:"bytes,1,opt,name=secret_code,json=secretCode,proto3" json:"secret_code,omitempty"`
	PartnershipId string `protobuf:"bytes,2,opt,name=partnership_id,json=partnershipId,proto3" json:"partnership_id,omitempty"`
}

func (x *GetTicketByCodeReq) Reset() {
	*x = GetTicketByCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_web_inspector_inspector_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTicketByCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTicketByCodeReq) ProtoMessage() {}

func (x *GetTicketByCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_web_inspector_inspector_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTicketByCodeReq.ProtoReflect.Descriptor instead.
func (*GetTicketByCodeReq) Descriptor() ([]byte, []int) {
	return file_ticket_web_inspector_inspector_proto_rawDescGZIP(), []int{12}
}

func (x *GetTicketByCodeReq) GetSecretCode() string {
	if x != nil {
		return x.SecretCode
	}
	return ""
}

func (x *GetTicketByCodeReq) GetPartnershipId() string {
	if x != nil {
		return x.PartnershipId
	}
	return ""
}

type GetTicketByPhoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserPhone        string `protobuf:"bytes,1,opt,name=user_phone,json=userPhone,proto3" json:"user_phone,omitempty"`
	UserPhoneCode    string `protobuf:"bytes,2,opt,name=user_phone_code,json=userPhoneCode,proto3" json:"user_phone_code,omitempty"`
	VerificationCode string `protobuf:"bytes,3,opt,name=verification_code,json=verificationCode,proto3" json:"verification_code,omitempty"`
	PartnershipId    string `protobuf:"bytes,4,opt,name=partnership_id,json=partnershipId,proto3" json:"partnership_id,omitempty"`
}

func (x *GetTicketByPhoneReq) Reset() {
	*x = GetTicketByPhoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_web_inspector_inspector_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTicketByPhoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTicketByPhoneReq) ProtoMessage() {}

func (x *GetTicketByPhoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_web_inspector_inspector_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTicketByPhoneReq.ProtoReflect.Descriptor instead.
func (*GetTicketByPhoneReq) Descriptor() ([]byte, []int) {
	return file_ticket_web_inspector_inspector_proto_rawDescGZIP(), []int{13}
}

func (x *GetTicketByPhoneReq) GetUserPhone() string {
	if x != nil {
		return x.UserPhone
	}
	return ""
}

func (x *GetTicketByPhoneReq) GetUserPhoneCode() string {
	if x != nil {
		return x.UserPhoneCode
	}
	return ""
}

func (x *GetTicketByPhoneReq) GetVerificationCode() string {
	if x != nil {
		return x.VerificationCode
	}
	return ""
}

func (x *GetTicketByPhoneReq) GetPartnershipId() string {
	if x != nil {
		return x.PartnershipId
	}
	return ""
}

type GetTicketByEmailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserEmail        string `protobuf:"bytes,1,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	VerificationCode string `protobuf:"bytes,2,opt,name=verification_code,json=verificationCode,proto3" json:"verification_code,omitempty"`
	PartnershipId    string `protobuf:"bytes,3,opt,name=partnership_id,json=partnershipId,proto3" json:"partnership_id,omitempty"`
}

func (x *GetTicketByEmailReq) Reset() {
	*x = GetTicketByEmailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_web_inspector_inspector_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTicketByEmailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTicketByEmailReq) ProtoMessage() {}

func (x *GetTicketByEmailReq) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_web_inspector_inspector_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTicketByEmailReq.ProtoReflect.Descriptor instead.
func (*GetTicketByEmailReq) Descriptor() ([]byte, []int) {
	return file_ticket_web_inspector_inspector_proto_rawDescGZIP(), []int{14}
}

func (x *GetTicketByEmailReq) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetTicketByEmailReq) GetVerificationCode() string {
	if x != nil {
		return x.VerificationCode
	}
	return ""
}

func (x *GetTicketByEmailReq) GetPartnershipId() string {
	if x != nil {
		return x.PartnershipId
	}
	return ""
}

type GetCurrentCheckinEventReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCurrentCheckinEventReq) Reset() {
	*x = GetCurrentCheckinEventReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_web_inspector_inspector_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentCheckinEventReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentCheckinEventReq) ProtoMessage() {}

func (x *GetCurrentCheckinEventReq) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_web_inspector_inspector_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentCheckinEventReq.ProtoReflect.Descriptor instead.
func (*GetCurrentCheckinEventReq) Descriptor() ([]byte, []int) {
	return file_ticket_web_inspector_inspector_proto_rawDescGZIP(), []int{15}
}

type GetUpcomingCheckinEventReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetUpcomingCheckinEventReq) Reset() {
	*x = GetUpcomingCheckinEventReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_web_inspector_inspector_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUpcomingCheckinEventReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpcomingCheckinEventReq) ProtoMessage() {}

func (x *GetUpcomingCheckinEventReq) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_web_inspector_inspector_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpcomingCheckinEventReq.ProtoReflect.Descriptor instead.
func (*GetUpcomingCheckinEventReq) Descriptor() ([]byte, []int) {
	return file_ticket_web_inspector_inspector_proto_rawDescGZIP(), []int{16}
}

type MappingUserInfoToTicketReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketId           string `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	UserFullName       string `protobuf:"bytes,2,opt,name=user_full_name,json=userFullName,proto3" json:"user_full_name,omitempty"`
	UserPhone          string `protobuf:"bytes,3,opt,name=user_phone,json=userPhone,proto3" json:"user_phone,omitempty"`
	UserEmail          string `protobuf:"bytes,4,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	UserAddress        string `protobuf:"bytes,5,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	UserImage          string `protobuf:"bytes,6,opt,name=user_image,json=userImage,proto3" json:"user_image,omitempty"`
	UserPhoneCode      string `protobuf:"bytes,7,opt,name=user_phone_code,json=userPhoneCode,proto3" json:"user_phone_code,omitempty"`
	VerificationCode   string `protobuf:"bytes,8,opt,name=verification_code,json=verificationCode,proto3" json:"verification_code,omitempty"`
	UserInspectorImage string `protobuf:"bytes,9,opt,name=user_inspector_image,json=userInspectorImage,proto3" json:"user_inspector_image,omitempty"`
}

func (x *MappingUserInfoToTicketReq) Reset() {
	*x = MappingUserInfoToTicketReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_web_inspector_inspector_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MappingUserInfoToTicketReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MappingUserInfoToTicketReq) ProtoMessage() {}

func (x *MappingUserInfoToTicketReq) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_web_inspector_inspector_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MappingUserInfoToTicketReq.ProtoReflect.Descriptor instead.
func (*MappingUserInfoToTicketReq) Descriptor() ([]byte, []int) {
	return file_ticket_web_inspector_inspector_proto_rawDescGZIP(), []int{17}
}

func (x *MappingUserInfoToTicketReq) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

func (x *MappingUserInfoToTicketReq) GetUserFullName() string {
	if x != nil {
		return x.UserFullName
	}
	return ""
}

func (x *MappingUserInfoToTicketReq) GetUserPhone() string {
	if x != nil {
		return x.UserPhone
	}
	return ""
}

func (x *MappingUserInfoToTicketReq) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *MappingUserInfoToTicketReq) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *MappingUserInfoToTicketReq) GetUserImage() string {
	if x != nil {
		return x.UserImage
	}
	return ""
}

func (x *MappingUserInfoToTicketReq) GetUserPhoneCode() string {
	if x != nil {
		return x.UserPhoneCode
	}
	return ""
}

func (x *MappingUserInfoToTicketReq) GetVerificationCode() string {
	if x != nil {
		return x.VerificationCode
	}
	return ""
}

func (x *MappingUserInfoToTicketReq) GetUserInspectorImage() string {
	if x != nil {
		return x.UserInspectorImage
	}
	return ""
}

type ListCheckInLogsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs []*CheckInLogInfo `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *ListCheckInLogsRes) Reset() {
	*x = ListCheckInLogsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_web_inspector_inspector_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCheckInLogsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCheckInLogsRes) ProtoMessage() {}

func (x *ListCheckInLogsRes) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_web_inspector_inspector_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCheckInLogsRes.ProtoReflect.Descriptor instead.
func (*ListCheckInLogsRes) Descriptor() ([]byte, []int) {
	return file_ticket_web_inspector_inspector_proto_rawDescGZIP(), []int{18}
}

func (x *ListCheckInLogsRes) GetLogs() []*CheckInLogInfo {
	if x != nil {
		return x.Logs
	}
	return nil
}

type GetTicketByPhoneRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *InspectorTicketInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *GetTicketByPhoneRes) Reset() {
	*x = GetTicketByPhoneRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_web_inspector_inspector_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTicketByPhoneRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTicketByPhoneRes) ProtoMessage() {}

func (x *GetTicketByPhoneRes) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_web_inspector_inspector_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTicketByPhoneRes.ProtoReflect.Descriptor instead.
func (*GetTicketByPhoneRes) Descriptor() ([]byte, []int) {
	return file_ticket_web_inspector_inspector_proto_rawDescGZIP(), []int{19}
}

func (x *GetTicketByPhoneRes) GetInfo() *InspectorTicketInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetTicketByEmailRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *InspectorTicketInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *GetTicketByEmailRes) Reset() {
	*x = GetTicketByEmailRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_web_inspector_inspector_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTicketByEmailRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTicketByEmailRes) ProtoMessage() {}

func (x *GetTicketByEmailRes) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_web_inspector_inspector_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTicketByEmailRes.ProtoReflect.Descriptor instead.
func (*GetTicketByEmailRes) Descriptor() ([]byte, []int) {
	return file_ticket_web_inspector_inspector_proto_rawDescGZIP(), []int{20}
}

func (x *GetTicketByEmailRes) GetInfo() *InspectorTicketInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetTicketByCodeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *InspectorTicketInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *GetTicketByCodeRes) Reset() {
	*x = GetTicketByCodeRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_web_inspector_inspector_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTicketByCodeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTicketByCodeRes) ProtoMessage() {}

func (x *GetTicketByCodeRes) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_web_inspector_inspector_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTicketByCodeRes.ProtoReflect.Descriptor instead.
func (*GetTicketByCodeRes) Descriptor() ([]byte, []int) {
	return file_ticket_web_inspector_inspector_proto_rawDescGZIP(), []int{21}
}

func (x *GetTicketByCodeRes) GetInfo() *InspectorTicketInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCurrentCheckinEventRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventInfo *InspectorTicketCheckinEventInfo `protobuf:"bytes,1,opt,name=event_info,json=eventInfo,proto3" json:"event_info,omitempty"`
}

func (x *GetCurrentCheckinEventRes) Reset() {
	*x = GetCurrentCheckinEventRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_web_inspector_inspector_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentCheckinEventRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentCheckinEventRes) ProtoMessage() {}

func (x *GetCurrentCheckinEventRes) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_web_inspector_inspector_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentCheckinEventRes.ProtoReflect.Descriptor instead.
func (*GetCurrentCheckinEventRes) Descriptor() ([]byte, []int) {
	return file_ticket_web_inspector_inspector_proto_rawDescGZIP(), []int{22}
}

func (x *GetCurrentCheckinEventRes) GetEventInfo() *InspectorTicketCheckinEventInfo {
	if x != nil {
		return x.EventInfo
	}
	return nil
}

type GetUpcomingCheckinEventRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventInfos []*InspectorTicketCheckinEventInfo `protobuf:"bytes,1,rep,name=event_infos,json=eventInfos,proto3" json:"event_infos,omitempty"`
}

func (x *GetUpcomingCheckinEventRes) Reset() {
	*x = GetUpcomingCheckinEventRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_web_inspector_inspector_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUpcomingCheckinEventRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpcomingCheckinEventRes) ProtoMessage() {}

func (x *GetUpcomingCheckinEventRes) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_web_inspector_inspector_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpcomingCheckinEventRes.ProtoReflect.Descriptor instead.
func (*GetUpcomingCheckinEventRes) Descriptor() ([]byte, []int) {
	return file_ticket_web_inspector_inspector_proto_rawDescGZIP(), []int{23}
}

func (x *GetUpcomingCheckinEventRes) GetEventInfos() []*InspectorTicketCheckinEventInfo {
	if x != nil {
		return x.EventInfos
	}
	return nil
}

var File_ticket_web_inspector_inspector_proto protoreflect.FileDescriptor

var file_ticket_web_inspector_inspector_proto_rawDesc = []byte{
	0x0a, 0x24, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77,
	0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x1f, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x2f, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x05,
	0x0a, 0x13, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4d,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f,
	0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a,
	0x09, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x73, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x73, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19,
	0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x64,
	0x12, 0x4a, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77,
	0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x1e,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x59, 0x0a, 0x1b, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0xa6, 0x01, 0x0a, 0x1c, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22,
	0xc7, 0x02, 0x0a, 0x18, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x98, 0x05, 0x0a, 0x1f, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x61,
	0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x06, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x6d, 0x61,
	0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61,
	0x74, 0x4d, 0x61, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x61, 0x66, 0x65, 0x74,
	0x79, 0x46, 0x6f, 0x72, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c,
	0x69, 0x76, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x76,
	0x65, 0x12, 0x31, 0x0a, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x61,
	0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc5, 0x02, 0x0a, 0x17, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x46, 0x75,
	0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x76, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x44, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x76, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xe1, 0x02, 0x0a,
	0x17, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x53, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x65,
	0x61, 0x74, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53,
	0x65, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65,
	0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x81, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x4c, 0x6f, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x2b, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf0, 0x02, 0x0a,
	0x24, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x54, 0x6f, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22,
	0x58, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x4c, 0x6f,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e,
	0x67, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x22, 0xe6, 0x02, 0x0a, 0x1a, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x54, 0x6f, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65,
	0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x4e, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x38, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x4c, 0x6f, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0x54, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x12, 0x3d, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x54, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65,
	0x62, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x53, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x71, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x74, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x55, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x0b, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x2a, 0x8a, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a,
	0x1f, 0x49, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f,
	0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x10, 0x02,
	0x2a, 0x7b, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x55, 0x59, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x54, 0x4f, 0x52, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x02, 0x32, 0xe1, 0x07,
	0x0a, 0x10, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x12, 0x20, 0x2e,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x1b, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x7c, 0x0a, 0x21,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x54,
	0x6f, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x6e, 0x12, 0x3a, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x6f, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x41, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x65, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x28, 0x2e,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e,
	0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x68, 0x0a, 0x17, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x54, 0x6f, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x30, 0x2e, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x54, 0x6f, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1b,
	0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x65, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28,
	0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x12, 0x68, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42,
	0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x29, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x29, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x29, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x7a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x2f, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x2f, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x12, 0x7d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e,
	0x67, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x2e,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x30, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x63, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x42, 0x1f, 0x5a, 0x1d, 0x2e, 0x2f, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x3b, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ticket_web_inspector_inspector_proto_rawDescOnce sync.Once
	file_ticket_web_inspector_inspector_proto_rawDescData = file_ticket_web_inspector_inspector_proto_rawDesc
)

func file_ticket_web_inspector_inspector_proto_rawDescGZIP() []byte {
	file_ticket_web_inspector_inspector_proto_rawDescOnce.Do(func() {
		file_ticket_web_inspector_inspector_proto_rawDescData = protoimpl.X.CompressGZIP(file_ticket_web_inspector_inspector_proto_rawDescData)
	})
	return file_ticket_web_inspector_inspector_proto_rawDescData
}

var file_ticket_web_inspector_inspector_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ticket_web_inspector_inspector_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_ticket_web_inspector_inspector_proto_goTypes = []interface{}{
	(InspectorTicketStatus)(0),                   // 0: ticket.web_inspector.InspectorTicketStatus
	(InspectorTicketType)(0),                     // 1: ticket.web_inspector.InspectorTicketType
	(*InspectorTicketInfo)(nil),                  // 2: ticket.web_inspector.InspectorTicketInfo
	(*InspectorTicketPriceSimpleInfo)(nil),       // 3: ticket.web_inspector.InspectorTicketPriceSimpleInfo
	(*InspectorTicketCurrencyInfo)(nil),          // 4: ticket.web_inspector.InspectorTicketCurrencyInfo
	(*InspectorTicketEventLocation)(nil),         // 5: ticket.web_inspector.InspectorTicketEventLocation
	(*InspectorTicketEventInfo)(nil),             // 6: ticket.web_inspector.InspectorTicketEventInfo
	(*InspectorTicketCheckinEventInfo)(nil),      // 7: ticket.web_inspector.InspectorTicketCheckinEventInfo
	(*InspectorTicketUserInfo)(nil),              // 8: ticket.web_inspector.InspectorTicketUserInfo
	(*InspectorTicketSeatInfo)(nil),              // 9: ticket.web_inspector.InspectorTicketSeatInfo
	(*CheckInLogInfo)(nil),                       // 10: ticket.web_inspector.CheckInLogInfo
	(*CheckInReq)(nil),                           // 11: ticket.web_inspector.CheckInReq
	(*MappingUserInfoToTicketAndCheckInReq)(nil), // 12: ticket.web_inspector.MappingUserInfoToTicketAndCheckInReq
	(*ListCheckInLogsReq)(nil),                   // 13: ticket.web_inspector.ListCheckInLogsReq
	(*GetTicketByCodeReq)(nil),                   // 14: ticket.web_inspector.GetTicketByCodeReq
	(*GetTicketByPhoneReq)(nil),                  // 15: ticket.web_inspector.GetTicketByPhoneReq
	(*GetTicketByEmailReq)(nil),                  // 16: ticket.web_inspector.GetTicketByEmailReq
	(*GetCurrentCheckinEventReq)(nil),            // 17: ticket.web_inspector.GetCurrentCheckinEventReq
	(*GetUpcomingCheckinEventReq)(nil),           // 18: ticket.web_inspector.GetUpcomingCheckinEventReq
	(*MappingUserInfoToTicketReq)(nil),           // 19: ticket.web_inspector.MappingUserInfoToTicketReq
	(*ListCheckInLogsRes)(nil),                   // 20: ticket.web_inspector.ListCheckInLogsRes
	(*GetTicketByPhoneRes)(nil),                  // 21: ticket.web_inspector.GetTicketByPhoneRes
	(*GetTicketByEmailRes)(nil),                  // 22: ticket.web_inspector.GetTicketByEmailRes
	(*GetTicketByCodeRes)(nil),                   // 23: ticket.web_inspector.GetTicketByCodeRes
	(*GetCurrentCheckinEventRes)(nil),            // 24: ticket.web_inspector.GetCurrentCheckinEventRes
	(*GetUpcomingCheckinEventRes)(nil),           // 25: ticket.web_inspector.GetUpcomingCheckinEventRes
	(*Media)(nil),                                // 26: ticket.web_inspector.Media
	(*Empty)(nil),                                // 27: ticket.web_inspector.Empty
}
var file_ticket_web_inspector_inspector_proto_depIdxs = []int32{
	6,  // 0: ticket.web_inspector.InspectorTicketInfo.event_info:type_name -> ticket.web_inspector.InspectorTicketEventInfo
	9,  // 1: ticket.web_inspector.InspectorTicketInfo.seat_info:type_name -> ticket.web_inspector.InspectorTicketSeatInfo
	0,  // 2: ticket.web_inspector.InspectorTicketInfo.status:type_name -> ticket.web_inspector.InspectorTicketStatus
	8,  // 3: ticket.web_inspector.InspectorTicketInfo.user_info:type_name -> ticket.web_inspector.InspectorTicketUserInfo
	1,  // 4: ticket.web_inspector.InspectorTicketInfo.ticket_type:type_name -> ticket.web_inspector.InspectorTicketType
	4,  // 5: ticket.web_inspector.InspectorTicketPriceSimpleInfo.currency:type_name -> ticket.web_inspector.InspectorTicketCurrencyInfo
	5,  // 6: ticket.web_inspector.InspectorTicketEventInfo.location:type_name -> ticket.web_inspector.InspectorTicketEventLocation
	5,  // 7: ticket.web_inspector.InspectorTicketCheckinEventInfo.location:type_name -> ticket.web_inspector.InspectorTicketEventLocation
	26, // 8: ticket.web_inspector.InspectorTicketCheckinEventInfo.medias:type_name -> ticket.web_inspector.Media
	3,  // 9: ticket.web_inspector.InspectorTicketSeatInfo.price:type_name -> ticket.web_inspector.InspectorTicketPriceSimpleInfo
	10, // 10: ticket.web_inspector.ListCheckInLogsRes.logs:type_name -> ticket.web_inspector.CheckInLogInfo
	2,  // 11: ticket.web_inspector.GetTicketByPhoneRes.info:type_name -> ticket.web_inspector.InspectorTicketInfo
	2,  // 12: ticket.web_inspector.GetTicketByEmailRes.info:type_name -> ticket.web_inspector.InspectorTicketInfo
	2,  // 13: ticket.web_inspector.GetTicketByCodeRes.info:type_name -> ticket.web_inspector.InspectorTicketInfo
	7,  // 14: ticket.web_inspector.GetCurrentCheckinEventRes.event_info:type_name -> ticket.web_inspector.InspectorTicketCheckinEventInfo
	7,  // 15: ticket.web_inspector.GetUpcomingCheckinEventRes.event_infos:type_name -> ticket.web_inspector.InspectorTicketCheckinEventInfo
	11, // 16: ticket.web_inspector.InspectorService.CheckIn:input_type -> ticket.web_inspector.CheckInReq
	12, // 17: ticket.web_inspector.InspectorService.MappingUserInfoToTicketAndCheckIn:input_type -> ticket.web_inspector.MappingUserInfoToTicketAndCheckInReq
	13, // 18: ticket.web_inspector.InspectorService.ListCheckInLogs:input_type -> ticket.web_inspector.ListCheckInLogsReq
	19, // 19: ticket.web_inspector.InspectorService.MappingUserInfoToTicket:input_type -> ticket.web_inspector.MappingUserInfoToTicketReq
	14, // 20: ticket.web_inspector.InspectorService.GetTicketByCode:input_type -> ticket.web_inspector.GetTicketByCodeReq
	15, // 21: ticket.web_inspector.InspectorService.GetTicketByPhone:input_type -> ticket.web_inspector.GetTicketByPhoneReq
	16, // 22: ticket.web_inspector.InspectorService.GetTicketByEmail:input_type -> ticket.web_inspector.GetTicketByEmailReq
	17, // 23: ticket.web_inspector.InspectorService.GetCurrentCheckinEvent:input_type -> ticket.web_inspector.GetCurrentCheckinEventReq
	18, // 24: ticket.web_inspector.InspectorService.GetUpcomingCheckinEvent:input_type -> ticket.web_inspector.GetUpcomingCheckinEventReq
	27, // 25: ticket.web_inspector.InspectorService.CheckIn:output_type -> ticket.web_inspector.Empty
	27, // 26: ticket.web_inspector.InspectorService.MappingUserInfoToTicketAndCheckIn:output_type -> ticket.web_inspector.Empty
	20, // 27: ticket.web_inspector.InspectorService.ListCheckInLogs:output_type -> ticket.web_inspector.ListCheckInLogsRes
	27, // 28: ticket.web_inspector.InspectorService.MappingUserInfoToTicket:output_type -> ticket.web_inspector.Empty
	23, // 29: ticket.web_inspector.InspectorService.GetTicketByCode:output_type -> ticket.web_inspector.GetTicketByCodeRes
	21, // 30: ticket.web_inspector.InspectorService.GetTicketByPhone:output_type -> ticket.web_inspector.GetTicketByPhoneRes
	22, // 31: ticket.web_inspector.InspectorService.GetTicketByEmail:output_type -> ticket.web_inspector.GetTicketByEmailRes
	24, // 32: ticket.web_inspector.InspectorService.GetCurrentCheckinEvent:output_type -> ticket.web_inspector.GetCurrentCheckinEventRes
	25, // 33: ticket.web_inspector.InspectorService.GetUpcomingCheckinEvent:output_type -> ticket.web_inspector.GetUpcomingCheckinEventRes
	25, // [25:34] is the sub-list for method output_type
	16, // [16:25] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_ticket_web_inspector_inspector_proto_init() }
func file_ticket_web_inspector_inspector_proto_init() {
	if File_ticket_web_inspector_inspector_proto != nil {
		return
	}
	file_ticket_web_inspector_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ticket_web_inspector_inspector_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectorTicketInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_web_inspector_inspector_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectorTicketPriceSimpleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_web_inspector_inspector_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectorTicketCurrencyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_web_inspector_inspector_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectorTicketEventLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_web_inspector_inspector_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectorTicketEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_web_inspector_inspector_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectorTicketCheckinEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_web_inspector_inspector_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectorTicketUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_web_inspector_inspector_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectorTicketSeatInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_web_inspector_inspector_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInLogInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_web_inspector_inspector_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_web_inspector_inspector_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MappingUserInfoToTicketAndCheckInReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_web_inspector_inspector_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCheckInLogsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_web_inspector_inspector_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTicketByCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_web_inspector_inspector_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTicketByPhoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_web_inspector_inspector_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTicketByEmailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_web_inspector_inspector_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentCheckinEventReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_web_inspector_inspector_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUpcomingCheckinEventReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_web_inspector_inspector_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MappingUserInfoToTicketReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_web_inspector_inspector_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCheckInLogsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_web_inspector_inspector_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTicketByPhoneRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_web_inspector_inspector_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTicketByEmailRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_web_inspector_inspector_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTicketByCodeRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_web_inspector_inspector_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentCheckinEventRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_web_inspector_inspector_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUpcomingCheckinEventRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ticket_web_inspector_inspector_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ticket_web_inspector_inspector_proto_goTypes,
		DependencyIndexes: file_ticket_web_inspector_inspector_proto_depIdxs,
		EnumInfos:         file_ticket_web_inspector_inspector_proto_enumTypes,
		MessageInfos:      file_ticket_web_inspector_inspector_proto_msgTypes,
	}.Build()
	File_ticket_web_inspector_inspector_proto = out.File
	file_ticket_web_inspector_inspector_proto_rawDesc = nil
	file_ticket_web_inspector_inspector_proto_goTypes = nil
	file_ticket_web_inspector_inspector_proto_depIdxs = nil
}
