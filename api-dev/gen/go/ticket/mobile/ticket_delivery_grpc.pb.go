// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: ticket/mobile/ticket_delivery.proto

package mobile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TicketDeliveryServiceClient is the client API for TicketDeliveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketDeliveryServiceClient interface {
	ListTicketDeliveries(ctx context.Context, in *ListTicketDeliveriesReq, opts ...grpc.CallOption) (*ListTicketDeliveriesRes, error)
}

type ticketDeliveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketDeliveryServiceClient(cc grpc.ClientConnInterface) TicketDeliveryServiceClient {
	return &ticketDeliveryServiceClient{cc}
}

func (c *ticketDeliveryServiceClient) ListTicketDeliveries(ctx context.Context, in *ListTicketDeliveriesReq, opts ...grpc.CallOption) (*ListTicketDeliveriesRes, error) {
	out := new(ListTicketDeliveriesRes)
	err := c.cc.Invoke(ctx, "/ticket.mobile.TicketDeliveryService/ListTicketDeliveries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketDeliveryServiceServer is the server API for TicketDeliveryService service.
// All implementations must embed UnimplementedTicketDeliveryServiceServer
// for forward compatibility
type TicketDeliveryServiceServer interface {
	ListTicketDeliveries(context.Context, *ListTicketDeliveriesReq) (*ListTicketDeliveriesRes, error)
	mustEmbedUnimplementedTicketDeliveryServiceServer()
}

// UnimplementedTicketDeliveryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTicketDeliveryServiceServer struct {
}

func (UnimplementedTicketDeliveryServiceServer) ListTicketDeliveries(context.Context, *ListTicketDeliveriesReq) (*ListTicketDeliveriesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTicketDeliveries not implemented")
}
func (UnimplementedTicketDeliveryServiceServer) mustEmbedUnimplementedTicketDeliveryServiceServer() {}

// UnsafeTicketDeliveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketDeliveryServiceServer will
// result in compilation errors.
type UnsafeTicketDeliveryServiceServer interface {
	mustEmbedUnimplementedTicketDeliveryServiceServer()
}

func RegisterTicketDeliveryServiceServer(s grpc.ServiceRegistrar, srv TicketDeliveryServiceServer) {
	s.RegisterService(&TicketDeliveryService_ServiceDesc, srv)
}

func _TicketDeliveryService_ListTicketDeliveries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTicketDeliveriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketDeliveryServiceServer).ListTicketDeliveries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile.TicketDeliveryService/ListTicketDeliveries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketDeliveryServiceServer).ListTicketDeliveries(ctx, req.(*ListTicketDeliveriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketDeliveryService_ServiceDesc is the grpc.ServiceDesc for TicketDeliveryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketDeliveryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticket.mobile.TicketDeliveryService",
	HandlerType: (*TicketDeliveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTicketDeliveries",
			Handler:    _TicketDeliveryService_ListTicketDeliveries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticket/mobile/ticket_delivery.proto",
}
