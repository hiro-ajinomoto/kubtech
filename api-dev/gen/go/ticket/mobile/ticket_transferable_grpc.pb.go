// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: ticket/mobile/ticket_transferable.proto

package mobile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TicketTransferableServiceClient is the client API for TicketTransferableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketTransferableServiceClient interface {
	// create ticket transferable
	// check if ticket in ticket transferable => raise error
	CreateTicketTransferable(ctx context.Context, in *CreateTicketTransferableReq, opts ...grpc.CallOption) (*CreateTicketTransferableRes, error)
	// create ticket transferable for all tickets in price block (filter by seat_name_from and seat_name_to)
	CreateTicketTransferableAll(ctx context.Context, in *CreateTicketTransferableAllReq, opts ...grpc.CallOption) (*CreateTicketTransferableAllRes, error)
	// create ticket transferable for all tickets in price block exclude some tickets (filter by seat_name_from and
	// seat_name_to)
	CreateTicketTransferableAllExclude(ctx context.Context, in *CreateTicketTransferableAllExcludeReq, opts ...grpc.CallOption) (*CreateTicketTransferableAllExcludeRes, error)
	// map user info to ticket transferable
	MapUserInfo(ctx context.Context, in *MapUserInfoReq, opts ...grpc.CallOption) (*Empty, error)
	// submit ticket transferable (one transaction)
	// 1. create order with type transferable, price = 0 && create new tickets for new owner with new order id
	// 2. move old tickets to transferred_tickets (set secret_code, verification_code to empty)
	// 3. remove ticket transferable
	SubmitTicketTransferable(ctx context.Context, in *SubmitTicketTransferableReq, opts ...grpc.CallOption) (*Empty, error)
	GetDetailTicketTransferable(ctx context.Context, in *GetDetailTicketTransferableReq, opts ...grpc.CallOption) (*GetDetailTicketTransferableRes, error)
}

type ticketTransferableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketTransferableServiceClient(cc grpc.ClientConnInterface) TicketTransferableServiceClient {
	return &ticketTransferableServiceClient{cc}
}

func (c *ticketTransferableServiceClient) CreateTicketTransferable(ctx context.Context, in *CreateTicketTransferableReq, opts ...grpc.CallOption) (*CreateTicketTransferableRes, error) {
	out := new(CreateTicketTransferableRes)
	err := c.cc.Invoke(ctx, "/ticket.mobile.TicketTransferableService/CreateTicketTransferable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketTransferableServiceClient) CreateTicketTransferableAll(ctx context.Context, in *CreateTicketTransferableAllReq, opts ...grpc.CallOption) (*CreateTicketTransferableAllRes, error) {
	out := new(CreateTicketTransferableAllRes)
	err := c.cc.Invoke(ctx, "/ticket.mobile.TicketTransferableService/CreateTicketTransferableAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketTransferableServiceClient) CreateTicketTransferableAllExclude(ctx context.Context, in *CreateTicketTransferableAllExcludeReq, opts ...grpc.CallOption) (*CreateTicketTransferableAllExcludeRes, error) {
	out := new(CreateTicketTransferableAllExcludeRes)
	err := c.cc.Invoke(ctx, "/ticket.mobile.TicketTransferableService/CreateTicketTransferableAllExclude", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketTransferableServiceClient) MapUserInfo(ctx context.Context, in *MapUserInfoReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ticket.mobile.TicketTransferableService/MapUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketTransferableServiceClient) SubmitTicketTransferable(ctx context.Context, in *SubmitTicketTransferableReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ticket.mobile.TicketTransferableService/SubmitTicketTransferable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketTransferableServiceClient) GetDetailTicketTransferable(ctx context.Context, in *GetDetailTicketTransferableReq, opts ...grpc.CallOption) (*GetDetailTicketTransferableRes, error) {
	out := new(GetDetailTicketTransferableRes)
	err := c.cc.Invoke(ctx, "/ticket.mobile.TicketTransferableService/GetDetailTicketTransferable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketTransferableServiceServer is the server API for TicketTransferableService service.
// All implementations must embed UnimplementedTicketTransferableServiceServer
// for forward compatibility
type TicketTransferableServiceServer interface {
	// create ticket transferable
	// check if ticket in ticket transferable => raise error
	CreateTicketTransferable(context.Context, *CreateTicketTransferableReq) (*CreateTicketTransferableRes, error)
	// create ticket transferable for all tickets in price block (filter by seat_name_from and seat_name_to)
	CreateTicketTransferableAll(context.Context, *CreateTicketTransferableAllReq) (*CreateTicketTransferableAllRes, error)
	// create ticket transferable for all tickets in price block exclude some tickets (filter by seat_name_from and
	// seat_name_to)
	CreateTicketTransferableAllExclude(context.Context, *CreateTicketTransferableAllExcludeReq) (*CreateTicketTransferableAllExcludeRes, error)
	// map user info to ticket transferable
	MapUserInfo(context.Context, *MapUserInfoReq) (*Empty, error)
	// submit ticket transferable (one transaction)
	// 1. create order with type transferable, price = 0 && create new tickets for new owner with new order id
	// 2. move old tickets to transferred_tickets (set secret_code, verification_code to empty)
	// 3. remove ticket transferable
	SubmitTicketTransferable(context.Context, *SubmitTicketTransferableReq) (*Empty, error)
	GetDetailTicketTransferable(context.Context, *GetDetailTicketTransferableReq) (*GetDetailTicketTransferableRes, error)
	mustEmbedUnimplementedTicketTransferableServiceServer()
}

// UnimplementedTicketTransferableServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTicketTransferableServiceServer struct {
}

func (UnimplementedTicketTransferableServiceServer) CreateTicketTransferable(context.Context, *CreateTicketTransferableReq) (*CreateTicketTransferableRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicketTransferable not implemented")
}
func (UnimplementedTicketTransferableServiceServer) CreateTicketTransferableAll(context.Context, *CreateTicketTransferableAllReq) (*CreateTicketTransferableAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicketTransferableAll not implemented")
}
func (UnimplementedTicketTransferableServiceServer) CreateTicketTransferableAllExclude(context.Context, *CreateTicketTransferableAllExcludeReq) (*CreateTicketTransferableAllExcludeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicketTransferableAllExclude not implemented")
}
func (UnimplementedTicketTransferableServiceServer) MapUserInfo(context.Context, *MapUserInfoReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapUserInfo not implemented")
}
func (UnimplementedTicketTransferableServiceServer) SubmitTicketTransferable(context.Context, *SubmitTicketTransferableReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTicketTransferable not implemented")
}
func (UnimplementedTicketTransferableServiceServer) GetDetailTicketTransferable(context.Context, *GetDetailTicketTransferableReq) (*GetDetailTicketTransferableRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailTicketTransferable not implemented")
}
func (UnimplementedTicketTransferableServiceServer) mustEmbedUnimplementedTicketTransferableServiceServer() {
}

// UnsafeTicketTransferableServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketTransferableServiceServer will
// result in compilation errors.
type UnsafeTicketTransferableServiceServer interface {
	mustEmbedUnimplementedTicketTransferableServiceServer()
}

func RegisterTicketTransferableServiceServer(s grpc.ServiceRegistrar, srv TicketTransferableServiceServer) {
	s.RegisterService(&TicketTransferableService_ServiceDesc, srv)
}

func _TicketTransferableService_CreateTicketTransferable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketTransferableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketTransferableServiceServer).CreateTicketTransferable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile.TicketTransferableService/CreateTicketTransferable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketTransferableServiceServer).CreateTicketTransferable(ctx, req.(*CreateTicketTransferableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketTransferableService_CreateTicketTransferableAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketTransferableAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketTransferableServiceServer).CreateTicketTransferableAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile.TicketTransferableService/CreateTicketTransferableAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketTransferableServiceServer).CreateTicketTransferableAll(ctx, req.(*CreateTicketTransferableAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketTransferableService_CreateTicketTransferableAllExclude_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketTransferableAllExcludeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketTransferableServiceServer).CreateTicketTransferableAllExclude(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile.TicketTransferableService/CreateTicketTransferableAllExclude",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketTransferableServiceServer).CreateTicketTransferableAllExclude(ctx, req.(*CreateTicketTransferableAllExcludeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketTransferableService_MapUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketTransferableServiceServer).MapUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile.TicketTransferableService/MapUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketTransferableServiceServer).MapUserInfo(ctx, req.(*MapUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketTransferableService_SubmitTicketTransferable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTicketTransferableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketTransferableServiceServer).SubmitTicketTransferable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile.TicketTransferableService/SubmitTicketTransferable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketTransferableServiceServer).SubmitTicketTransferable(ctx, req.(*SubmitTicketTransferableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketTransferableService_GetDetailTicketTransferable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailTicketTransferableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketTransferableServiceServer).GetDetailTicketTransferable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile.TicketTransferableService/GetDetailTicketTransferable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketTransferableServiceServer).GetDetailTicketTransferable(ctx, req.(*GetDetailTicketTransferableReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketTransferableService_ServiceDesc is the grpc.ServiceDesc for TicketTransferableService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketTransferableService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticket.mobile.TicketTransferableService",
	HandlerType: (*TicketTransferableServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTicketTransferable",
			Handler:    _TicketTransferableService_CreateTicketTransferable_Handler,
		},
		{
			MethodName: "CreateTicketTransferableAll",
			Handler:    _TicketTransferableService_CreateTicketTransferableAll_Handler,
		},
		{
			MethodName: "CreateTicketTransferableAllExclude",
			Handler:    _TicketTransferableService_CreateTicketTransferableAllExclude_Handler,
		},
		{
			MethodName: "MapUserInfo",
			Handler:    _TicketTransferableService_MapUserInfo_Handler,
		},
		{
			MethodName: "SubmitTicketTransferable",
			Handler:    _TicketTransferableService_SubmitTicketTransferable_Handler,
		},
		{
			MethodName: "GetDetailTicketTransferable",
			Handler:    _TicketTransferableService_GetDetailTicketTransferable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticket/mobile/ticket_transferable.proto",
}
