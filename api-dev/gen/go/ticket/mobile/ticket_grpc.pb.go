// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: ticket/mobile/ticket.proto

package mobile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TicketServiceClient is the client API for TicketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketServiceClient interface {
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*Empty, error)
	UpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*Empty, error)
	UpdateEnableVerificationCode(ctx context.Context, in *UpdateEnableVerificationCodeReq, opts ...grpc.CallOption) (*Empty, error)
	GetMyTicket(ctx context.Context, in *GetMyTicketReq, opts ...grpc.CallOption) (*GetMyTicketRes, error)
	GetMyTicketByOrderId(ctx context.Context, in *GetMyTicketByOrderIdReq, opts ...grpc.CallOption) (*GetMyTicketByOrderIdRes, error)
	GetMyTickets(ctx context.Context, in *ListMyTicketReq, opts ...grpc.CallOption) (*GetMyTicketsRes, error)
	GetMyTicketByTransferTransactionId(ctx context.Context, in *GetMyTicketByTransferTransactionIdReq, opts ...grpc.CallOption) (*GetMyTicketByTransferTransactionIdRes, error)
	GetMyTransferTransactionHistory(ctx context.Context, in *GetMyTransferTransactionHistoryReq, opts ...grpc.CallOption) (*GetMyTransferTransactionHistoryRes, error)
	ListMyTicketByStatus(ctx context.Context, in *ListMyTicketByStatusReq, opts ...grpc.CallOption) (*ListMyTicketByStatusRes, error)
	ListMyTicketByPriceBlock(ctx context.Context, in *ListMyTicketByPriceBlockReq, opts ...grpc.CallOption) (*ListMyTicketByPriceBlockRes, error)
	ListMyTicketReadyToCheckin(ctx context.Context, in *ListMyTicketReadyToCheckinReq, opts ...grpc.CallOption) (*ListMyTicketReadyToCheckinRes, error)
	MarkTicketOffline(ctx context.Context, in *MarkTicketOfflineReq, opts ...grpc.CallOption) (*Empty, error)
	GetMyTicketsByDeliveryID(ctx context.Context, in *GetMyTicketsByDeliveryIDReq, opts ...grpc.CallOption) (*GetMyTicketsByDeliveryIDRes, error)
}

type ticketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketServiceClient(cc grpc.ClientConnInterface) TicketServiceClient {
	return &ticketServiceClient{cc}
}

func (c *ticketServiceClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ticket.mobile.TicketService/UpdateUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) UpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ticket.mobile.TicketService/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) UpdateEnableVerificationCode(ctx context.Context, in *UpdateEnableVerificationCodeReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ticket.mobile.TicketService/UpdateEnableVerificationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetMyTicket(ctx context.Context, in *GetMyTicketReq, opts ...grpc.CallOption) (*GetMyTicketRes, error) {
	out := new(GetMyTicketRes)
	err := c.cc.Invoke(ctx, "/ticket.mobile.TicketService/GetMyTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetMyTicketByOrderId(ctx context.Context, in *GetMyTicketByOrderIdReq, opts ...grpc.CallOption) (*GetMyTicketByOrderIdRes, error) {
	out := new(GetMyTicketByOrderIdRes)
	err := c.cc.Invoke(ctx, "/ticket.mobile.TicketService/GetMyTicketByOrderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetMyTickets(ctx context.Context, in *ListMyTicketReq, opts ...grpc.CallOption) (*GetMyTicketsRes, error) {
	out := new(GetMyTicketsRes)
	err := c.cc.Invoke(ctx, "/ticket.mobile.TicketService/GetMyTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetMyTicketByTransferTransactionId(ctx context.Context, in *GetMyTicketByTransferTransactionIdReq, opts ...grpc.CallOption) (*GetMyTicketByTransferTransactionIdRes, error) {
	out := new(GetMyTicketByTransferTransactionIdRes)
	err := c.cc.Invoke(ctx, "/ticket.mobile.TicketService/GetMyTicketByTransferTransactionId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetMyTransferTransactionHistory(ctx context.Context, in *GetMyTransferTransactionHistoryReq, opts ...grpc.CallOption) (*GetMyTransferTransactionHistoryRes, error) {
	out := new(GetMyTransferTransactionHistoryRes)
	err := c.cc.Invoke(ctx, "/ticket.mobile.TicketService/GetMyTransferTransactionHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) ListMyTicketByStatus(ctx context.Context, in *ListMyTicketByStatusReq, opts ...grpc.CallOption) (*ListMyTicketByStatusRes, error) {
	out := new(ListMyTicketByStatusRes)
	err := c.cc.Invoke(ctx, "/ticket.mobile.TicketService/ListMyTicketByStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) ListMyTicketByPriceBlock(ctx context.Context, in *ListMyTicketByPriceBlockReq, opts ...grpc.CallOption) (*ListMyTicketByPriceBlockRes, error) {
	out := new(ListMyTicketByPriceBlockRes)
	err := c.cc.Invoke(ctx, "/ticket.mobile.TicketService/ListMyTicketByPriceBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) ListMyTicketReadyToCheckin(ctx context.Context, in *ListMyTicketReadyToCheckinReq, opts ...grpc.CallOption) (*ListMyTicketReadyToCheckinRes, error) {
	out := new(ListMyTicketReadyToCheckinRes)
	err := c.cc.Invoke(ctx, "/ticket.mobile.TicketService/ListMyTicketReadyToCheckin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) MarkTicketOffline(ctx context.Context, in *MarkTicketOfflineReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ticket.mobile.TicketService/MarkTicketOffline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetMyTicketsByDeliveryID(ctx context.Context, in *GetMyTicketsByDeliveryIDReq, opts ...grpc.CallOption) (*GetMyTicketsByDeliveryIDRes, error) {
	out := new(GetMyTicketsByDeliveryIDRes)
	err := c.cc.Invoke(ctx, "/ticket.mobile.TicketService/GetMyTicketsByDeliveryID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketServiceServer is the server API for TicketService service.
// All implementations must embed UnimplementedTicketServiceServer
// for forward compatibility
type TicketServiceServer interface {
	UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*Empty, error)
	UpdateStatus(context.Context, *UpdateStatusReq) (*Empty, error)
	UpdateEnableVerificationCode(context.Context, *UpdateEnableVerificationCodeReq) (*Empty, error)
	GetMyTicket(context.Context, *GetMyTicketReq) (*GetMyTicketRes, error)
	GetMyTicketByOrderId(context.Context, *GetMyTicketByOrderIdReq) (*GetMyTicketByOrderIdRes, error)
	GetMyTickets(context.Context, *ListMyTicketReq) (*GetMyTicketsRes, error)
	GetMyTicketByTransferTransactionId(context.Context, *GetMyTicketByTransferTransactionIdReq) (*GetMyTicketByTransferTransactionIdRes, error)
	GetMyTransferTransactionHistory(context.Context, *GetMyTransferTransactionHistoryReq) (*GetMyTransferTransactionHistoryRes, error)
	ListMyTicketByStatus(context.Context, *ListMyTicketByStatusReq) (*ListMyTicketByStatusRes, error)
	ListMyTicketByPriceBlock(context.Context, *ListMyTicketByPriceBlockReq) (*ListMyTicketByPriceBlockRes, error)
	ListMyTicketReadyToCheckin(context.Context, *ListMyTicketReadyToCheckinReq) (*ListMyTicketReadyToCheckinRes, error)
	MarkTicketOffline(context.Context, *MarkTicketOfflineReq) (*Empty, error)
	GetMyTicketsByDeliveryID(context.Context, *GetMyTicketsByDeliveryIDReq) (*GetMyTicketsByDeliveryIDRes, error)
	mustEmbedUnimplementedTicketServiceServer()
}

// UnimplementedTicketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTicketServiceServer struct {
}

func (UnimplementedTicketServiceServer) UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedTicketServiceServer) UpdateStatus(context.Context, *UpdateStatusReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedTicketServiceServer) UpdateEnableVerificationCode(context.Context, *UpdateEnableVerificationCodeReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnableVerificationCode not implemented")
}
func (UnimplementedTicketServiceServer) GetMyTicket(context.Context, *GetMyTicketReq) (*GetMyTicketRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyTicket not implemented")
}
func (UnimplementedTicketServiceServer) GetMyTicketByOrderId(context.Context, *GetMyTicketByOrderIdReq) (*GetMyTicketByOrderIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyTicketByOrderId not implemented")
}
func (UnimplementedTicketServiceServer) GetMyTickets(context.Context, *ListMyTicketReq) (*GetMyTicketsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyTickets not implemented")
}
func (UnimplementedTicketServiceServer) GetMyTicketByTransferTransactionId(context.Context, *GetMyTicketByTransferTransactionIdReq) (*GetMyTicketByTransferTransactionIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyTicketByTransferTransactionId not implemented")
}
func (UnimplementedTicketServiceServer) GetMyTransferTransactionHistory(context.Context, *GetMyTransferTransactionHistoryReq) (*GetMyTransferTransactionHistoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyTransferTransactionHistory not implemented")
}
func (UnimplementedTicketServiceServer) ListMyTicketByStatus(context.Context, *ListMyTicketByStatusReq) (*ListMyTicketByStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyTicketByStatus not implemented")
}
func (UnimplementedTicketServiceServer) ListMyTicketByPriceBlock(context.Context, *ListMyTicketByPriceBlockReq) (*ListMyTicketByPriceBlockRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyTicketByPriceBlock not implemented")
}
func (UnimplementedTicketServiceServer) ListMyTicketReadyToCheckin(context.Context, *ListMyTicketReadyToCheckinReq) (*ListMyTicketReadyToCheckinRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyTicketReadyToCheckin not implemented")
}
func (UnimplementedTicketServiceServer) MarkTicketOffline(context.Context, *MarkTicketOfflineReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkTicketOffline not implemented")
}
func (UnimplementedTicketServiceServer) GetMyTicketsByDeliveryID(context.Context, *GetMyTicketsByDeliveryIDReq) (*GetMyTicketsByDeliveryIDRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyTicketsByDeliveryID not implemented")
}
func (UnimplementedTicketServiceServer) mustEmbedUnimplementedTicketServiceServer() {}

// UnsafeTicketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketServiceServer will
// result in compilation errors.
type UnsafeTicketServiceServer interface {
	mustEmbedUnimplementedTicketServiceServer()
}

func RegisterTicketServiceServer(s grpc.ServiceRegistrar, srv TicketServiceServer) {
	s.RegisterService(&TicketService_ServiceDesc, srv)
}

func _TicketService_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile.TicketService/UpdateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile.TicketService/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).UpdateStatus(ctx, req.(*UpdateStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_UpdateEnableVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnableVerificationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).UpdateEnableVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile.TicketService/UpdateEnableVerificationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).UpdateEnableVerificationCode(ctx, req.(*UpdateEnableVerificationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetMyTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyTicketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetMyTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile.TicketService/GetMyTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetMyTicket(ctx, req.(*GetMyTicketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetMyTicketByOrderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyTicketByOrderIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetMyTicketByOrderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile.TicketService/GetMyTicketByOrderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetMyTicketByOrderId(ctx, req.(*GetMyTicketByOrderIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetMyTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyTicketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetMyTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile.TicketService/GetMyTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetMyTickets(ctx, req.(*ListMyTicketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetMyTicketByTransferTransactionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyTicketByTransferTransactionIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetMyTicketByTransferTransactionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile.TicketService/GetMyTicketByTransferTransactionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetMyTicketByTransferTransactionId(ctx, req.(*GetMyTicketByTransferTransactionIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetMyTransferTransactionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyTransferTransactionHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetMyTransferTransactionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile.TicketService/GetMyTransferTransactionHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetMyTransferTransactionHistory(ctx, req.(*GetMyTransferTransactionHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_ListMyTicketByStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyTicketByStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).ListMyTicketByStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile.TicketService/ListMyTicketByStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).ListMyTicketByStatus(ctx, req.(*ListMyTicketByStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_ListMyTicketByPriceBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyTicketByPriceBlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).ListMyTicketByPriceBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile.TicketService/ListMyTicketByPriceBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).ListMyTicketByPriceBlock(ctx, req.(*ListMyTicketByPriceBlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_ListMyTicketReadyToCheckin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyTicketReadyToCheckinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).ListMyTicketReadyToCheckin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile.TicketService/ListMyTicketReadyToCheckin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).ListMyTicketReadyToCheckin(ctx, req.(*ListMyTicketReadyToCheckinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_MarkTicketOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkTicketOfflineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).MarkTicketOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile.TicketService/MarkTicketOffline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).MarkTicketOffline(ctx, req.(*MarkTicketOfflineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetMyTicketsByDeliveryID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyTicketsByDeliveryIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetMyTicketsByDeliveryID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.mobile.TicketService/GetMyTicketsByDeliveryID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetMyTicketsByDeliveryID(ctx, req.(*GetMyTicketsByDeliveryIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketService_ServiceDesc is the grpc.ServiceDesc for TicketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticket.mobile.TicketService",
	HandlerType: (*TicketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserInfo",
			Handler:    _TicketService_UpdateUserInfo_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _TicketService_UpdateStatus_Handler,
		},
		{
			MethodName: "UpdateEnableVerificationCode",
			Handler:    _TicketService_UpdateEnableVerificationCode_Handler,
		},
		{
			MethodName: "GetMyTicket",
			Handler:    _TicketService_GetMyTicket_Handler,
		},
		{
			MethodName: "GetMyTicketByOrderId",
			Handler:    _TicketService_GetMyTicketByOrderId_Handler,
		},
		{
			MethodName: "GetMyTickets",
			Handler:    _TicketService_GetMyTickets_Handler,
		},
		{
			MethodName: "GetMyTicketByTransferTransactionId",
			Handler:    _TicketService_GetMyTicketByTransferTransactionId_Handler,
		},
		{
			MethodName: "GetMyTransferTransactionHistory",
			Handler:    _TicketService_GetMyTransferTransactionHistory_Handler,
		},
		{
			MethodName: "ListMyTicketByStatus",
			Handler:    _TicketService_ListMyTicketByStatus_Handler,
		},
		{
			MethodName: "ListMyTicketByPriceBlock",
			Handler:    _TicketService_ListMyTicketByPriceBlock_Handler,
		},
		{
			MethodName: "ListMyTicketReadyToCheckin",
			Handler:    _TicketService_ListMyTicketReadyToCheckin_Handler,
		},
		{
			MethodName: "MarkTicketOffline",
			Handler:    _TicketService_MarkTicketOffline_Handler,
		},
		{
			MethodName: "GetMyTicketsByDeliveryID",
			Handler:    _TicketService_GetMyTicketsByDeliveryID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticket/mobile/ticket.proto",
}
