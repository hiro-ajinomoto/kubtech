// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: ticket/backend/ticket.proto

package backend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TicketServiceClient is the client API for TicketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketServiceClient interface {
	GetTicketSeatIdByOrderId(ctx context.Context, in *GetTicketSeatIdByOrderIdReq, opts ...grpc.CallOption) (*GetTicketSeatIdByOrderIdRes, error)
	DeleteTicketByOrderId(ctx context.Context, in *DeleteTicketByOrderIdReq, opts ...grpc.CallOption) (*Empty, error)
}

type ticketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketServiceClient(cc grpc.ClientConnInterface) TicketServiceClient {
	return &ticketServiceClient{cc}
}

func (c *ticketServiceClient) GetTicketSeatIdByOrderId(ctx context.Context, in *GetTicketSeatIdByOrderIdReq, opts ...grpc.CallOption) (*GetTicketSeatIdByOrderIdRes, error) {
	out := new(GetTicketSeatIdByOrderIdRes)
	err := c.cc.Invoke(ctx, "/ticket.backend.TicketService/GetTicketSeatIdByOrderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) DeleteTicketByOrderId(ctx context.Context, in *DeleteTicketByOrderIdReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ticket.backend.TicketService/DeleteTicketByOrderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketServiceServer is the server API for TicketService service.
// All implementations must embed UnimplementedTicketServiceServer
// for forward compatibility
type TicketServiceServer interface {
	GetTicketSeatIdByOrderId(context.Context, *GetTicketSeatIdByOrderIdReq) (*GetTicketSeatIdByOrderIdRes, error)
	DeleteTicketByOrderId(context.Context, *DeleteTicketByOrderIdReq) (*Empty, error)
	mustEmbedUnimplementedTicketServiceServer()
}

// UnimplementedTicketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTicketServiceServer struct {
}

func (UnimplementedTicketServiceServer) GetTicketSeatIdByOrderId(context.Context, *GetTicketSeatIdByOrderIdReq) (*GetTicketSeatIdByOrderIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketSeatIdByOrderId not implemented")
}
func (UnimplementedTicketServiceServer) DeleteTicketByOrderId(context.Context, *DeleteTicketByOrderIdReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicketByOrderId not implemented")
}
func (UnimplementedTicketServiceServer) mustEmbedUnimplementedTicketServiceServer() {}

// UnsafeTicketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketServiceServer will
// result in compilation errors.
type UnsafeTicketServiceServer interface {
	mustEmbedUnimplementedTicketServiceServer()
}

func RegisterTicketServiceServer(s grpc.ServiceRegistrar, srv TicketServiceServer) {
	s.RegisterService(&TicketService_ServiceDesc, srv)
}

func _TicketService_GetTicketSeatIdByOrderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketSeatIdByOrderIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetTicketSeatIdByOrderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.backend.TicketService/GetTicketSeatIdByOrderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetTicketSeatIdByOrderId(ctx, req.(*GetTicketSeatIdByOrderIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_DeleteTicketByOrderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTicketByOrderIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).DeleteTicketByOrderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.backend.TicketService/DeleteTicketByOrderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).DeleteTicketByOrderId(ctx, req.(*DeleteTicketByOrderIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketService_ServiceDesc is the grpc.ServiceDesc for TicketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticket.backend.TicketService",
	HandlerType: (*TicketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTicketSeatIdByOrderId",
			Handler:    _TicketService_GetTicketSeatIdByOrderId_Handler,
		},
		{
			MethodName: "DeleteTicketByOrderId",
			Handler:    _TicketService_DeleteTicketByOrderId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticket/backend/ticket.proto",
}
