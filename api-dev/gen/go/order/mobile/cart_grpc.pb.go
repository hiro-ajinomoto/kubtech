// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: order/mobile/cart.proto

package mobile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CartServiceClient is the client API for CartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartServiceClient interface {
	AddProductToCart(ctx context.Context, in *AddProductToCartReq, opts ...grpc.CallOption) (*AddProductToCartRes, error)
	UpdateMyCart(ctx context.Context, in *UpdateMyCartReq, opts ...grpc.CallOption) (*UpdateMyCartRes, error)
	RemoveProductFromCart(ctx context.Context, in *RemoveProductFromCartReq, opts ...grpc.CallOption) (*RemoveProductFromCartRes, error)
	GetMyCart(ctx context.Context, in *GetMyCartReq, opts ...grpc.CallOption) (*GetMyCartRes, error)
}

type cartServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCartServiceClient(cc grpc.ClientConnInterface) CartServiceClient {
	return &cartServiceClient{cc}
}

func (c *cartServiceClient) AddProductToCart(ctx context.Context, in *AddProductToCartReq, opts ...grpc.CallOption) (*AddProductToCartRes, error) {
	out := new(AddProductToCartRes)
	err := c.cc.Invoke(ctx, "/order.mobile.CartService/AddProductToCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) UpdateMyCart(ctx context.Context, in *UpdateMyCartReq, opts ...grpc.CallOption) (*UpdateMyCartRes, error) {
	out := new(UpdateMyCartRes)
	err := c.cc.Invoke(ctx, "/order.mobile.CartService/UpdateMyCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) RemoveProductFromCart(ctx context.Context, in *RemoveProductFromCartReq, opts ...grpc.CallOption) (*RemoveProductFromCartRes, error) {
	out := new(RemoveProductFromCartRes)
	err := c.cc.Invoke(ctx, "/order.mobile.CartService/RemoveProductFromCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) GetMyCart(ctx context.Context, in *GetMyCartReq, opts ...grpc.CallOption) (*GetMyCartRes, error) {
	out := new(GetMyCartRes)
	err := c.cc.Invoke(ctx, "/order.mobile.CartService/GetMyCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartServiceServer is the server API for CartService service.
// All implementations must embed UnimplementedCartServiceServer
// for forward compatibility
type CartServiceServer interface {
	AddProductToCart(context.Context, *AddProductToCartReq) (*AddProductToCartRes, error)
	UpdateMyCart(context.Context, *UpdateMyCartReq) (*UpdateMyCartRes, error)
	RemoveProductFromCart(context.Context, *RemoveProductFromCartReq) (*RemoveProductFromCartRes, error)
	GetMyCart(context.Context, *GetMyCartReq) (*GetMyCartRes, error)
	mustEmbedUnimplementedCartServiceServer()
}

// UnimplementedCartServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCartServiceServer struct {
}

func (UnimplementedCartServiceServer) AddProductToCart(context.Context, *AddProductToCartReq) (*AddProductToCartRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductToCart not implemented")
}
func (UnimplementedCartServiceServer) UpdateMyCart(context.Context, *UpdateMyCartReq) (*UpdateMyCartRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMyCart not implemented")
}
func (UnimplementedCartServiceServer) RemoveProductFromCart(context.Context, *RemoveProductFromCartReq) (*RemoveProductFromCartRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProductFromCart not implemented")
}
func (UnimplementedCartServiceServer) GetMyCart(context.Context, *GetMyCartReq) (*GetMyCartRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyCart not implemented")
}
func (UnimplementedCartServiceServer) mustEmbedUnimplementedCartServiceServer() {}

// UnsafeCartServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartServiceServer will
// result in compilation errors.
type UnsafeCartServiceServer interface {
	mustEmbedUnimplementedCartServiceServer()
}

func RegisterCartServiceServer(s grpc.ServiceRegistrar, srv CartServiceServer) {
	s.RegisterService(&CartService_ServiceDesc, srv)
}

func _CartService_AddProductToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductToCartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).AddProductToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.mobile.CartService/AddProductToCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).AddProductToCart(ctx, req.(*AddProductToCartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_UpdateMyCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMyCartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).UpdateMyCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.mobile.CartService/UpdateMyCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).UpdateMyCart(ctx, req.(*UpdateMyCartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_RemoveProductFromCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProductFromCartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).RemoveProductFromCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.mobile.CartService/RemoveProductFromCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).RemoveProductFromCart(ctx, req.(*RemoveProductFromCartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_GetMyCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyCartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).GetMyCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.mobile.CartService/GetMyCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).GetMyCart(ctx, req.(*GetMyCartReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CartService_ServiceDesc is the grpc.ServiceDesc for CartService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.mobile.CartService",
	HandlerType: (*CartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductToCart",
			Handler:    _CartService_AddProductToCart_Handler,
		},
		{
			MethodName: "UpdateMyCart",
			Handler:    _CartService_UpdateMyCart_Handler,
		},
		{
			MethodName: "RemoveProductFromCart",
			Handler:    _CartService_RemoveProductFromCart_Handler,
		},
		{
			MethodName: "GetMyCart",
			Handler:    _CartService_GetMyCart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order/mobile/cart.proto",
}
