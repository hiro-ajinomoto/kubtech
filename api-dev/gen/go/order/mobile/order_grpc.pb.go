// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: order/mobile/order.proto

package mobile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	Checkout(ctx context.Context, in *CheckoutReq, opts ...grpc.CallOption) (*CheckoutRes, error)
	AddPaymentMethod(ctx context.Context, in *AddPaymentMethodReq, opts ...grpc.CallOption) (*AddPaymentMethodRes, error)
	AddPromotions(ctx context.Context, in *AddPromotionsReq, opts ...grpc.CallOption) (*AddPromotionsRes, error)
	AddShippingAddress(ctx context.Context, in *AddShippingAddressReq, opts ...grpc.CallOption) (*AddShippingAddressRes, error)
	AddInstallment(ctx context.Context, in *AddInstallmentReq, opts ...grpc.CallOption) (*AddInstallmentRes, error)
	AddExtraServices(ctx context.Context, in *AddExtraServicesReq, opts ...grpc.CallOption) (*AddExtraServicesRes, error)
	PlaceOrder(ctx context.Context, in *PlaceOrderReq, opts ...grpc.CallOption) (*PlaceOrderRes, error)
	CancelOrder(ctx context.Context, in *CancelOrderReq, opts ...grpc.CallOption) (*CancelOrderRes, error)
	GetMyOrder(ctx context.Context, in *GetMyOrderReq, opts ...grpc.CallOption) (*GetMyOrderRes, error)
	GetMyOrderHistory(ctx context.Context, in *GetMyOrderHistoryReq, opts ...grpc.CallOption) (*GetMyOrderHistoryRes, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) Checkout(ctx context.Context, in *CheckoutReq, opts ...grpc.CallOption) (*CheckoutRes, error) {
	out := new(CheckoutRes)
	err := c.cc.Invoke(ctx, "/order.mobile.OrderService/Checkout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) AddPaymentMethod(ctx context.Context, in *AddPaymentMethodReq, opts ...grpc.CallOption) (*AddPaymentMethodRes, error) {
	out := new(AddPaymentMethodRes)
	err := c.cc.Invoke(ctx, "/order.mobile.OrderService/AddPaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) AddPromotions(ctx context.Context, in *AddPromotionsReq, opts ...grpc.CallOption) (*AddPromotionsRes, error) {
	out := new(AddPromotionsRes)
	err := c.cc.Invoke(ctx, "/order.mobile.OrderService/AddPromotions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) AddShippingAddress(ctx context.Context, in *AddShippingAddressReq, opts ...grpc.CallOption) (*AddShippingAddressRes, error) {
	out := new(AddShippingAddressRes)
	err := c.cc.Invoke(ctx, "/order.mobile.OrderService/AddShippingAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) AddInstallment(ctx context.Context, in *AddInstallmentReq, opts ...grpc.CallOption) (*AddInstallmentRes, error) {
	out := new(AddInstallmentRes)
	err := c.cc.Invoke(ctx, "/order.mobile.OrderService/AddInstallment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) AddExtraServices(ctx context.Context, in *AddExtraServicesReq, opts ...grpc.CallOption) (*AddExtraServicesRes, error) {
	out := new(AddExtraServicesRes)
	err := c.cc.Invoke(ctx, "/order.mobile.OrderService/AddExtraServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) PlaceOrder(ctx context.Context, in *PlaceOrderReq, opts ...grpc.CallOption) (*PlaceOrderRes, error) {
	out := new(PlaceOrderRes)
	err := c.cc.Invoke(ctx, "/order.mobile.OrderService/PlaceOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CancelOrder(ctx context.Context, in *CancelOrderReq, opts ...grpc.CallOption) (*CancelOrderRes, error) {
	out := new(CancelOrderRes)
	err := c.cc.Invoke(ctx, "/order.mobile.OrderService/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetMyOrder(ctx context.Context, in *GetMyOrderReq, opts ...grpc.CallOption) (*GetMyOrderRes, error) {
	out := new(GetMyOrderRes)
	err := c.cc.Invoke(ctx, "/order.mobile.OrderService/GetMyOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetMyOrderHistory(ctx context.Context, in *GetMyOrderHistoryReq, opts ...grpc.CallOption) (*GetMyOrderHistoryRes, error) {
	out := new(GetMyOrderHistoryRes)
	err := c.cc.Invoke(ctx, "/order.mobile.OrderService/GetMyOrderHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	Checkout(context.Context, *CheckoutReq) (*CheckoutRes, error)
	AddPaymentMethod(context.Context, *AddPaymentMethodReq) (*AddPaymentMethodRes, error)
	AddPromotions(context.Context, *AddPromotionsReq) (*AddPromotionsRes, error)
	AddShippingAddress(context.Context, *AddShippingAddressReq) (*AddShippingAddressRes, error)
	AddInstallment(context.Context, *AddInstallmentReq) (*AddInstallmentRes, error)
	AddExtraServices(context.Context, *AddExtraServicesReq) (*AddExtraServicesRes, error)
	PlaceOrder(context.Context, *PlaceOrderReq) (*PlaceOrderRes, error)
	CancelOrder(context.Context, *CancelOrderReq) (*CancelOrderRes, error)
	GetMyOrder(context.Context, *GetMyOrderReq) (*GetMyOrderRes, error)
	GetMyOrderHistory(context.Context, *GetMyOrderHistoryReq) (*GetMyOrderHistoryRes, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) Checkout(context.Context, *CheckoutReq) (*CheckoutRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checkout not implemented")
}
func (UnimplementedOrderServiceServer) AddPaymentMethod(context.Context, *AddPaymentMethodReq) (*AddPaymentMethodRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPaymentMethod not implemented")
}
func (UnimplementedOrderServiceServer) AddPromotions(context.Context, *AddPromotionsReq) (*AddPromotionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPromotions not implemented")
}
func (UnimplementedOrderServiceServer) AddShippingAddress(context.Context, *AddShippingAddressReq) (*AddShippingAddressRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShippingAddress not implemented")
}
func (UnimplementedOrderServiceServer) AddInstallment(context.Context, *AddInstallmentReq) (*AddInstallmentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInstallment not implemented")
}
func (UnimplementedOrderServiceServer) AddExtraServices(context.Context, *AddExtraServicesReq) (*AddExtraServicesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExtraServices not implemented")
}
func (UnimplementedOrderServiceServer) PlaceOrder(context.Context, *PlaceOrderReq) (*PlaceOrderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (UnimplementedOrderServiceServer) CancelOrder(context.Context, *CancelOrderReq) (*CancelOrderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedOrderServiceServer) GetMyOrder(context.Context, *GetMyOrderReq) (*GetMyOrderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyOrder not implemented")
}
func (UnimplementedOrderServiceServer) GetMyOrderHistory(context.Context, *GetMyOrderHistoryReq) (*GetMyOrderHistoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyOrderHistory not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_Checkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Checkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.mobile.OrderService/Checkout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Checkout(ctx, req.(*CheckoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_AddPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPaymentMethodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).AddPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.mobile.OrderService/AddPaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).AddPaymentMethod(ctx, req.(*AddPaymentMethodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_AddPromotions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPromotionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).AddPromotions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.mobile.OrderService/AddPromotions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).AddPromotions(ctx, req.(*AddPromotionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_AddShippingAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddShippingAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).AddShippingAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.mobile.OrderService/AddShippingAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).AddShippingAddress(ctx, req.(*AddShippingAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_AddInstallment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInstallmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).AddInstallment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.mobile.OrderService/AddInstallment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).AddInstallment(ctx, req.(*AddInstallmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_AddExtraServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddExtraServicesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).AddExtraServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.mobile.OrderService/AddExtraServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).AddExtraServices(ctx, req.(*AddExtraServicesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.mobile.OrderService/PlaceOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).PlaceOrder(ctx, req.(*PlaceOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.mobile.OrderService/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CancelOrder(ctx, req.(*CancelOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetMyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetMyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.mobile.OrderService/GetMyOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetMyOrder(ctx, req.(*GetMyOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetMyOrderHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyOrderHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetMyOrderHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.mobile.OrderService/GetMyOrderHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetMyOrderHistory(ctx, req.(*GetMyOrderHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.mobile.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Checkout",
			Handler:    _OrderService_Checkout_Handler,
		},
		{
			MethodName: "AddPaymentMethod",
			Handler:    _OrderService_AddPaymentMethod_Handler,
		},
		{
			MethodName: "AddPromotions",
			Handler:    _OrderService_AddPromotions_Handler,
		},
		{
			MethodName: "AddShippingAddress",
			Handler:    _OrderService_AddShippingAddress_Handler,
		},
		{
			MethodName: "AddInstallment",
			Handler:    _OrderService_AddInstallment_Handler,
		},
		{
			MethodName: "AddExtraServices",
			Handler:    _OrderService_AddExtraServices_Handler,
		},
		{
			MethodName: "PlaceOrder",
			Handler:    _OrderService_PlaceOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _OrderService_CancelOrder_Handler,
		},
		{
			MethodName: "GetMyOrder",
			Handler:    _OrderService_GetMyOrder_Handler,
		},
		{
			MethodName: "GetMyOrderHistory",
			Handler:    _OrderService_GetMyOrderHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order/mobile/order.proto",
}
