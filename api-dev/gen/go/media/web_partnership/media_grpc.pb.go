// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: media/web_partnership/media.proto

package web_partnership

import (
	context "context"
	media "gitlab.bcasia.io/thuynga/apps/api/gen/go/media"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MediaServiceClient is the client API for MediaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaServiceClient interface {
	CreateMedia(ctx context.Context, in *CreateMediaReq, opts ...grpc.CallOption) (*CreateMediaRes, error)
	RetrieveMedia(ctx context.Context, in *RetrieveMediaReq, opts ...grpc.CallOption) (*RetrieveMediaRes, error)
	UpdateMedia(ctx context.Context, in *UpdateMediaReq, opts ...grpc.CallOption) (*media.Empty, error)
	DeleteMedia(ctx context.Context, in *DeleteMediaReq, opts ...grpc.CallOption) (*media.Empty, error)
	ListMedias(ctx context.Context, in *ListMediasReq, opts ...grpc.CallOption) (*ListMediasRes, error)
	InternalListMediaByIds(ctx context.Context, in *InternalListMediaByIdsReq, opts ...grpc.CallOption) (*InternalListMediaByIdsRes, error)
}

type mediaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaServiceClient(cc grpc.ClientConnInterface) MediaServiceClient {
	return &mediaServiceClient{cc}
}

func (c *mediaServiceClient) CreateMedia(ctx context.Context, in *CreateMediaReq, opts ...grpc.CallOption) (*CreateMediaRes, error) {
	out := new(CreateMediaRes)
	err := c.cc.Invoke(ctx, "/media.web_partnership.MediaService/CreateMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) RetrieveMedia(ctx context.Context, in *RetrieveMediaReq, opts ...grpc.CallOption) (*RetrieveMediaRes, error) {
	out := new(RetrieveMediaRes)
	err := c.cc.Invoke(ctx, "/media.web_partnership.MediaService/RetrieveMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) UpdateMedia(ctx context.Context, in *UpdateMediaReq, opts ...grpc.CallOption) (*media.Empty, error) {
	out := new(media.Empty)
	err := c.cc.Invoke(ctx, "/media.web_partnership.MediaService/UpdateMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) DeleteMedia(ctx context.Context, in *DeleteMediaReq, opts ...grpc.CallOption) (*media.Empty, error) {
	out := new(media.Empty)
	err := c.cc.Invoke(ctx, "/media.web_partnership.MediaService/DeleteMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) ListMedias(ctx context.Context, in *ListMediasReq, opts ...grpc.CallOption) (*ListMediasRes, error) {
	out := new(ListMediasRes)
	err := c.cc.Invoke(ctx, "/media.web_partnership.MediaService/ListMedias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) InternalListMediaByIds(ctx context.Context, in *InternalListMediaByIdsReq, opts ...grpc.CallOption) (*InternalListMediaByIdsRes, error) {
	out := new(InternalListMediaByIdsRes)
	err := c.cc.Invoke(ctx, "/media.web_partnership.MediaService/InternalListMediaByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaServiceServer is the server API for MediaService service.
// All implementations must embed UnimplementedMediaServiceServer
// for forward compatibility
type MediaServiceServer interface {
	CreateMedia(context.Context, *CreateMediaReq) (*CreateMediaRes, error)
	RetrieveMedia(context.Context, *RetrieveMediaReq) (*RetrieveMediaRes, error)
	UpdateMedia(context.Context, *UpdateMediaReq) (*media.Empty, error)
	DeleteMedia(context.Context, *DeleteMediaReq) (*media.Empty, error)
	ListMedias(context.Context, *ListMediasReq) (*ListMediasRes, error)
	InternalListMediaByIds(context.Context, *InternalListMediaByIdsReq) (*InternalListMediaByIdsRes, error)
	mustEmbedUnimplementedMediaServiceServer()
}

// UnimplementedMediaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMediaServiceServer struct {
}

func (UnimplementedMediaServiceServer) CreateMedia(context.Context, *CreateMediaReq) (*CreateMediaRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedia not implemented")
}
func (UnimplementedMediaServiceServer) RetrieveMedia(context.Context, *RetrieveMediaReq) (*RetrieveMediaRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveMedia not implemented")
}
func (UnimplementedMediaServiceServer) UpdateMedia(context.Context, *UpdateMediaReq) (*media.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedia not implemented")
}
func (UnimplementedMediaServiceServer) DeleteMedia(context.Context, *DeleteMediaReq) (*media.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedia not implemented")
}
func (UnimplementedMediaServiceServer) ListMedias(context.Context, *ListMediasReq) (*ListMediasRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedias not implemented")
}
func (UnimplementedMediaServiceServer) InternalListMediaByIds(context.Context, *InternalListMediaByIdsReq) (*InternalListMediaByIdsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalListMediaByIds not implemented")
}
func (UnimplementedMediaServiceServer) mustEmbedUnimplementedMediaServiceServer() {}

// UnsafeMediaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaServiceServer will
// result in compilation errors.
type UnsafeMediaServiceServer interface {
	mustEmbedUnimplementedMediaServiceServer()
}

func RegisterMediaServiceServer(s grpc.ServiceRegistrar, srv MediaServiceServer) {
	s.RegisterService(&MediaService_ServiceDesc, srv)
}

func _MediaService_CreateMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMediaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).CreateMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.web_partnership.MediaService/CreateMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).CreateMedia(ctx, req.(*CreateMediaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_RetrieveMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveMediaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).RetrieveMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.web_partnership.MediaService/RetrieveMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).RetrieveMedia(ctx, req.(*RetrieveMediaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_UpdateMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMediaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).UpdateMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.web_partnership.MediaService/UpdateMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).UpdateMedia(ctx, req.(*UpdateMediaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_DeleteMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMediaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).DeleteMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.web_partnership.MediaService/DeleteMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).DeleteMedia(ctx, req.(*DeleteMediaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_ListMedias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMediasReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).ListMedias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.web_partnership.MediaService/ListMedias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).ListMedias(ctx, req.(*ListMediasReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_InternalListMediaByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalListMediaByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).InternalListMediaByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.web_partnership.MediaService/InternalListMediaByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).InternalListMediaByIds(ctx, req.(*InternalListMediaByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MediaService_ServiceDesc is the grpc.ServiceDesc for MediaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "media.web_partnership.MediaService",
	HandlerType: (*MediaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMedia",
			Handler:    _MediaService_CreateMedia_Handler,
		},
		{
			MethodName: "RetrieveMedia",
			Handler:    _MediaService_RetrieveMedia_Handler,
		},
		{
			MethodName: "UpdateMedia",
			Handler:    _MediaService_UpdateMedia_Handler,
		},
		{
			MethodName: "DeleteMedia",
			Handler:    _MediaService_DeleteMedia_Handler,
		},
		{
			MethodName: "ListMedias",
			Handler:    _MediaService_ListMedias_Handler,
		},
		{
			MethodName: "InternalListMediaByIds",
			Handler:    _MediaService_InternalListMediaByIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "media/web_partnership/media.proto",
}
