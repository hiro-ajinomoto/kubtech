// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: media/web_partnership/playlist.proto

package web_partnership

import (
	context "context"
	media "gitlab.bcasia.io/thuynga/apps/api/gen/go/media"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlaylistServiceClient is the client API for PlaylistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaylistServiceClient interface {
	CreatePlaylist(ctx context.Context, in *CreatePlaylistReq, opts ...grpc.CallOption) (*CreatePlaylistRes, error)
	UpdatePlaylist(ctx context.Context, in *UpdatePlaylistReq, opts ...grpc.CallOption) (*media.Empty, error)
	DeletePlaylist(ctx context.Context, in *DeletePlaylistReq, opts ...grpc.CallOption) (*media.Empty, error)
	RetrievePlaylist(ctx context.Context, in *RetrievePlaylistReq, opts ...grpc.CallOption) (*RetrievePlaylistRes, error)
	ListPlaylist(ctx context.Context, in *ListPlaylistReq, opts ...grpc.CallOption) (*ListPlaylistRes, error)
}

type playlistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaylistServiceClient(cc grpc.ClientConnInterface) PlaylistServiceClient {
	return &playlistServiceClient{cc}
}

func (c *playlistServiceClient) CreatePlaylist(ctx context.Context, in *CreatePlaylistReq, opts ...grpc.CallOption) (*CreatePlaylistRes, error) {
	out := new(CreatePlaylistRes)
	err := c.cc.Invoke(ctx, "/media.web_partnership.PlaylistService/CreatePlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) UpdatePlaylist(ctx context.Context, in *UpdatePlaylistReq, opts ...grpc.CallOption) (*media.Empty, error) {
	out := new(media.Empty)
	err := c.cc.Invoke(ctx, "/media.web_partnership.PlaylistService/UpdatePlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) DeletePlaylist(ctx context.Context, in *DeletePlaylistReq, opts ...grpc.CallOption) (*media.Empty, error) {
	out := new(media.Empty)
	err := c.cc.Invoke(ctx, "/media.web_partnership.PlaylistService/DeletePlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) RetrievePlaylist(ctx context.Context, in *RetrievePlaylistReq, opts ...grpc.CallOption) (*RetrievePlaylistRes, error) {
	out := new(RetrievePlaylistRes)
	err := c.cc.Invoke(ctx, "/media.web_partnership.PlaylistService/RetrievePlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) ListPlaylist(ctx context.Context, in *ListPlaylistReq, opts ...grpc.CallOption) (*ListPlaylistRes, error) {
	out := new(ListPlaylistRes)
	err := c.cc.Invoke(ctx, "/media.web_partnership.PlaylistService/ListPlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaylistServiceServer is the server API for PlaylistService service.
// All implementations must embed UnimplementedPlaylistServiceServer
// for forward compatibility
type PlaylistServiceServer interface {
	CreatePlaylist(context.Context, *CreatePlaylistReq) (*CreatePlaylistRes, error)
	UpdatePlaylist(context.Context, *UpdatePlaylistReq) (*media.Empty, error)
	DeletePlaylist(context.Context, *DeletePlaylistReq) (*media.Empty, error)
	RetrievePlaylist(context.Context, *RetrievePlaylistReq) (*RetrievePlaylistRes, error)
	ListPlaylist(context.Context, *ListPlaylistReq) (*ListPlaylistRes, error)
	mustEmbedUnimplementedPlaylistServiceServer()
}

// UnimplementedPlaylistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlaylistServiceServer struct {
}

func (UnimplementedPlaylistServiceServer) CreatePlaylist(context.Context, *CreatePlaylistReq) (*CreatePlaylistRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlaylist not implemented")
}
func (UnimplementedPlaylistServiceServer) UpdatePlaylist(context.Context, *UpdatePlaylistReq) (*media.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlaylist not implemented")
}
func (UnimplementedPlaylistServiceServer) DeletePlaylist(context.Context, *DeletePlaylistReq) (*media.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlaylist not implemented")
}
func (UnimplementedPlaylistServiceServer) RetrievePlaylist(context.Context, *RetrievePlaylistReq) (*RetrievePlaylistRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrievePlaylist not implemented")
}
func (UnimplementedPlaylistServiceServer) ListPlaylist(context.Context, *ListPlaylistReq) (*ListPlaylistRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlaylist not implemented")
}
func (UnimplementedPlaylistServiceServer) mustEmbedUnimplementedPlaylistServiceServer() {}

// UnsafePlaylistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaylistServiceServer will
// result in compilation errors.
type UnsafePlaylistServiceServer interface {
	mustEmbedUnimplementedPlaylistServiceServer()
}

func RegisterPlaylistServiceServer(s grpc.ServiceRegistrar, srv PlaylistServiceServer) {
	s.RegisterService(&PlaylistService_ServiceDesc, srv)
}

func _PlaylistService_CreatePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlaylistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).CreatePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.web_partnership.PlaylistService/CreatePlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).CreatePlaylist(ctx, req.(*CreatePlaylistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_UpdatePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlaylistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).UpdatePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.web_partnership.PlaylistService/UpdatePlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).UpdatePlaylist(ctx, req.(*UpdatePlaylistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_DeletePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlaylistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).DeletePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.web_partnership.PlaylistService/DeletePlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).DeletePlaylist(ctx, req.(*DeletePlaylistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_RetrievePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrievePlaylistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).RetrievePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.web_partnership.PlaylistService/RetrievePlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).RetrievePlaylist(ctx, req.(*RetrievePlaylistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_ListPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlaylistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).ListPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.web_partnership.PlaylistService/ListPlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).ListPlaylist(ctx, req.(*ListPlaylistReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PlaylistService_ServiceDesc is the grpc.ServiceDesc for PlaylistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaylistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "media.web_partnership.PlaylistService",
	HandlerType: (*PlaylistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlaylist",
			Handler:    _PlaylistService_CreatePlaylist_Handler,
		},
		{
			MethodName: "UpdatePlaylist",
			Handler:    _PlaylistService_UpdatePlaylist_Handler,
		},
		{
			MethodName: "DeletePlaylist",
			Handler:    _PlaylistService_DeletePlaylist_Handler,
		},
		{
			MethodName: "RetrievePlaylist",
			Handler:    _PlaylistService_RetrievePlaylist_Handler,
		},
		{
			MethodName: "ListPlaylist",
			Handler:    _PlaylistService_ListPlaylist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "media/web_partnership/playlist.proto",
}
