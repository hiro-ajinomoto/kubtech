// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: media/web_partnership/hashtag.proto

package web_partnership

import (
	context "context"
	media "gitlab.bcasia.io/thuynga/apps/api/gen/go/media"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HashtagServiceClient is the client API for HashtagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HashtagServiceClient interface {
	CreateHashtag(ctx context.Context, in *CreateHashtagReq, opts ...grpc.CallOption) (*CreateHashtagRes, error)
	UpdateHashtag(ctx context.Context, in *UpdateHashtagReq, opts ...grpc.CallOption) (*media.Empty, error)
	DeleteHashtag(ctx context.Context, in *DeleteHashtagReq, opts ...grpc.CallOption) (*media.Empty, error)
	RetrieveHashtag(ctx context.Context, in *RetrieveHashtagReq, opts ...grpc.CallOption) (*RetrieveHashtagRes, error)
	ListRetrieveHashtag(ctx context.Context, in *ListHashtagReq, opts ...grpc.CallOption) (*ListHashtagRes, error)
	PublicRetrieveHashtag(ctx context.Context, in *PublicRetrieveHashtagReq, opts ...grpc.CallOption) (*PublicRetrieveHashtagRes, error)
	PublicListHashtag(ctx context.Context, in *PublicListHashtagReq, opts ...grpc.CallOption) (*PublicListHashtagRes, error)
	InternalListHashtagByIds(ctx context.Context, in *InternalListHashtagByIdsReq, opts ...grpc.CallOption) (*InternalListHashtagByIdsRes, error)
	InternalUpsertHashtags(ctx context.Context, in *InternalUpsertHashtagsReq, opts ...grpc.CallOption) (*InternalUpsertHashtagsRes, error)
}

type hashtagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHashtagServiceClient(cc grpc.ClientConnInterface) HashtagServiceClient {
	return &hashtagServiceClient{cc}
}

func (c *hashtagServiceClient) CreateHashtag(ctx context.Context, in *CreateHashtagReq, opts ...grpc.CallOption) (*CreateHashtagRes, error) {
	out := new(CreateHashtagRes)
	err := c.cc.Invoke(ctx, "/media.web_partnership.HashtagService/CreateHashtag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashtagServiceClient) UpdateHashtag(ctx context.Context, in *UpdateHashtagReq, opts ...grpc.CallOption) (*media.Empty, error) {
	out := new(media.Empty)
	err := c.cc.Invoke(ctx, "/media.web_partnership.HashtagService/UpdateHashtag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashtagServiceClient) DeleteHashtag(ctx context.Context, in *DeleteHashtagReq, opts ...grpc.CallOption) (*media.Empty, error) {
	out := new(media.Empty)
	err := c.cc.Invoke(ctx, "/media.web_partnership.HashtagService/DeleteHashtag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashtagServiceClient) RetrieveHashtag(ctx context.Context, in *RetrieveHashtagReq, opts ...grpc.CallOption) (*RetrieveHashtagRes, error) {
	out := new(RetrieveHashtagRes)
	err := c.cc.Invoke(ctx, "/media.web_partnership.HashtagService/RetrieveHashtag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashtagServiceClient) ListRetrieveHashtag(ctx context.Context, in *ListHashtagReq, opts ...grpc.CallOption) (*ListHashtagRes, error) {
	out := new(ListHashtagRes)
	err := c.cc.Invoke(ctx, "/media.web_partnership.HashtagService/ListRetrieveHashtag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashtagServiceClient) PublicRetrieveHashtag(ctx context.Context, in *PublicRetrieveHashtagReq, opts ...grpc.CallOption) (*PublicRetrieveHashtagRes, error) {
	out := new(PublicRetrieveHashtagRes)
	err := c.cc.Invoke(ctx, "/media.web_partnership.HashtagService/PublicRetrieveHashtag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashtagServiceClient) PublicListHashtag(ctx context.Context, in *PublicListHashtagReq, opts ...grpc.CallOption) (*PublicListHashtagRes, error) {
	out := new(PublicListHashtagRes)
	err := c.cc.Invoke(ctx, "/media.web_partnership.HashtagService/PublicListHashtag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashtagServiceClient) InternalListHashtagByIds(ctx context.Context, in *InternalListHashtagByIdsReq, opts ...grpc.CallOption) (*InternalListHashtagByIdsRes, error) {
	out := new(InternalListHashtagByIdsRes)
	err := c.cc.Invoke(ctx, "/media.web_partnership.HashtagService/InternalListHashtagByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashtagServiceClient) InternalUpsertHashtags(ctx context.Context, in *InternalUpsertHashtagsReq, opts ...grpc.CallOption) (*InternalUpsertHashtagsRes, error) {
	out := new(InternalUpsertHashtagsRes)
	err := c.cc.Invoke(ctx, "/media.web_partnership.HashtagService/InternalUpsertHashtags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HashtagServiceServer is the server API for HashtagService service.
// All implementations must embed UnimplementedHashtagServiceServer
// for forward compatibility
type HashtagServiceServer interface {
	CreateHashtag(context.Context, *CreateHashtagReq) (*CreateHashtagRes, error)
	UpdateHashtag(context.Context, *UpdateHashtagReq) (*media.Empty, error)
	DeleteHashtag(context.Context, *DeleteHashtagReq) (*media.Empty, error)
	RetrieveHashtag(context.Context, *RetrieveHashtagReq) (*RetrieveHashtagRes, error)
	ListRetrieveHashtag(context.Context, *ListHashtagReq) (*ListHashtagRes, error)
	PublicRetrieveHashtag(context.Context, *PublicRetrieveHashtagReq) (*PublicRetrieveHashtagRes, error)
	PublicListHashtag(context.Context, *PublicListHashtagReq) (*PublicListHashtagRes, error)
	InternalListHashtagByIds(context.Context, *InternalListHashtagByIdsReq) (*InternalListHashtagByIdsRes, error)
	InternalUpsertHashtags(context.Context, *InternalUpsertHashtagsReq) (*InternalUpsertHashtagsRes, error)
	mustEmbedUnimplementedHashtagServiceServer()
}

// UnimplementedHashtagServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHashtagServiceServer struct {
}

func (UnimplementedHashtagServiceServer) CreateHashtag(context.Context, *CreateHashtagReq) (*CreateHashtagRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHashtag not implemented")
}
func (UnimplementedHashtagServiceServer) UpdateHashtag(context.Context, *UpdateHashtagReq) (*media.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHashtag not implemented")
}
func (UnimplementedHashtagServiceServer) DeleteHashtag(context.Context, *DeleteHashtagReq) (*media.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHashtag not implemented")
}
func (UnimplementedHashtagServiceServer) RetrieveHashtag(context.Context, *RetrieveHashtagReq) (*RetrieveHashtagRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveHashtag not implemented")
}
func (UnimplementedHashtagServiceServer) ListRetrieveHashtag(context.Context, *ListHashtagReq) (*ListHashtagRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRetrieveHashtag not implemented")
}
func (UnimplementedHashtagServiceServer) PublicRetrieveHashtag(context.Context, *PublicRetrieveHashtagReq) (*PublicRetrieveHashtagRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicRetrieveHashtag not implemented")
}
func (UnimplementedHashtagServiceServer) PublicListHashtag(context.Context, *PublicListHashtagReq) (*PublicListHashtagRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicListHashtag not implemented")
}
func (UnimplementedHashtagServiceServer) InternalListHashtagByIds(context.Context, *InternalListHashtagByIdsReq) (*InternalListHashtagByIdsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalListHashtagByIds not implemented")
}
func (UnimplementedHashtagServiceServer) InternalUpsertHashtags(context.Context, *InternalUpsertHashtagsReq) (*InternalUpsertHashtagsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalUpsertHashtags not implemented")
}
func (UnimplementedHashtagServiceServer) mustEmbedUnimplementedHashtagServiceServer() {}

// UnsafeHashtagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HashtagServiceServer will
// result in compilation errors.
type UnsafeHashtagServiceServer interface {
	mustEmbedUnimplementedHashtagServiceServer()
}

func RegisterHashtagServiceServer(s grpc.ServiceRegistrar, srv HashtagServiceServer) {
	s.RegisterService(&HashtagService_ServiceDesc, srv)
}

func _HashtagService_CreateHashtag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHashtagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagServiceServer).CreateHashtag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.web_partnership.HashtagService/CreateHashtag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagServiceServer).CreateHashtag(ctx, req.(*CreateHashtagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashtagService_UpdateHashtag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHashtagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagServiceServer).UpdateHashtag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.web_partnership.HashtagService/UpdateHashtag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagServiceServer).UpdateHashtag(ctx, req.(*UpdateHashtagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashtagService_DeleteHashtag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHashtagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagServiceServer).DeleteHashtag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.web_partnership.HashtagService/DeleteHashtag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagServiceServer).DeleteHashtag(ctx, req.(*DeleteHashtagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashtagService_RetrieveHashtag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveHashtagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagServiceServer).RetrieveHashtag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.web_partnership.HashtagService/RetrieveHashtag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagServiceServer).RetrieveHashtag(ctx, req.(*RetrieveHashtagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashtagService_ListRetrieveHashtag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHashtagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagServiceServer).ListRetrieveHashtag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.web_partnership.HashtagService/ListRetrieveHashtag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagServiceServer).ListRetrieveHashtag(ctx, req.(*ListHashtagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashtagService_PublicRetrieveHashtag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicRetrieveHashtagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagServiceServer).PublicRetrieveHashtag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.web_partnership.HashtagService/PublicRetrieveHashtag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagServiceServer).PublicRetrieveHashtag(ctx, req.(*PublicRetrieveHashtagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashtagService_PublicListHashtag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicListHashtagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagServiceServer).PublicListHashtag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.web_partnership.HashtagService/PublicListHashtag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagServiceServer).PublicListHashtag(ctx, req.(*PublicListHashtagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashtagService_InternalListHashtagByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalListHashtagByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagServiceServer).InternalListHashtagByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.web_partnership.HashtagService/InternalListHashtagByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagServiceServer).InternalListHashtagByIds(ctx, req.(*InternalListHashtagByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashtagService_InternalUpsertHashtags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalUpsertHashtagsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagServiceServer).InternalUpsertHashtags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.web_partnership.HashtagService/InternalUpsertHashtags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagServiceServer).InternalUpsertHashtags(ctx, req.(*InternalUpsertHashtagsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HashtagService_ServiceDesc is the grpc.ServiceDesc for HashtagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HashtagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "media.web_partnership.HashtagService",
	HandlerType: (*HashtagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHashtag",
			Handler:    _HashtagService_CreateHashtag_Handler,
		},
		{
			MethodName: "UpdateHashtag",
			Handler:    _HashtagService_UpdateHashtag_Handler,
		},
		{
			MethodName: "DeleteHashtag",
			Handler:    _HashtagService_DeleteHashtag_Handler,
		},
		{
			MethodName: "RetrieveHashtag",
			Handler:    _HashtagService_RetrieveHashtag_Handler,
		},
		{
			MethodName: "ListRetrieveHashtag",
			Handler:    _HashtagService_ListRetrieveHashtag_Handler,
		},
		{
			MethodName: "PublicRetrieveHashtag",
			Handler:    _HashtagService_PublicRetrieveHashtag_Handler,
		},
		{
			MethodName: "PublicListHashtag",
			Handler:    _HashtagService_PublicListHashtag_Handler,
		},
		{
			MethodName: "InternalListHashtagByIds",
			Handler:    _HashtagService_InternalListHashtagByIds_Handler,
		},
		{
			MethodName: "InternalUpsertHashtags",
			Handler:    _HashtagService_InternalUpsertHashtags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "media/web_partnership/hashtag.proto",
}
