// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: media/mobile/playlist.proto

package mobile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlaylistServiceClient is the client API for PlaylistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaylistServiceClient interface {
	PublicRetrievePlaylist(ctx context.Context, in *PublicRetrievePlaylistReq, opts ...grpc.CallOption) (*PublicRetrievePlaylistRes, error)
	PublicListPlaylist(ctx context.Context, in *PublicListPlaylistReq, opts ...grpc.CallOption) (*PublicListPlaylistRes, error)
	PublicListMediaByPlaylist(ctx context.Context, in *PublicListMediaByPlaylistReq, opts ...grpc.CallOption) (*PublicListMediaByPlaylistRes, error)
	PublicSearchMix(ctx context.Context, in *PublicSearchMixReq, opts ...grpc.CallOption) (*PublicSearchMixRes, error)
	PublicHomepage(ctx context.Context, in *PublicHomepagePlaylistReq, opts ...grpc.CallOption) (*PublicHomepagePlaylistRes, error)
}

type playlistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaylistServiceClient(cc grpc.ClientConnInterface) PlaylistServiceClient {
	return &playlistServiceClient{cc}
}

func (c *playlistServiceClient) PublicRetrievePlaylist(ctx context.Context, in *PublicRetrievePlaylistReq, opts ...grpc.CallOption) (*PublicRetrievePlaylistRes, error) {
	out := new(PublicRetrievePlaylistRes)
	err := c.cc.Invoke(ctx, "/media.mobile.PlaylistService/PublicRetrievePlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) PublicListPlaylist(ctx context.Context, in *PublicListPlaylistReq, opts ...grpc.CallOption) (*PublicListPlaylistRes, error) {
	out := new(PublicListPlaylistRes)
	err := c.cc.Invoke(ctx, "/media.mobile.PlaylistService/PublicListPlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) PublicListMediaByPlaylist(ctx context.Context, in *PublicListMediaByPlaylistReq, opts ...grpc.CallOption) (*PublicListMediaByPlaylistRes, error) {
	out := new(PublicListMediaByPlaylistRes)
	err := c.cc.Invoke(ctx, "/media.mobile.PlaylistService/PublicListMediaByPlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) PublicSearchMix(ctx context.Context, in *PublicSearchMixReq, opts ...grpc.CallOption) (*PublicSearchMixRes, error) {
	out := new(PublicSearchMixRes)
	err := c.cc.Invoke(ctx, "/media.mobile.PlaylistService/PublicSearchMix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) PublicHomepage(ctx context.Context, in *PublicHomepagePlaylistReq, opts ...grpc.CallOption) (*PublicHomepagePlaylistRes, error) {
	out := new(PublicHomepagePlaylistRes)
	err := c.cc.Invoke(ctx, "/media.mobile.PlaylistService/PublicHomepage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaylistServiceServer is the server API for PlaylistService service.
// All implementations must embed UnimplementedPlaylistServiceServer
// for forward compatibility
type PlaylistServiceServer interface {
	PublicRetrievePlaylist(context.Context, *PublicRetrievePlaylistReq) (*PublicRetrievePlaylistRes, error)
	PublicListPlaylist(context.Context, *PublicListPlaylistReq) (*PublicListPlaylistRes, error)
	PublicListMediaByPlaylist(context.Context, *PublicListMediaByPlaylistReq) (*PublicListMediaByPlaylistRes, error)
	PublicSearchMix(context.Context, *PublicSearchMixReq) (*PublicSearchMixRes, error)
	PublicHomepage(context.Context, *PublicHomepagePlaylistReq) (*PublicHomepagePlaylistRes, error)
	mustEmbedUnimplementedPlaylistServiceServer()
}

// UnimplementedPlaylistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlaylistServiceServer struct {
}

func (UnimplementedPlaylistServiceServer) PublicRetrievePlaylist(context.Context, *PublicRetrievePlaylistReq) (*PublicRetrievePlaylistRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicRetrievePlaylist not implemented")
}
func (UnimplementedPlaylistServiceServer) PublicListPlaylist(context.Context, *PublicListPlaylistReq) (*PublicListPlaylistRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicListPlaylist not implemented")
}
func (UnimplementedPlaylistServiceServer) PublicListMediaByPlaylist(context.Context, *PublicListMediaByPlaylistReq) (*PublicListMediaByPlaylistRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicListMediaByPlaylist not implemented")
}
func (UnimplementedPlaylistServiceServer) PublicSearchMix(context.Context, *PublicSearchMixReq) (*PublicSearchMixRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicSearchMix not implemented")
}
func (UnimplementedPlaylistServiceServer) PublicHomepage(context.Context, *PublicHomepagePlaylistReq) (*PublicHomepagePlaylistRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicHomepage not implemented")
}
func (UnimplementedPlaylistServiceServer) mustEmbedUnimplementedPlaylistServiceServer() {}

// UnsafePlaylistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaylistServiceServer will
// result in compilation errors.
type UnsafePlaylistServiceServer interface {
	mustEmbedUnimplementedPlaylistServiceServer()
}

func RegisterPlaylistServiceServer(s grpc.ServiceRegistrar, srv PlaylistServiceServer) {
	s.RegisterService(&PlaylistService_ServiceDesc, srv)
}

func _PlaylistService_PublicRetrievePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicRetrievePlaylistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).PublicRetrievePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.mobile.PlaylistService/PublicRetrievePlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).PublicRetrievePlaylist(ctx, req.(*PublicRetrievePlaylistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_PublicListPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicListPlaylistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).PublicListPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.mobile.PlaylistService/PublicListPlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).PublicListPlaylist(ctx, req.(*PublicListPlaylistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_PublicListMediaByPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicListMediaByPlaylistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).PublicListMediaByPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.mobile.PlaylistService/PublicListMediaByPlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).PublicListMediaByPlaylist(ctx, req.(*PublicListMediaByPlaylistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_PublicSearchMix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicSearchMixReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).PublicSearchMix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.mobile.PlaylistService/PublicSearchMix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).PublicSearchMix(ctx, req.(*PublicSearchMixReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_PublicHomepage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicHomepagePlaylistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).PublicHomepage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.mobile.PlaylistService/PublicHomepage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).PublicHomepage(ctx, req.(*PublicHomepagePlaylistReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PlaylistService_ServiceDesc is the grpc.ServiceDesc for PlaylistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaylistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "media.mobile.PlaylistService",
	HandlerType: (*PlaylistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublicRetrievePlaylist",
			Handler:    _PlaylistService_PublicRetrievePlaylist_Handler,
		},
		{
			MethodName: "PublicListPlaylist",
			Handler:    _PlaylistService_PublicListPlaylist_Handler,
		},
		{
			MethodName: "PublicListMediaByPlaylist",
			Handler:    _PlaylistService_PublicListMediaByPlaylist_Handler,
		},
		{
			MethodName: "PublicSearchMix",
			Handler:    _PlaylistService_PublicSearchMix_Handler,
		},
		{
			MethodName: "PublicHomepage",
			Handler:    _PlaylistService_PublicHomepage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "media/mobile/playlist.proto",
}
