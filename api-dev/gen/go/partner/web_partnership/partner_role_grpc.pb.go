// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: proto/partner/web_partnership/partner_role.proto

package web_partnership

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PartnerRoleServiceClient is the client API for PartnerRoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartnerRoleServiceClient interface {
	ListAllRole(ctx context.Context, in *ListAllRoleReq, opts ...grpc.CallOption) (*ListAllRoleRes, error)
	ListAllPermission(ctx context.Context, in *ListPermissionReq, opts ...grpc.CallOption) (*ListPermissionRes, error)
	CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*CreateRoleRes, error)
	UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*Empty, error)
	DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*Empty, error)
	AssignRole(ctx context.Context, in *AssignRoleReq, opts ...grpc.CallOption) (*Empty, error)
	UnassignRole(ctx context.Context, in *UnassignRoleReq, opts ...grpc.CallOption) (*Empty, error)
}

type partnerRoleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartnerRoleServiceClient(cc grpc.ClientConnInterface) PartnerRoleServiceClient {
	return &partnerRoleServiceClient{cc}
}

func (c *partnerRoleServiceClient) ListAllRole(ctx context.Context, in *ListAllRoleReq, opts ...grpc.CallOption) (*ListAllRoleRes, error) {
	out := new(ListAllRoleRes)
	err := c.cc.Invoke(ctx, "/partner.web_partnership.PartnerRoleService/ListAllRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerRoleServiceClient) ListAllPermission(ctx context.Context, in *ListPermissionReq, opts ...grpc.CallOption) (*ListPermissionRes, error) {
	out := new(ListPermissionRes)
	err := c.cc.Invoke(ctx, "/partner.web_partnership.PartnerRoleService/ListAllPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerRoleServiceClient) CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*CreateRoleRes, error) {
	out := new(CreateRoleRes)
	err := c.cc.Invoke(ctx, "/partner.web_partnership.PartnerRoleService/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerRoleServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/partner.web_partnership.PartnerRoleService/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerRoleServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/partner.web_partnership.PartnerRoleService/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerRoleServiceClient) AssignRole(ctx context.Context, in *AssignRoleReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/partner.web_partnership.PartnerRoleService/AssignRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerRoleServiceClient) UnassignRole(ctx context.Context, in *UnassignRoleReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/partner.web_partnership.PartnerRoleService/UnassignRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartnerRoleServiceServer is the server API for PartnerRoleService service.
// All implementations must embed UnimplementedPartnerRoleServiceServer
// for forward compatibility
type PartnerRoleServiceServer interface {
	ListAllRole(context.Context, *ListAllRoleReq) (*ListAllRoleRes, error)
	ListAllPermission(context.Context, *ListPermissionReq) (*ListPermissionRes, error)
	CreateRole(context.Context, *CreateRoleReq) (*CreateRoleRes, error)
	UpdateRole(context.Context, *UpdateRoleReq) (*Empty, error)
	DeleteRole(context.Context, *DeleteRoleReq) (*Empty, error)
	AssignRole(context.Context, *AssignRoleReq) (*Empty, error)
	UnassignRole(context.Context, *UnassignRoleReq) (*Empty, error)
	mustEmbedUnimplementedPartnerRoleServiceServer()
}

// UnimplementedPartnerRoleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPartnerRoleServiceServer struct {
}

func (UnimplementedPartnerRoleServiceServer) ListAllRole(context.Context, *ListAllRoleReq) (*ListAllRoleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllRole not implemented")
}
func (UnimplementedPartnerRoleServiceServer) ListAllPermission(context.Context, *ListPermissionReq) (*ListPermissionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllPermission not implemented")
}
func (UnimplementedPartnerRoleServiceServer) CreateRole(context.Context, *CreateRoleReq) (*CreateRoleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedPartnerRoleServiceServer) UpdateRole(context.Context, *UpdateRoleReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedPartnerRoleServiceServer) DeleteRole(context.Context, *DeleteRoleReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedPartnerRoleServiceServer) AssignRole(context.Context, *AssignRoleReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRole not implemented")
}
func (UnimplementedPartnerRoleServiceServer) UnassignRole(context.Context, *UnassignRoleReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignRole not implemented")
}
func (UnimplementedPartnerRoleServiceServer) mustEmbedUnimplementedPartnerRoleServiceServer() {}

// UnsafePartnerRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartnerRoleServiceServer will
// result in compilation errors.
type UnsafePartnerRoleServiceServer interface {
	mustEmbedUnimplementedPartnerRoleServiceServer()
}

func RegisterPartnerRoleServiceServer(s grpc.ServiceRegistrar, srv PartnerRoleServiceServer) {
	s.RegisterService(&PartnerRoleService_ServiceDesc, srv)
}

func _PartnerRoleService_ListAllRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerRoleServiceServer).ListAllRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.web_partnership.PartnerRoleService/ListAllRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerRoleServiceServer).ListAllRole(ctx, req.(*ListAllRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerRoleService_ListAllPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerRoleServiceServer).ListAllPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.web_partnership.PartnerRoleService/ListAllPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerRoleServiceServer).ListAllPermission(ctx, req.(*ListPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerRoleService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerRoleServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.web_partnership.PartnerRoleService/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerRoleServiceServer).CreateRole(ctx, req.(*CreateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerRoleService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerRoleServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.web_partnership.PartnerRoleService/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerRoleServiceServer).UpdateRole(ctx, req.(*UpdateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerRoleService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerRoleServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.web_partnership.PartnerRoleService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerRoleServiceServer).DeleteRole(ctx, req.(*DeleteRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerRoleService_AssignRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerRoleServiceServer).AssignRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.web_partnership.PartnerRoleService/AssignRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerRoleServiceServer).AssignRole(ctx, req.(*AssignRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerRoleService_UnassignRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerRoleServiceServer).UnassignRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.web_partnership.PartnerRoleService/UnassignRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerRoleServiceServer).UnassignRole(ctx, req.(*UnassignRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PartnerRoleService_ServiceDesc is the grpc.ServiceDesc for PartnerRoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartnerRoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "partner.web_partnership.PartnerRoleService",
	HandlerType: (*PartnerRoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAllRole",
			Handler:    _PartnerRoleService_ListAllRole_Handler,
		},
		{
			MethodName: "ListAllPermission",
			Handler:    _PartnerRoleService_ListAllPermission_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _PartnerRoleService_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _PartnerRoleService_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _PartnerRoleService_DeleteRole_Handler,
		},
		{
			MethodName: "AssignRole",
			Handler:    _PartnerRoleService_AssignRole_Handler,
		},
		{
			MethodName: "UnassignRole",
			Handler:    _PartnerRoleService_UnassignRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/partner/web_partnership/partner_role.proto",
}
