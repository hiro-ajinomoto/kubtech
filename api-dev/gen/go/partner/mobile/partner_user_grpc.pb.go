// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: proto/partner/mobile/partner_user.proto

package mobile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PartnerUserServiceClient is the client API for PartnerUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartnerUserServiceClient interface {
	GetMe(ctx context.Context, in *GetMeReq, opts ...grpc.CallOption) (*GetMeRes, error)
	ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*Empty, error)
}

type partnerUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartnerUserServiceClient(cc grpc.ClientConnInterface) PartnerUserServiceClient {
	return &partnerUserServiceClient{cc}
}

func (c *partnerUserServiceClient) GetMe(ctx context.Context, in *GetMeReq, opts ...grpc.CallOption) (*GetMeRes, error) {
	out := new(GetMeRes)
	err := c.cc.Invoke(ctx, "/partner.mobile.PartnerUserService/GetMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerUserServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/partner.mobile.PartnerUserService/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartnerUserServiceServer is the server API for PartnerUserService service.
// All implementations must embed UnimplementedPartnerUserServiceServer
// for forward compatibility
type PartnerUserServiceServer interface {
	GetMe(context.Context, *GetMeReq) (*GetMeRes, error)
	ChangePassword(context.Context, *ChangePasswordReq) (*Empty, error)
	mustEmbedUnimplementedPartnerUserServiceServer()
}

// UnimplementedPartnerUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPartnerUserServiceServer struct {
}

func (UnimplementedPartnerUserServiceServer) GetMe(context.Context, *GetMeReq) (*GetMeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMe not implemented")
}
func (UnimplementedPartnerUserServiceServer) ChangePassword(context.Context, *ChangePasswordReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedPartnerUserServiceServer) mustEmbedUnimplementedPartnerUserServiceServer() {}

// UnsafePartnerUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartnerUserServiceServer will
// result in compilation errors.
type UnsafePartnerUserServiceServer interface {
	mustEmbedUnimplementedPartnerUserServiceServer()
}

func RegisterPartnerUserServiceServer(s grpc.ServiceRegistrar, srv PartnerUserServiceServer) {
	s.RegisterService(&PartnerUserService_ServiceDesc, srv)
}

func _PartnerUserService_GetMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerUserServiceServer).GetMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.mobile.PartnerUserService/GetMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerUserServiceServer).GetMe(ctx, req.(*GetMeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerUserService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerUserServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.mobile.PartnerUserService/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerUserServiceServer).ChangePassword(ctx, req.(*ChangePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PartnerUserService_ServiceDesc is the grpc.ServiceDesc for PartnerUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartnerUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "partner.mobile.PartnerUserService",
	HandlerType: (*PartnerUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMe",
			Handler:    _PartnerUserService_GetMe_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _PartnerUserService_ChangePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/partner/mobile/partner_user.proto",
}
