// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: proto/partnership/currency.proto

package partnership

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CurrencyServiceClient is the client API for CurrencyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurrencyServiceClient interface {
	CreateCurrency(ctx context.Context, in *CreateCurrencyReq, opts ...grpc.CallOption) (*CreateCurrencyRes, error)
	UpdateCurrency(ctx context.Context, in *UpdateCurrencyReq, opts ...grpc.CallOption) (*Empty, error)
	DeleteCurrency(ctx context.Context, in *DeleteCurrencyReq, opts ...grpc.CallOption) (*Empty, error)
	RetrieveCurrency(ctx context.Context, in *RetrieveCurrencyReq, opts ...grpc.CallOption) (*RetrieveCurrencyRes, error)
	ListCurrency(ctx context.Context, in *ListCurrencyReq, opts ...grpc.CallOption) (*ListCurrencyRes, error)
	InternalRetrieveCurrency(ctx context.Context, in *InternalRetrieveCurrencyReq, opts ...grpc.CallOption) (*InternalRetrieveCurrencyRes, error)
}

type currencyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrencyServiceClient(cc grpc.ClientConnInterface) CurrencyServiceClient {
	return &currencyServiceClient{cc}
}

func (c *currencyServiceClient) CreateCurrency(ctx context.Context, in *CreateCurrencyReq, opts ...grpc.CallOption) (*CreateCurrencyRes, error) {
	out := new(CreateCurrencyRes)
	err := c.cc.Invoke(ctx, "/partnership.CurrencyService/CreateCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) UpdateCurrency(ctx context.Context, in *UpdateCurrencyReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/partnership.CurrencyService/UpdateCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) DeleteCurrency(ctx context.Context, in *DeleteCurrencyReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/partnership.CurrencyService/DeleteCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) RetrieveCurrency(ctx context.Context, in *RetrieveCurrencyReq, opts ...grpc.CallOption) (*RetrieveCurrencyRes, error) {
	out := new(RetrieveCurrencyRes)
	err := c.cc.Invoke(ctx, "/partnership.CurrencyService/RetrieveCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) ListCurrency(ctx context.Context, in *ListCurrencyReq, opts ...grpc.CallOption) (*ListCurrencyRes, error) {
	out := new(ListCurrencyRes)
	err := c.cc.Invoke(ctx, "/partnership.CurrencyService/ListCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) InternalRetrieveCurrency(ctx context.Context, in *InternalRetrieveCurrencyReq, opts ...grpc.CallOption) (*InternalRetrieveCurrencyRes, error) {
	out := new(InternalRetrieveCurrencyRes)
	err := c.cc.Invoke(ctx, "/partnership.CurrencyService/InternalRetrieveCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrencyServiceServer is the server API for CurrencyService service.
// All implementations must embed UnimplementedCurrencyServiceServer
// for forward compatibility
type CurrencyServiceServer interface {
	CreateCurrency(context.Context, *CreateCurrencyReq) (*CreateCurrencyRes, error)
	UpdateCurrency(context.Context, *UpdateCurrencyReq) (*Empty, error)
	DeleteCurrency(context.Context, *DeleteCurrencyReq) (*Empty, error)
	RetrieveCurrency(context.Context, *RetrieveCurrencyReq) (*RetrieveCurrencyRes, error)
	ListCurrency(context.Context, *ListCurrencyReq) (*ListCurrencyRes, error)
	InternalRetrieveCurrency(context.Context, *InternalRetrieveCurrencyReq) (*InternalRetrieveCurrencyRes, error)
	mustEmbedUnimplementedCurrencyServiceServer()
}

// UnimplementedCurrencyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCurrencyServiceServer struct {
}

func (UnimplementedCurrencyServiceServer) CreateCurrency(context.Context, *CreateCurrencyReq) (*CreateCurrencyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCurrency not implemented")
}
func (UnimplementedCurrencyServiceServer) UpdateCurrency(context.Context, *UpdateCurrencyReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurrency not implemented")
}
func (UnimplementedCurrencyServiceServer) DeleteCurrency(context.Context, *DeleteCurrencyReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCurrency not implemented")
}
func (UnimplementedCurrencyServiceServer) RetrieveCurrency(context.Context, *RetrieveCurrencyReq) (*RetrieveCurrencyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveCurrency not implemented")
}
func (UnimplementedCurrencyServiceServer) ListCurrency(context.Context, *ListCurrencyReq) (*ListCurrencyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCurrency not implemented")
}
func (UnimplementedCurrencyServiceServer) InternalRetrieveCurrency(context.Context, *InternalRetrieveCurrencyReq) (*InternalRetrieveCurrencyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalRetrieveCurrency not implemented")
}
func (UnimplementedCurrencyServiceServer) mustEmbedUnimplementedCurrencyServiceServer() {}

// UnsafeCurrencyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurrencyServiceServer will
// result in compilation errors.
type UnsafeCurrencyServiceServer interface {
	mustEmbedUnimplementedCurrencyServiceServer()
}

func RegisterCurrencyServiceServer(s grpc.ServiceRegistrar, srv CurrencyServiceServer) {
	s.RegisterService(&CurrencyService_ServiceDesc, srv)
}

func _CurrencyService_CreateCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCurrencyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).CreateCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.CurrencyService/CreateCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).CreateCurrency(ctx, req.(*CreateCurrencyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_UpdateCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCurrencyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).UpdateCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.CurrencyService/UpdateCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).UpdateCurrency(ctx, req.(*UpdateCurrencyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_DeleteCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCurrencyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).DeleteCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.CurrencyService/DeleteCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).DeleteCurrency(ctx, req.(*DeleteCurrencyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_RetrieveCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveCurrencyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).RetrieveCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.CurrencyService/RetrieveCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).RetrieveCurrency(ctx, req.(*RetrieveCurrencyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_ListCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCurrencyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).ListCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.CurrencyService/ListCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).ListCurrency(ctx, req.(*ListCurrencyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_InternalRetrieveCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalRetrieveCurrencyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).InternalRetrieveCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.CurrencyService/InternalRetrieveCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).InternalRetrieveCurrency(ctx, req.(*InternalRetrieveCurrencyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CurrencyService_ServiceDesc is the grpc.ServiceDesc for CurrencyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CurrencyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "partnership.CurrencyService",
	HandlerType: (*CurrencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCurrency",
			Handler:    _CurrencyService_CreateCurrency_Handler,
		},
		{
			MethodName: "UpdateCurrency",
			Handler:    _CurrencyService_UpdateCurrency_Handler,
		},
		{
			MethodName: "DeleteCurrency",
			Handler:    _CurrencyService_DeleteCurrency_Handler,
		},
		{
			MethodName: "RetrieveCurrency",
			Handler:    _CurrencyService_RetrieveCurrency_Handler,
		},
		{
			MethodName: "ListCurrency",
			Handler:    _CurrencyService_ListCurrency_Handler,
		},
		{
			MethodName: "InternalRetrieveCurrency",
			Handler:    _CurrencyService_InternalRetrieveCurrency_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/partnership/currency.proto",
}
