// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: proto/partnership/seat_type.proto

package partnership

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SeatTypeServiceClient is the client API for SeatTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeatTypeServiceClient interface {
	RetrieveSeatType(ctx context.Context, in *RetrieveSeatTypeReq, opts ...grpc.CallOption) (*RetrieveSeatTypeRes, error)
	ListSeatType(ctx context.Context, in *ListSeatTypeReq, opts ...grpc.CallOption) (*ListSeatTypeRes, error)
	CreateSeatType(ctx context.Context, in *CreateSeatTypeReq, opts ...grpc.CallOption) (*CreateSeatTypeRes, error)
	UpdateSeatType(ctx context.Context, in *UpdateSeatTypeReq, opts ...grpc.CallOption) (*Empty, error)
	DeleteSeatType(ctx context.Context, in *DeleteSeatTypeReq, opts ...grpc.CallOption) (*Empty, error)
}

type seatTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeatTypeServiceClient(cc grpc.ClientConnInterface) SeatTypeServiceClient {
	return &seatTypeServiceClient{cc}
}

func (c *seatTypeServiceClient) RetrieveSeatType(ctx context.Context, in *RetrieveSeatTypeReq, opts ...grpc.CallOption) (*RetrieveSeatTypeRes, error) {
	out := new(RetrieveSeatTypeRes)
	err := c.cc.Invoke(ctx, "/partnership.SeatTypeService/RetrieveSeatType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatTypeServiceClient) ListSeatType(ctx context.Context, in *ListSeatTypeReq, opts ...grpc.CallOption) (*ListSeatTypeRes, error) {
	out := new(ListSeatTypeRes)
	err := c.cc.Invoke(ctx, "/partnership.SeatTypeService/ListSeatType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatTypeServiceClient) CreateSeatType(ctx context.Context, in *CreateSeatTypeReq, opts ...grpc.CallOption) (*CreateSeatTypeRes, error) {
	out := new(CreateSeatTypeRes)
	err := c.cc.Invoke(ctx, "/partnership.SeatTypeService/CreateSeatType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatTypeServiceClient) UpdateSeatType(ctx context.Context, in *UpdateSeatTypeReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/partnership.SeatTypeService/UpdateSeatType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatTypeServiceClient) DeleteSeatType(ctx context.Context, in *DeleteSeatTypeReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/partnership.SeatTypeService/DeleteSeatType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeatTypeServiceServer is the server API for SeatTypeService service.
// All implementations must embed UnimplementedSeatTypeServiceServer
// for forward compatibility
type SeatTypeServiceServer interface {
	RetrieveSeatType(context.Context, *RetrieveSeatTypeReq) (*RetrieveSeatTypeRes, error)
	ListSeatType(context.Context, *ListSeatTypeReq) (*ListSeatTypeRes, error)
	CreateSeatType(context.Context, *CreateSeatTypeReq) (*CreateSeatTypeRes, error)
	UpdateSeatType(context.Context, *UpdateSeatTypeReq) (*Empty, error)
	DeleteSeatType(context.Context, *DeleteSeatTypeReq) (*Empty, error)
	mustEmbedUnimplementedSeatTypeServiceServer()
}

// UnimplementedSeatTypeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSeatTypeServiceServer struct {
}

func (UnimplementedSeatTypeServiceServer) RetrieveSeatType(context.Context, *RetrieveSeatTypeReq) (*RetrieveSeatTypeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSeatType not implemented")
}
func (UnimplementedSeatTypeServiceServer) ListSeatType(context.Context, *ListSeatTypeReq) (*ListSeatTypeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSeatType not implemented")
}
func (UnimplementedSeatTypeServiceServer) CreateSeatType(context.Context, *CreateSeatTypeReq) (*CreateSeatTypeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeatType not implemented")
}
func (UnimplementedSeatTypeServiceServer) UpdateSeatType(context.Context, *UpdateSeatTypeReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeatType not implemented")
}
func (UnimplementedSeatTypeServiceServer) DeleteSeatType(context.Context, *DeleteSeatTypeReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeatType not implemented")
}
func (UnimplementedSeatTypeServiceServer) mustEmbedUnimplementedSeatTypeServiceServer() {}

// UnsafeSeatTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeatTypeServiceServer will
// result in compilation errors.
type UnsafeSeatTypeServiceServer interface {
	mustEmbedUnimplementedSeatTypeServiceServer()
}

func RegisterSeatTypeServiceServer(s grpc.ServiceRegistrar, srv SeatTypeServiceServer) {
	s.RegisterService(&SeatTypeService_ServiceDesc, srv)
}

func _SeatTypeService_RetrieveSeatType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveSeatTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatTypeServiceServer).RetrieveSeatType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.SeatTypeService/RetrieveSeatType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatTypeServiceServer).RetrieveSeatType(ctx, req.(*RetrieveSeatTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatTypeService_ListSeatType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSeatTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatTypeServiceServer).ListSeatType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.SeatTypeService/ListSeatType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatTypeServiceServer).ListSeatType(ctx, req.(*ListSeatTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatTypeService_CreateSeatType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeatTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatTypeServiceServer).CreateSeatType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.SeatTypeService/CreateSeatType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatTypeServiceServer).CreateSeatType(ctx, req.(*CreateSeatTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatTypeService_UpdateSeatType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeatTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatTypeServiceServer).UpdateSeatType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.SeatTypeService/UpdateSeatType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatTypeServiceServer).UpdateSeatType(ctx, req.(*UpdateSeatTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatTypeService_DeleteSeatType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeatTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatTypeServiceServer).DeleteSeatType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.SeatTypeService/DeleteSeatType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatTypeServiceServer).DeleteSeatType(ctx, req.(*DeleteSeatTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SeatTypeService_ServiceDesc is the grpc.ServiceDesc for SeatTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeatTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "partnership.SeatTypeService",
	HandlerType: (*SeatTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveSeatType",
			Handler:    _SeatTypeService_RetrieveSeatType_Handler,
		},
		{
			MethodName: "ListSeatType",
			Handler:    _SeatTypeService_ListSeatType_Handler,
		},
		{
			MethodName: "CreateSeatType",
			Handler:    _SeatTypeService_CreateSeatType_Handler,
		},
		{
			MethodName: "UpdateSeatType",
			Handler:    _SeatTypeService_UpdateSeatType_Handler,
		},
		{
			MethodName: "DeleteSeatType",
			Handler:    _SeatTypeService_DeleteSeatType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/partnership/seat_type.proto",
}
