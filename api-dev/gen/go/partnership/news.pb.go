// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: proto/partnership/news.proto

package partnership

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContentType int32

const (
	ContentType_CONTENT_TYPE_TEXT ContentType = 0
	ContentType_CONTENT_TYPE_LINK ContentType = 1
)

// Enum value maps for ContentType.
var (
	ContentType_name = map[int32]string{
		0: "CONTENT_TYPE_TEXT",
		1: "CONTENT_TYPE_LINK",
	}
	ContentType_value = map[string]int32{
		"CONTENT_TYPE_TEXT": 0,
		"CONTENT_TYPE_LINK": 1,
	}
)

func (x ContentType) Enum() *ContentType {
	p := new(ContentType)
	*p = x
	return p
}

func (x ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_partnership_news_proto_enumTypes[0].Descriptor()
}

func (ContentType) Type() protoreflect.EnumType {
	return &file_proto_partnership_news_proto_enumTypes[0]
}

func (x ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentType.Descriptor instead.
func (ContentType) EnumDescriptor() ([]byte, []int) {
	return file_proto_partnership_news_proto_rawDescGZIP(), []int{0}
}

type NewsBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title  string      `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Medias []*Media    `protobuf:"bytes,2,rep,name=medias,proto3" json:"medias,omitempty"`
	Slug   string      `protobuf:"bytes,3,opt,name=slug,proto3" json:"slug,omitempty"`
	Intro  string      `protobuf:"bytes,4,opt,name=intro,proto3" json:"intro,omitempty"`
	Detail string      `protobuf:"bytes,5,opt,name=detail,proto3" json:"detail,omitempty"`
	Lang   string      `protobuf:"bytes,6,opt,name=lang,proto3" json:"lang,omitempty"`
	Type   ContentType `protobuf:"varint,7,opt,name=type,proto3,enum=partnership.ContentType" json:"type,omitempty"`
}

func (x *NewsBasicInfo) Reset() {
	*x = NewsBasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_partnership_news_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsBasicInfo) ProtoMessage() {}

func (x *NewsBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_partnership_news_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsBasicInfo.ProtoReflect.Descriptor instead.
func (*NewsBasicInfo) Descriptor() ([]byte, []int) {
	return file_proto_partnership_news_proto_rawDescGZIP(), []int{0}
}

func (x *NewsBasicInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewsBasicInfo) GetMedias() []*Media {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *NewsBasicInfo) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *NewsBasicInfo) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *NewsBasicInfo) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *NewsBasicInfo) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *NewsBasicInfo) GetType() ContentType {
	if x != nil {
		return x.Type
	}
	return ContentType_CONTENT_TYPE_TEXT
}

type NewstListInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title     string      `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Medias    []*Media    `protobuf:"bytes,3,rep,name=medias,proto3" json:"medias,omitempty"`
	Slug      string      `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
	Intro     string      `protobuf:"bytes,5,opt,name=intro,proto3" json:"intro,omitempty"`
	Lang      string      `protobuf:"bytes,6,opt,name=lang,proto3" json:"lang,omitempty"`
	CreatedAt int64       `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64       `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedBy string      `protobuf:"bytes,9,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedBy string      `protobuf:"bytes,10,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Type      ContentType `protobuf:"varint,11,opt,name=type,proto3,enum=partnership.ContentType" json:"type,omitempty"`
}

func (x *NewstListInfo) Reset() {
	*x = NewstListInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_partnership_news_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewstListInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewstListInfo) ProtoMessage() {}

func (x *NewstListInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_partnership_news_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewstListInfo.ProtoReflect.Descriptor instead.
func (*NewstListInfo) Descriptor() ([]byte, []int) {
	return file_proto_partnership_news_proto_rawDescGZIP(), []int{1}
}

func (x *NewstListInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NewstListInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewstListInfo) GetMedias() []*Media {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *NewstListInfo) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *NewstListInfo) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *NewstListInfo) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *NewstListInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *NewstListInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *NewstListInfo) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *NewstListInfo) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *NewstListInfo) GetType() ContentType {
	if x != nil {
		return x.Type
	}
	return ContentType_CONTENT_TYPE_TEXT
}

type CreateNewsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *NewsBasicInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *CreateNewsReq) Reset() {
	*x = CreateNewsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_partnership_news_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNewsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNewsReq) ProtoMessage() {}

func (x *CreateNewsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_partnership_news_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNewsReq.ProtoReflect.Descriptor instead.
func (*CreateNewsReq) Descriptor() ([]byte, []int) {
	return file_proto_partnership_news_proto_rawDescGZIP(), []int{2}
}

func (x *CreateNewsReq) GetInfo() *NewsBasicInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateNewsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Info *NewsBasicInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *UpdateNewsReq) Reset() {
	*x = UpdateNewsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_partnership_news_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNewsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNewsReq) ProtoMessage() {}

func (x *UpdateNewsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_partnership_news_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNewsReq.ProtoReflect.Descriptor instead.
func (*UpdateNewsReq) Descriptor() ([]byte, []int) {
	return file_proto_partnership_news_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateNewsReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateNewsReq) GetInfo() *NewsBasicInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteNewsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteNewsReq) Reset() {
	*x = DeleteNewsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_partnership_news_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNewsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNewsReq) ProtoMessage() {}

func (x *DeleteNewsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_partnership_news_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNewsReq.ProtoReflect.Descriptor instead.
func (*DeleteNewsReq) Descriptor() ([]byte, []int) {
	return file_proto_partnership_news_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteNewsReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListNewsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchText string         `protobuf:"bytes,1,opt,name=search_text,json=searchText,proto3" json:"search_text,omitempty"`
	Pagination *PaginationReq `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	OrderBy    []*OrderByItem `protobuf:"bytes,3,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListNewsReq) Reset() {
	*x = ListNewsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_partnership_news_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNewsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNewsReq) ProtoMessage() {}

func (x *ListNewsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_partnership_news_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNewsReq.ProtoReflect.Descriptor instead.
func (*ListNewsReq) Descriptor() ([]byte, []int) {
	return file_proto_partnership_news_proto_rawDescGZIP(), []int{5}
}

func (x *ListNewsReq) GetSearchText() string {
	if x != nil {
		return x.SearchText
	}
	return ""
}

func (x *ListNewsReq) GetPagination() *PaginationReq {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListNewsReq) GetOrderBy() []*OrderByItem {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

type RetrieveNewsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RetrieveNewsReq) Reset() {
	*x = RetrieveNewsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_partnership_news_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveNewsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveNewsReq) ProtoMessage() {}

func (x *RetrieveNewsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_partnership_news_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveNewsReq.ProtoReflect.Descriptor instead.
func (*RetrieveNewsReq) Descriptor() ([]byte, []int) {
	return file_proto_partnership_news_proto_rawDescGZIP(), []int{6}
}

func (x *RetrieveNewsReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PublicRetrieveNewsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PartnershipId string `protobuf:"bytes,2,opt,name=partnership_id,json=partnershipId,proto3" json:"partnership_id,omitempty"`
}

func (x *PublicRetrieveNewsReq) Reset() {
	*x = PublicRetrieveNewsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_partnership_news_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicRetrieveNewsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicRetrieveNewsReq) ProtoMessage() {}

func (x *PublicRetrieveNewsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_partnership_news_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicRetrieveNewsReq.ProtoReflect.Descriptor instead.
func (*PublicRetrieveNewsReq) Descriptor() ([]byte, []int) {
	return file_proto_partnership_news_proto_rawDescGZIP(), []int{7}
}

func (x *PublicRetrieveNewsReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PublicRetrieveNewsReq) GetPartnershipId() string {
	if x != nil {
		return x.PartnershipId
	}
	return ""
}

type PublicListNewsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnershipId string         `protobuf:"bytes,1,opt,name=partnership_id,json=partnershipId,proto3" json:"partnership_id,omitempty"`
	Lang          string         `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty"`
	SearchText    string         `protobuf:"bytes,3,opt,name=search_text,json=searchText,proto3" json:"search_text,omitempty"` // TODO: Vi và Toàn support
	Pagination    *PaginationReq `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
	OrderBy       []*OrderByItem `protobuf:"bytes,5,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *PublicListNewsReq) Reset() {
	*x = PublicListNewsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_partnership_news_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicListNewsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicListNewsReq) ProtoMessage() {}

func (x *PublicListNewsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_partnership_news_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicListNewsReq.ProtoReflect.Descriptor instead.
func (*PublicListNewsReq) Descriptor() ([]byte, []int) {
	return file_proto_partnership_news_proto_rawDescGZIP(), []int{8}
}

func (x *PublicListNewsReq) GetPartnershipId() string {
	if x != nil {
		return x.PartnershipId
	}
	return ""
}

func (x *PublicListNewsReq) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *PublicListNewsReq) GetSearchText() string {
	if x != nil {
		return x.SearchText
	}
	return ""
}

func (x *PublicListNewsReq) GetPagination() *PaginationReq {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *PublicListNewsReq) GetOrderBy() []*OrderByItem {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

type CreateNewsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateNewsRes) Reset() {
	*x = CreateNewsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_partnership_news_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNewsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNewsRes) ProtoMessage() {}

func (x *CreateNewsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_partnership_news_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNewsRes.ProtoReflect.Descriptor instead.
func (*CreateNewsRes) Descriptor() ([]byte, []int) {
	return file_proto_partnership_news_proto_rawDescGZIP(), []int{9}
}

func (x *CreateNewsRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RetrieveNewsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PartnershipId string         `protobuf:"bytes,2,opt,name=partnership_id,json=partnershipId,proto3" json:"partnership_id,omitempty"`
	Info          *NewsBasicInfo `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	CreatedAt     int64          `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     int64          `protobuf:"varint,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedBy     string         `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedBy     string         `protobuf:"bytes,7,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
}

func (x *RetrieveNewsRes) Reset() {
	*x = RetrieveNewsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_partnership_news_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveNewsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveNewsRes) ProtoMessage() {}

func (x *RetrieveNewsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_partnership_news_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveNewsRes.ProtoReflect.Descriptor instead.
func (*RetrieveNewsRes) Descriptor() ([]byte, []int) {
	return file_proto_partnership_news_proto_rawDescGZIP(), []int{10}
}

func (x *RetrieveNewsRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RetrieveNewsRes) GetPartnershipId() string {
	if x != nil {
		return x.PartnershipId
	}
	return ""
}

func (x *RetrieveNewsRes) GetInfo() *NewsBasicInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *RetrieveNewsRes) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *RetrieveNewsRes) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *RetrieveNewsRes) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *RetrieveNewsRes) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type ListNewsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info       []*NewstListInfo `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty"`
	Pagination *PaginationRes   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListNewsRes) Reset() {
	*x = ListNewsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_partnership_news_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNewsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNewsRes) ProtoMessage() {}

func (x *ListNewsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_partnership_news_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNewsRes.ProtoReflect.Descriptor instead.
func (*ListNewsRes) Descriptor() ([]byte, []int) {
	return file_proto_partnership_news_proto_rawDescGZIP(), []int{11}
}

func (x *ListNewsRes) GetInfo() []*NewstListInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *ListNewsRes) GetPagination() *PaginationRes {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type PublicListNewsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info       []*NewstListInfo `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty"`
	Pagination *PaginationRes   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *PublicListNewsRes) Reset() {
	*x = PublicListNewsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_partnership_news_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicListNewsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicListNewsRes) ProtoMessage() {}

func (x *PublicListNewsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_partnership_news_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicListNewsRes.ProtoReflect.Descriptor instead.
func (*PublicListNewsRes) Descriptor() ([]byte, []int) {
	return file_proto_partnership_news_proto_rawDescGZIP(), []int{12}
}

func (x *PublicListNewsRes) GetInfo() []*NewstListInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *PublicListNewsRes) GetPagination() *PaginationRes {
	if x != nil {
		return x.Pagination
	}
	return nil
}

var File_proto_partnership_news_proto protoreflect.FileDescriptor

var file_proto_partnership_news_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x1a, 0x1c, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2f, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd5, 0x01, 0x0a, 0x0d, 0x4e, 0x65,
	0x77, 0x73, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x2a, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xc9, 0x02, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x06, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3f, 0x0a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2e,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x4f,
	0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2e, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x73,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x1f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x9f, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x22, 0x21, 0x0a, 0x0f, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4e, 0x65,
	0x77, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x15, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x49, 0x64, 0x22, 0xe0, 0x01, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x1f, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf4, 0x01, 0x0a, 0x0f, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x2e, 0x4e, 0x65, 0x77, 0x73, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x22, 0x79, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x73,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7f, 0x0a, 0x11, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x4e, 0x65, 0x77,
	0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x3b, 0x0a, 0x0b,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x01, 0x32, 0x85, 0x04, 0x0a, 0x0b, 0x4e, 0x65,
	0x77, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x3c, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x1a, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x0c, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x65, 0x77, 0x73, 0x12, 0x18, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x12, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x22, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x50, 0x0a, 0x0e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77,
	0x73, 0x12, 0x1e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65,
	0x73, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x2f, 0x3b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_partnership_news_proto_rawDescOnce sync.Once
	file_proto_partnership_news_proto_rawDescData = file_proto_partnership_news_proto_rawDesc
)

func file_proto_partnership_news_proto_rawDescGZIP() []byte {
	file_proto_partnership_news_proto_rawDescOnce.Do(func() {
		file_proto_partnership_news_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_partnership_news_proto_rawDescData)
	})
	return file_proto_partnership_news_proto_rawDescData
}

var file_proto_partnership_news_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_partnership_news_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_partnership_news_proto_goTypes = []interface{}{
	(ContentType)(0),              // 0: partnership.ContentType
	(*NewsBasicInfo)(nil),         // 1: partnership.NewsBasicInfo
	(*NewstListInfo)(nil),         // 2: partnership.NewstListInfo
	(*CreateNewsReq)(nil),         // 3: partnership.CreateNewsReq
	(*UpdateNewsReq)(nil),         // 4: partnership.UpdateNewsReq
	(*DeleteNewsReq)(nil),         // 5: partnership.DeleteNewsReq
	(*ListNewsReq)(nil),           // 6: partnership.ListNewsReq
	(*RetrieveNewsReq)(nil),       // 7: partnership.RetrieveNewsReq
	(*PublicRetrieveNewsReq)(nil), // 8: partnership.PublicRetrieveNewsReq
	(*PublicListNewsReq)(nil),     // 9: partnership.PublicListNewsReq
	(*CreateNewsRes)(nil),         // 10: partnership.CreateNewsRes
	(*RetrieveNewsRes)(nil),       // 11: partnership.RetrieveNewsRes
	(*ListNewsRes)(nil),           // 12: partnership.ListNewsRes
	(*PublicListNewsRes)(nil),     // 13: partnership.PublicListNewsRes
	(*Media)(nil),                 // 14: partnership.Media
	(*PaginationReq)(nil),         // 15: partnership.PaginationReq
	(*OrderByItem)(nil),           // 16: partnership.OrderByItem
	(*PaginationRes)(nil),         // 17: partnership.PaginationRes
	(*Empty)(nil),                 // 18: partnership.Empty
}
var file_proto_partnership_news_proto_depIdxs = []int32{
	14, // 0: partnership.NewsBasicInfo.medias:type_name -> partnership.Media
	0,  // 1: partnership.NewsBasicInfo.type:type_name -> partnership.ContentType
	14, // 2: partnership.NewstListInfo.medias:type_name -> partnership.Media
	0,  // 3: partnership.NewstListInfo.type:type_name -> partnership.ContentType
	1,  // 4: partnership.CreateNewsReq.info:type_name -> partnership.NewsBasicInfo
	1,  // 5: partnership.UpdateNewsReq.info:type_name -> partnership.NewsBasicInfo
	15, // 6: partnership.ListNewsReq.pagination:type_name -> partnership.PaginationReq
	16, // 7: partnership.ListNewsReq.order_by:type_name -> partnership.OrderByItem
	15, // 8: partnership.PublicListNewsReq.pagination:type_name -> partnership.PaginationReq
	16, // 9: partnership.PublicListNewsReq.order_by:type_name -> partnership.OrderByItem
	1,  // 10: partnership.RetrieveNewsRes.info:type_name -> partnership.NewsBasicInfo
	2,  // 11: partnership.ListNewsRes.info:type_name -> partnership.NewstListInfo
	17, // 12: partnership.ListNewsRes.pagination:type_name -> partnership.PaginationRes
	2,  // 13: partnership.PublicListNewsRes.info:type_name -> partnership.NewstListInfo
	17, // 14: partnership.PublicListNewsRes.pagination:type_name -> partnership.PaginationRes
	3,  // 15: partnership.NewsService.CreateNews:input_type -> partnership.CreateNewsReq
	4,  // 16: partnership.NewsService.UpdateNews:input_type -> partnership.UpdateNewsReq
	5,  // 17: partnership.NewsService.DeleteNews:input_type -> partnership.DeleteNewsReq
	7,  // 18: partnership.NewsService.RetrieveNews:input_type -> partnership.RetrieveNewsReq
	6,  // 19: partnership.NewsService.ListNews:input_type -> partnership.ListNewsReq
	8,  // 20: partnership.NewsService.PublicRetrieveNews:input_type -> partnership.PublicRetrieveNewsReq
	9,  // 21: partnership.NewsService.PublicListNews:input_type -> partnership.PublicListNewsReq
	10, // 22: partnership.NewsService.CreateNews:output_type -> partnership.CreateNewsRes
	18, // 23: partnership.NewsService.UpdateNews:output_type -> partnership.Empty
	18, // 24: partnership.NewsService.DeleteNews:output_type -> partnership.Empty
	11, // 25: partnership.NewsService.RetrieveNews:output_type -> partnership.RetrieveNewsRes
	12, // 26: partnership.NewsService.ListNews:output_type -> partnership.ListNewsRes
	11, // 27: partnership.NewsService.PublicRetrieveNews:output_type -> partnership.RetrieveNewsRes
	13, // 28: partnership.NewsService.PublicListNews:output_type -> partnership.PublicListNewsRes
	22, // [22:29] is the sub-list for method output_type
	15, // [15:22] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_proto_partnership_news_proto_init() }
func file_proto_partnership_news_proto_init() {
	if File_proto_partnership_news_proto != nil {
		return
	}
	file_proto_partnership_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_partnership_news_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsBasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_partnership_news_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewstListInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_partnership_news_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNewsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_partnership_news_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNewsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_partnership_news_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNewsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_partnership_news_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNewsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_partnership_news_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveNewsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_partnership_news_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicRetrieveNewsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_partnership_news_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicListNewsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_partnership_news_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNewsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_partnership_news_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveNewsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_partnership_news_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNewsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_partnership_news_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicListNewsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_partnership_news_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_partnership_news_proto_goTypes,
		DependencyIndexes: file_proto_partnership_news_proto_depIdxs,
		EnumInfos:         file_proto_partnership_news_proto_enumTypes,
		MessageInfos:      file_proto_partnership_news_proto_msgTypes,
	}.Build()
	File_proto_partnership_news_proto = out.File
	file_proto_partnership_news_proto_rawDesc = nil
	file_proto_partnership_news_proto_goTypes = nil
	file_proto_partnership_news_proto_depIdxs = nil
}
