// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: proto/partnership/master_data.proto

package partnership

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterDataServiceClient is the client API for MasterDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterDataServiceClient interface {
	CreateMasterData(ctx context.Context, in *CreateMasterDataReq, opts ...grpc.CallOption) (*CreateMasterDataRes, error)
	UpdateMasterData(ctx context.Context, in *UpdateMasterDataReq, opts ...grpc.CallOption) (*Empty, error)
	DeleteMasterData(ctx context.Context, in *DeleteMasterDataReq, opts ...grpc.CallOption) (*Empty, error)
	// QUERY IN USER APP
	RetrieveMasterData(ctx context.Context, in *RetrieveMasterDataReq, opts ...grpc.CallOption) (*RetrieveMasterDataRes, error)
	ListMasterData(ctx context.Context, in *ListMasterDataReq, opts ...grpc.CallOption) (*ListMasterDataRes, error)
	// QUERY IN PARTNERSHIP APP
	RetrieveMasterDataPartnership(ctx context.Context, in *RetrieveMasterDataPartnershipReq, opts ...grpc.CallOption) (*RetrieveMasterDataPartnershipRes, error)
	ListMasterDataPartnership(ctx context.Context, in *ListMasterDataPartnershipReq, opts ...grpc.CallOption) (*ListMasterDataPartnershipRes, error)
	// INTERNAL
	InternalListMasterDataByIds(ctx context.Context, in *InternalListMasterDataByIdsReq, opts ...grpc.CallOption) (*InternalListMasterDataByIdsRes, error)
}

type masterDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterDataServiceClient(cc grpc.ClientConnInterface) MasterDataServiceClient {
	return &masterDataServiceClient{cc}
}

func (c *masterDataServiceClient) CreateMasterData(ctx context.Context, in *CreateMasterDataReq, opts ...grpc.CallOption) (*CreateMasterDataRes, error) {
	out := new(CreateMasterDataRes)
	err := c.cc.Invoke(ctx, "/partnership.MasterDataService/CreateMasterData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDataServiceClient) UpdateMasterData(ctx context.Context, in *UpdateMasterDataReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/partnership.MasterDataService/UpdateMasterData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDataServiceClient) DeleteMasterData(ctx context.Context, in *DeleteMasterDataReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/partnership.MasterDataService/DeleteMasterData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDataServiceClient) RetrieveMasterData(ctx context.Context, in *RetrieveMasterDataReq, opts ...grpc.CallOption) (*RetrieveMasterDataRes, error) {
	out := new(RetrieveMasterDataRes)
	err := c.cc.Invoke(ctx, "/partnership.MasterDataService/RetrieveMasterData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDataServiceClient) ListMasterData(ctx context.Context, in *ListMasterDataReq, opts ...grpc.CallOption) (*ListMasterDataRes, error) {
	out := new(ListMasterDataRes)
	err := c.cc.Invoke(ctx, "/partnership.MasterDataService/ListMasterData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDataServiceClient) RetrieveMasterDataPartnership(ctx context.Context, in *RetrieveMasterDataPartnershipReq, opts ...grpc.CallOption) (*RetrieveMasterDataPartnershipRes, error) {
	out := new(RetrieveMasterDataPartnershipRes)
	err := c.cc.Invoke(ctx, "/partnership.MasterDataService/RetrieveMasterDataPartnership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDataServiceClient) ListMasterDataPartnership(ctx context.Context, in *ListMasterDataPartnershipReq, opts ...grpc.CallOption) (*ListMasterDataPartnershipRes, error) {
	out := new(ListMasterDataPartnershipRes)
	err := c.cc.Invoke(ctx, "/partnership.MasterDataService/ListMasterDataPartnership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDataServiceClient) InternalListMasterDataByIds(ctx context.Context, in *InternalListMasterDataByIdsReq, opts ...grpc.CallOption) (*InternalListMasterDataByIdsRes, error) {
	out := new(InternalListMasterDataByIdsRes)
	err := c.cc.Invoke(ctx, "/partnership.MasterDataService/InternalListMasterDataByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterDataServiceServer is the server API for MasterDataService service.
// All implementations must embed UnimplementedMasterDataServiceServer
// for forward compatibility
type MasterDataServiceServer interface {
	CreateMasterData(context.Context, *CreateMasterDataReq) (*CreateMasterDataRes, error)
	UpdateMasterData(context.Context, *UpdateMasterDataReq) (*Empty, error)
	DeleteMasterData(context.Context, *DeleteMasterDataReq) (*Empty, error)
	// QUERY IN USER APP
	RetrieveMasterData(context.Context, *RetrieveMasterDataReq) (*RetrieveMasterDataRes, error)
	ListMasterData(context.Context, *ListMasterDataReq) (*ListMasterDataRes, error)
	// QUERY IN PARTNERSHIP APP
	RetrieveMasterDataPartnership(context.Context, *RetrieveMasterDataPartnershipReq) (*RetrieveMasterDataPartnershipRes, error)
	ListMasterDataPartnership(context.Context, *ListMasterDataPartnershipReq) (*ListMasterDataPartnershipRes, error)
	// INTERNAL
	InternalListMasterDataByIds(context.Context, *InternalListMasterDataByIdsReq) (*InternalListMasterDataByIdsRes, error)
	mustEmbedUnimplementedMasterDataServiceServer()
}

// UnimplementedMasterDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMasterDataServiceServer struct {
}

func (UnimplementedMasterDataServiceServer) CreateMasterData(context.Context, *CreateMasterDataReq) (*CreateMasterDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMasterData not implemented")
}
func (UnimplementedMasterDataServiceServer) UpdateMasterData(context.Context, *UpdateMasterDataReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMasterData not implemented")
}
func (UnimplementedMasterDataServiceServer) DeleteMasterData(context.Context, *DeleteMasterDataReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMasterData not implemented")
}
func (UnimplementedMasterDataServiceServer) RetrieveMasterData(context.Context, *RetrieveMasterDataReq) (*RetrieveMasterDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveMasterData not implemented")
}
func (UnimplementedMasterDataServiceServer) ListMasterData(context.Context, *ListMasterDataReq) (*ListMasterDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMasterData not implemented")
}
func (UnimplementedMasterDataServiceServer) RetrieveMasterDataPartnership(context.Context, *RetrieveMasterDataPartnershipReq) (*RetrieveMasterDataPartnershipRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveMasterDataPartnership not implemented")
}
func (UnimplementedMasterDataServiceServer) ListMasterDataPartnership(context.Context, *ListMasterDataPartnershipReq) (*ListMasterDataPartnershipRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMasterDataPartnership not implemented")
}
func (UnimplementedMasterDataServiceServer) InternalListMasterDataByIds(context.Context, *InternalListMasterDataByIdsReq) (*InternalListMasterDataByIdsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalListMasterDataByIds not implemented")
}
func (UnimplementedMasterDataServiceServer) mustEmbedUnimplementedMasterDataServiceServer() {}

// UnsafeMasterDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterDataServiceServer will
// result in compilation errors.
type UnsafeMasterDataServiceServer interface {
	mustEmbedUnimplementedMasterDataServiceServer()
}

func RegisterMasterDataServiceServer(s grpc.ServiceRegistrar, srv MasterDataServiceServer) {
	s.RegisterService(&MasterDataService_ServiceDesc, srv)
}

func _MasterDataService_CreateMasterData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMasterDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDataServiceServer).CreateMasterData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.MasterDataService/CreateMasterData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDataServiceServer).CreateMasterData(ctx, req.(*CreateMasterDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDataService_UpdateMasterData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMasterDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDataServiceServer).UpdateMasterData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.MasterDataService/UpdateMasterData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDataServiceServer).UpdateMasterData(ctx, req.(*UpdateMasterDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDataService_DeleteMasterData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMasterDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDataServiceServer).DeleteMasterData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.MasterDataService/DeleteMasterData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDataServiceServer).DeleteMasterData(ctx, req.(*DeleteMasterDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDataService_RetrieveMasterData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveMasterDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDataServiceServer).RetrieveMasterData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.MasterDataService/RetrieveMasterData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDataServiceServer).RetrieveMasterData(ctx, req.(*RetrieveMasterDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDataService_ListMasterData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMasterDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDataServiceServer).ListMasterData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.MasterDataService/ListMasterData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDataServiceServer).ListMasterData(ctx, req.(*ListMasterDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDataService_RetrieveMasterDataPartnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveMasterDataPartnershipReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDataServiceServer).RetrieveMasterDataPartnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.MasterDataService/RetrieveMasterDataPartnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDataServiceServer).RetrieveMasterDataPartnership(ctx, req.(*RetrieveMasterDataPartnershipReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDataService_ListMasterDataPartnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMasterDataPartnershipReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDataServiceServer).ListMasterDataPartnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.MasterDataService/ListMasterDataPartnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDataServiceServer).ListMasterDataPartnership(ctx, req.(*ListMasterDataPartnershipReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDataService_InternalListMasterDataByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalListMasterDataByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDataServiceServer).InternalListMasterDataByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.MasterDataService/InternalListMasterDataByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDataServiceServer).InternalListMasterDataByIds(ctx, req.(*InternalListMasterDataByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterDataService_ServiceDesc is the grpc.ServiceDesc for MasterDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "partnership.MasterDataService",
	HandlerType: (*MasterDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMasterData",
			Handler:    _MasterDataService_CreateMasterData_Handler,
		},
		{
			MethodName: "UpdateMasterData",
			Handler:    _MasterDataService_UpdateMasterData_Handler,
		},
		{
			MethodName: "DeleteMasterData",
			Handler:    _MasterDataService_DeleteMasterData_Handler,
		},
		{
			MethodName: "RetrieveMasterData",
			Handler:    _MasterDataService_RetrieveMasterData_Handler,
		},
		{
			MethodName: "ListMasterData",
			Handler:    _MasterDataService_ListMasterData_Handler,
		},
		{
			MethodName: "RetrieveMasterDataPartnership",
			Handler:    _MasterDataService_RetrieveMasterDataPartnership_Handler,
		},
		{
			MethodName: "ListMasterDataPartnership",
			Handler:    _MasterDataService_ListMasterDataPartnership_Handler,
		},
		{
			MethodName: "InternalListMasterDataByIds",
			Handler:    _MasterDataService_InternalListMasterDataByIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/partnership/master_data.proto",
}
