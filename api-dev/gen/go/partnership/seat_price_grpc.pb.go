// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: proto/partnership/seat_price.proto

package partnership

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SeatPriceServiceClient is the client API for SeatPriceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeatPriceServiceClient interface {
	RetrieveSeatPrice(ctx context.Context, in *RetrieveSeatPriceReq, opts ...grpc.CallOption) (*RetrieveSeatPriceRes, error)
	ListSeatPrice(ctx context.Context, in *ListSeatPriceReq, opts ...grpc.CallOption) (*ListSeatPriceRes, error)
	CreateSeatPrice(ctx context.Context, in *CreateSeatPriceReq, opts ...grpc.CallOption) (*CreateSeatPriceRes, error)
	UpdateSeatPrice(ctx context.Context, in *UpdateSeatPriceReq, opts ...grpc.CallOption) (*Empty, error)
	DeleteSeatPrice(ctx context.Context, in *DeleteSeatPriceReq, opts ...grpc.CallOption) (*Empty, error)
}

type seatPriceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeatPriceServiceClient(cc grpc.ClientConnInterface) SeatPriceServiceClient {
	return &seatPriceServiceClient{cc}
}

func (c *seatPriceServiceClient) RetrieveSeatPrice(ctx context.Context, in *RetrieveSeatPriceReq, opts ...grpc.CallOption) (*RetrieveSeatPriceRes, error) {
	out := new(RetrieveSeatPriceRes)
	err := c.cc.Invoke(ctx, "/partnership.SeatPriceService/RetrieveSeatPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatPriceServiceClient) ListSeatPrice(ctx context.Context, in *ListSeatPriceReq, opts ...grpc.CallOption) (*ListSeatPriceRes, error) {
	out := new(ListSeatPriceRes)
	err := c.cc.Invoke(ctx, "/partnership.SeatPriceService/ListSeatPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatPriceServiceClient) CreateSeatPrice(ctx context.Context, in *CreateSeatPriceReq, opts ...grpc.CallOption) (*CreateSeatPriceRes, error) {
	out := new(CreateSeatPriceRes)
	err := c.cc.Invoke(ctx, "/partnership.SeatPriceService/CreateSeatPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatPriceServiceClient) UpdateSeatPrice(ctx context.Context, in *UpdateSeatPriceReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/partnership.SeatPriceService/UpdateSeatPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatPriceServiceClient) DeleteSeatPrice(ctx context.Context, in *DeleteSeatPriceReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/partnership.SeatPriceService/DeleteSeatPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeatPriceServiceServer is the server API for SeatPriceService service.
// All implementations must embed UnimplementedSeatPriceServiceServer
// for forward compatibility
type SeatPriceServiceServer interface {
	RetrieveSeatPrice(context.Context, *RetrieveSeatPriceReq) (*RetrieveSeatPriceRes, error)
	ListSeatPrice(context.Context, *ListSeatPriceReq) (*ListSeatPriceRes, error)
	CreateSeatPrice(context.Context, *CreateSeatPriceReq) (*CreateSeatPriceRes, error)
	UpdateSeatPrice(context.Context, *UpdateSeatPriceReq) (*Empty, error)
	DeleteSeatPrice(context.Context, *DeleteSeatPriceReq) (*Empty, error)
	mustEmbedUnimplementedSeatPriceServiceServer()
}

// UnimplementedSeatPriceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSeatPriceServiceServer struct {
}

func (UnimplementedSeatPriceServiceServer) RetrieveSeatPrice(context.Context, *RetrieveSeatPriceReq) (*RetrieveSeatPriceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSeatPrice not implemented")
}
func (UnimplementedSeatPriceServiceServer) ListSeatPrice(context.Context, *ListSeatPriceReq) (*ListSeatPriceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSeatPrice not implemented")
}
func (UnimplementedSeatPriceServiceServer) CreateSeatPrice(context.Context, *CreateSeatPriceReq) (*CreateSeatPriceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeatPrice not implemented")
}
func (UnimplementedSeatPriceServiceServer) UpdateSeatPrice(context.Context, *UpdateSeatPriceReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeatPrice not implemented")
}
func (UnimplementedSeatPriceServiceServer) DeleteSeatPrice(context.Context, *DeleteSeatPriceReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeatPrice not implemented")
}
func (UnimplementedSeatPriceServiceServer) mustEmbedUnimplementedSeatPriceServiceServer() {}

// UnsafeSeatPriceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeatPriceServiceServer will
// result in compilation errors.
type UnsafeSeatPriceServiceServer interface {
	mustEmbedUnimplementedSeatPriceServiceServer()
}

func RegisterSeatPriceServiceServer(s grpc.ServiceRegistrar, srv SeatPriceServiceServer) {
	s.RegisterService(&SeatPriceService_ServiceDesc, srv)
}

func _SeatPriceService_RetrieveSeatPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveSeatPriceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatPriceServiceServer).RetrieveSeatPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.SeatPriceService/RetrieveSeatPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatPriceServiceServer).RetrieveSeatPrice(ctx, req.(*RetrieveSeatPriceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatPriceService_ListSeatPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSeatPriceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatPriceServiceServer).ListSeatPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.SeatPriceService/ListSeatPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatPriceServiceServer).ListSeatPrice(ctx, req.(*ListSeatPriceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatPriceService_CreateSeatPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeatPriceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatPriceServiceServer).CreateSeatPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.SeatPriceService/CreateSeatPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatPriceServiceServer).CreateSeatPrice(ctx, req.(*CreateSeatPriceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatPriceService_UpdateSeatPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeatPriceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatPriceServiceServer).UpdateSeatPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.SeatPriceService/UpdateSeatPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatPriceServiceServer).UpdateSeatPrice(ctx, req.(*UpdateSeatPriceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatPriceService_DeleteSeatPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeatPriceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatPriceServiceServer).DeleteSeatPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.SeatPriceService/DeleteSeatPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatPriceServiceServer).DeleteSeatPrice(ctx, req.(*DeleteSeatPriceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SeatPriceService_ServiceDesc is the grpc.ServiceDesc for SeatPriceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeatPriceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "partnership.SeatPriceService",
	HandlerType: (*SeatPriceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveSeatPrice",
			Handler:    _SeatPriceService_RetrieveSeatPrice_Handler,
		},
		{
			MethodName: "ListSeatPrice",
			Handler:    _SeatPriceService_ListSeatPrice_Handler,
		},
		{
			MethodName: "CreateSeatPrice",
			Handler:    _SeatPriceService_CreateSeatPrice_Handler,
		},
		{
			MethodName: "UpdateSeatPrice",
			Handler:    _SeatPriceService_UpdateSeatPrice_Handler,
		},
		{
			MethodName: "DeleteSeatPrice",
			Handler:    _SeatPriceService_DeleteSeatPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/partnership/seat_price.proto",
}
