// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: proto/partnership/web_partnership/partnership_user.proto

package web_partnership

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PartnershipUserServiceClient is the client API for PartnershipUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartnershipUserServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserRes, error)
	// Fullfilment
	GetMe(ctx context.Context, in *GetMeReq, opts ...grpc.CallOption) (*GetMeRes, error)
	UpdateMe(ctx context.Context, in *UpdateMeReq, opts ...grpc.CallOption) (*Empty, error)
	ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*Empty, error)
	GetBasicUsers(ctx context.Context, in *GetBasicUsersReq, opts ...grpc.CallOption) (*GetBasicUsersRes, error)
	// Reset password
	SendOtpToResetPassword(ctx context.Context, in *SendOtpToResetPasswordReq, opts ...grpc.CallOption) (*SendOtpToResetPasswordRes, error)
	VerifyOtpToResetPassword(ctx context.Context, in *VerifyOtpToResetPasswordReq, opts ...grpc.CallOption) (*VerifyOtpToResetPasswordRes, error)
	ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*Empty, error)
	// Sub-account
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*Empty, error)
	DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*Empty, error)
	DisableUser(ctx context.Context, in *DisableUserReq, opts ...grpc.CallOption) (*Empty, error)
}

type partnershipUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartnershipUserServiceClient(cc grpc.ClientConnInterface) PartnershipUserServiceClient {
	return &partnershipUserServiceClient{cc}
}

func (c *partnershipUserServiceClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserRes, error) {
	out := new(CreateUserRes)
	err := c.cc.Invoke(ctx, "/partnership.web_partnership.PartnershipUserService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnershipUserServiceClient) GetMe(ctx context.Context, in *GetMeReq, opts ...grpc.CallOption) (*GetMeRes, error) {
	out := new(GetMeRes)
	err := c.cc.Invoke(ctx, "/partnership.web_partnership.PartnershipUserService/GetMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnershipUserServiceClient) UpdateMe(ctx context.Context, in *UpdateMeReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/partnership.web_partnership.PartnershipUserService/UpdateMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnershipUserServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/partnership.web_partnership.PartnershipUserService/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnershipUserServiceClient) GetBasicUsers(ctx context.Context, in *GetBasicUsersReq, opts ...grpc.CallOption) (*GetBasicUsersRes, error) {
	out := new(GetBasicUsersRes)
	err := c.cc.Invoke(ctx, "/partnership.web_partnership.PartnershipUserService/GetBasicUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnershipUserServiceClient) SendOtpToResetPassword(ctx context.Context, in *SendOtpToResetPasswordReq, opts ...grpc.CallOption) (*SendOtpToResetPasswordRes, error) {
	out := new(SendOtpToResetPasswordRes)
	err := c.cc.Invoke(ctx, "/partnership.web_partnership.PartnershipUserService/SendOtpToResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnershipUserServiceClient) VerifyOtpToResetPassword(ctx context.Context, in *VerifyOtpToResetPasswordReq, opts ...grpc.CallOption) (*VerifyOtpToResetPasswordRes, error) {
	out := new(VerifyOtpToResetPasswordRes)
	err := c.cc.Invoke(ctx, "/partnership.web_partnership.PartnershipUserService/VerifyOtpToResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnershipUserServiceClient) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/partnership.web_partnership.PartnershipUserService/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnershipUserServiceClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/partnership.web_partnership.PartnershipUserService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnershipUserServiceClient) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/partnership.web_partnership.PartnershipUserService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnershipUserServiceClient) DisableUser(ctx context.Context, in *DisableUserReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/partnership.web_partnership.PartnershipUserService/DisableUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartnershipUserServiceServer is the server API for PartnershipUserService service.
// All implementations must embed UnimplementedPartnershipUserServiceServer
// for forward compatibility
type PartnershipUserServiceServer interface {
	CreateUser(context.Context, *CreateUserReq) (*CreateUserRes, error)
	// Fullfilment
	GetMe(context.Context, *GetMeReq) (*GetMeRes, error)
	UpdateMe(context.Context, *UpdateMeReq) (*Empty, error)
	ChangePassword(context.Context, *ChangePasswordReq) (*Empty, error)
	GetBasicUsers(context.Context, *GetBasicUsersReq) (*GetBasicUsersRes, error)
	// Reset password
	SendOtpToResetPassword(context.Context, *SendOtpToResetPasswordReq) (*SendOtpToResetPasswordRes, error)
	VerifyOtpToResetPassword(context.Context, *VerifyOtpToResetPasswordReq) (*VerifyOtpToResetPasswordRes, error)
	ResetPassword(context.Context, *ResetPasswordReq) (*Empty, error)
	// Sub-account
	UpdateUser(context.Context, *UpdateUserReq) (*Empty, error)
	DeleteUser(context.Context, *DeleteUserReq) (*Empty, error)
	DisableUser(context.Context, *DisableUserReq) (*Empty, error)
	mustEmbedUnimplementedPartnershipUserServiceServer()
}

// UnimplementedPartnershipUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPartnershipUserServiceServer struct {
}

func (UnimplementedPartnershipUserServiceServer) CreateUser(context.Context, *CreateUserReq) (*CreateUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedPartnershipUserServiceServer) GetMe(context.Context, *GetMeReq) (*GetMeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMe not implemented")
}
func (UnimplementedPartnershipUserServiceServer) UpdateMe(context.Context, *UpdateMeReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMe not implemented")
}
func (UnimplementedPartnershipUserServiceServer) ChangePassword(context.Context, *ChangePasswordReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedPartnershipUserServiceServer) GetBasicUsers(context.Context, *GetBasicUsersReq) (*GetBasicUsersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasicUsers not implemented")
}
func (UnimplementedPartnershipUserServiceServer) SendOtpToResetPassword(context.Context, *SendOtpToResetPasswordReq) (*SendOtpToResetPasswordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOtpToResetPassword not implemented")
}
func (UnimplementedPartnershipUserServiceServer) VerifyOtpToResetPassword(context.Context, *VerifyOtpToResetPasswordReq) (*VerifyOtpToResetPasswordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOtpToResetPassword not implemented")
}
func (UnimplementedPartnershipUserServiceServer) ResetPassword(context.Context, *ResetPasswordReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedPartnershipUserServiceServer) UpdateUser(context.Context, *UpdateUserReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedPartnershipUserServiceServer) DeleteUser(context.Context, *DeleteUserReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedPartnershipUserServiceServer) DisableUser(context.Context, *DisableUserReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableUser not implemented")
}
func (UnimplementedPartnershipUserServiceServer) mustEmbedUnimplementedPartnershipUserServiceServer() {
}

// UnsafePartnershipUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartnershipUserServiceServer will
// result in compilation errors.
type UnsafePartnershipUserServiceServer interface {
	mustEmbedUnimplementedPartnershipUserServiceServer()
}

func RegisterPartnershipUserServiceServer(s grpc.ServiceRegistrar, srv PartnershipUserServiceServer) {
	s.RegisterService(&PartnershipUserService_ServiceDesc, srv)
}

func _PartnershipUserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnershipUserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.web_partnership.PartnershipUserService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnershipUserServiceServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnershipUserService_GetMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnershipUserServiceServer).GetMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.web_partnership.PartnershipUserService/GetMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnershipUserServiceServer).GetMe(ctx, req.(*GetMeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnershipUserService_UpdateMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnershipUserServiceServer).UpdateMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.web_partnership.PartnershipUserService/UpdateMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnershipUserServiceServer).UpdateMe(ctx, req.(*UpdateMeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnershipUserService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnershipUserServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.web_partnership.PartnershipUserService/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnershipUserServiceServer).ChangePassword(ctx, req.(*ChangePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnershipUserService_GetBasicUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasicUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnershipUserServiceServer).GetBasicUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.web_partnership.PartnershipUserService/GetBasicUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnershipUserServiceServer).GetBasicUsers(ctx, req.(*GetBasicUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnershipUserService_SendOtpToResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOtpToResetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnershipUserServiceServer).SendOtpToResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.web_partnership.PartnershipUserService/SendOtpToResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnershipUserServiceServer).SendOtpToResetPassword(ctx, req.(*SendOtpToResetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnershipUserService_VerifyOtpToResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOtpToResetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnershipUserServiceServer).VerifyOtpToResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.web_partnership.PartnershipUserService/VerifyOtpToResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnershipUserServiceServer).VerifyOtpToResetPassword(ctx, req.(*VerifyOtpToResetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnershipUserService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnershipUserServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.web_partnership.PartnershipUserService/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnershipUserServiceServer).ResetPassword(ctx, req.(*ResetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnershipUserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnershipUserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.web_partnership.PartnershipUserService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnershipUserServiceServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnershipUserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnershipUserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.web_partnership.PartnershipUserService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnershipUserServiceServer).DeleteUser(ctx, req.(*DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnershipUserService_DisableUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnershipUserServiceServer).DisableUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partnership.web_partnership.PartnershipUserService/DisableUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnershipUserServiceServer).DisableUser(ctx, req.(*DisableUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PartnershipUserService_ServiceDesc is the grpc.ServiceDesc for PartnershipUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartnershipUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "partnership.web_partnership.PartnershipUserService",
	HandlerType: (*PartnershipUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _PartnershipUserService_CreateUser_Handler,
		},
		{
			MethodName: "GetMe",
			Handler:    _PartnershipUserService_GetMe_Handler,
		},
		{
			MethodName: "UpdateMe",
			Handler:    _PartnershipUserService_UpdateMe_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _PartnershipUserService_ChangePassword_Handler,
		},
		{
			MethodName: "GetBasicUsers",
			Handler:    _PartnershipUserService_GetBasicUsers_Handler,
		},
		{
			MethodName: "SendOtpToResetPassword",
			Handler:    _PartnershipUserService_SendOtpToResetPassword_Handler,
		},
		{
			MethodName: "VerifyOtpToResetPassword",
			Handler:    _PartnershipUserService_VerifyOtpToResetPassword_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _PartnershipUserService_ResetPassword_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _PartnershipUserService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _PartnershipUserService_DeleteUser_Handler,
		},
		{
			MethodName: "DisableUser",
			Handler:    _PartnershipUserService_DisableUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/partnership/web_partnership/partnership_user.proto",
}
