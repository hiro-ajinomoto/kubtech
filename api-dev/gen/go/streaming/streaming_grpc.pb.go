// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: proto/streaming/streaming.proto

package streaming

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamingServiceClient is the client API for StreamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamingServiceClient interface {
	GetEpisodes(ctx context.Context, in *GetEpisodesReq, opts ...grpc.CallOption) (*GetEpisodesRes, error)
	GetStreamingInfo(ctx context.Context, in *GetStreamingInfoReq, opts ...grpc.CallOption) (*GetStreamingInfoRes, error)
	NewSession(ctx context.Context, in *NewSessionReq, opts ...grpc.CallOption) (*NewSessionRes, error)
	HeartbeatSession(ctx context.Context, in *HeartbeatSessionReq, opts ...grpc.CallOption) (*HeartbeatSessionRes, error)
	EndSession(ctx context.Context, in *EndSessionReq, opts ...grpc.CallOption) (*EndSessionRes, error)
}

type streamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamingServiceClient(cc grpc.ClientConnInterface) StreamingServiceClient {
	return &streamingServiceClient{cc}
}

func (c *streamingServiceClient) GetEpisodes(ctx context.Context, in *GetEpisodesReq, opts ...grpc.CallOption) (*GetEpisodesRes, error) {
	out := new(GetEpisodesRes)
	err := c.cc.Invoke(ctx, "/streaming.StreamingService/GetEpisodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamingServiceClient) GetStreamingInfo(ctx context.Context, in *GetStreamingInfoReq, opts ...grpc.CallOption) (*GetStreamingInfoRes, error) {
	out := new(GetStreamingInfoRes)
	err := c.cc.Invoke(ctx, "/streaming.StreamingService/GetStreamingInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamingServiceClient) NewSession(ctx context.Context, in *NewSessionReq, opts ...grpc.CallOption) (*NewSessionRes, error) {
	out := new(NewSessionRes)
	err := c.cc.Invoke(ctx, "/streaming.StreamingService/NewSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamingServiceClient) HeartbeatSession(ctx context.Context, in *HeartbeatSessionReq, opts ...grpc.CallOption) (*HeartbeatSessionRes, error) {
	out := new(HeartbeatSessionRes)
	err := c.cc.Invoke(ctx, "/streaming.StreamingService/HeartbeatSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamingServiceClient) EndSession(ctx context.Context, in *EndSessionReq, opts ...grpc.CallOption) (*EndSessionRes, error) {
	out := new(EndSessionRes)
	err := c.cc.Invoke(ctx, "/streaming.StreamingService/EndSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamingServiceServer is the server API for StreamingService service.
// All implementations must embed UnimplementedStreamingServiceServer
// for forward compatibility
type StreamingServiceServer interface {
	GetEpisodes(context.Context, *GetEpisodesReq) (*GetEpisodesRes, error)
	GetStreamingInfo(context.Context, *GetStreamingInfoReq) (*GetStreamingInfoRes, error)
	NewSession(context.Context, *NewSessionReq) (*NewSessionRes, error)
	HeartbeatSession(context.Context, *HeartbeatSessionReq) (*HeartbeatSessionRes, error)
	EndSession(context.Context, *EndSessionReq) (*EndSessionRes, error)
	mustEmbedUnimplementedStreamingServiceServer()
}

// UnimplementedStreamingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamingServiceServer struct {
}

func (UnimplementedStreamingServiceServer) GetEpisodes(context.Context, *GetEpisodesReq) (*GetEpisodesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpisodes not implemented")
}
func (UnimplementedStreamingServiceServer) GetStreamingInfo(context.Context, *GetStreamingInfoReq) (*GetStreamingInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamingInfo not implemented")
}
func (UnimplementedStreamingServiceServer) NewSession(context.Context, *NewSessionReq) (*NewSessionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSession not implemented")
}
func (UnimplementedStreamingServiceServer) HeartbeatSession(context.Context, *HeartbeatSessionReq) (*HeartbeatSessionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartbeatSession not implemented")
}
func (UnimplementedStreamingServiceServer) EndSession(context.Context, *EndSessionReq) (*EndSessionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndSession not implemented")
}
func (UnimplementedStreamingServiceServer) mustEmbedUnimplementedStreamingServiceServer() {}

// UnsafeStreamingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamingServiceServer will
// result in compilation errors.
type UnsafeStreamingServiceServer interface {
	mustEmbedUnimplementedStreamingServiceServer()
}

func RegisterStreamingServiceServer(s grpc.ServiceRegistrar, srv StreamingServiceServer) {
	s.RegisterService(&StreamingService_ServiceDesc, srv)
}

func _StreamingService_GetEpisodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEpisodesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingServiceServer).GetEpisodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/streaming.StreamingService/GetEpisodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingServiceServer).GetEpisodes(ctx, req.(*GetEpisodesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamingService_GetStreamingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamingInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingServiceServer).GetStreamingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/streaming.StreamingService/GetStreamingInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingServiceServer).GetStreamingInfo(ctx, req.(*GetStreamingInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamingService_NewSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingServiceServer).NewSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/streaming.StreamingService/NewSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingServiceServer).NewSession(ctx, req.(*NewSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamingService_HeartbeatSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingServiceServer).HeartbeatSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/streaming.StreamingService/HeartbeatSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingServiceServer).HeartbeatSession(ctx, req.(*HeartbeatSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamingService_EndSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingServiceServer).EndSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/streaming.StreamingService/EndSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingServiceServer).EndSession(ctx, req.(*EndSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamingService_ServiceDesc is the grpc.ServiceDesc for StreamingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streaming.StreamingService",
	HandlerType: (*StreamingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEpisodes",
			Handler:    _StreamingService_GetEpisodes_Handler,
		},
		{
			MethodName: "GetStreamingInfo",
			Handler:    _StreamingService_GetStreamingInfo_Handler,
		},
		{
			MethodName: "NewSession",
			Handler:    _StreamingService_NewSession_Handler,
		},
		{
			MethodName: "HeartbeatSession",
			Handler:    _StreamingService_HeartbeatSession_Handler,
		},
		{
			MethodName: "EndSession",
			Handler:    _StreamingService_EndSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/streaming/streaming.proto",
}
