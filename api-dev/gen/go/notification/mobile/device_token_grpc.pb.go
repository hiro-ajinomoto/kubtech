// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: proto/notification/mobile/device_token.proto

package mobile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceTokenSvcClient is the client API for DeviceTokenSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceTokenSvcClient interface {
	RegisterDeviceToken(ctx context.Context, in *RegisterDeviceTokenReq, opts ...grpc.CallOption) (*Empty, error)
	DeregisterDeviceToken(ctx context.Context, in *DeregisterDeviceTokenReq, opts ...grpc.CallOption) (*Empty, error)
}

type deviceTokenSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceTokenSvcClient(cc grpc.ClientConnInterface) DeviceTokenSvcClient {
	return &deviceTokenSvcClient{cc}
}

func (c *deviceTokenSvcClient) RegisterDeviceToken(ctx context.Context, in *RegisterDeviceTokenReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/notification.mobile.DeviceTokenSvc/RegisterDeviceToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTokenSvcClient) DeregisterDeviceToken(ctx context.Context, in *DeregisterDeviceTokenReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/notification.mobile.DeviceTokenSvc/DeregisterDeviceToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceTokenSvcServer is the server API for DeviceTokenSvc service.
// All implementations must embed UnimplementedDeviceTokenSvcServer
// for forward compatibility
type DeviceTokenSvcServer interface {
	RegisterDeviceToken(context.Context, *RegisterDeviceTokenReq) (*Empty, error)
	DeregisterDeviceToken(context.Context, *DeregisterDeviceTokenReq) (*Empty, error)
	mustEmbedUnimplementedDeviceTokenSvcServer()
}

// UnimplementedDeviceTokenSvcServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceTokenSvcServer struct {
}

func (UnimplementedDeviceTokenSvcServer) RegisterDeviceToken(context.Context, *RegisterDeviceTokenReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDeviceToken not implemented")
}
func (UnimplementedDeviceTokenSvcServer) DeregisterDeviceToken(context.Context, *DeregisterDeviceTokenReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterDeviceToken not implemented")
}
func (UnimplementedDeviceTokenSvcServer) mustEmbedUnimplementedDeviceTokenSvcServer() {}

// UnsafeDeviceTokenSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceTokenSvcServer will
// result in compilation errors.
type UnsafeDeviceTokenSvcServer interface {
	mustEmbedUnimplementedDeviceTokenSvcServer()
}

func RegisterDeviceTokenSvcServer(s grpc.ServiceRegistrar, srv DeviceTokenSvcServer) {
	s.RegisterService(&DeviceTokenSvc_ServiceDesc, srv)
}

func _DeviceTokenSvc_RegisterDeviceToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDeviceTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTokenSvcServer).RegisterDeviceToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.mobile.DeviceTokenSvc/RegisterDeviceToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTokenSvcServer).RegisterDeviceToken(ctx, req.(*RegisterDeviceTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTokenSvc_DeregisterDeviceToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeregisterDeviceTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTokenSvcServer).DeregisterDeviceToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.mobile.DeviceTokenSvc/DeregisterDeviceToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTokenSvcServer).DeregisterDeviceToken(ctx, req.(*DeregisterDeviceTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceTokenSvc_ServiceDesc is the grpc.ServiceDesc for DeviceTokenSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceTokenSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification.mobile.DeviceTokenSvc",
	HandlerType: (*DeviceTokenSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDeviceToken",
			Handler:    _DeviceTokenSvc_RegisterDeviceToken_Handler,
		},
		{
			MethodName: "DeregisterDeviceToken",
			Handler:    _DeviceTokenSvc_DeregisterDeviceToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/notification/mobile/device_token.proto",
}
