// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: proto/notification/mobile/user_notification.proto

package mobile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserNotificationServiceClient is the client API for UserNotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserNotificationServiceClient interface {
	GetUserNotifications(ctx context.Context, in *GetUserNotificationsReq, opts ...grpc.CallOption) (*GetUserNotificationsRes, error)
	MarkAsRead(ctx context.Context, in *MarkAsReadReq, opts ...grpc.CallOption) (*Empty, error)
	DeleteUserNotification(ctx context.Context, in *DeleteUserNotificationReq, opts ...grpc.CallOption) (*Empty, error)
}

type userNotificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserNotificationServiceClient(cc grpc.ClientConnInterface) UserNotificationServiceClient {
	return &userNotificationServiceClient{cc}
}

func (c *userNotificationServiceClient) GetUserNotifications(ctx context.Context, in *GetUserNotificationsReq, opts ...grpc.CallOption) (*GetUserNotificationsRes, error) {
	out := new(GetUserNotificationsRes)
	err := c.cc.Invoke(ctx, "/notification.mobile.UserNotificationService/GetUserNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userNotificationServiceClient) MarkAsRead(ctx context.Context, in *MarkAsReadReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/notification.mobile.UserNotificationService/MarkAsRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userNotificationServiceClient) DeleteUserNotification(ctx context.Context, in *DeleteUserNotificationReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/notification.mobile.UserNotificationService/DeleteUserNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserNotificationServiceServer is the server API for UserNotificationService service.
// All implementations must embed UnimplementedUserNotificationServiceServer
// for forward compatibility
type UserNotificationServiceServer interface {
	GetUserNotifications(context.Context, *GetUserNotificationsReq) (*GetUserNotificationsRes, error)
	MarkAsRead(context.Context, *MarkAsReadReq) (*Empty, error)
	DeleteUserNotification(context.Context, *DeleteUserNotificationReq) (*Empty, error)
	mustEmbedUnimplementedUserNotificationServiceServer()
}

// UnimplementedUserNotificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserNotificationServiceServer struct {
}

func (UnimplementedUserNotificationServiceServer) GetUserNotifications(context.Context, *GetUserNotificationsReq) (*GetUserNotificationsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNotifications not implemented")
}
func (UnimplementedUserNotificationServiceServer) MarkAsRead(context.Context, *MarkAsReadReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAsRead not implemented")
}
func (UnimplementedUserNotificationServiceServer) DeleteUserNotification(context.Context, *DeleteUserNotificationReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserNotification not implemented")
}
func (UnimplementedUserNotificationServiceServer) mustEmbedUnimplementedUserNotificationServiceServer() {
}

// UnsafeUserNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserNotificationServiceServer will
// result in compilation errors.
type UnsafeUserNotificationServiceServer interface {
	mustEmbedUnimplementedUserNotificationServiceServer()
}

func RegisterUserNotificationServiceServer(s grpc.ServiceRegistrar, srv UserNotificationServiceServer) {
	s.RegisterService(&UserNotificationService_ServiceDesc, srv)
}

func _UserNotificationService_GetUserNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserNotificationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNotificationServiceServer).GetUserNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.mobile.UserNotificationService/GetUserNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNotificationServiceServer).GetUserNotifications(ctx, req.(*GetUserNotificationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserNotificationService_MarkAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAsReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNotificationServiceServer).MarkAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.mobile.UserNotificationService/MarkAsRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNotificationServiceServer).MarkAsRead(ctx, req.(*MarkAsReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserNotificationService_DeleteUserNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserNotificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNotificationServiceServer).DeleteUserNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.mobile.UserNotificationService/DeleteUserNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNotificationServiceServer).DeleteUserNotification(ctx, req.(*DeleteUserNotificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserNotificationService_ServiceDesc is the grpc.ServiceDesc for UserNotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserNotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification.mobile.UserNotificationService",
	HandlerType: (*UserNotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserNotifications",
			Handler:    _UserNotificationService_GetUserNotifications_Handler,
		},
		{
			MethodName: "MarkAsRead",
			Handler:    _UserNotificationService_MarkAsRead_Handler,
		},
		{
			MethodName: "DeleteUserNotification",
			Handler:    _UserNotificationService_DeleteUserNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/notification/mobile/user_notification.proto",
}
