syntax = "proto3";

package product.backend;
option  go_package = "gitlab.bcasia.io/thuynga/apps/api/gen/go/product/backend;backend";

import "product/backend/base.proto";
import "product/base.proto";

service ProductService {
  rpc ListProductByIds(ListProductByIdsReq) returns (ListProductByIdsRes);
  rpc CheckQuantity(CheckQuantityReq) returns (Empty);
  rpc GetAvailableQuantity(GetAvailableQuantityReq) returns (GetAvailableQuantityRes);
  rpc CheckAndLockQuantity(CheckAndLockQuantityReq) returns (Empty);
  rpc UnlockQuantity(UnlockQuantityReq) returns (Empty);
  rpc UnlockAndUpdateQuantity(UnlockAndUpdateQuantityReq) returns (Empty);
  rpc InternalGenerateProductByEventSeat(GenerateProductByEventSeatReq) returns (Empty);
}

//=================================== TYPES ====================================

enum ValueType {
  VALUE_TYPE_INVALID = 0;
  VALUE_TYPE_STRING  = 1;
  VALUE_TYPE_INTEGER = 2;
  VALUE_TYPE_FLOAT   = 3;
  VALUE_TYPE_BOOLEAN = 4;
}

enum PurchaseType {
  PURCHASE_TYPE_INVALID      = 0;
  PURCHASE_TYPE_RENT_OR_SELL = 1;
  PURCHASE_TYPE_RENT_ONLY    = 2;
  PURCHASE_TYPE_SELL_ONLY    = 3;
}

enum ProductStatus {
  PRODUCT_STATUS_INVALID     = 0;
  PRODUCT_STATUS_PUBLISHED   = 1;
  PRODUCT_STATUS_UNPUBLISHED = 2;
  PRODUCT_STATUS_DRAFT       = 3;
  PRODUCT_STATUS_DELETED     = 4;
}

enum UnlockAndUpdateQuantityAction {
  UNLOCK_AND_UPDATE_QUANTITY_ACTION_INVALID  = 0;
  UNLOCK_AND_UPDATE_QUANTITY_ACTION_INCREASE = 1;
  UNLOCK_AND_UPDATE_QUANTITY_ACTION_DECREASE = 2;
}

message ProductInfo {
  string id             = 1;
  int64  created_at     = 2;
  int64  updated_at     = 3;
  string created_by     = 4;
  string updated_by     = 5;
  string partnership_id = 6;

  string                    name                 = 7;
  repeated string           medias               = 8;
  repeated string           tags                 = 9;
  int64                     available_start_time = 10;
  int64                     available_end_time   = 11;
  int64                     quantity             = 12;
  string                    sku                  = 13;
  double                    listed_price         = 14;
  double                    discount_percent     = 15;
  double                    price                = 16;
  string                    barcode              = 17;
  string                    uom                  = 18; // unit of measurement
  ProductCurrencyInfo       currency             = 19;
  string                    brand                = 20;
  string                    description          = 21;
  Boolean                   unlimited            = 22;
  string                    country              = 23;
  repeated ProductAttribute attributes           = 24;
  PurchaseType              purchase_type        = 25;
  ProductStatus             status               = 26;
  string                    language             = 27;
  bool                      in_booking           = 28;
  map<string, string>       additional_data      = 29;
  string                    partner_shop_id      = 30;
  optional SeatInfo         seat_info            = 31;
  ProductType               type                 = 32;
}

message ProductCurrencyInfo {
  string id   = 1;
  string name = 2;
  string code = 3;
  string icon = 4;
}

message ProductAttribute {
  string              master_data_id  = 1;
  string              name            = 2;
  string              value           = 3;
  map<string, string> additional_data = 4;
  string              type            = 5;
  ValueType           value_type      = 6;
}

message ProductQuantity {
  string product_id = 1;
  string order_id   = 2;
  int64  quantity   = 3;
}

message AvailableQuantity {
  string product_id = 1;
  int64  available  = 2;
}

//================================= REQUESTS ===================================

message ListProductByIdsReq { repeated string ids = 1; }

message CheckQuantityReq { repeated ProductQuantity product_quantity = 1; }

message GetAvailableQuantityReq { repeated string product_ids = 1; }

message CheckAndLockQuantityReq { repeated ProductQuantity product_quantity = 1; }

message UnlockQuantityReq { repeated ProductQuantity product_quantity = 1; }
message UnlockAndUpdateQuantityReq {
  repeated ProductQuantity      product_quantity = 1;
  UnlockAndUpdateQuantityAction update_action    = 2;
}

//================================= RESPONSES ==================================

message ListProductByIdsRes { repeated ProductInfo infos = 1; }
message GetAvailableQuantityRes { repeated AvailableQuantity available_quantities = 1; }

message GenerateProductByEventSeatReq {
  string event_id           = 1;
  string event_code         = 2;
  int64  booking_start_time = 3;
  string user_id            = 4;
}